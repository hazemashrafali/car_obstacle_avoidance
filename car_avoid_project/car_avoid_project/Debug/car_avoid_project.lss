
car_avoid_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000028c0  00002954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  00800068  00800068  0000295c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000295c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000298c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  000029c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002baa  00000000  00000000  00002c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c00  00000000  00000000  000057d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d15  00000000  00000000  000063d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000848  00000000  00000000  000090e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011cf  00000000  00000000  00009930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004626  00000000  00000000  0000aaff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0000f125  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1b 03 	jmp	0x636	; 0x636 <__vector_1>
       8:	0c 94 44 03 	jmp	0x688	; 0x688 <__vector_2>
       c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__vector_3>
      10:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__vector_4>
      14:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 35 08 	jmp	0x106a	; 0x106a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__vector_9>
      28:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__vector_10>
      2c:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <main>
      8a:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <led_init>:
#include "led.h"

/*============= FUNCTION DEFINITIONS =============*/

enu_led_error_t led_init(uint8 u8_port,uint8 u8_pin)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	c8 2f       	mov	r28, r24
      98:	d6 2f       	mov	r29, r22
	enu_led_error_t enu_led_error = LED_VALID_OPERATION;
	enu_led_error = (enu_led_error_t) DIO_pinMode(u8_port,u8_pin,PIN_OUTPUT);
      9a:	41 e0       	ldi	r20, 0x01	; 1
      9c:	0e 94 0f 02 	call	0x41e	; 0x41e <DIO_pinMode>
	if(enu_led_error == LED_VALID_OPERATION)
      a0:	81 30       	cpi	r24, 0x01	; 1
      a2:	29 f4       	brne	.+10     	; 0xae <led_init+0x1c>
	{
		enu_led_error = DIO_writePin(u8_port,u8_pin,PIN_LOW);
      a4:	40 e0       	ldi	r20, 0x00	; 0
      a6:	6d 2f       	mov	r22, r29
      a8:	8c 2f       	mov	r24, r28
      aa:	0e 94 95 02 	call	0x52a	; 0x52a <DIO_writePin>
	}
	return enu_led_error;
}
      ae:	df 91       	pop	r29
      b0:	cf 91       	pop	r28
      b2:	08 95       	ret

000000b4 <led_write>:

enu_led_error_t led_write(uint8 u8_port,uint8 u8_pin,enu_pin_value_t enu_led_state)
{
	enu_led_error_t enu_led_error = LED_VALID_OPERATION;

	enu_led_error = (enu_led_error_t) DIO_writePin(u8_port,u8_pin,enu_led_state);
      b4:	0e 94 95 02 	call	0x52a	; 0x52a <DIO_writePin>

	return enu_led_error;
}
      b8:	08 95       	ret

000000ba <timeOut_callBack>:
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
	}
	return enu_time_error;
}
      ba:	1f 93       	push	r17
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
      c4:	28 2f       	mov	r18, r24
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	f9 01       	movw	r30, r18
      ca:	e6 59       	subi	r30, 0x96	; 150
      cc:	ff 4f       	sbci	r31, 0xFF	; 255
      ce:	90 81       	ld	r25, Z
      d0:	91 11       	cpse	r25, r1
      d2:	0a c0       	rjmp	.+20     	; 0xe8 <timeOut_callBack+0x2e>
      d4:	0e 94 6d 07 	call	0xeda	; 0xeda <timer_stop>
      d8:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__data_start>
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	e7 58       	subi	r30, 0x87	; 135
      e0:	ff 4f       	sbci	r31, 0xFF	; 255
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	80 83       	st	Z, r24
      e6:	4f c0       	rjmp	.+158    	; 0x186 <timeOut_callBack+0xcc>
      e8:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <__data_end>
      ec:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <__data_end+0x1>
      f0:	4f 5f       	subi	r20, 0xFF	; 255
      f2:	5f 4f       	sbci	r21, 0xFF	; 255
      f4:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <__data_end+0x1>
      f8:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <__data_end>
      fc:	22 0f       	add	r18, r18
      fe:	33 1f       	adc	r19, r19
     100:	f9 01       	movw	r30, r18
     102:	e8 57       	subi	r30, 0x78	; 120
     104:	ff 4f       	sbci	r31, 0xFF	; 255
     106:	20 81       	ld	r18, Z
     108:	31 81       	ldd	r19, Z+1	; 0x01
     10a:	42 17       	cp	r20, r18
     10c:	53 07       	cpc	r21, r19
     10e:	d9 f5       	brne	.+118    	; 0x186 <timeOut_callBack+0xcc>
     110:	0e 94 6d 07 	call	0xeda	; 0xeda <timer_stop>
     114:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
     118:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
     11c:	10 91 60 00 	lds	r17, 0x0060	; 0x800060 <__data_start>
     120:	c1 2f       	mov	r28, r17
     122:	d0 e0       	ldi	r29, 0x00	; 0
     124:	fe 01       	movw	r30, r28
     126:	ee 0f       	add	r30, r30
     128:	ff 1f       	adc	r31, r31
     12a:	ee 0f       	add	r30, r30
     12c:	ff 1f       	adc	r31, r31
     12e:	e4 58       	subi	r30, 0x84	; 132
     130:	ff 4f       	sbci	r31, 0xFF	; 255
     132:	60 81       	ld	r22, Z
     134:	71 81       	ldd	r23, Z+1	; 0x01
     136:	82 81       	ldd	r24, Z+2	; 0x02
     138:	93 81       	ldd	r25, Z+3	; 0x03
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	a9 01       	movw	r20, r18
     140:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__gesf2>
     144:	18 16       	cp	r1, r24
     146:	fc f4       	brge	.+62     	; 0x186 <timeOut_callBack+0xcc>
     148:	cc 0f       	add	r28, r28
     14a:	dd 1f       	adc	r29, r29
     14c:	c3 59       	subi	r28, 0x93	; 147
     14e:	df 4f       	sbci	r29, 0xFF	; 255
     150:	68 81       	ld	r22, Y
     152:	79 81       	ldd	r23, Y+1	; 0x01
     154:	81 2f       	mov	r24, r17
     156:	0e 94 6d 05 	call	0xada	; 0xada <timer_setInitialValue>
     15a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     15e:	e8 2f       	mov	r30, r24
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	ee 0f       	add	r30, r30
     164:	ff 1f       	adc	r31, r31
     166:	ed 58       	subi	r30, 0x8D	; 141
     168:	ff 4f       	sbci	r31, 0xFF	; 255
     16a:	60 81       	ld	r22, Z
     16c:	71 81       	ldd	r23, Z+1	; 0x01
     16e:	0e 94 98 05 	call	0xb30	; 0xb30 <timer_setClock>
     172:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     176:	0e 94 34 06 	call	0xc68	; 0xc68 <timer_start>
     17a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__data_start>
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	e6 59       	subi	r30, 0x96	; 150
     182:	ff 4f       	sbci	r31, 0xFF	; 255
     184:	10 82       	st	Z, r1
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
     18c:	08 95       	ret

0000018e <timeOut_sec>:

enu_time_error_t timeOut_sec(uint8 u8_timer_id,float32 f32_time_delay)
{
     18e:	8f 92       	push	r8
     190:	9f 92       	push	r9
     192:	af 92       	push	r10
     194:	bf 92       	push	r11
     196:	df 92       	push	r13
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
     1a8:	2e 97       	sbiw	r28, 0x0e	; 14
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	f8 94       	cli
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	0f be       	out	0x3f, r0	; 63
     1b2:	cd bf       	out	0x3d, r28	; 61
	enu_time_error_t enu_time_error		= ENU_TIMER_VALID;
	uint16 u16_l_prescale				= ZERO_VALUE;
     1b4:	1a 82       	std	Y+2, r1	; 0x02
     1b6:	19 82       	std	Y+1, r1	; 0x01
	uint16 u16_l_initialValue			= ZERO_VALUE;
     1b8:	1c 82       	std	Y+4, r1	; 0x04
     1ba:	1b 82       	std	Y+3, r1	; 0x03
	BOOLEAN bo_l_return_state			= FALSE ;
	float32 f32_l_overFlows				= ZERO_VALUE;
	gl_bo_timeOut_flag [gl_u8_timer_id] = FALSE;
     1bc:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__data_start>
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	e7 58       	subi	r30, 0x87	; 135
     1c4:	ff 4f       	sbci	r31, 0xFF	; 255
     1c6:	10 82       	st	Z, r1
	str_tmr_config_t str_tmr_config ;
	str_tmr_config.enu_tmr_channel_id		= u8_timer_id;
     1c8:	8d 83       	std	Y+5, r24	; 0x05
	str_tmr_config.enu_tmr_mode				= ENU_TMR_NORMAL_MODE;
     1ca:	1e 82       	std	Y+6, r1	; 0x06
	str_tmr_config.enu_tmr_cmp_mode			= ENU_TMR_CMP_DISCONNECT;
     1cc:	18 86       	std	Y+8, r1	; 0x08
	str_tmr_config.enu_tmr_interrupt_state	= ENU_TMR_INT_ENABLE;
     1ce:	1f 82       	std	Y+7, r1	; 0x07
	str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
     1d0:	1e 86       	std	Y+14, r1	; 0x0e
     1d2:	1d 86       	std	Y+13, r1	; 0x0d
	gl_u8_timer_id							= u8_timer_id;
     1d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	
	if(u8_timer_id < MAX_ENU_TMR_CHANNEL)
     1d8:	83 30       	cpi	r24, 0x03	; 3
     1da:	08 f0       	brcs	.+2      	; 0x1de <timeOut_sec+0x50>
     1dc:	d2 c0       	rjmp	.+420    	; 0x382 <timeOut_sec+0x1f4>
     1de:	4a 01       	movw	r8, r20
     1e0:	5b 01       	movw	r10, r22
     1e2:	d8 2e       	mov	r13, r24
	{
		bo_l_return_state = calc_prescaler(f32_time_delay,u8_timer_id,ENU_SECOND,&u16_l_prescale);
     1e4:	8e 01       	movw	r16, r28
     1e6:	0f 5f       	subi	r16, 0xFF	; 255
     1e8:	1f 4f       	sbci	r17, 0xFF	; 255
     1ea:	22 e0       	ldi	r18, 0x02	; 2
     1ec:	48 2f       	mov	r20, r24
     1ee:	c5 01       	movw	r24, r10
     1f0:	b4 01       	movw	r22, r8
     1f2:	0e 94 87 08 	call	0x110e	; 0x110e <calc_prescaler>
		if(bo_l_return_state == TRUE)
     1f6:	81 30       	cpi	r24, 0x01	; 1
     1f8:	09 f0       	breq	.+2      	; 0x1fc <timeOut_sec+0x6e>
     1fa:	c5 c0       	rjmp	.+394    	; 0x386 <timeOut_sec+0x1f8>
		{
			if (u16_l_prescale != NO_FIT_PRESCALER)
     1fc:	49 81       	ldd	r20, Y+1	; 0x01
     1fe:	5a 81       	ldd	r21, Y+2	; 0x02
     200:	42 30       	cpi	r20, 0x02	; 2
     202:	51 05       	cpc	r21, r1
     204:	b9 f0       	breq	.+46     	; 0x234 <timeOut_sec+0xa6>
			{
				//use timer without overflows
				gl_bo_overFlow_flag[u8_timer_id] = FALSE; 
     206:	ed 2d       	mov	r30, r13
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	e6 59       	subi	r30, 0x96	; 150
     20c:	ff 4f       	sbci	r31, 0xFF	; 255
     20e:	10 82       	st	Z, r1
				//calculate initial value
				calc_initialValue(u8_timer_id,ENU_SECOND,u16_l_prescale,f32_time_delay,&u16_l_initialValue);
     210:	ce 01       	movw	r24, r28
     212:	03 96       	adiw	r24, 0x03	; 3
     214:	7c 01       	movw	r14, r24
     216:	95 01       	movw	r18, r10
     218:	84 01       	movw	r16, r8
     21a:	62 e0       	ldi	r22, 0x02	; 2
     21c:	8d 2d       	mov	r24, r13
     21e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <calc_initialValue>
				str_tmr_config.enu_tmr_clk				= u16_l_prescale;
     222:	89 81       	ldd	r24, Y+1	; 0x01
     224:	9a 81       	ldd	r25, Y+2	; 0x02
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
				str_tmr_config.u16_tmr_initial_value	= u16_l_initialValue;
     22a:	8b 81       	ldd	r24, Y+3	; 0x03
     22c:	9c 81       	ldd	r25, Y+4	; 0x04
     22e:	9c 87       	std	Y+12, r25	; 0x0c
     230:	8b 87       	std	Y+11, r24	; 0x0b
     232:	98 c0       	rjmp	.+304    	; 0x364 <timeOut_sec+0x1d6>
			}
			else
			{
				gl_bo_overFlow_flag[u8_timer_id]	= TRUE; 
     234:	0d 2d       	mov	r16, r13
     236:	10 e0       	ldi	r17, 0x00	; 0
     238:	f8 01       	movw	r30, r16
     23a:	e6 59       	subi	r30, 0x96	; 150
     23c:	ff 4f       	sbci	r31, 0xFF	; 255
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 83       	st	Z, r24
				str_tmr_config.enu_tmr_clk			= P_1024;
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	94 e0       	ldi	r25, 0x04	; 4
     246:	9a 87       	std	Y+10, r25	; 0x0a
     248:	89 87       	std	Y+9, r24	; 0x09
				str_tmr_config.u16_tmr_initial_value= ZERO_VALUE;
     24a:	1c 86       	std	Y+12, r1	; 0x0c
     24c:	1b 86       	std	Y+11, r1	; 0x0b
				//calculate number of overflows
				if(u8_timer_id == ENU_TMR_CHANNEL_0 || u8_timer_id == ENU_TMR_CHANNEL_2)
     24e:	dd 20       	and	r13, r13
     250:	19 f0       	breq	.+6      	; 0x258 <timeOut_sec+0xca>
     252:	92 e0       	ldi	r25, 0x02	; 2
     254:	d9 12       	cpse	r13, r25
     256:	2f c0       	rjmp	.+94     	; 0x2b6 <timeOut_sec+0x128>
				{
					f32_l_overFlows = f32_time_delay / MAX_8_BIT_DELAY_SEC(P_1024);
     258:	2d eb       	ldi	r18, 0xBD	; 189
     25a:	37 e3       	ldi	r19, 0x37	; 55
     25c:	46 e0       	ldi	r20, 0x06	; 6
     25e:	5d e3       	ldi	r21, 0x3D	; 61
     260:	c5 01       	movw	r24, r10
     262:	b4 01       	movw	r22, r8
     264:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
     268:	4b 01       	movw	r8, r22
     26a:	5c 01       	movw	r10, r24
					gl_u16_realPart[u8_timer_id] = (uint16)f32_l_overFlows;
     26c:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
     270:	f8 01       	movw	r30, r16
     272:	ee 0f       	add	r30, r30
     274:	ff 1f       	adc	r31, r31
     276:	e8 57       	subi	r30, 0x78	; 120
     278:	ff 4f       	sbci	r31, 0xFF	; 255
     27a:	71 83       	std	Z+1, r23	; 0x01
     27c:	60 83       	st	Z, r22
					gl_f32_reminderPart[u8_timer_id] = ((f32_l_overFlows - gl_u16_realPart[u8_timer_id]) * MAX_8_BIT_DELAY_SEC(P_1024));
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 3a 13 	call	0x2674	; 0x2674 <__floatunsisf>
     286:	9b 01       	movw	r18, r22
     288:	ac 01       	movw	r20, r24
     28a:	c5 01       	movw	r24, r10
     28c:	b4 01       	movw	r22, r8
     28e:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
     292:	2d eb       	ldi	r18, 0xBD	; 189
     294:	37 e3       	ldi	r19, 0x37	; 55
     296:	46 e0       	ldi	r20, 0x06	; 6
     298:	5d e3       	ldi	r21, 0x3D	; 61
     29a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
     29e:	f8 01       	movw	r30, r16
     2a0:	ee 0f       	add	r30, r30
     2a2:	ff 1f       	adc	r31, r31
     2a4:	ee 0f       	add	r30, r30
     2a6:	ff 1f       	adc	r31, r31
     2a8:	e4 58       	subi	r30, 0x84	; 132
     2aa:	ff 4f       	sbci	r31, 0xFF	; 255
     2ac:	60 83       	st	Z, r22
     2ae:	71 83       	std	Z+1, r23	; 0x01
     2b0:	82 83       	std	Z+2, r24	; 0x02
     2b2:	93 83       	std	Z+3, r25	; 0x03
     2b4:	2e c0       	rjmp	.+92     	; 0x312 <timeOut_sec+0x184>
				}
				else
				{
					f32_l_overFlows = f32_time_delay / MAX_16_BIT_DELAY_SEC(P_1024);
     2b6:	2d eb       	ldi	r18, 0xBD	; 189
     2b8:	37 e3       	ldi	r19, 0x37	; 55
     2ba:	46 e0       	ldi	r20, 0x06	; 6
     2bc:	51 e4       	ldi	r21, 0x41	; 65
     2be:	c5 01       	movw	r24, r10
     2c0:	b4 01       	movw	r22, r8
     2c2:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
     2c6:	4b 01       	movw	r8, r22
     2c8:	5c 01       	movw	r10, r24
					gl_u16_realPart[u8_timer_id] = (uint16)f32_l_overFlows;
     2ca:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
     2ce:	f8 01       	movw	r30, r16
     2d0:	ee 0f       	add	r30, r30
     2d2:	ff 1f       	adc	r31, r31
     2d4:	e8 57       	subi	r30, 0x78	; 120
     2d6:	ff 4f       	sbci	r31, 0xFF	; 255
     2d8:	71 83       	std	Z+1, r23	; 0x01
     2da:	60 83       	st	Z, r22
					gl_f32_reminderPart[u8_timer_id] =((f32_l_overFlows - gl_u16_realPart[u8_timer_id]) * MAX_16_BIT_DELAY_SEC(P_1024));
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 3a 13 	call	0x2674	; 0x2674 <__floatunsisf>
     2e4:	9b 01       	movw	r18, r22
     2e6:	ac 01       	movw	r20, r24
     2e8:	c5 01       	movw	r24, r10
     2ea:	b4 01       	movw	r22, r8
     2ec:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
     2f0:	2d eb       	ldi	r18, 0xBD	; 189
     2f2:	37 e3       	ldi	r19, 0x37	; 55
     2f4:	46 e0       	ldi	r20, 0x06	; 6
     2f6:	51 e4       	ldi	r21, 0x41	; 65
     2f8:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
     2fc:	f8 01       	movw	r30, r16
     2fe:	ee 0f       	add	r30, r30
     300:	ff 1f       	adc	r31, r31
     302:	ee 0f       	add	r30, r30
     304:	ff 1f       	adc	r31, r31
     306:	e4 58       	subi	r30, 0x84	; 132
     308:	ff 4f       	sbci	r31, 0xFF	; 255
     30a:	60 83       	st	Z, r22
     30c:	71 83       	std	Z+1, r23	; 0x01
     30e:	82 83       	std	Z+2, r24	; 0x02
     310:	93 83       	std	Z+3, r25	; 0x03
				}
				calc_prescaler(gl_f32_reminderPart[u8_timer_id],u8_timer_id,ENU_SECOND,&gl_u16_prescale[u8_timer_id]);
     312:	78 01       	movw	r14, r16
     314:	ee 0c       	add	r14, r14
     316:	ff 1c       	adc	r15, r15
     318:	f7 01       	movw	r30, r14
     31a:	ed 58       	subi	r30, 0x8D	; 141
     31c:	ff 4f       	sbci	r31, 0xFF	; 255
     31e:	4f 01       	movw	r8, r30
     320:	00 0f       	add	r16, r16
     322:	11 1f       	adc	r17, r17
     324:	00 0f       	add	r16, r16
     326:	11 1f       	adc	r17, r17
     328:	c8 01       	movw	r24, r16
     32a:	84 58       	subi	r24, 0x84	; 132
     32c:	9f 4f       	sbci	r25, 0xFF	; 255
     32e:	5c 01       	movw	r10, r24
     330:	fc 01       	movw	r30, r24
     332:	60 81       	ld	r22, Z
     334:	71 81       	ldd	r23, Z+1	; 0x01
     336:	82 81       	ldd	r24, Z+2	; 0x02
     338:	93 81       	ldd	r25, Z+3	; 0x03
     33a:	84 01       	movw	r16, r8
     33c:	22 e0       	ldi	r18, 0x02	; 2
     33e:	4d 2d       	mov	r20, r13
     340:	0e 94 87 08 	call	0x110e	; 0x110e <calc_prescaler>
				calc_initialValue(u8_timer_id,ENU_SECOND,gl_u16_prescale[u8_timer_id],gl_f32_reminderPart[u8_timer_id],&gl_u16_initialValue[u8_timer_id]);
     344:	c7 01       	movw	r24, r14
     346:	83 59       	subi	r24, 0x93	; 147
     348:	9f 4f       	sbci	r25, 0xFF	; 255
     34a:	7c 01       	movw	r14, r24
     34c:	f5 01       	movw	r30, r10
     34e:	00 81       	ld	r16, Z
     350:	11 81       	ldd	r17, Z+1	; 0x01
     352:	22 81       	ldd	r18, Z+2	; 0x02
     354:	33 81       	ldd	r19, Z+3	; 0x03
     356:	f4 01       	movw	r30, r8
     358:	40 81       	ld	r20, Z
     35a:	51 81       	ldd	r21, Z+1	; 0x01
     35c:	62 e0       	ldi	r22, 0x02	; 2
     35e:	8d 2d       	mov	r24, r13
     360:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <calc_initialValue>
			}
			timer_init(&str_tmr_config);
     364:	ce 01       	movw	r24, r28
     366:	05 96       	adiw	r24, 0x05	; 5
     368:	0e 94 9a 03 	call	0x734	; 0x734 <timer_init>
			timer_setCallBack(u8_timer_id,timeOut_callBack,ENU_TMR_NORMAL_MODE);
     36c:	40 e0       	ldi	r20, 0x00	; 0
     36e:	6d e5       	ldi	r22, 0x5D	; 93
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	8d 2d       	mov	r24, r13
     374:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <timer_setCallBack>
			timer_start(u8_timer_id);
     378:	8d 2d       	mov	r24, r13
     37a:	0e 94 34 06 	call	0xc68	; 0xc68 <timer_start>
	return enu_time_error;
}

enu_time_error_t timeOut_sec(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error		= ENU_TIMER_VALID;
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	03 c0       	rjmp	.+6      	; 0x388 <timeOut_sec+0x1fa>
			timer_start(u8_timer_id);
		}
	}
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	01 c0       	rjmp	.+2      	; 0x388 <timeOut_sec+0x1fa>
	return enu_time_error;
}

enu_time_error_t timeOut_sec(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error		= ENU_TIMER_VALID;
     386:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
	}
	return enu_time_error;
}
     388:	2e 96       	adiw	r28, 0x0e	; 14
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	f8 94       	cli
     38e:	de bf       	out	0x3e, r29	; 62
     390:	0f be       	out	0x3f, r0	; 63
     392:	cd bf       	out	0x3d, r28	; 61
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	bf 90       	pop	r11
     3a4:	af 90       	pop	r10
     3a6:	9f 90       	pop	r9
     3a8:	8f 90       	pop	r8
     3aa:	08 95       	ret

000003ac <timer_check_time_out_flag>:


enu_time_error_t timer_check_time_out_flag (uint8 u8_timer_id,uint8* ptr_u8_flag)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
	if(u8_timer_id < MAX_ENU_TMR_CHANNEL)
     3ac:	83 30       	cpi	r24, 0x03	; 3
     3ae:	68 f4       	brcc	.+26     	; 0x3ca <timer_check_time_out_flag+0x1e>
	{
		if(ptr_u8_flag != NULL_PTR)
     3b0:	61 15       	cp	r22, r1
     3b2:	71 05       	cpc	r23, r1
     3b4:	61 f0       	breq	.+24     	; 0x3ce <timer_check_time_out_flag+0x22>
		{		
			*ptr_u8_flag = gl_bo_timeOut_flag[u8_timer_id];
     3b6:	e8 2f       	mov	r30, r24
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	e7 58       	subi	r30, 0x87	; 135
     3bc:	ff 4f       	sbci	r31, 0xFF	; 255
     3be:	80 81       	ld	r24, Z
     3c0:	db 01       	movw	r26, r22
     3c2:	8c 93       	st	X, r24
			gl_bo_timeOut_flag[u8_timer_id] = FALSE;	
     3c4:	10 82       	st	Z, r1
}


enu_time_error_t timer_check_time_out_flag (uint8 u8_timer_id,uint8* ptr_u8_flag)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
     3c6:	83 e0       	ldi	r24, 0x03	; 3
     3c8:	08 95       	ret
			enu_time_error = ENU_TIMER_INVALID_INPUT;
		}	
	}
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	08 95       	ret
			*ptr_u8_flag = gl_bo_timeOut_flag[u8_timer_id];
			gl_bo_timeOut_flag[u8_timer_id] = FALSE;	
		}
		else
		{
			enu_time_error = ENU_TIMER_INVALID_INPUT;
     3ce:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
	}
	return enu_time_error;
}
     3d0:	08 95       	ret

000003d2 <main>:
#include "MCAL/GLOBAL_INT/global_int.h"
#include "HAL/LED/led.h"
#include "HAL/BUTTON/button.h"
	
int main(void)
{
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	1f 92       	push	r1
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
	uint8 flag = 0,count_flag=0;
     3dc:	19 82       	std	Y+1, r1	; 0x01
	led_init(PORTD_ID,PIN7_ID);
     3de:	67 e0       	ldi	r22, 0x07	; 7
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	0e 94 49 00 	call	0x92	; 0x92 <led_init>
	led_init(PORTD_ID,PIN6_ID);
     3e6:	66 e0       	ldi	r22, 0x06	; 6
     3e8:	83 e0       	ldi	r24, 0x03	; 3
     3ea:	0e 94 49 00 	call	0x92	; 0x92 <led_init>
	timeOut_sec(2,2.5);
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	60 e2       	ldi	r22, 0x20	; 32
     3f4:	70 e4       	ldi	r23, 0x40	; 64
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	0e 94 c7 00 	call	0x18e	; 0x18e <timeOut_sec>
	enable_global_interrupt();
     3fc:	0e 94 96 03 	call	0x72c	; 0x72c <enable_global_interrupt>
    /* Replace with your application code */
    while (1) 
    {
		timer_check_time_out_flag(2,&flag);
     400:	be 01       	movw	r22, r28
     402:	6f 5f       	subi	r22, 0xFF	; 255
     404:	7f 4f       	sbci	r23, 0xFF	; 255
     406:	82 e0       	ldi	r24, 0x02	; 2
     408:	0e 94 d6 01 	call	0x3ac	; 0x3ac <timer_check_time_out_flag>
		if(flag == 1)
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	b9 f7       	brne	.-18     	; 0x400 <__EEPROM_REGION_LENGTH__>
		{
			led_write(PORTD_ID,PIN7_ID,PIN_HIGH);
     412:	41 e0       	ldi	r20, 0x01	; 1
     414:	67 e0       	ldi	r22, 0x07	; 7
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	0e 94 5a 00 	call	0xb4	; 0xb4 <led_write>
     41c:	f1 cf       	rjmp	.-30     	; 0x400 <__EEPROM_REGION_LENGTH__>

0000041e <DIO_pinMode>:
/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
     41e:	84 30       	cpi	r24, 0x04	; 4
     420:	08 f0       	brcs	.+2      	; 0x424 <DIO_pinMode+0x6>
     422:	7b c0       	rjmp	.+246    	; 0x51a <DIO_pinMode+0xfc>
	{
		if((pin >= PIN0_ID) && (pin < MAX_PIN_ID))
     424:	68 30       	cpi	r22, 0x08	; 8
     426:	08 f0       	brcs	.+2      	; 0x42a <DIO_pinMode+0xc>
     428:	7a c0       	rjmp	.+244    	; 0x51e <DIO_pinMode+0x100>
		{
			if((enu_pin_direction == PIN_INPUT) || (enu_pin_direction == PIN_OUTPUT))
     42a:	42 30       	cpi	r20, 0x02	; 2
     42c:	08 f0       	brcs	.+2      	; 0x430 <DIO_pinMode+0x12>
     42e:	79 c0       	rjmp	.+242    	; 0x522 <DIO_pinMode+0x104>
			{
				switch(port)
     430:	81 30       	cpi	r24, 0x01	; 1
     432:	11 f1       	breq	.+68     	; 0x478 <DIO_pinMode+0x5a>
     434:	30 f0       	brcs	.+12     	; 0x442 <DIO_pinMode+0x24>
     436:	82 30       	cpi	r24, 0x02	; 2
     438:	d1 f1       	breq	.+116    	; 0x4ae <DIO_pinMode+0x90>
     43a:	83 30       	cpi	r24, 0x03	; 3
     43c:	09 f4       	brne	.+2      	; 0x440 <DIO_pinMode+0x22>
     43e:	52 c0       	rjmp	.+164    	; 0x4e4 <DIO_pinMode+0xc6>
     440:	72 c0       	rjmp	.+228    	; 0x526 <DIO_pinMode+0x108>
				{
					case PORTA_ID:
					if(enu_pin_direction == PIN_OUTPUT)
     442:	41 30       	cpi	r20, 0x01	; 1
     444:	61 f4       	brne	.+24     	; 0x45e <DIO_pinMode+0x40>
					{
						SET_BIT(DDRA,pin);
     446:	2a b3       	in	r18, 0x1a	; 26
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	02 c0       	rjmp	.+4      	; 0x452 <DIO_pinMode+0x34>
     44e:	88 0f       	add	r24, r24
     450:	99 1f       	adc	r25, r25
     452:	6a 95       	dec	r22
     454:	e2 f7       	brpl	.-8      	; 0x44e <DIO_pinMode+0x30>
     456:	82 2b       	or	r24, r18
     458:	8a bb       	out	0x1a, r24	; 26

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	08 95       	ret
					{
						SET_BIT(DDRA,pin);
					}
					else
					{
						CLEAR_BIT(DDRA,pin);
     45e:	2a b3       	in	r18, 0x1a	; 26
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_pinMode+0x4c>
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	6a 95       	dec	r22
     46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_pinMode+0x48>
     46e:	80 95       	com	r24
     470:	82 23       	and	r24, r18
     472:	8a bb       	out	0x1a, r24	; 26

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	08 95       	ret
					{
						CLEAR_BIT(DDRA,pin);
					}
					break;
					case PORTB_ID:
					if(enu_pin_direction == PIN_OUTPUT)
     478:	41 30       	cpi	r20, 0x01	; 1
     47a:	61 f4       	brne	.+24     	; 0x494 <DIO_pinMode+0x76>
					{
						SET_BIT(DDRB,pin);
     47c:	27 b3       	in	r18, 0x17	; 23
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_pinMode+0x6a>
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	6a 95       	dec	r22
     48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_pinMode+0x66>
     48c:	82 2b       	or	r24, r18
     48e:	87 bb       	out	0x17, r24	; 23

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	08 95       	ret
					{
						SET_BIT(DDRB,pin);
					}
					else
					{
						CLEAR_BIT(DDRB,pin);
     494:	27 b3       	in	r18, 0x17	; 23
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_pinMode+0x82>
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	6a 95       	dec	r22
     4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_pinMode+0x7e>
     4a4:	80 95       	com	r24
     4a6:	82 23       	and	r24, r18
     4a8:	87 bb       	out	0x17, r24	; 23

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	08 95       	ret
					{
						CLEAR_BIT(DDRB,pin);
					}
					break;
					case PORTC_ID:
					if(enu_pin_direction == PIN_OUTPUT)
     4ae:	41 30       	cpi	r20, 0x01	; 1
     4b0:	61 f4       	brne	.+24     	; 0x4ca <DIO_pinMode+0xac>
					{
						SET_BIT(DDRC,pin);
     4b2:	24 b3       	in	r18, 0x14	; 20
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_pinMode+0xa0>
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	6a 95       	dec	r22
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_pinMode+0x9c>
     4c2:	82 2b       	or	r24, r18
     4c4:	84 bb       	out	0x14, r24	; 20

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	08 95       	ret
					{
						SET_BIT(DDRC,pin);
					}
					else
					{
						CLEAR_BIT(DDRC,pin);
     4ca:	24 b3       	in	r18, 0x14	; 20
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_pinMode+0xb8>
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	6a 95       	dec	r22
     4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_pinMode+0xb4>
     4da:	80 95       	com	r24
     4dc:	82 23       	and	r24, r18
     4de:	84 bb       	out	0x14, r24	; 20

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	08 95       	ret
					{
						CLEAR_BIT(DDRC,pin);
					}
					break;
					case PORTD_ID:
					if(enu_pin_direction == PIN_OUTPUT)
     4e4:	41 30       	cpi	r20, 0x01	; 1
     4e6:	61 f4       	brne	.+24     	; 0x500 <DIO_pinMode+0xe2>
					{
						SET_BIT(DDRD,pin);
     4e8:	21 b3       	in	r18, 0x11	; 17
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_pinMode+0xd6>
     4f0:	88 0f       	add	r24, r24
     4f2:	99 1f       	adc	r25, r25
     4f4:	6a 95       	dec	r22
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_pinMode+0xd2>
     4f8:	82 2b       	or	r24, r18
     4fa:	81 bb       	out	0x11, r24	; 17

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	08 95       	ret
					{
						SET_BIT(DDRD,pin);
					}
					else
					{
						CLEAR_BIT(DDRD,pin);
     500:	21 b3       	in	r18, 0x11	; 17
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_pinMode+0xee>
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	6a 95       	dec	r22
     50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_pinMode+0xea>
     510:	80 95       	com	r24
     512:	82 23       	and	r24, r18
     514:	81 bb       	out	0x11, r24	; 17

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	08 95       	ret
			enu_dio_error = DIO_INVALID_PIN_ID;
		}
	}
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
     51a:	82 e0       	ldi	r24, 0x02	; 2
     51c:	08 95       	ret
				enu_dio_error = DIO_INVALID_DIRECTION;
			}
		}
		else
		{
			enu_dio_error = DIO_INVALID_PIN_ID;
     51e:	83 e0       	ldi	r24, 0x03	; 3
     520:	08 95       	ret
					break;
				}
			}
			else
			{
				enu_dio_error = DIO_INVALID_DIRECTION;
     522:	84 e0       	ldi	r24, 0x04	; 4
     524:	08 95       	ret

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     526:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
     528:	08 95       	ret

0000052a <DIO_writePin>:
/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
     52a:	84 30       	cpi	r24, 0x04	; 4
     52c:	08 f0       	brcs	.+2      	; 0x530 <DIO_writePin+0x6>
     52e:	7b c0       	rjmp	.+246    	; 0x626 <DIO_writePin+0xfc>
	{
		if((pin >= PIN0_ID) && (pin < MAX_PIN_ID))
     530:	68 30       	cpi	r22, 0x08	; 8
     532:	08 f0       	brcs	.+2      	; 0x536 <DIO_writePin+0xc>
     534:	7a c0       	rjmp	.+244    	; 0x62a <DIO_writePin+0x100>
		{
			if((enu_pin_value == PIN_LOW) || (enu_pin_value == PIN_HIGH))
     536:	42 30       	cpi	r20, 0x02	; 2
     538:	08 f0       	brcs	.+2      	; 0x53c <DIO_writePin+0x12>
     53a:	79 c0       	rjmp	.+242    	; 0x62e <DIO_writePin+0x104>
			{
				switch(port)
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	11 f1       	breq	.+68     	; 0x584 <DIO_writePin+0x5a>
     540:	30 f0       	brcs	.+12     	; 0x54e <DIO_writePin+0x24>
     542:	82 30       	cpi	r24, 0x02	; 2
     544:	d1 f1       	breq	.+116    	; 0x5ba <DIO_writePin+0x90>
     546:	83 30       	cpi	r24, 0x03	; 3
     548:	09 f4       	brne	.+2      	; 0x54c <DIO_writePin+0x22>
     54a:	52 c0       	rjmp	.+164    	; 0x5f0 <DIO_writePin+0xc6>
     54c:	72 c0       	rjmp	.+228    	; 0x632 <DIO_writePin+0x108>
				{
					case PORTA_ID:
					if(enu_pin_value == LOGIC_HIGH)
     54e:	41 30       	cpi	r20, 0x01	; 1
     550:	61 f4       	brne	.+24     	; 0x56a <DIO_writePin+0x40>
					{
						SET_BIT(PORTA,pin);
     552:	2b b3       	in	r18, 0x1b	; 27
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_writePin+0x34>
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	6a 95       	dec	r22
     560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_writePin+0x30>
     562:	82 2b       	or	r24, r18
     564:	8b bb       	out	0x1b, r24	; 27

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	08 95       	ret
					{
						SET_BIT(PORTA,pin);
					}
					else
					{
						CLEAR_BIT(PORTA,pin);
     56a:	2b b3       	in	r18, 0x1b	; 27
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_writePin+0x4c>
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	6a 95       	dec	r22
     578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_writePin+0x48>
     57a:	80 95       	com	r24
     57c:	82 23       	and	r24, r18
     57e:	8b bb       	out	0x1b, r24	; 27

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	08 95       	ret
					{
						CLEAR_BIT(PORTA,pin);
					}
					break;
					case PORTB_ID:
					if(enu_pin_value == LOGIC_HIGH)
     584:	41 30       	cpi	r20, 0x01	; 1
     586:	61 f4       	brne	.+24     	; 0x5a0 <DIO_writePin+0x76>
					{
						SET_BIT(PORTB,pin);
     588:	28 b3       	in	r18, 0x18	; 24
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_writePin+0x6a>
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	6a 95       	dec	r22
     596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_writePin+0x66>
     598:	82 2b       	or	r24, r18
     59a:	88 bb       	out	0x18, r24	; 24

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	08 95       	ret
					{
						SET_BIT(PORTB,pin);
					}
					else
					{
						CLEAR_BIT(PORTB,pin);
     5a0:	28 b3       	in	r18, 0x18	; 24
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_writePin+0x82>
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	6a 95       	dec	r22
     5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_writePin+0x7e>
     5b0:	80 95       	com	r24
     5b2:	82 23       	and	r24, r18
     5b4:	88 bb       	out	0x18, r24	; 24

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	08 95       	ret
					{
						CLEAR_BIT(PORTB,pin);
					}
					break;
					case PORTC_ID:
					if(enu_pin_value == LOGIC_HIGH)
     5ba:	41 30       	cpi	r20, 0x01	; 1
     5bc:	61 f4       	brne	.+24     	; 0x5d6 <DIO_writePin+0xac>
					{
						SET_BIT(PORTC,pin);
     5be:	25 b3       	in	r18, 0x15	; 21
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_writePin+0xa0>
     5c6:	88 0f       	add	r24, r24
     5c8:	99 1f       	adc	r25, r25
     5ca:	6a 95       	dec	r22
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_writePin+0x9c>
     5ce:	82 2b       	or	r24, r18
     5d0:	85 bb       	out	0x15, r24	; 21

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	08 95       	ret
					{
						SET_BIT(PORTC,pin);
					}
					else
					{
						CLEAR_BIT(PORTC,pin);
     5d6:	25 b3       	in	r18, 0x15	; 21
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_writePin+0xb8>
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	6a 95       	dec	r22
     5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_writePin+0xb4>
     5e6:	80 95       	com	r24
     5e8:	82 23       	and	r24, r18
     5ea:	85 bb       	out	0x15, r24	; 21

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	08 95       	ret
					{
						CLEAR_BIT(PORTC,pin);
					}
					break;
					case PORTD_ID:
					if(enu_pin_value == LOGIC_HIGH)
     5f0:	41 30       	cpi	r20, 0x01	; 1
     5f2:	61 f4       	brne	.+24     	; 0x60c <DIO_writePin+0xe2>
					{
						SET_BIT(PORTD,pin);
     5f4:	22 b3       	in	r18, 0x12	; 18
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_writePin+0xd6>
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	6a 95       	dec	r22
     602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_writePin+0xd2>
     604:	82 2b       	or	r24, r18
     606:	82 bb       	out	0x12, r24	; 18

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	08 95       	ret
					{
						SET_BIT(PORTD,pin);
					}
					else
					{
						CLEAR_BIT(PORTD,pin);
     60c:	22 b3       	in	r18, 0x12	; 18
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_writePin+0xee>
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	6a 95       	dec	r22
     61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_writePin+0xea>
     61c:	80 95       	com	r24
     61e:	82 23       	and	r24, r18
     620:	82 bb       	out	0x12, r24	; 18

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	08 95       	ret
			enu_dio_error = DIO_INVALID_PIN_ID;
		}
	}
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	08 95       	ret
				enu_dio_error = DIO_INVALID_OPERATION;
			}
		}
		else
		{
			enu_dio_error = DIO_INVALID_PIN_ID;
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	08 95       	ret
					break;
				}
			}
			else
			{
				enu_dio_error = DIO_INVALID_OPERATION;
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	08 95       	ret

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     632:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
     634:	08 95       	ret

00000636 <__vector_1>:
	}
	return enu_interrupt_error ;
}

ISR_HANDLER(EXT_INT0)
{
     636:	1f 92       	push	r1
     638:	0f 92       	push	r0
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	0f 92       	push	r0
     63e:	11 24       	eor	r1, r1
     640:	2f 93       	push	r18
     642:	3f 93       	push	r19
     644:	4f 93       	push	r20
     646:	5f 93       	push	r21
     648:	6f 93       	push	r22
     64a:	7f 93       	push	r23
     64c:	8f 93       	push	r24
     64e:	9f 93       	push	r25
     650:	af 93       	push	r26
     652:	bf 93       	push	r27
     654:	ef 93       	push	r30
     656:	ff 93       	push	r31
	if(gl_callbackptr_0 != NULL_PTR)
     658:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <gl_callbackptr_0>
     65c:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <gl_callbackptr_0+0x1>
     660:	30 97       	sbiw	r30, 0x00	; 0
     662:	09 f0       	breq	.+2      	; 0x666 <__vector_1+0x30>
	{
		gl_callbackptr_0();
     664:	09 95       	icall
	}
}
     666:	ff 91       	pop	r31
     668:	ef 91       	pop	r30
     66a:	bf 91       	pop	r27
     66c:	af 91       	pop	r26
     66e:	9f 91       	pop	r25
     670:	8f 91       	pop	r24
     672:	7f 91       	pop	r23
     674:	6f 91       	pop	r22
     676:	5f 91       	pop	r21
     678:	4f 91       	pop	r20
     67a:	3f 91       	pop	r19
     67c:	2f 91       	pop	r18
     67e:	0f 90       	pop	r0
     680:	0f be       	out	0x3f, r0	; 63
     682:	0f 90       	pop	r0
     684:	1f 90       	pop	r1
     686:	18 95       	reti

00000688 <__vector_2>:

ISR_HANDLER(EXT_INT1)
{
     688:	1f 92       	push	r1
     68a:	0f 92       	push	r0
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	0f 92       	push	r0
     690:	11 24       	eor	r1, r1
     692:	2f 93       	push	r18
     694:	3f 93       	push	r19
     696:	4f 93       	push	r20
     698:	5f 93       	push	r21
     69a:	6f 93       	push	r22
     69c:	7f 93       	push	r23
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	af 93       	push	r26
     6a4:	bf 93       	push	r27
     6a6:	ef 93       	push	r30
     6a8:	ff 93       	push	r31
	if(gl_callbackptr_1 != NULL_PTR)
     6aa:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <gl_callbackptr_1>
     6ae:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <gl_callbackptr_1+0x1>
     6b2:	30 97       	sbiw	r30, 0x00	; 0
     6b4:	09 f0       	breq	.+2      	; 0x6b8 <__vector_2+0x30>
	{
		gl_callbackptr_1();
     6b6:	09 95       	icall
	}
}
     6b8:	ff 91       	pop	r31
     6ba:	ef 91       	pop	r30
     6bc:	bf 91       	pop	r27
     6be:	af 91       	pop	r26
     6c0:	9f 91       	pop	r25
     6c2:	8f 91       	pop	r24
     6c4:	7f 91       	pop	r23
     6c6:	6f 91       	pop	r22
     6c8:	5f 91       	pop	r21
     6ca:	4f 91       	pop	r20
     6cc:	3f 91       	pop	r19
     6ce:	2f 91       	pop	r18
     6d0:	0f 90       	pop	r0
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	0f 90       	pop	r0
     6d6:	1f 90       	pop	r1
     6d8:	18 95       	reti

000006da <__vector_3>:

ISR_HANDLER(EXT_INT2)
{
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	2f 93       	push	r18
     6e6:	3f 93       	push	r19
     6e8:	4f 93       	push	r20
     6ea:	5f 93       	push	r21
     6ec:	6f 93       	push	r22
     6ee:	7f 93       	push	r23
     6f0:	8f 93       	push	r24
     6f2:	9f 93       	push	r25
     6f4:	af 93       	push	r26
     6f6:	bf 93       	push	r27
     6f8:	ef 93       	push	r30
     6fa:	ff 93       	push	r31
	if(gl_callbackptr_2 != NULL_PTR)
     6fc:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <gl_callbackptr_2>
     700:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <gl_callbackptr_2+0x1>
     704:	30 97       	sbiw	r30, 0x00	; 0
     706:	09 f0       	breq	.+2      	; 0x70a <__vector_3+0x30>
	{
		gl_callbackptr_2();
     708:	09 95       	icall
	}
}
     70a:	ff 91       	pop	r31
     70c:	ef 91       	pop	r30
     70e:	bf 91       	pop	r27
     710:	af 91       	pop	r26
     712:	9f 91       	pop	r25
     714:	8f 91       	pop	r24
     716:	7f 91       	pop	r23
     718:	6f 91       	pop	r22
     71a:	5f 91       	pop	r21
     71c:	4f 91       	pop	r20
     71e:	3f 91       	pop	r19
     720:	2f 91       	pop	r18
     722:	0f 90       	pop	r0
     724:	0f be       	out	0x3f, r0	; 63
     726:	0f 90       	pop	r0
     728:	1f 90       	pop	r1
     72a:	18 95       	reti

0000072c <enable_global_interrupt>:


/*================ APIS ================*/
void enable_global_interrupt (void)
{
	SET_BIT(SREG,PIN7);
     72c:	8f b7       	in	r24, 0x3f	; 63
     72e:	80 68       	ori	r24, 0x80	; 128
     730:	8f bf       	out	0x3f, r24	; 63
     732:	08 95       	ret

00000734 <timer_init>:
	else
	{
		enu_tmr_error = ENU_TMR_INVALID_ID;
	}
	return enu_tmr_error;
}
     734:	fc 01       	movw	r30, r24
     736:	89 2b       	or	r24, r25
     738:	09 f4       	brne	.+2      	; 0x73c <timer_init+0x8>
     73a:	a9 c1       	rjmp	.+850    	; 0xa8e <__stack+0x22f>
     73c:	80 81       	ld	r24, Z
     73e:	83 30       	cpi	r24, 0x03	; 3
     740:	08 f0       	brcs	.+2      	; 0x744 <timer_init+0x10>
     742:	a7 c1       	rjmp	.+846    	; 0xa92 <__stack+0x233>
     744:	91 81       	ldd	r25, Z+1	; 0x01
     746:	92 30       	cpi	r25, 0x02	; 2
     748:	08 f0       	brcs	.+2      	; 0x74c <timer_init+0x18>
     74a:	a5 c1       	rjmp	.+842    	; 0xa96 <__stack+0x237>
     74c:	92 81       	ldd	r25, Z+2	; 0x02
     74e:	92 30       	cpi	r25, 0x02	; 2
     750:	08 f0       	brcs	.+2      	; 0x754 <timer_init+0x20>
     752:	a3 c1       	rjmp	.+838    	; 0xa9a <__stack+0x23b>
     754:	93 81       	ldd	r25, Z+3	; 0x03
     756:	94 30       	cpi	r25, 0x04	; 4
     758:	08 f0       	brcs	.+2      	; 0x75c <timer_init+0x28>
     75a:	a1 c1       	rjmp	.+834    	; 0xa9e <__stack+0x23f>
     75c:	24 81       	ldd	r18, Z+4	; 0x04
     75e:	35 81       	ldd	r19, Z+5	; 0x05
     760:	20 3d       	cpi	r18, 0xD0	; 208
     762:	37 40       	sbci	r19, 0x07	; 7
     764:	08 f0       	brcs	.+2      	; 0x768 <timer_init+0x34>
     766:	9d c1       	rjmp	.+826    	; 0xaa2 <__stack+0x243>
     768:	81 11       	cpse	r24, r1
     76a:	83 c0       	rjmp	.+262    	; 0x872 <__stack+0x13>
     76c:	83 b7       	in	r24, 0x33	; 51
     76e:	80 68       	ori	r24, 0x80	; 128
     770:	83 bf       	out	0x33, r24	; 51
     772:	81 81       	ldd	r24, Z+1	; 0x01
     774:	88 23       	and	r24, r24
     776:	19 f0       	breq	.+6      	; 0x77e <timer_init+0x4a>
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	41 f0       	breq	.+16     	; 0x78c <timer_init+0x58>
     77c:	0d c0       	rjmp	.+26     	; 0x798 <timer_init+0x64>
     77e:	83 b7       	in	r24, 0x33	; 51
     780:	8f 7b       	andi	r24, 0xBF	; 191
     782:	83 bf       	out	0x33, r24	; 51
     784:	83 b7       	in	r24, 0x33	; 51
     786:	87 7f       	andi	r24, 0xF7	; 247
     788:	83 bf       	out	0x33, r24	; 51
     78a:	06 c0       	rjmp	.+12     	; 0x798 <timer_init+0x64>
     78c:	83 b7       	in	r24, 0x33	; 51
     78e:	8f 7b       	andi	r24, 0xBF	; 191
     790:	83 bf       	out	0x33, r24	; 51
     792:	83 b7       	in	r24, 0x33	; 51
     794:	88 60       	ori	r24, 0x08	; 8
     796:	83 bf       	out	0x33, r24	; 51
     798:	83 81       	ldd	r24, Z+3	; 0x03
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	69 f0       	breq	.+26     	; 0x7b8 <timer_init+0x84>
     79e:	28 f0       	brcs	.+10     	; 0x7aa <timer_init+0x76>
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	a1 f0       	breq	.+40     	; 0x7cc <timer_init+0x98>
     7a4:	83 30       	cpi	r24, 0x03	; 3
     7a6:	e1 f0       	breq	.+56     	; 0x7e0 <timer_init+0xac>
     7a8:	24 c0       	rjmp	.+72     	; 0x7f2 <timer_init+0xbe>
     7aa:	83 b7       	in	r24, 0x33	; 51
     7ac:	8f 7e       	andi	r24, 0xEF	; 239
     7ae:	83 bf       	out	0x33, r24	; 51
     7b0:	83 b7       	in	r24, 0x33	; 51
     7b2:	8f 7d       	andi	r24, 0xDF	; 223
     7b4:	83 bf       	out	0x33, r24	; 51
     7b6:	1d c0       	rjmp	.+58     	; 0x7f2 <timer_init+0xbe>
     7b8:	87 b3       	in	r24, 0x17	; 23
     7ba:	88 60       	ori	r24, 0x08	; 8
     7bc:	87 bb       	out	0x17, r24	; 23
     7be:	83 b7       	in	r24, 0x33	; 51
     7c0:	80 61       	ori	r24, 0x10	; 16
     7c2:	83 bf       	out	0x33, r24	; 51
     7c4:	83 b7       	in	r24, 0x33	; 51
     7c6:	8f 7d       	andi	r24, 0xDF	; 223
     7c8:	83 bf       	out	0x33, r24	; 51
     7ca:	13 c0       	rjmp	.+38     	; 0x7f2 <timer_init+0xbe>
     7cc:	87 b3       	in	r24, 0x17	; 23
     7ce:	88 60       	ori	r24, 0x08	; 8
     7d0:	87 bb       	out	0x17, r24	; 23
     7d2:	83 b7       	in	r24, 0x33	; 51
     7d4:	8f 7e       	andi	r24, 0xEF	; 239
     7d6:	83 bf       	out	0x33, r24	; 51
     7d8:	83 b7       	in	r24, 0x33	; 51
     7da:	80 62       	ori	r24, 0x20	; 32
     7dc:	83 bf       	out	0x33, r24	; 51
     7de:	09 c0       	rjmp	.+18     	; 0x7f2 <timer_init+0xbe>
     7e0:	87 b3       	in	r24, 0x17	; 23
     7e2:	88 60       	ori	r24, 0x08	; 8
     7e4:	87 bb       	out	0x17, r24	; 23
     7e6:	83 b7       	in	r24, 0x33	; 51
     7e8:	80 61       	ori	r24, 0x10	; 16
     7ea:	83 bf       	out	0x33, r24	; 51
     7ec:	83 b7       	in	r24, 0x33	; 51
     7ee:	80 62       	ori	r24, 0x20	; 32
     7f0:	83 bf       	out	0x33, r24	; 51
     7f2:	84 81       	ldd	r24, Z+4	; 0x04
     7f4:	95 81       	ldd	r25, Z+5	; 0x05
     7f6:	80 32       	cpi	r24, 0x20	; 32
     7f8:	91 05       	cpc	r25, r1
     7fa:	09 f4       	brne	.+2      	; 0x7fe <timer_init+0xca>
     7fc:	54 c1       	rjmp	.+680    	; 0xaa6 <__stack+0x247>
     7fe:	80 38       	cpi	r24, 0x80	; 128
     800:	91 05       	cpc	r25, r1
     802:	09 f4       	brne	.+2      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     804:	52 c1       	rjmp	.+676    	; 0xaaa <__stack+0x24b>
     806:	a0 81       	ld	r26, Z
     808:	b0 e0       	ldi	r27, 0x00	; 0
     80a:	aa 0f       	add	r26, r26
     80c:	bb 1f       	adc	r27, r27
     80e:	af 59       	subi	r26, 0x9F	; 159
     810:	bf 4f       	sbci	r27, 0xFF	; 255
     812:	8d 93       	st	X+, r24
     814:	9c 93       	st	X, r25
     816:	82 81       	ldd	r24, Z+2	; 0x02
     818:	81 11       	cpse	r24, r1
     81a:	0b c0       	rjmp	.+22     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     81c:	81 81       	ldd	r24, Z+1	; 0x01
     81e:	81 11       	cpse	r24, r1
     820:	04 c0       	rjmp	.+8      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     822:	89 b7       	in	r24, 0x39	; 57
     824:	81 60       	ori	r24, 0x01	; 1
     826:	89 bf       	out	0x39, r24	; 57
     828:	0a c0       	rjmp	.+20     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     82a:	89 b7       	in	r24, 0x39	; 57
     82c:	82 60       	ori	r24, 0x02	; 2
     82e:	89 bf       	out	0x39, r24	; 57
     830:	06 c0       	rjmp	.+12     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     832:	89 b7       	in	r24, 0x39	; 57
     834:	8e 7f       	andi	r24, 0xFE	; 254
     836:	89 bf       	out	0x39, r24	; 57
     838:	89 b7       	in	r24, 0x39	; 57
     83a:	8d 7f       	andi	r24, 0xFD	; 253
     83c:	89 bf       	out	0x39, r24	; 57
     83e:	86 81       	ldd	r24, Z+6	; 0x06
     840:	97 81       	ldd	r25, Z+7	; 0x07
     842:	8f 3f       	cpi	r24, 0xFF	; 255
     844:	91 05       	cpc	r25, r1
     846:	11 f0       	breq	.+4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     848:	08 f0       	brcs	.+2      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     84a:	31 c1       	rjmp	.+610    	; 0xaae <__stack+0x24f>
     84c:	20 85       	ldd	r18, Z+8	; 0x08
     84e:	31 85       	ldd	r19, Z+9	; 0x09
     850:	2f 3f       	cpi	r18, 0xFF	; 255
     852:	31 05       	cpc	r19, r1
     854:	11 f0       	breq	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     856:	08 f0       	brcs	.+2      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     858:	2c c1       	rjmp	.+600    	; 0xab2 <__stack+0x253>
     85a:	21 81       	ldd	r18, Z+1	; 0x01
     85c:	21 11       	cpse	r18, r1
     85e:	04 c0       	rjmp	.+8      	; 0x868 <__stack+0x9>
     860:	82 bf       	out	0x32, r24	; 50
     862:	1c be       	out	0x3c, r1	; 60
     864:	86 e0       	ldi	r24, 0x06	; 6
     866:	30 c1       	rjmp	.+608    	; 0xac8 <__stack+0x269>
     868:	12 be       	out	0x32, r1	; 50
     86a:	80 85       	ldd	r24, Z+8	; 0x08
     86c:	8c bf       	out	0x3c, r24	; 60
     86e:	86 e0       	ldi	r24, 0x06	; 6
     870:	2b c1       	rjmp	.+598    	; 0xac8 <__stack+0x269>
     872:	81 30       	cpi	r24, 0x01	; 1
     874:	09 f0       	breq	.+2      	; 0x878 <__stack+0x19>
     876:	8b c0       	rjmp	.+278    	; 0x98e <__stack+0x12f>
     878:	8f b5       	in	r24, 0x2f	; 47
     87a:	88 60       	ori	r24, 0x08	; 8
     87c:	8f bd       	out	0x2f, r24	; 47
     87e:	8f b5       	in	r24, 0x2f	; 47
     880:	84 60       	ori	r24, 0x04	; 4
     882:	8f bd       	out	0x2f, r24	; 47
     884:	81 81       	ldd	r24, Z+1	; 0x01
     886:	88 23       	and	r24, r24
     888:	19 f0       	breq	.+6      	; 0x890 <__stack+0x31>
     88a:	81 30       	cpi	r24, 0x01	; 1
     88c:	71 f0       	breq	.+28     	; 0x8aa <__stack+0x4b>
     88e:	19 c0       	rjmp	.+50     	; 0x8c2 <__stack+0x63>
     890:	8f b5       	in	r24, 0x2f	; 47
     892:	8e 7f       	andi	r24, 0xFE	; 254
     894:	8f bd       	out	0x2f, r24	; 47
     896:	8f b5       	in	r24, 0x2f	; 47
     898:	8d 7f       	andi	r24, 0xFD	; 253
     89a:	8f bd       	out	0x2f, r24	; 47
     89c:	8e b5       	in	r24, 0x2e	; 46
     89e:	87 7f       	andi	r24, 0xF7	; 247
     8a0:	8e bd       	out	0x2e, r24	; 46
     8a2:	8e b5       	in	r24, 0x2e	; 46
     8a4:	8f 7e       	andi	r24, 0xEF	; 239
     8a6:	8e bd       	out	0x2e, r24	; 46
     8a8:	0c c0       	rjmp	.+24     	; 0x8c2 <__stack+0x63>
     8aa:	8f b5       	in	r24, 0x2f	; 47
     8ac:	8e 7f       	andi	r24, 0xFE	; 254
     8ae:	8f bd       	out	0x2f, r24	; 47
     8b0:	8f b5       	in	r24, 0x2f	; 47
     8b2:	8d 7f       	andi	r24, 0xFD	; 253
     8b4:	8f bd       	out	0x2f, r24	; 47
     8b6:	8e b5       	in	r24, 0x2e	; 46
     8b8:	88 60       	ori	r24, 0x08	; 8
     8ba:	8e bd       	out	0x2e, r24	; 46
     8bc:	8e b5       	in	r24, 0x2e	; 46
     8be:	8f 7e       	andi	r24, 0xEF	; 239
     8c0:	8e bd       	out	0x2e, r24	; 46
     8c2:	83 81       	ldd	r24, Z+3	; 0x03
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	69 f0       	breq	.+26     	; 0x8e2 <__stack+0x83>
     8c8:	28 f0       	brcs	.+10     	; 0x8d4 <__stack+0x75>
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	a1 f0       	breq	.+40     	; 0x8f6 <__stack+0x97>
     8ce:	83 30       	cpi	r24, 0x03	; 3
     8d0:	e1 f0       	breq	.+56     	; 0x90a <__stack+0xab>
     8d2:	24 c0       	rjmp	.+72     	; 0x91c <__stack+0xbd>
     8d4:	8f b5       	in	r24, 0x2f	; 47
     8d6:	8f 7b       	andi	r24, 0xBF	; 191
     8d8:	8f bd       	out	0x2f, r24	; 47
     8da:	8f b5       	in	r24, 0x2f	; 47
     8dc:	8f 77       	andi	r24, 0x7F	; 127
     8de:	8f bd       	out	0x2f, r24	; 47
     8e0:	1d c0       	rjmp	.+58     	; 0x91c <__stack+0xbd>
     8e2:	81 b3       	in	r24, 0x11	; 17
     8e4:	80 62       	ori	r24, 0x20	; 32
     8e6:	81 bb       	out	0x11, r24	; 17
     8e8:	8f b5       	in	r24, 0x2f	; 47
     8ea:	80 64       	ori	r24, 0x40	; 64
     8ec:	8f bd       	out	0x2f, r24	; 47
     8ee:	8f b5       	in	r24, 0x2f	; 47
     8f0:	8f 77       	andi	r24, 0x7F	; 127
     8f2:	8f bd       	out	0x2f, r24	; 47
     8f4:	13 c0       	rjmp	.+38     	; 0x91c <__stack+0xbd>
     8f6:	81 b3       	in	r24, 0x11	; 17
     8f8:	80 62       	ori	r24, 0x20	; 32
     8fa:	81 bb       	out	0x11, r24	; 17
     8fc:	8f b5       	in	r24, 0x2f	; 47
     8fe:	8f 7b       	andi	r24, 0xBF	; 191
     900:	8f bd       	out	0x2f, r24	; 47
     902:	8f b5       	in	r24, 0x2f	; 47
     904:	80 68       	ori	r24, 0x80	; 128
     906:	8f bd       	out	0x2f, r24	; 47
     908:	09 c0       	rjmp	.+18     	; 0x91c <__stack+0xbd>
     90a:	81 b3       	in	r24, 0x11	; 17
     90c:	80 62       	ori	r24, 0x20	; 32
     90e:	81 bb       	out	0x11, r24	; 17
     910:	8f b5       	in	r24, 0x2f	; 47
     912:	80 64       	ori	r24, 0x40	; 64
     914:	8f bd       	out	0x2f, r24	; 47
     916:	8f b5       	in	r24, 0x2f	; 47
     918:	80 68       	ori	r24, 0x80	; 128
     91a:	8f bd       	out	0x2f, r24	; 47
     91c:	84 81       	ldd	r24, Z+4	; 0x04
     91e:	95 81       	ldd	r25, Z+5	; 0x05
     920:	80 32       	cpi	r24, 0x20	; 32
     922:	91 05       	cpc	r25, r1
     924:	09 f4       	brne	.+2      	; 0x928 <__stack+0xc9>
     926:	c7 c0       	rjmp	.+398    	; 0xab6 <__stack+0x257>
     928:	80 38       	cpi	r24, 0x80	; 128
     92a:	91 05       	cpc	r25, r1
     92c:	09 f4       	brne	.+2      	; 0x930 <__stack+0xd1>
     92e:	c5 c0       	rjmp	.+394    	; 0xaba <__stack+0x25b>
     930:	a0 81       	ld	r26, Z
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	aa 0f       	add	r26, r26
     936:	bb 1f       	adc	r27, r27
     938:	af 59       	subi	r26, 0x9F	; 159
     93a:	bf 4f       	sbci	r27, 0xFF	; 255
     93c:	8d 93       	st	X+, r24
     93e:	9c 93       	st	X, r25
     940:	82 81       	ldd	r24, Z+2	; 0x02
     942:	81 11       	cpse	r24, r1
     944:	0b c0       	rjmp	.+22     	; 0x95c <__stack+0xfd>
     946:	81 81       	ldd	r24, Z+1	; 0x01
     948:	81 11       	cpse	r24, r1
     94a:	04 c0       	rjmp	.+8      	; 0x954 <__stack+0xf5>
     94c:	89 b7       	in	r24, 0x39	; 57
     94e:	84 60       	ori	r24, 0x04	; 4
     950:	89 bf       	out	0x39, r24	; 57
     952:	0a c0       	rjmp	.+20     	; 0x968 <__stack+0x109>
     954:	89 b7       	in	r24, 0x39	; 57
     956:	80 61       	ori	r24, 0x10	; 16
     958:	89 bf       	out	0x39, r24	; 57
     95a:	06 c0       	rjmp	.+12     	; 0x968 <__stack+0x109>
     95c:	89 b7       	in	r24, 0x39	; 57
     95e:	8b 7f       	andi	r24, 0xFB	; 251
     960:	89 bf       	out	0x39, r24	; 57
     962:	89 b7       	in	r24, 0x39	; 57
     964:	8f 7e       	andi	r24, 0xEF	; 239
     966:	89 bf       	out	0x39, r24	; 57
     968:	81 81       	ldd	r24, Z+1	; 0x01
     96a:	81 11       	cpse	r24, r1
     96c:	08 c0       	rjmp	.+16     	; 0x97e <__stack+0x11f>
     96e:	86 81       	ldd	r24, Z+6	; 0x06
     970:	97 81       	ldd	r25, Z+7	; 0x07
     972:	9d bd       	out	0x2d, r25	; 45
     974:	8c bd       	out	0x2c, r24	; 44
     976:	1b bc       	out	0x2b, r1	; 43
     978:	1a bc       	out	0x2a, r1	; 42
     97a:	86 e0       	ldi	r24, 0x06	; 6
     97c:	a5 c0       	rjmp	.+330    	; 0xac8 <__stack+0x269>
     97e:	1d bc       	out	0x2d, r1	; 45
     980:	1c bc       	out	0x2c, r1	; 44
     982:	80 85       	ldd	r24, Z+8	; 0x08
     984:	91 85       	ldd	r25, Z+9	; 0x09
     986:	9b bd       	out	0x2b, r25	; 43
     988:	8a bd       	out	0x2a, r24	; 42
     98a:	86 e0       	ldi	r24, 0x06	; 6
     98c:	9d c0       	rjmp	.+314    	; 0xac8 <__stack+0x269>
     98e:	85 b5       	in	r24, 0x25	; 37
     990:	80 68       	ori	r24, 0x80	; 128
     992:	85 bd       	out	0x25, r24	; 37
     994:	81 81       	ldd	r24, Z+1	; 0x01
     996:	88 23       	and	r24, r24
     998:	19 f0       	breq	.+6      	; 0x9a0 <__stack+0x141>
     99a:	81 30       	cpi	r24, 0x01	; 1
     99c:	41 f0       	breq	.+16     	; 0x9ae <__stack+0x14f>
     99e:	0d c0       	rjmp	.+26     	; 0x9ba <__stack+0x15b>
     9a0:	85 b5       	in	r24, 0x25	; 37
     9a2:	8f 7b       	andi	r24, 0xBF	; 191
     9a4:	85 bd       	out	0x25, r24	; 37
     9a6:	85 b5       	in	r24, 0x25	; 37
     9a8:	87 7f       	andi	r24, 0xF7	; 247
     9aa:	85 bd       	out	0x25, r24	; 37
     9ac:	06 c0       	rjmp	.+12     	; 0x9ba <__stack+0x15b>
     9ae:	85 b5       	in	r24, 0x25	; 37
     9b0:	8f 7b       	andi	r24, 0xBF	; 191
     9b2:	85 bd       	out	0x25, r24	; 37
     9b4:	85 b5       	in	r24, 0x25	; 37
     9b6:	88 60       	ori	r24, 0x08	; 8
     9b8:	85 bd       	out	0x25, r24	; 37
     9ba:	83 81       	ldd	r24, Z+3	; 0x03
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	69 f0       	breq	.+26     	; 0x9da <__stack+0x17b>
     9c0:	28 f0       	brcs	.+10     	; 0x9cc <__stack+0x16d>
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	a1 f0       	breq	.+40     	; 0x9ee <__stack+0x18f>
     9c6:	83 30       	cpi	r24, 0x03	; 3
     9c8:	e1 f0       	breq	.+56     	; 0xa02 <__stack+0x1a3>
     9ca:	24 c0       	rjmp	.+72     	; 0xa14 <__stack+0x1b5>
     9cc:	85 b5       	in	r24, 0x25	; 37
     9ce:	8f 7e       	andi	r24, 0xEF	; 239
     9d0:	85 bd       	out	0x25, r24	; 37
     9d2:	85 b5       	in	r24, 0x25	; 37
     9d4:	8f 7d       	andi	r24, 0xDF	; 223
     9d6:	85 bd       	out	0x25, r24	; 37
     9d8:	1d c0       	rjmp	.+58     	; 0xa14 <__stack+0x1b5>
     9da:	81 b3       	in	r24, 0x11	; 17
     9dc:	80 68       	ori	r24, 0x80	; 128
     9de:	81 bb       	out	0x11, r24	; 17
     9e0:	85 b5       	in	r24, 0x25	; 37
     9e2:	80 61       	ori	r24, 0x10	; 16
     9e4:	85 bd       	out	0x25, r24	; 37
     9e6:	85 b5       	in	r24, 0x25	; 37
     9e8:	8f 7d       	andi	r24, 0xDF	; 223
     9ea:	85 bd       	out	0x25, r24	; 37
     9ec:	13 c0       	rjmp	.+38     	; 0xa14 <__stack+0x1b5>
     9ee:	81 b3       	in	r24, 0x11	; 17
     9f0:	80 68       	ori	r24, 0x80	; 128
     9f2:	81 bb       	out	0x11, r24	; 17
     9f4:	85 b5       	in	r24, 0x25	; 37
     9f6:	8f 7e       	andi	r24, 0xEF	; 239
     9f8:	85 bd       	out	0x25, r24	; 37
     9fa:	85 b5       	in	r24, 0x25	; 37
     9fc:	80 62       	ori	r24, 0x20	; 32
     9fe:	85 bd       	out	0x25, r24	; 37
     a00:	09 c0       	rjmp	.+18     	; 0xa14 <__stack+0x1b5>
     a02:	81 b3       	in	r24, 0x11	; 17
     a04:	80 68       	ori	r24, 0x80	; 128
     a06:	81 bb       	out	0x11, r24	; 17
     a08:	85 b5       	in	r24, 0x25	; 37
     a0a:	80 61       	ori	r24, 0x10	; 16
     a0c:	85 bd       	out	0x25, r24	; 37
     a0e:	85 b5       	in	r24, 0x25	; 37
     a10:	80 62       	ori	r24, 0x20	; 32
     a12:	85 bd       	out	0x25, r24	; 37
     a14:	84 81       	ldd	r24, Z+4	; 0x04
     a16:	95 81       	ldd	r25, Z+5	; 0x05
     a18:	9c 01       	movw	r18, r24
     a1a:	22 50       	subi	r18, 0x02	; 2
     a1c:	31 09       	sbc	r19, r1
     a1e:	22 30       	cpi	r18, 0x02	; 2
     a20:	31 05       	cpc	r19, r1
     a22:	08 f4       	brcc	.+2      	; 0xa26 <__stack+0x1c7>
     a24:	4c c0       	rjmp	.+152    	; 0xabe <__stack+0x25f>
     a26:	a0 81       	ld	r26, Z
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	aa 0f       	add	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	af 59       	subi	r26, 0x9F	; 159
     a30:	bf 4f       	sbci	r27, 0xFF	; 255
     a32:	8d 93       	st	X+, r24
     a34:	9c 93       	st	X, r25
     a36:	82 81       	ldd	r24, Z+2	; 0x02
     a38:	81 11       	cpse	r24, r1
     a3a:	0b c0       	rjmp	.+22     	; 0xa52 <__stack+0x1f3>
     a3c:	81 81       	ldd	r24, Z+1	; 0x01
     a3e:	81 11       	cpse	r24, r1
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__stack+0x1eb>
     a42:	89 b7       	in	r24, 0x39	; 57
     a44:	80 64       	ori	r24, 0x40	; 64
     a46:	89 bf       	out	0x39, r24	; 57
     a48:	0a c0       	rjmp	.+20     	; 0xa5e <__stack+0x1ff>
     a4a:	89 b7       	in	r24, 0x39	; 57
     a4c:	80 68       	ori	r24, 0x80	; 128
     a4e:	89 bf       	out	0x39, r24	; 57
     a50:	06 c0       	rjmp	.+12     	; 0xa5e <__stack+0x1ff>
     a52:	89 b7       	in	r24, 0x39	; 57
     a54:	8f 7b       	andi	r24, 0xBF	; 191
     a56:	89 bf       	out	0x39, r24	; 57
     a58:	89 b7       	in	r24, 0x39	; 57
     a5a:	8f 77       	andi	r24, 0x7F	; 127
     a5c:	89 bf       	out	0x39, r24	; 57
     a5e:	86 81       	ldd	r24, Z+6	; 0x06
     a60:	97 81       	ldd	r25, Z+7	; 0x07
     a62:	8f 3f       	cpi	r24, 0xFF	; 255
     a64:	91 05       	cpc	r25, r1
     a66:	09 f0       	breq	.+2      	; 0xa6a <__stack+0x20b>
     a68:	60 f5       	brcc	.+88     	; 0xac2 <__stack+0x263>
     a6a:	20 85       	ldd	r18, Z+8	; 0x08
     a6c:	31 85       	ldd	r19, Z+9	; 0x09
     a6e:	2f 3f       	cpi	r18, 0xFF	; 255
     a70:	31 05       	cpc	r19, r1
     a72:	09 f0       	breq	.+2      	; 0xa76 <__stack+0x217>
     a74:	40 f5       	brcc	.+80     	; 0xac6 <__stack+0x267>
     a76:	21 81       	ldd	r18, Z+1	; 0x01
     a78:	21 11       	cpse	r18, r1
     a7a:	04 c0       	rjmp	.+8      	; 0xa84 <__stack+0x225>
     a7c:	84 bd       	out	0x24, r24	; 36
     a7e:	13 bc       	out	0x23, r1	; 35
     a80:	86 e0       	ldi	r24, 0x06	; 6
     a82:	22 c0       	rjmp	.+68     	; 0xac8 <__stack+0x269>
     a84:	14 bc       	out	0x24, r1	; 36
     a86:	80 85       	ldd	r24, Z+8	; 0x08
     a88:	83 bd       	out	0x23, r24	; 35
     a8a:	86 e0       	ldi	r24, 0x06	; 6
     a8c:	1d c0       	rjmp	.+58     	; 0xac8 <__stack+0x269>
     a8e:	85 e0       	ldi	r24, 0x05	; 5
     a90:	1b c0       	rjmp	.+54     	; 0xac8 <__stack+0x269>
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	19 c0       	rjmp	.+50     	; 0xac8 <__stack+0x269>
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	17 c0       	rjmp	.+46     	; 0xac8 <__stack+0x269>
     a9a:	82 e0       	ldi	r24, 0x02	; 2
     a9c:	15 c0       	rjmp	.+42     	; 0xac8 <__stack+0x269>
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	13 c0       	rjmp	.+38     	; 0xac8 <__stack+0x269>
     aa2:	84 e0       	ldi	r24, 0x04	; 4
     aa4:	11 c0       	rjmp	.+34     	; 0xac8 <__stack+0x269>
     aa6:	84 e0       	ldi	r24, 0x04	; 4
     aa8:	0f c0       	rjmp	.+30     	; 0xac8 <__stack+0x269>
     aaa:	84 e0       	ldi	r24, 0x04	; 4
     aac:	0d c0       	rjmp	.+26     	; 0xac8 <__stack+0x269>
     aae:	85 e0       	ldi	r24, 0x05	; 5
     ab0:	0b c0       	rjmp	.+22     	; 0xac8 <__stack+0x269>
     ab2:	85 e0       	ldi	r24, 0x05	; 5
     ab4:	09 c0       	rjmp	.+18     	; 0xac8 <__stack+0x269>
     ab6:	84 e0       	ldi	r24, 0x04	; 4
     ab8:	07 c0       	rjmp	.+14     	; 0xac8 <__stack+0x269>
     aba:	84 e0       	ldi	r24, 0x04	; 4
     abc:	05 c0       	rjmp	.+10     	; 0xac8 <__stack+0x269>
     abe:	84 e0       	ldi	r24, 0x04	; 4
     ac0:	03 c0       	rjmp	.+6      	; 0xac8 <__stack+0x269>
     ac2:	85 e0       	ldi	r24, 0x05	; 5
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <__stack+0x269>
     ac6:	85 e0       	ldi	r24, 0x05	; 5
     ac8:	86 30       	cpi	r24, 0x06	; 6
     aca:	31 f4       	brne	.+12     	; 0xad8 <__stack+0x279>
     acc:	e0 81       	ld	r30, Z
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	e0 56       	subi	r30, 0x60	; 96
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	90 83       	st	Z, r25
     ad8:	08 95       	ret

00000ada <timer_setInitialValue>:
     ada:	83 30       	cpi	r24, 0x03	; 3
     adc:	f8 f4       	brcc	.+62     	; 0xb1c <timer_setInitialValue+0x42>
     ade:	e8 2f       	mov	r30, r24
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	e0 56       	subi	r30, 0x60	; 96
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	90 81       	ld	r25, Z
     ae8:	91 30       	cpi	r25, 0x01	; 1
     aea:	d1 f4       	brne	.+52     	; 0xb20 <timer_setInitialValue+0x46>
     aec:	81 30       	cpi	r24, 0x01	; 1
     aee:	59 f0       	breq	.+22     	; 0xb06 <timer_setInitialValue+0x2c>
     af0:	18 f0       	brcs	.+6      	; 0xaf8 <timer_setInitialValue+0x1e>
     af2:	82 30       	cpi	r24, 0x02	; 2
     af4:	61 f0       	breq	.+24     	; 0xb0e <timer_setInitialValue+0x34>
     af6:	16 c0       	rjmp	.+44     	; 0xb24 <timer_setInitialValue+0x4a>
     af8:	6f 3f       	cpi	r22, 0xFF	; 255
     afa:	71 05       	cpc	r23, r1
     afc:	09 f0       	breq	.+2      	; 0xb00 <timer_setInitialValue+0x26>
     afe:	a0 f4       	brcc	.+40     	; 0xb28 <timer_setInitialValue+0x4e>
     b00:	62 bf       	out	0x32, r22	; 50
     b02:	86 e0       	ldi	r24, 0x06	; 6
     b04:	08 95       	ret
     b06:	7d bd       	out	0x2d, r23	; 45
     b08:	6c bd       	out	0x2c, r22	; 44
     b0a:	86 e0       	ldi	r24, 0x06	; 6
     b0c:	08 95       	ret
     b0e:	6f 3f       	cpi	r22, 0xFF	; 255
     b10:	71 05       	cpc	r23, r1
     b12:	09 f0       	breq	.+2      	; 0xb16 <timer_setInitialValue+0x3c>
     b14:	58 f4       	brcc	.+22     	; 0xb2c <timer_setInitialValue+0x52>
     b16:	64 bd       	out	0x24, r22	; 36
     b18:	86 e0       	ldi	r24, 0x06	; 6
     b1a:	08 95       	ret
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	08 95       	ret
     b20:	88 e0       	ldi	r24, 0x08	; 8
     b22:	08 95       	ret
     b24:	86 e0       	ldi	r24, 0x06	; 6
     b26:	08 95       	ret
     b28:	85 e0       	ldi	r24, 0x05	; 5
     b2a:	08 95       	ret
     b2c:	85 e0       	ldi	r24, 0x05	; 5
     b2e:	08 95       	ret

00000b30 <timer_setClock>:
     b30:	83 30       	cpi	r24, 0x03	; 3
     b32:	e8 f5       	brcc	.+122    	; 0xbae <timer_setClock+0x7e>
     b34:	28 2f       	mov	r18, r24
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	f9 01       	movw	r30, r18
     b3a:	e0 56       	subi	r30, 0x60	; 96
     b3c:	ff 4f       	sbci	r31, 0xFF	; 255
     b3e:	90 81       	ld	r25, Z
     b40:	91 30       	cpi	r25, 0x01	; 1
     b42:	b9 f5       	brne	.+110    	; 0xbb2 <timer_setClock+0x82>
     b44:	60 3d       	cpi	r22, 0xD0	; 208
     b46:	97 e0       	ldi	r25, 0x07	; 7
     b48:	79 07       	cpc	r23, r25
     b4a:	a8 f5       	brcc	.+106    	; 0xbb6 <timer_setClock+0x86>
     b4c:	81 30       	cpi	r24, 0x01	; 1
     b4e:	99 f0       	breq	.+38     	; 0xb76 <timer_setClock+0x46>
     b50:	18 f0       	brcs	.+6      	; 0xb58 <timer_setClock+0x28>
     b52:	82 30       	cpi	r24, 0x02	; 2
     b54:	f9 f0       	breq	.+62     	; 0xb94 <timer_setClock+0x64>
     b56:	31 c0       	rjmp	.+98     	; 0xbba <timer_setClock+0x8a>
     b58:	60 32       	cpi	r22, 0x20	; 32
     b5a:	71 05       	cpc	r23, r1
     b5c:	81 f1       	breq	.+96     	; 0xbbe <timer_setClock+0x8e>
     b5e:	60 38       	cpi	r22, 0x80	; 128
     b60:	71 05       	cpc	r23, r1
     b62:	79 f1       	breq	.+94     	; 0xbc2 <timer_setClock+0x92>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	f9 01       	movw	r30, r18
     b6a:	ef 59       	subi	r30, 0x9F	; 159
     b6c:	ff 4f       	sbci	r31, 0xFF	; 255
     b6e:	71 83       	std	Z+1, r23	; 0x01
     b70:	60 83       	st	Z, r22
     b72:	86 e0       	ldi	r24, 0x06	; 6
     b74:	08 95       	ret
     b76:	60 32       	cpi	r22, 0x20	; 32
     b78:	71 05       	cpc	r23, r1
     b7a:	29 f1       	breq	.+74     	; 0xbc6 <timer_setClock+0x96>
     b7c:	60 38       	cpi	r22, 0x80	; 128
     b7e:	71 05       	cpc	r23, r1
     b80:	21 f1       	breq	.+72     	; 0xbca <timer_setClock+0x9a>
     b82:	22 0f       	add	r18, r18
     b84:	33 1f       	adc	r19, r19
     b86:	f9 01       	movw	r30, r18
     b88:	ef 59       	subi	r30, 0x9F	; 159
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	71 83       	std	Z+1, r23	; 0x01
     b8e:	60 83       	st	Z, r22
     b90:	86 e0       	ldi	r24, 0x06	; 6
     b92:	08 95       	ret
     b94:	cb 01       	movw	r24, r22
     b96:	02 97       	sbiw	r24, 0x02	; 2
     b98:	02 97       	sbiw	r24, 0x02	; 2
     b9a:	c8 f0       	brcs	.+50     	; 0xbce <timer_setClock+0x9e>
     b9c:	22 0f       	add	r18, r18
     b9e:	33 1f       	adc	r19, r19
     ba0:	f9 01       	movw	r30, r18
     ba2:	ef 59       	subi	r30, 0x9F	; 159
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	71 83       	std	Z+1, r23	; 0x01
     ba8:	60 83       	st	Z, r22
     baa:	86 e0       	ldi	r24, 0x06	; 6
     bac:	08 95       	ret
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	08 95       	ret
     bb2:	88 e0       	ldi	r24, 0x08	; 8
     bb4:	08 95       	ret
     bb6:	84 e0       	ldi	r24, 0x04	; 4
     bb8:	08 95       	ret
     bba:	86 e0       	ldi	r24, 0x06	; 6
     bbc:	08 95       	ret
     bbe:	84 e0       	ldi	r24, 0x04	; 4
     bc0:	08 95       	ret
     bc2:	84 e0       	ldi	r24, 0x04	; 4
     bc4:	08 95       	ret
     bc6:	84 e0       	ldi	r24, 0x04	; 4
     bc8:	08 95       	ret
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	08 95       	ret
     bce:	84 e0       	ldi	r24, 0x04	; 4
     bd0:	08 95       	ret

00000bd2 <timer_setCallBack>:
     bd2:	83 30       	cpi	r24, 0x03	; 3
     bd4:	d8 f5       	brcc	.+118    	; 0xc4c <timer_setCallBack+0x7a>
     bd6:	42 30       	cpi	r20, 0x02	; 2
     bd8:	d8 f5       	brcc	.+118    	; 0xc50 <timer_setCallBack+0x7e>
     bda:	61 15       	cp	r22, r1
     bdc:	71 05       	cpc	r23, r1
     bde:	d1 f1       	breq	.+116    	; 0xc54 <timer_setCallBack+0x82>
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	a1 f0       	breq	.+40     	; 0xc0c <timer_setCallBack+0x3a>
     be4:	18 f0       	brcs	.+6      	; 0xbec <timer_setCallBack+0x1a>
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	09 f1       	breq	.+66     	; 0xc2c <timer_setCallBack+0x5a>
     bea:	36 c0       	rjmp	.+108    	; 0xc58 <timer_setCallBack+0x86>
     bec:	41 11       	cpse	r20, r1
     bee:	06 c0       	rjmp	.+12     	; 0xbfc <timer_setCallBack+0x2a>
     bf0:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <gl_callBackPtr_timer0_OVF+0x1>
     bf4:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <gl_callBackPtr_timer0_OVF>
     bf8:	86 e0       	ldi	r24, 0x06	; 6
     bfa:	08 95       	ret
     bfc:	41 30       	cpi	r20, 0x01	; 1
     bfe:	71 f5       	brne	.+92     	; 0xc5c <timer_setCallBack+0x8a>
     c00:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <gl_callBackPtr_timer0_COMP+0x1>
     c04:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <gl_callBackPtr_timer0_COMP>
     c08:	86 e0       	ldi	r24, 0x06	; 6
     c0a:	08 95       	ret
     c0c:	41 11       	cpse	r20, r1
     c0e:	06 c0       	rjmp	.+12     	; 0xc1c <timer_setCallBack+0x4a>
     c10:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <gl_callBackPtr_timer1_OVF+0x1>
     c14:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <gl_callBackPtr_timer1_OVF>
     c18:	86 e0       	ldi	r24, 0x06	; 6
     c1a:	08 95       	ret
     c1c:	41 30       	cpi	r20, 0x01	; 1
     c1e:	01 f5       	brne	.+64     	; 0xc60 <timer_setCallBack+0x8e>
     c20:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <gl_callBackPtr_timer1_COMP+0x1>
     c24:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <gl_callBackPtr_timer1_COMP>
     c28:	86 e0       	ldi	r24, 0x06	; 6
     c2a:	08 95       	ret
     c2c:	41 11       	cpse	r20, r1
     c2e:	06 c0       	rjmp	.+12     	; 0xc3c <timer_setCallBack+0x6a>
     c30:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <gl_callBackPtr_timer2_OVF+0x1>
     c34:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <gl_callBackPtr_timer2_OVF>
     c38:	86 e0       	ldi	r24, 0x06	; 6
     c3a:	08 95       	ret
     c3c:	41 30       	cpi	r20, 0x01	; 1
     c3e:	91 f4       	brne	.+36     	; 0xc64 <timer_setCallBack+0x92>
     c40:	70 93 95 00 	sts	0x0095, r23	; 0x800095 <gl_callBackPtr_timer2_COMP+0x1>
     c44:	60 93 94 00 	sts	0x0094, r22	; 0x800094 <gl_callBackPtr_timer2_COMP>
     c48:	86 e0       	ldi	r24, 0x06	; 6
     c4a:	08 95       	ret
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	08 95       	ret
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	08 95       	ret
     c54:	85 e0       	ldi	r24, 0x05	; 5
     c56:	08 95       	ret
     c58:	86 e0       	ldi	r24, 0x06	; 6
     c5a:	08 95       	ret
     c5c:	86 e0       	ldi	r24, 0x06	; 6
     c5e:	08 95       	ret
     c60:	86 e0       	ldi	r24, 0x06	; 6
     c62:	08 95       	ret
     c64:	86 e0       	ldi	r24, 0x06	; 6
     c66:	08 95       	ret

00000c68 <timer_start>:
     c68:	83 30       	cpi	r24, 0x03	; 3
     c6a:	08 f0       	brcs	.+2      	; 0xc6e <timer_start+0x6>
     c6c:	18 c1       	rjmp	.+560    	; 0xe9e <timer_start+0x236>
     c6e:	e8 2f       	mov	r30, r24
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	e0 56       	subi	r30, 0x60	; 96
     c74:	ff 4f       	sbci	r31, 0xFF	; 255
     c76:	90 81       	ld	r25, Z
     c78:	91 30       	cpi	r25, 0x01	; 1
     c7a:	09 f0       	breq	.+2      	; 0xc7e <timer_start+0x16>
     c7c:	12 c1       	rjmp	.+548    	; 0xea2 <timer_start+0x23a>
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	09 f4       	brne	.+2      	; 0xc84 <timer_start+0x1c>
     c82:	5c c0       	rjmp	.+184    	; 0xd3c <timer_start+0xd4>
     c84:	20 f0       	brcs	.+8      	; 0xc8e <timer_start+0x26>
     c86:	82 30       	cpi	r24, 0x02	; 2
     c88:	09 f4       	brne	.+2      	; 0xc8c <timer_start+0x24>
     c8a:	af c0       	rjmp	.+350    	; 0xdea <timer_start+0x182>
     c8c:	0c c1       	rjmp	.+536    	; 0xea6 <timer_start+0x23e>
     c8e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <gl_enu_tmr_clk>
     c92:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <gl_enu_tmr_clk+0x1>
     c96:	80 3d       	cpi	r24, 0xD0	; 208
     c98:	27 e0       	ldi	r18, 0x07	; 7
     c9a:	92 07       	cpc	r25, r18
     c9c:	08 f0       	brcs	.+2      	; 0xca0 <timer_start+0x38>
     c9e:	05 c1       	rjmp	.+522    	; 0xeaa <timer_start+0x242>
     ca0:	80 32       	cpi	r24, 0x20	; 32
     ca2:	91 05       	cpc	r25, r1
     ca4:	09 f4       	brne	.+2      	; 0xca8 <timer_start+0x40>
     ca6:	03 c1       	rjmp	.+518    	; 0xeae <timer_start+0x246>
     ca8:	80 38       	cpi	r24, 0x80	; 128
     caa:	91 05       	cpc	r25, r1
     cac:	09 f4       	brne	.+2      	; 0xcb0 <timer_start+0x48>
     cae:	01 c1       	rjmp	.+514    	; 0xeb2 <timer_start+0x24a>
     cb0:	83 30       	cpi	r24, 0x03	; 3
     cb2:	91 05       	cpc	r25, r1
     cb4:	f1 f1       	breq	.+124    	; 0xd32 <timer_start+0xca>
     cb6:	28 f4       	brcc	.+10     	; 0xcc2 <timer_start+0x5a>
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	91 05       	cpc	r25, r1
     cbc:	b1 f0       	breq	.+44     	; 0xcea <timer_start+0x82>
     cbe:	80 f0       	brcs	.+32     	; 0xce0 <timer_start+0x78>
     cc0:	32 c0       	rjmp	.+100    	; 0xd26 <timer_start+0xbe>
     cc2:	80 34       	cpi	r24, 0x40	; 64
     cc4:	91 05       	cpc	r25, r1
     cc6:	e9 f0       	breq	.+58     	; 0xd02 <timer_start+0x9a>
     cc8:	18 f4       	brcc	.+6      	; 0xcd0 <timer_start+0x68>
     cca:	08 97       	sbiw	r24, 0x08	; 8
     ccc:	a1 f0       	breq	.+40     	; 0xcf6 <timer_start+0x8e>
     cce:	f3 c0       	rjmp	.+486    	; 0xeb6 <timer_start+0x24e>
     cd0:	81 15       	cp	r24, r1
     cd2:	21 e0       	ldi	r18, 0x01	; 1
     cd4:	92 07       	cpc	r25, r18
     cd6:	d9 f0       	breq	.+54     	; 0xd0e <timer_start+0xa6>
     cd8:	81 15       	cp	r24, r1
     cda:	94 40       	sbci	r25, 0x04	; 4
     cdc:	f1 f0       	breq	.+60     	; 0xd1a <timer_start+0xb2>
     cde:	eb c0       	rjmp	.+470    	; 0xeb6 <timer_start+0x24e>
     ce0:	83 b7       	in	r24, 0x33	; 51
     ce2:	88 7f       	andi	r24, 0xF8	; 248
     ce4:	83 bf       	out	0x33, r24	; 51
     ce6:	86 e0       	ldi	r24, 0x06	; 6
     ce8:	08 95       	ret
     cea:	83 b7       	in	r24, 0x33	; 51
     cec:	88 7f       	andi	r24, 0xF8	; 248
     cee:	81 60       	ori	r24, 0x01	; 1
     cf0:	83 bf       	out	0x33, r24	; 51
     cf2:	86 e0       	ldi	r24, 0x06	; 6
     cf4:	08 95       	ret
     cf6:	83 b7       	in	r24, 0x33	; 51
     cf8:	88 7f       	andi	r24, 0xF8	; 248
     cfa:	82 60       	ori	r24, 0x02	; 2
     cfc:	83 bf       	out	0x33, r24	; 51
     cfe:	86 e0       	ldi	r24, 0x06	; 6
     d00:	08 95       	ret
     d02:	83 b7       	in	r24, 0x33	; 51
     d04:	88 7f       	andi	r24, 0xF8	; 248
     d06:	83 60       	ori	r24, 0x03	; 3
     d08:	83 bf       	out	0x33, r24	; 51
     d0a:	86 e0       	ldi	r24, 0x06	; 6
     d0c:	08 95       	ret
     d0e:	83 b7       	in	r24, 0x33	; 51
     d10:	88 7f       	andi	r24, 0xF8	; 248
     d12:	84 60       	ori	r24, 0x04	; 4
     d14:	83 bf       	out	0x33, r24	; 51
     d16:	86 e0       	ldi	r24, 0x06	; 6
     d18:	08 95       	ret
     d1a:	83 b7       	in	r24, 0x33	; 51
     d1c:	88 7f       	andi	r24, 0xF8	; 248
     d1e:	85 60       	ori	r24, 0x05	; 5
     d20:	83 bf       	out	0x33, r24	; 51
     d22:	86 e0       	ldi	r24, 0x06	; 6
     d24:	08 95       	ret
     d26:	83 b7       	in	r24, 0x33	; 51
     d28:	88 7f       	andi	r24, 0xF8	; 248
     d2a:	86 60       	ori	r24, 0x06	; 6
     d2c:	83 bf       	out	0x33, r24	; 51
     d2e:	86 e0       	ldi	r24, 0x06	; 6
     d30:	08 95       	ret
     d32:	83 b7       	in	r24, 0x33	; 51
     d34:	87 60       	ori	r24, 0x07	; 7
     d36:	83 bf       	out	0x33, r24	; 51
     d38:	86 e0       	ldi	r24, 0x06	; 6
     d3a:	08 95       	ret
     d3c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <gl_enu_tmr_clk+0x2>
     d40:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <gl_enu_tmr_clk+0x3>
     d44:	80 3d       	cpi	r24, 0xD0	; 208
     d46:	27 e0       	ldi	r18, 0x07	; 7
     d48:	92 07       	cpc	r25, r18
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <timer_start+0xe6>
     d4c:	b6 c0       	rjmp	.+364    	; 0xeba <timer_start+0x252>
     d4e:	80 32       	cpi	r24, 0x20	; 32
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <timer_start+0xee>
     d54:	b4 c0       	rjmp	.+360    	; 0xebe <timer_start+0x256>
     d56:	80 38       	cpi	r24, 0x80	; 128
     d58:	91 05       	cpc	r25, r1
     d5a:	09 f4       	brne	.+2      	; 0xd5e <timer_start+0xf6>
     d5c:	b2 c0       	rjmp	.+356    	; 0xec2 <timer_start+0x25a>
     d5e:	83 30       	cpi	r24, 0x03	; 3
     d60:	91 05       	cpc	r25, r1
     d62:	f1 f1       	breq	.+124    	; 0xde0 <timer_start+0x178>
     d64:	28 f4       	brcc	.+10     	; 0xd70 <timer_start+0x108>
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	91 05       	cpc	r25, r1
     d6a:	b1 f0       	breq	.+44     	; 0xd98 <timer_start+0x130>
     d6c:	80 f0       	brcs	.+32     	; 0xd8e <timer_start+0x126>
     d6e:	32 c0       	rjmp	.+100    	; 0xdd4 <timer_start+0x16c>
     d70:	80 34       	cpi	r24, 0x40	; 64
     d72:	91 05       	cpc	r25, r1
     d74:	e9 f0       	breq	.+58     	; 0xdb0 <timer_start+0x148>
     d76:	18 f4       	brcc	.+6      	; 0xd7e <timer_start+0x116>
     d78:	08 97       	sbiw	r24, 0x08	; 8
     d7a:	a1 f0       	breq	.+40     	; 0xda4 <timer_start+0x13c>
     d7c:	a4 c0       	rjmp	.+328    	; 0xec6 <timer_start+0x25e>
     d7e:	81 15       	cp	r24, r1
     d80:	21 e0       	ldi	r18, 0x01	; 1
     d82:	92 07       	cpc	r25, r18
     d84:	d9 f0       	breq	.+54     	; 0xdbc <timer_start+0x154>
     d86:	81 15       	cp	r24, r1
     d88:	94 40       	sbci	r25, 0x04	; 4
     d8a:	f1 f0       	breq	.+60     	; 0xdc8 <timer_start+0x160>
     d8c:	9c c0       	rjmp	.+312    	; 0xec6 <timer_start+0x25e>
     d8e:	8e b5       	in	r24, 0x2e	; 46
     d90:	88 7f       	andi	r24, 0xF8	; 248
     d92:	8e bd       	out	0x2e, r24	; 46
     d94:	86 e0       	ldi	r24, 0x06	; 6
     d96:	08 95       	ret
     d98:	8e b5       	in	r24, 0x2e	; 46
     d9a:	88 7f       	andi	r24, 0xF8	; 248
     d9c:	81 60       	ori	r24, 0x01	; 1
     d9e:	8e bd       	out	0x2e, r24	; 46
     da0:	86 e0       	ldi	r24, 0x06	; 6
     da2:	08 95       	ret
     da4:	8e b5       	in	r24, 0x2e	; 46
     da6:	88 7f       	andi	r24, 0xF8	; 248
     da8:	82 60       	ori	r24, 0x02	; 2
     daa:	8e bd       	out	0x2e, r24	; 46
     dac:	86 e0       	ldi	r24, 0x06	; 6
     dae:	08 95       	ret
     db0:	8e b5       	in	r24, 0x2e	; 46
     db2:	88 7f       	andi	r24, 0xF8	; 248
     db4:	83 60       	ori	r24, 0x03	; 3
     db6:	8e bd       	out	0x2e, r24	; 46
     db8:	86 e0       	ldi	r24, 0x06	; 6
     dba:	08 95       	ret
     dbc:	8e b5       	in	r24, 0x2e	; 46
     dbe:	88 7f       	andi	r24, 0xF8	; 248
     dc0:	84 60       	ori	r24, 0x04	; 4
     dc2:	8e bd       	out	0x2e, r24	; 46
     dc4:	86 e0       	ldi	r24, 0x06	; 6
     dc6:	08 95       	ret
     dc8:	8e b5       	in	r24, 0x2e	; 46
     dca:	88 7f       	andi	r24, 0xF8	; 248
     dcc:	85 60       	ori	r24, 0x05	; 5
     dce:	8e bd       	out	0x2e, r24	; 46
     dd0:	86 e0       	ldi	r24, 0x06	; 6
     dd2:	08 95       	ret
     dd4:	8e b5       	in	r24, 0x2e	; 46
     dd6:	88 7f       	andi	r24, 0xF8	; 248
     dd8:	86 60       	ori	r24, 0x06	; 6
     dda:	8e bd       	out	0x2e, r24	; 46
     ddc:	86 e0       	ldi	r24, 0x06	; 6
     dde:	08 95       	ret
     de0:	8e b5       	in	r24, 0x2e	; 46
     de2:	87 60       	ori	r24, 0x07	; 7
     de4:	8e bd       	out	0x2e, r24	; 46
     de6:	86 e0       	ldi	r24, 0x06	; 6
     de8:	08 95       	ret
     dea:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gl_enu_tmr_clk+0x4>
     dee:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <gl_enu_tmr_clk+0x5>
     df2:	80 3d       	cpi	r24, 0xD0	; 208
     df4:	27 e0       	ldi	r18, 0x07	; 7
     df6:	92 07       	cpc	r25, r18
     df8:	08 f0       	brcs	.+2      	; 0xdfc <timer_start+0x194>
     dfa:	67 c0       	rjmp	.+206    	; 0xeca <timer_start+0x262>
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	91 05       	cpc	r25, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <timer_start+0x19c>
     e02:	65 c0       	rjmp	.+202    	; 0xece <timer_start+0x266>
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	91 05       	cpc	r25, r1
     e08:	09 f4       	brne	.+2      	; 0xe0c <timer_start+0x1a4>
     e0a:	63 c0       	rjmp	.+198    	; 0xed2 <timer_start+0x26a>
     e0c:	80 32       	cpi	r24, 0x20	; 32
     e0e:	91 05       	cpc	r25, r1
     e10:	49 f1       	breq	.+82     	; 0xe64 <timer_start+0x1fc>
     e12:	38 f4       	brcc	.+14     	; 0xe22 <timer_start+0x1ba>
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	91 05       	cpc	r25, r1
     e18:	c9 f0       	breq	.+50     	; 0xe4c <timer_start+0x1e4>
     e1a:	98 f0       	brcs	.+38     	; 0xe42 <timer_start+0x1da>
     e1c:	08 97       	sbiw	r24, 0x08	; 8
     e1e:	e1 f0       	breq	.+56     	; 0xe58 <timer_start+0x1f0>
     e20:	5a c0       	rjmp	.+180    	; 0xed6 <timer_start+0x26e>
     e22:	80 38       	cpi	r24, 0x80	; 128
     e24:	91 05       	cpc	r25, r1
     e26:	51 f1       	breq	.+84     	; 0xe7c <timer_start+0x214>
     e28:	20 f4       	brcc	.+8      	; 0xe32 <timer_start+0x1ca>
     e2a:	80 34       	cpi	r24, 0x40	; 64
     e2c:	91 05       	cpc	r25, r1
     e2e:	01 f1       	breq	.+64     	; 0xe70 <timer_start+0x208>
     e30:	52 c0       	rjmp	.+164    	; 0xed6 <timer_start+0x26e>
     e32:	81 15       	cp	r24, r1
     e34:	21 e0       	ldi	r18, 0x01	; 1
     e36:	92 07       	cpc	r25, r18
     e38:	39 f1       	breq	.+78     	; 0xe88 <timer_start+0x220>
     e3a:	81 15       	cp	r24, r1
     e3c:	94 40       	sbci	r25, 0x04	; 4
     e3e:	51 f1       	breq	.+84     	; 0xe94 <timer_start+0x22c>
     e40:	4a c0       	rjmp	.+148    	; 0xed6 <timer_start+0x26e>
     e42:	85 b5       	in	r24, 0x25	; 37
     e44:	88 7f       	andi	r24, 0xF8	; 248
     e46:	85 bd       	out	0x25, r24	; 37
     e48:	86 e0       	ldi	r24, 0x06	; 6
     e4a:	08 95       	ret
     e4c:	85 b5       	in	r24, 0x25	; 37
     e4e:	88 7f       	andi	r24, 0xF8	; 248
     e50:	81 60       	ori	r24, 0x01	; 1
     e52:	85 bd       	out	0x25, r24	; 37
     e54:	86 e0       	ldi	r24, 0x06	; 6
     e56:	08 95       	ret
     e58:	85 b5       	in	r24, 0x25	; 37
     e5a:	88 7f       	andi	r24, 0xF8	; 248
     e5c:	82 60       	ori	r24, 0x02	; 2
     e5e:	85 bd       	out	0x25, r24	; 37
     e60:	86 e0       	ldi	r24, 0x06	; 6
     e62:	08 95       	ret
     e64:	85 b5       	in	r24, 0x25	; 37
     e66:	88 7f       	andi	r24, 0xF8	; 248
     e68:	83 60       	ori	r24, 0x03	; 3
     e6a:	85 bd       	out	0x25, r24	; 37
     e6c:	86 e0       	ldi	r24, 0x06	; 6
     e6e:	08 95       	ret
     e70:	85 b5       	in	r24, 0x25	; 37
     e72:	88 7f       	andi	r24, 0xF8	; 248
     e74:	84 60       	ori	r24, 0x04	; 4
     e76:	85 bd       	out	0x25, r24	; 37
     e78:	86 e0       	ldi	r24, 0x06	; 6
     e7a:	08 95       	ret
     e7c:	85 b5       	in	r24, 0x25	; 37
     e7e:	88 7f       	andi	r24, 0xF8	; 248
     e80:	85 60       	ori	r24, 0x05	; 5
     e82:	85 bd       	out	0x25, r24	; 37
     e84:	86 e0       	ldi	r24, 0x06	; 6
     e86:	08 95       	ret
     e88:	85 b5       	in	r24, 0x25	; 37
     e8a:	88 7f       	andi	r24, 0xF8	; 248
     e8c:	86 60       	ori	r24, 0x06	; 6
     e8e:	85 bd       	out	0x25, r24	; 37
     e90:	86 e0       	ldi	r24, 0x06	; 6
     e92:	08 95       	ret
     e94:	85 b5       	in	r24, 0x25	; 37
     e96:	87 60       	ori	r24, 0x07	; 7
     e98:	85 bd       	out	0x25, r24	; 37
     e9a:	86 e0       	ldi	r24, 0x06	; 6
     e9c:	08 95       	ret
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	08 95       	ret
     ea2:	88 e0       	ldi	r24, 0x08	; 8
     ea4:	08 95       	ret
     ea6:	86 e0       	ldi	r24, 0x06	; 6
     ea8:	08 95       	ret
     eaa:	84 e0       	ldi	r24, 0x04	; 4
     eac:	08 95       	ret
     eae:	84 e0       	ldi	r24, 0x04	; 4
     eb0:	08 95       	ret
     eb2:	84 e0       	ldi	r24, 0x04	; 4
     eb4:	08 95       	ret
     eb6:	86 e0       	ldi	r24, 0x06	; 6
     eb8:	08 95       	ret
     eba:	84 e0       	ldi	r24, 0x04	; 4
     ebc:	08 95       	ret
     ebe:	84 e0       	ldi	r24, 0x04	; 4
     ec0:	08 95       	ret
     ec2:	84 e0       	ldi	r24, 0x04	; 4
     ec4:	08 95       	ret
     ec6:	86 e0       	ldi	r24, 0x06	; 6
     ec8:	08 95       	ret
     eca:	84 e0       	ldi	r24, 0x04	; 4
     ecc:	08 95       	ret
     ece:	84 e0       	ldi	r24, 0x04	; 4
     ed0:	08 95       	ret
     ed2:	84 e0       	ldi	r24, 0x04	; 4
     ed4:	08 95       	ret
     ed6:	86 e0       	ldi	r24, 0x06	; 6
     ed8:	08 95       	ret

00000eda <timer_stop>:
     eda:	83 30       	cpi	r24, 0x03	; 3
     edc:	e0 f4       	brcc	.+56     	; 0xf16 <timer_stop+0x3c>
     ede:	e8 2f       	mov	r30, r24
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	e0 56       	subi	r30, 0x60	; 96
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	90 81       	ld	r25, Z
     ee8:	91 30       	cpi	r25, 0x01	; 1
     eea:	b9 f4       	brne	.+46     	; 0xf1a <timer_stop+0x40>
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	49 f0       	breq	.+18     	; 0xf02 <timer_stop+0x28>
     ef0:	18 f0       	brcs	.+6      	; 0xef8 <timer_stop+0x1e>
     ef2:	82 30       	cpi	r24, 0x02	; 2
     ef4:	59 f0       	breq	.+22     	; 0xf0c <timer_stop+0x32>
     ef6:	13 c0       	rjmp	.+38     	; 0xf1e <timer_stop+0x44>
     ef8:	83 b7       	in	r24, 0x33	; 51
     efa:	88 7f       	andi	r24, 0xF8	; 248
     efc:	83 bf       	out	0x33, r24	; 51
     efe:	86 e0       	ldi	r24, 0x06	; 6
     f00:	08 95       	ret
     f02:	8e b5       	in	r24, 0x2e	; 46
     f04:	88 7f       	andi	r24, 0xF8	; 248
     f06:	8e bd       	out	0x2e, r24	; 46
     f08:	86 e0       	ldi	r24, 0x06	; 6
     f0a:	08 95       	ret
     f0c:	85 b5       	in	r24, 0x25	; 37
     f0e:	88 7f       	andi	r24, 0xF8	; 248
     f10:	85 bd       	out	0x25, r24	; 37
     f12:	86 e0       	ldi	r24, 0x06	; 6
     f14:	08 95       	ret
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	08 95       	ret
     f1a:	88 e0       	ldi	r24, 0x08	; 8
     f1c:	08 95       	ret
     f1e:	86 e0       	ldi	r24, 0x06	; 6
     f20:	08 95       	ret

00000f22 <__vector_11>:

/*===============ISR HANDLERS================*/
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR_HANDLER(TMR0_OVF)
{
     f22:	1f 92       	push	r1
     f24:	0f 92       	push	r0
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	0f 92       	push	r0
     f2a:	11 24       	eor	r1, r1
     f2c:	2f 93       	push	r18
     f2e:	3f 93       	push	r19
     f30:	4f 93       	push	r20
     f32:	5f 93       	push	r21
     f34:	6f 93       	push	r22
     f36:	7f 93       	push	r23
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	af 93       	push	r26
     f3e:	bf 93       	push	r27
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
	if(gl_callBackPtr_timer0_OVF != NULL_PTR)
     f44:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <gl_callBackPtr_timer0_OVF>
     f48:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <gl_callBackPtr_timer0_OVF+0x1>
     f4c:	30 97       	sbiw	r30, 0x00	; 0
     f4e:	09 f0       	breq	.+2      	; 0xf52 <__vector_11+0x30>
	{
		gl_callBackPtr_timer0_OVF();
     f50:	09 95       	icall
	}
}
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	bf 91       	pop	r27
     f58:	af 91       	pop	r26
     f5a:	9f 91       	pop	r25
     f5c:	8f 91       	pop	r24
     f5e:	7f 91       	pop	r23
     f60:	6f 91       	pop	r22
     f62:	5f 91       	pop	r21
     f64:	4f 91       	pop	r20
     f66:	3f 91       	pop	r19
     f68:	2f 91       	pop	r18
     f6a:	0f 90       	pop	r0
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	0f 90       	pop	r0
     f70:	1f 90       	pop	r1
     f72:	18 95       	reti

00000f74 <__vector_9>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR_HANDLER(TMR1_OVF)
{
     f74:	1f 92       	push	r1
     f76:	0f 92       	push	r0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	2f 93       	push	r18
     f80:	3f 93       	push	r19
     f82:	4f 93       	push	r20
     f84:	5f 93       	push	r21
     f86:	6f 93       	push	r22
     f88:	7f 93       	push	r23
     f8a:	8f 93       	push	r24
     f8c:	9f 93       	push	r25
     f8e:	af 93       	push	r26
     f90:	bf 93       	push	r27
     f92:	ef 93       	push	r30
     f94:	ff 93       	push	r31
	if(gl_callBackPtr_timer1_OVF != NULL_PTR)
     f96:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <gl_callBackPtr_timer1_OVF>
     f9a:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <gl_callBackPtr_timer1_OVF+0x1>
     f9e:	30 97       	sbiw	r30, 0x00	; 0
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <__vector_9+0x30>
	{
		gl_callBackPtr_timer1_OVF();
     fa2:	09 95       	icall
	}
}
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <__vector_5>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR_HANDLER(TMR2_OVF)
{
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	ef 93       	push	r30
     fe6:	ff 93       	push	r31
	if(gl_callBackPtr_timer2_OVF != NULL_PTR)
     fe8:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <gl_callBackPtr_timer2_OVF>
     fec:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <gl_callBackPtr_timer2_OVF+0x1>
     ff0:	30 97       	sbiw	r30, 0x00	; 0
     ff2:	09 f0       	breq	.+2      	; 0xff6 <__vector_5+0x30>
	{
		gl_callBackPtr_timer2_OVF();
     ff4:	09 95       	icall
	}
}
     ff6:	ff 91       	pop	r31
     ff8:	ef 91       	pop	r30
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	7f 91       	pop	r23
    1004:	6f 91       	pop	r22
    1006:	5f 91       	pop	r21
    1008:	4f 91       	pop	r20
    100a:	3f 91       	pop	r19
    100c:	2f 91       	pop	r18
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0
    1014:	1f 90       	pop	r1
    1016:	18 95       	reti

00001018 <__vector_10>:
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR_HANDLER(TMR0_CMP)
{
    1018:	1f 92       	push	r1
    101a:	0f 92       	push	r0
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	0f 92       	push	r0
    1020:	11 24       	eor	r1, r1
    1022:	2f 93       	push	r18
    1024:	3f 93       	push	r19
    1026:	4f 93       	push	r20
    1028:	5f 93       	push	r21
    102a:	6f 93       	push	r22
    102c:	7f 93       	push	r23
    102e:	8f 93       	push	r24
    1030:	9f 93       	push	r25
    1032:	af 93       	push	r26
    1034:	bf 93       	push	r27
    1036:	ef 93       	push	r30
    1038:	ff 93       	push	r31
	if(gl_callBackPtr_timer0_COMP != NULL_PTR)
    103a:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <gl_callBackPtr_timer0_COMP>
    103e:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <gl_callBackPtr_timer0_COMP+0x1>
    1042:	30 97       	sbiw	r30, 0x00	; 0
    1044:	09 f0       	breq	.+2      	; 0x1048 <__vector_10+0x30>
	{
		gl_callBackPtr_timer0_COMP();
    1046:	09 95       	icall
	}
}
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	bf 91       	pop	r27
    104e:	af 91       	pop	r26
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	7f 91       	pop	r23
    1056:	6f 91       	pop	r22
    1058:	5f 91       	pop	r21
    105a:	4f 91       	pop	r20
    105c:	3f 91       	pop	r19
    105e:	2f 91       	pop	r18
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0
    1066:	1f 90       	pop	r1
    1068:	18 95       	reti

0000106a <__vector_7>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR_HANDLER(TMR1_CMP_A)
{
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
    1074:	2f 93       	push	r18
    1076:	3f 93       	push	r19
    1078:	4f 93       	push	r20
    107a:	5f 93       	push	r21
    107c:	6f 93       	push	r22
    107e:	7f 93       	push	r23
    1080:	8f 93       	push	r24
    1082:	9f 93       	push	r25
    1084:	af 93       	push	r26
    1086:	bf 93       	push	r27
    1088:	ef 93       	push	r30
    108a:	ff 93       	push	r31
	if(gl_callBackPtr_timer1_COMP != NULL_PTR)
    108c:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <gl_callBackPtr_timer1_COMP>
    1090:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <gl_callBackPtr_timer1_COMP+0x1>
    1094:	30 97       	sbiw	r30, 0x00	; 0
    1096:	09 f0       	breq	.+2      	; 0x109a <__vector_7+0x30>
	{
		gl_callBackPtr_timer1_COMP();
    1098:	09 95       	icall
	}
}
    109a:	ff 91       	pop	r31
    109c:	ef 91       	pop	r30
    109e:	bf 91       	pop	r27
    10a0:	af 91       	pop	r26
    10a2:	9f 91       	pop	r25
    10a4:	8f 91       	pop	r24
    10a6:	7f 91       	pop	r23
    10a8:	6f 91       	pop	r22
    10aa:	5f 91       	pop	r21
    10ac:	4f 91       	pop	r20
    10ae:	3f 91       	pop	r19
    10b0:	2f 91       	pop	r18
    10b2:	0f 90       	pop	r0
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	0f 90       	pop	r0
    10b8:	1f 90       	pop	r1
    10ba:	18 95       	reti

000010bc <__vector_4>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR_HANDLER(TMR2_CMP)
{
    10bc:	1f 92       	push	r1
    10be:	0f 92       	push	r0
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	0f 92       	push	r0
    10c4:	11 24       	eor	r1, r1
    10c6:	2f 93       	push	r18
    10c8:	3f 93       	push	r19
    10ca:	4f 93       	push	r20
    10cc:	5f 93       	push	r21
    10ce:	6f 93       	push	r22
    10d0:	7f 93       	push	r23
    10d2:	8f 93       	push	r24
    10d4:	9f 93       	push	r25
    10d6:	af 93       	push	r26
    10d8:	bf 93       	push	r27
    10da:	ef 93       	push	r30
    10dc:	ff 93       	push	r31
	if(gl_callBackPtr_timer2_COMP != NULL_PTR)
    10de:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <gl_callBackPtr_timer2_COMP>
    10e2:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <gl_callBackPtr_timer2_COMP+0x1>
    10e6:	30 97       	sbiw	r30, 0x00	; 0
    10e8:	09 f0       	breq	.+2      	; 0x10ec <__vector_4+0x30>
	{
		gl_callBackPtr_timer2_COMP(); 
    10ea:	09 95       	icall
	}
    10ec:	ff 91       	pop	r31
    10ee:	ef 91       	pop	r30
    10f0:	bf 91       	pop	r27
    10f2:	af 91       	pop	r26
    10f4:	9f 91       	pop	r25
    10f6:	8f 91       	pop	r24
    10f8:	7f 91       	pop	r23
    10fa:	6f 91       	pop	r22
    10fc:	5f 91       	pop	r21
    10fe:	4f 91       	pop	r20
    1100:	3f 91       	pop	r19
    1102:	2f 91       	pop	r18
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <calc_prescaler>:

/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
    110e:	cf 92       	push	r12
    1110:	df 92       	push	r13
    1112:	ef 92       	push	r14
    1114:	ff 92       	push	r15
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	6b 01       	movw	r12, r22
    111c:	7c 01       	movw	r14, r24
	BOOLEAN bo_return_value = TRUE;
	if(enu_time_unit == ENU_MICRO_SECOND)
    111e:	21 11       	cpse	r18, r1
    1120:	65 c1       	rjmp	.+714    	; 0x13ec <calc_prescaler+0x2de>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    1122:	41 11       	cpse	r20, r1
    1124:	69 c0       	rjmp	.+210    	; 0x11f8 <calc_prescaler+0xea>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	57 e4       	ldi	r21, 0x47	; 71
    112e:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1132:	18 16       	cp	r1, r24
    1134:	0c f4       	brge	.+2      	; 0x1138 <calc_prescaler+0x2a>
    1136:	59 c0       	rjmp	.+178    	; 0x11ea <calc_prescaler+0xdc>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	52 e4       	ldi	r21, 0x42	; 66
    1140:	c7 01       	movw	r24, r14
    1142:	b6 01       	movw	r22, r12
    1144:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1148:	18 16       	cp	r1, r24
    114a:	34 f0       	brlt	.+12     	; 0x1158 <calc_prescaler+0x4a>
				*ptr_u16_prescale=P_1;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	f8 01       	movw	r30, r16
    1152:	91 83       	std	Z+1, r25	; 0x01
    1154:	80 83       	st	Z, r24
    1156:	21 c4       	rjmp	.+2114   	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e8       	ldi	r20, 0x80	; 128
    115e:	53 e4       	ldi	r21, 0x43	; 67
    1160:	c7 01       	movw	r24, r14
    1162:	b6 01       	movw	r22, r12
    1164:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1168:	18 16       	cp	r1, r24
    116a:	3c f0       	brlt	.+14     	; 0x117a <calc_prescaler+0x6c>
				*ptr_u16_prescale=P_8;
    116c:	88 e0       	ldi	r24, 0x08	; 8
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	f8 01       	movw	r30, r16
    1172:	91 83       	std	Z+1, r25	; 0x01
    1174:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	10 c4       	rjmp	.+2080   	; 0x199a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	55 e4       	ldi	r21, 0x45	; 69
    1182:	c7 01       	movw	r24, r14
    1184:	b6 01       	movw	r22, r12
    1186:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    118a:	18 16       	cp	r1, r24
    118c:	3c f0       	brlt	.+14     	; 0x119c <calc_prescaler+0x8e>
				*ptr_u16_prescale=P_64;
    118e:	80 e4       	ldi	r24, 0x40	; 64
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	f8 01       	movw	r30, r16
    1194:	91 83       	std	Z+1, r25	; 0x01
    1196:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	ff c3       	rjmp	.+2046   	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	56 e4       	ldi	r21, 0x46	; 70
    11a4:	c7 01       	movw	r24, r14
    11a6:	b6 01       	movw	r22, r12
    11a8:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    11ac:	18 16       	cp	r1, r24
    11ae:	3c f0       	brlt	.+14     	; 0x11be <calc_prescaler+0xb0>
				*ptr_u16_prescale=P_256;
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	f8 01       	movw	r30, r16
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	ee c3       	rjmp	.+2012   	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024))
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e0       	ldi	r20, 0x00	; 0
    11c4:	57 e4       	ldi	r21, 0x47	; 71
    11c6:	c7 01       	movw	r24, r14
    11c8:	b6 01       	movw	r22, r12
    11ca:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    11ce:	18 16       	cp	r1, r24
    11d0:	3c f0       	brlt	.+14     	; 0x11e0 <calc_prescaler+0xd2>
				*ptr_u16_prescale=P_1024;
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	94 e0       	ldi	r25, 0x04	; 4
    11d6:	f8 01       	movw	r30, r16
    11d8:	91 83       	std	Z+1, r25	; 0x01
    11da:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	dd c3       	rjmp	.+1978   	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    11e0:	f8 01       	movw	r30, r16
    11e2:	11 82       	std	Z+1, r1	; 0x01
    11e4:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	d8 c3       	rjmp	.+1968   	; 0x199a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	f8 01       	movw	r30, r16
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	80 83       	st	Z, r24
				bo_return_value = TRUE;	
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	d1 c3       	rjmp	.+1954   	; 0x199a <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    11f8:	41 30       	cpi	r20, 0x01	; 1
    11fa:	09 f0       	breq	.+2      	; 0x11fe <calc_prescaler+0xf0>
    11fc:	69 c0       	rjmp	.+210    	; 0x12d0 <calc_prescaler+0x1c2>
		{
			if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024) )
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	5b e4       	ldi	r21, 0x4B	; 75
    1206:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    120a:	18 16       	cp	r1, r24
    120c:	0c f4       	brge	.+2      	; 0x1210 <calc_prescaler+0x102>
    120e:	59 c0       	rjmp	.+178    	; 0x12c2 <calc_prescaler+0x1b4>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_US(P_1))
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	56 e4       	ldi	r21, 0x46	; 70
    1218:	c7 01       	movw	r24, r14
    121a:	b6 01       	movw	r22, r12
    121c:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1220:	18 16       	cp	r1, r24
    1222:	34 f0       	brlt	.+12     	; 0x1230 <calc_prescaler+0x122>
				*ptr_u16_prescale=P_1;
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	f8 01       	movw	r30, r16
    122a:	91 83       	std	Z+1, r25	; 0x01
    122c:	80 83       	st	Z, r24
    122e:	b5 c3       	rjmp	.+1898   	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e8       	ldi	r20, 0x80	; 128
    1236:	57 e4       	ldi	r21, 0x47	; 71
    1238:	c7 01       	movw	r24, r14
    123a:	b6 01       	movw	r22, r12
    123c:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1240:	18 16       	cp	r1, r24
    1242:	3c f0       	brlt	.+14     	; 0x1252 <calc_prescaler+0x144>
				*ptr_u16_prescale=P_8;
    1244:	88 e0       	ldi	r24, 0x08	; 8
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	f8 01       	movw	r30, r16
    124a:	91 83       	std	Z+1, r25	; 0x01
    124c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	a4 c3       	rjmp	.+1864   	; 0x199a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	59 e4       	ldi	r21, 0x49	; 73
    125a:	c7 01       	movw	r24, r14
    125c:	b6 01       	movw	r22, r12
    125e:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1262:	18 16       	cp	r1, r24
    1264:	3c f0       	brlt	.+14     	; 0x1274 <calc_prescaler+0x166>
				*ptr_u16_prescale=P_64;
    1266:	80 e4       	ldi	r24, 0x40	; 64
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	f8 01       	movw	r30, r16
    126c:	91 83       	std	Z+1, r25	; 0x01
    126e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	93 c3       	rjmp	.+1830   	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	5a e4       	ldi	r21, 0x4A	; 74
    127c:	c7 01       	movw	r24, r14
    127e:	b6 01       	movw	r22, r12
    1280:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1284:	18 16       	cp	r1, r24
    1286:	3c f0       	brlt	.+14     	; 0x1296 <calc_prescaler+0x188>
				*ptr_u16_prescale=P_256;
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	f8 01       	movw	r30, r16
    128e:	91 83       	std	Z+1, r25	; 0x01
    1290:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	82 c3       	rjmp	.+1796   	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024))
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	5b e4       	ldi	r21, 0x4B	; 75
    129e:	c7 01       	movw	r24, r14
    12a0:	b6 01       	movw	r22, r12
    12a2:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    12a6:	18 16       	cp	r1, r24
    12a8:	3c f0       	brlt	.+14     	; 0x12b8 <calc_prescaler+0x1aa>
				*ptr_u16_prescale=P_1024;
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	94 e0       	ldi	r25, 0x04	; 4
    12ae:	f8 01       	movw	r30, r16
    12b0:	91 83       	std	Z+1, r25	; 0x01
    12b2:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	71 c3       	rjmp	.+1762   	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    12b8:	f8 01       	movw	r30, r16
    12ba:	11 82       	std	Z+1, r1	; 0x01
    12bc:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	6c c3       	rjmp	.+1752   	; 0x199a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	f8 01       	movw	r30, r16
    12c8:	91 83       	std	Z+1, r25	; 0x01
    12ca:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	65 c3       	rjmp	.+1738   	; 0x199a <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    12d0:	42 30       	cpi	r20, 0x02	; 2
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <calc_prescaler+0x1c8>
    12d4:	5b c3       	rjmp	.+1718   	; 0x198c <calc_prescaler+0x87e>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	57 e4       	ldi	r21, 0x47	; 71
    12de:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    12e2:	18 16       	cp	r1, r24
    12e4:	0c f4       	brge	.+2      	; 0x12e8 <calc_prescaler+0x1da>
    12e6:	7b c0       	rjmp	.+246    	; 0x13de <calc_prescaler+0x2d0>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	52 e4       	ldi	r21, 0x42	; 66
    12f0:	c7 01       	movw	r24, r14
    12f2:	b6 01       	movw	r22, r12
    12f4:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    12f8:	18 16       	cp	r1, r24
    12fa:	34 f0       	brlt	.+12     	; 0x1308 <calc_prescaler+0x1fa>
				*ptr_u16_prescale=P_1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	f8 01       	movw	r30, r16
    1302:	91 83       	std	Z+1, r25	; 0x01
    1304:	80 83       	st	Z, r24
    1306:	49 c3       	rjmp	.+1682   	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e8       	ldi	r20, 0x80	; 128
    130e:	53 e4       	ldi	r21, 0x43	; 67
    1310:	c7 01       	movw	r24, r14
    1312:	b6 01       	movw	r22, r12
    1314:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1318:	18 16       	cp	r1, r24
    131a:	3c f0       	brlt	.+14     	; 0x132a <calc_prescaler+0x21c>
				*ptr_u16_prescale=P_8;
    131c:	88 e0       	ldi	r24, 0x08	; 8
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	f8 01       	movw	r30, r16
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	38 c3       	rjmp	.+1648   	; 0x199a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e8       	ldi	r20, 0x80	; 128
    1330:	54 e4       	ldi	r21, 0x44	; 68
    1332:	c7 01       	movw	r24, r14
    1334:	b6 01       	movw	r22, r12
    1336:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    133a:	18 16       	cp	r1, r24
    133c:	3c f0       	brlt	.+14     	; 0x134c <calc_prescaler+0x23e>
				*ptr_u16_prescale=P_32;
    133e:	80 e2       	ldi	r24, 0x20	; 32
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	f8 01       	movw	r30, r16
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	27 c3       	rjmp	.+1614   	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	55 e4       	ldi	r21, 0x45	; 69
    1354:	c7 01       	movw	r24, r14
    1356:	b6 01       	movw	r22, r12
    1358:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    135c:	18 16       	cp	r1, r24
    135e:	3c f0       	brlt	.+14     	; 0x136e <calc_prescaler+0x260>
				*ptr_u16_prescale=P_64;
    1360:	80 e4       	ldi	r24, 0x40	; 64
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	f8 01       	movw	r30, r16
    1366:	91 83       	std	Z+1, r25	; 0x01
    1368:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	16 c3       	rjmp	.+1580   	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e8       	ldi	r20, 0x80	; 128
    1374:	55 e4       	ldi	r21, 0x45	; 69
    1376:	c7 01       	movw	r24, r14
    1378:	b6 01       	movw	r22, r12
    137a:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    137e:	18 16       	cp	r1, r24
    1380:	3c f0       	brlt	.+14     	; 0x1390 <calc_prescaler+0x282>
				*ptr_u16_prescale=P_128;
    1382:	80 e8       	ldi	r24, 0x80	; 128
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	f8 01       	movw	r30, r16
    1388:	91 83       	std	Z+1, r25	; 0x01
    138a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	05 c3       	rjmp	.+1546   	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	56 e4       	ldi	r21, 0x46	; 70
    1398:	c7 01       	movw	r24, r14
    139a:	b6 01       	movw	r22, r12
    139c:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    13a0:	18 16       	cp	r1, r24
    13a2:	3c f0       	brlt	.+14     	; 0x13b2 <calc_prescaler+0x2a4>
				*ptr_u16_prescale=P_256;
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	f8 01       	movw	r30, r16
    13aa:	91 83       	std	Z+1, r25	; 0x01
    13ac:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	f4 c2       	rjmp	.+1512   	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_US(P_1024))
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	57 e4       	ldi	r21, 0x47	; 71
    13ba:	c7 01       	movw	r24, r14
    13bc:	b6 01       	movw	r22, r12
    13be:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	3c f0       	brlt	.+14     	; 0x13d4 <calc_prescaler+0x2c6>
				*ptr_u16_prescale=P_1024;
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	94 e0       	ldi	r25, 0x04	; 4
    13ca:	f8 01       	movw	r30, r16
    13cc:	91 83       	std	Z+1, r25	; 0x01
    13ce:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	e3 c2       	rjmp	.+1478   	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    13d4:	f8 01       	movw	r30, r16
    13d6:	11 82       	std	Z+1, r1	; 0x01
    13d8:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	de c2       	rjmp	.+1468   	; 0x199a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    13de:	82 e0       	ldi	r24, 0x02	; 2
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	f8 01       	movw	r30, r16
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	d7 c2       	rjmp	.+1454   	; 0x199a <calc_prescaler+0x88c>
		else
		{
			bo_return_value = FALSE;
		}
	}
	else if (enu_time_unit == ENU_MILLI_SECOND)
    13ec:	21 30       	cpi	r18, 0x01	; 1
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <calc_prescaler+0x2e4>
    13f0:	65 c1       	rjmp	.+714    	; 0x16bc <calc_prescaler+0x5ae>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    13f2:	41 11       	cpse	r20, r1
    13f4:	69 c0       	rjmp	.+210    	; 0x14c8 <calc_prescaler+0x3ba>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024) )
    13f6:	2f e6       	ldi	r18, 0x6F	; 111
    13f8:	32 e1       	ldi	r19, 0x12	; 18
    13fa:	43 e0       	ldi	r20, 0x03	; 3
    13fc:	52 e4       	ldi	r21, 0x42	; 66
    13fe:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1402:	18 16       	cp	r1, r24
    1404:	0c f4       	brge	.+2      	; 0x1408 <calc_prescaler+0x2fa>
    1406:	59 c0       	rjmp	.+178    	; 0x14ba <calc_prescaler+0x3ac>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
    1408:	2f e6       	ldi	r18, 0x6F	; 111
    140a:	32 e1       	ldi	r19, 0x12	; 18
    140c:	43 e0       	ldi	r20, 0x03	; 3
    140e:	5d e3       	ldi	r21, 0x3D	; 61
    1410:	c7 01       	movw	r24, r14
    1412:	b6 01       	movw	r22, r12
    1414:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1418:	18 16       	cp	r1, r24
    141a:	34 f0       	brlt	.+12     	; 0x1428 <calc_prescaler+0x31a>
				*ptr_u16_prescale=P_1;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	f8 01       	movw	r30, r16
    1422:	91 83       	std	Z+1, r25	; 0x01
    1424:	80 83       	st	Z, r24
    1426:	b9 c2       	rjmp	.+1394   	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
    1428:	2f e6       	ldi	r18, 0x6F	; 111
    142a:	32 e1       	ldi	r19, 0x12	; 18
    142c:	43 e8       	ldi	r20, 0x83	; 131
    142e:	5e e3       	ldi	r21, 0x3E	; 62
    1430:	c7 01       	movw	r24, r14
    1432:	b6 01       	movw	r22, r12
    1434:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1438:	18 16       	cp	r1, r24
    143a:	3c f0       	brlt	.+14     	; 0x144a <calc_prescaler+0x33c>
				*ptr_u16_prescale=P_8;
    143c:	88 e0       	ldi	r24, 0x08	; 8
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	f8 01       	movw	r30, r16
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	a8 c2       	rjmp	.+1360   	; 0x199a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
    144a:	2f e6       	ldi	r18, 0x6F	; 111
    144c:	32 e1       	ldi	r19, 0x12	; 18
    144e:	43 e0       	ldi	r20, 0x03	; 3
    1450:	50 e4       	ldi	r21, 0x40	; 64
    1452:	c7 01       	movw	r24, r14
    1454:	b6 01       	movw	r22, r12
    1456:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    145a:	18 16       	cp	r1, r24
    145c:	3c f0       	brlt	.+14     	; 0x146c <calc_prescaler+0x35e>
				*ptr_u16_prescale=P_64;
    145e:	80 e4       	ldi	r24, 0x40	; 64
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	f8 01       	movw	r30, r16
    1464:	91 83       	std	Z+1, r25	; 0x01
    1466:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	97 c2       	rjmp	.+1326   	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
    146c:	2f e6       	ldi	r18, 0x6F	; 111
    146e:	32 e1       	ldi	r19, 0x12	; 18
    1470:	43 e0       	ldi	r20, 0x03	; 3
    1472:	51 e4       	ldi	r21, 0x41	; 65
    1474:	c7 01       	movw	r24, r14
    1476:	b6 01       	movw	r22, r12
    1478:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    147c:	18 16       	cp	r1, r24
    147e:	3c f0       	brlt	.+14     	; 0x148e <calc_prescaler+0x380>
				*ptr_u16_prescale=P_256;
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	91 e0       	ldi	r25, 0x01	; 1
    1484:	f8 01       	movw	r30, r16
    1486:	91 83       	std	Z+1, r25	; 0x01
    1488:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	86 c2       	rjmp	.+1292   	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024))
    148e:	2f e6       	ldi	r18, 0x6F	; 111
    1490:	32 e1       	ldi	r19, 0x12	; 18
    1492:	43 e0       	ldi	r20, 0x03	; 3
    1494:	52 e4       	ldi	r21, 0x42	; 66
    1496:	c7 01       	movw	r24, r14
    1498:	b6 01       	movw	r22, r12
    149a:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    149e:	18 16       	cp	r1, r24
    14a0:	3c f0       	brlt	.+14     	; 0x14b0 <calc_prescaler+0x3a2>
				*ptr_u16_prescale=P_1024;
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	94 e0       	ldi	r25, 0x04	; 4
    14a6:	f8 01       	movw	r30, r16
    14a8:	91 83       	std	Z+1, r25	; 0x01
    14aa:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	75 c2       	rjmp	.+1258   	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    14b0:	f8 01       	movw	r30, r16
    14b2:	11 82       	std	Z+1, r1	; 0x01
    14b4:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	70 c2       	rjmp	.+1248   	; 0x199a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	f8 01       	movw	r30, r16
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	69 c2       	rjmp	.+1234   	; 0x199a <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    14c8:	41 30       	cpi	r20, 0x01	; 1
    14ca:	09 f0       	breq	.+2      	; 0x14ce <calc_prescaler+0x3c0>
    14cc:	69 c0       	rjmp	.+210    	; 0x15a0 <calc_prescaler+0x492>
		{

			if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024) )
    14ce:	2f e6       	ldi	r18, 0x6F	; 111
    14d0:	32 e1       	ldi	r19, 0x12	; 18
    14d2:	43 e0       	ldi	r20, 0x03	; 3
    14d4:	56 e4       	ldi	r21, 0x46	; 70
    14d6:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    14da:	18 16       	cp	r1, r24
    14dc:	0c f4       	brge	.+2      	; 0x14e0 <calc_prescaler+0x3d2>
    14de:	59 c0       	rjmp	.+178    	; 0x1592 <calc_prescaler+0x484>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1))
    14e0:	2f e6       	ldi	r18, 0x6F	; 111
    14e2:	32 e1       	ldi	r19, 0x12	; 18
    14e4:	43 e0       	ldi	r20, 0x03	; 3
    14e6:	51 e4       	ldi	r21, 0x41	; 65
    14e8:	c7 01       	movw	r24, r14
    14ea:	b6 01       	movw	r22, r12
    14ec:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    14f0:	18 16       	cp	r1, r24
    14f2:	34 f0       	brlt	.+12     	; 0x1500 <calc_prescaler+0x3f2>
				*ptr_u16_prescale=P_1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	f8 01       	movw	r30, r16
    14fa:	91 83       	std	Z+1, r25	; 0x01
    14fc:	80 83       	st	Z, r24
    14fe:	4d c2       	rjmp	.+1178   	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
    1500:	2f e6       	ldi	r18, 0x6F	; 111
    1502:	32 e1       	ldi	r19, 0x12	; 18
    1504:	43 e8       	ldi	r20, 0x83	; 131
    1506:	52 e4       	ldi	r21, 0x42	; 66
    1508:	c7 01       	movw	r24, r14
    150a:	b6 01       	movw	r22, r12
    150c:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1510:	18 16       	cp	r1, r24
    1512:	3c f0       	brlt	.+14     	; 0x1522 <calc_prescaler+0x414>
				*ptr_u16_prescale=P_8;
    1514:	88 e0       	ldi	r24, 0x08	; 8
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	f8 01       	movw	r30, r16
    151a:	91 83       	std	Z+1, r25	; 0x01
    151c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	3c c2       	rjmp	.+1144   	; 0x199a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
    1522:	2f e6       	ldi	r18, 0x6F	; 111
    1524:	32 e1       	ldi	r19, 0x12	; 18
    1526:	43 e0       	ldi	r20, 0x03	; 3
    1528:	54 e4       	ldi	r21, 0x44	; 68
    152a:	c7 01       	movw	r24, r14
    152c:	b6 01       	movw	r22, r12
    152e:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1532:	18 16       	cp	r1, r24
    1534:	3c f0       	brlt	.+14     	; 0x1544 <calc_prescaler+0x436>
				*ptr_u16_prescale=P_64;
    1536:	80 e4       	ldi	r24, 0x40	; 64
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	f8 01       	movw	r30, r16
    153c:	91 83       	std	Z+1, r25	; 0x01
    153e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	2b c2       	rjmp	.+1110   	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
    1544:	2f e6       	ldi	r18, 0x6F	; 111
    1546:	32 e1       	ldi	r19, 0x12	; 18
    1548:	43 e0       	ldi	r20, 0x03	; 3
    154a:	55 e4       	ldi	r21, 0x45	; 69
    154c:	c7 01       	movw	r24, r14
    154e:	b6 01       	movw	r22, r12
    1550:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1554:	18 16       	cp	r1, r24
    1556:	3c f0       	brlt	.+14     	; 0x1566 <calc_prescaler+0x458>
				*ptr_u16_prescale=P_256;
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	91 e0       	ldi	r25, 0x01	; 1
    155c:	f8 01       	movw	r30, r16
    155e:	91 83       	std	Z+1, r25	; 0x01
    1560:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	1a c2       	rjmp	.+1076   	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024))
    1566:	2f e6       	ldi	r18, 0x6F	; 111
    1568:	32 e1       	ldi	r19, 0x12	; 18
    156a:	43 e0       	ldi	r20, 0x03	; 3
    156c:	56 e4       	ldi	r21, 0x46	; 70
    156e:	c7 01       	movw	r24, r14
    1570:	b6 01       	movw	r22, r12
    1572:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1576:	18 16       	cp	r1, r24
    1578:	3c f0       	brlt	.+14     	; 0x1588 <calc_prescaler+0x47a>
				*ptr_u16_prescale=P_1024;
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	94 e0       	ldi	r25, 0x04	; 4
    157e:	f8 01       	movw	r30, r16
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	09 c2       	rjmp	.+1042   	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale= P_0;
    1588:	f8 01       	movw	r30, r16
    158a:	11 82       	std	Z+1, r1	; 0x01
    158c:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	04 c2       	rjmp	.+1032   	; 0x199a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale= P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	f8 01       	movw	r30, r16
    1598:	91 83       	std	Z+1, r25	; 0x01
    159a:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	fd c1       	rjmp	.+1018   	; 0x199a <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    15a0:	42 30       	cpi	r20, 0x02	; 2
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <calc_prescaler+0x498>
    15a4:	f5 c1       	rjmp	.+1002   	; 0x1990 <calc_prescaler+0x882>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e0       	ldi	r20, 0x00	; 0
    15ac:	57 e4       	ldi	r21, 0x47	; 71
    15ae:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    15b2:	18 16       	cp	r1, r24
    15b4:	0c f4       	brge	.+2      	; 0x15b8 <calc_prescaler+0x4aa>
    15b6:	7b c0       	rjmp	.+246    	; 0x16ae <calc_prescaler+0x5a0>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
    15b8:	2f e6       	ldi	r18, 0x6F	; 111
    15ba:	32 e1       	ldi	r19, 0x12	; 18
    15bc:	43 e0       	ldi	r20, 0x03	; 3
    15be:	5d e3       	ldi	r21, 0x3D	; 61
    15c0:	c7 01       	movw	r24, r14
    15c2:	b6 01       	movw	r22, r12
    15c4:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    15c8:	18 16       	cp	r1, r24
    15ca:	34 f0       	brlt	.+12     	; 0x15d8 <calc_prescaler+0x4ca>
				*ptr_u16_prescale=P_1;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	f8 01       	movw	r30, r16
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	80 83       	st	Z, r24
    15d6:	e1 c1       	rjmp	.+962    	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
    15d8:	2f e6       	ldi	r18, 0x6F	; 111
    15da:	32 e1       	ldi	r19, 0x12	; 18
    15dc:	43 e8       	ldi	r20, 0x83	; 131
    15de:	5e e3       	ldi	r21, 0x3E	; 62
    15e0:	c7 01       	movw	r24, r14
    15e2:	b6 01       	movw	r22, r12
    15e4:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    15e8:	18 16       	cp	r1, r24
    15ea:	3c f0       	brlt	.+14     	; 0x15fa <calc_prescaler+0x4ec>
				*ptr_u16_prescale=P_8;
    15ec:	88 e0       	ldi	r24, 0x08	; 8
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	f8 01       	movw	r30, r16
    15f2:	91 83       	std	Z+1, r25	; 0x01
    15f4:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	d0 c1       	rjmp	.+928    	; 0x199a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
    15fa:	2f e6       	ldi	r18, 0x6F	; 111
    15fc:	32 e1       	ldi	r19, 0x12	; 18
    15fe:	43 e8       	ldi	r20, 0x83	; 131
    1600:	5f e3       	ldi	r21, 0x3F	; 63
    1602:	c7 01       	movw	r24, r14
    1604:	b6 01       	movw	r22, r12
    1606:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    160a:	18 16       	cp	r1, r24
    160c:	3c f0       	brlt	.+14     	; 0x161c <calc_prescaler+0x50e>
				*ptr_u16_prescale=P_32;
    160e:	80 e2       	ldi	r24, 0x20	; 32
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	f8 01       	movw	r30, r16
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	bf c1       	rjmp	.+894    	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
    161c:	2f e6       	ldi	r18, 0x6F	; 111
    161e:	32 e1       	ldi	r19, 0x12	; 18
    1620:	43 e0       	ldi	r20, 0x03	; 3
    1622:	50 e4       	ldi	r21, 0x40	; 64
    1624:	c7 01       	movw	r24, r14
    1626:	b6 01       	movw	r22, r12
    1628:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    162c:	18 16       	cp	r1, r24
    162e:	3c f0       	brlt	.+14     	; 0x163e <calc_prescaler+0x530>
				*ptr_u16_prescale=P_64;
    1630:	80 e4       	ldi	r24, 0x40	; 64
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	f8 01       	movw	r30, r16
    1636:	91 83       	std	Z+1, r25	; 0x01
    1638:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	ae c1       	rjmp	.+860    	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
    163e:	2f e6       	ldi	r18, 0x6F	; 111
    1640:	32 e1       	ldi	r19, 0x12	; 18
    1642:	43 e8       	ldi	r20, 0x83	; 131
    1644:	50 e4       	ldi	r21, 0x40	; 64
    1646:	c7 01       	movw	r24, r14
    1648:	b6 01       	movw	r22, r12
    164a:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    164e:	18 16       	cp	r1, r24
    1650:	3c f0       	brlt	.+14     	; 0x1660 <calc_prescaler+0x552>
				*ptr_u16_prescale=P_128;
    1652:	80 e8       	ldi	r24, 0x80	; 128
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	f8 01       	movw	r30, r16
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	9d c1       	rjmp	.+826    	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
    1660:	2f e6       	ldi	r18, 0x6F	; 111
    1662:	32 e1       	ldi	r19, 0x12	; 18
    1664:	43 e0       	ldi	r20, 0x03	; 3
    1666:	51 e4       	ldi	r21, 0x41	; 65
    1668:	c7 01       	movw	r24, r14
    166a:	b6 01       	movw	r22, r12
    166c:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1670:	18 16       	cp	r1, r24
    1672:	3c f0       	brlt	.+14     	; 0x1682 <calc_prescaler+0x574>
				*ptr_u16_prescale=P_256;
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	91 e0       	ldi	r25, 0x01	; 1
    1678:	f8 01       	movw	r30, r16
    167a:	91 83       	std	Z+1, r25	; 0x01
    167c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	8c c1       	rjmp	.+792    	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_MS(P_1024))
    1682:	2f e6       	ldi	r18, 0x6F	; 111
    1684:	32 e1       	ldi	r19, 0x12	; 18
    1686:	43 e0       	ldi	r20, 0x03	; 3
    1688:	52 e4       	ldi	r21, 0x42	; 66
    168a:	c7 01       	movw	r24, r14
    168c:	b6 01       	movw	r22, r12
    168e:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1692:	18 16       	cp	r1, r24
    1694:	3c f0       	brlt	.+14     	; 0x16a4 <calc_prescaler+0x596>
				*ptr_u16_prescale=P_1024;
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	94 e0       	ldi	r25, 0x04	; 4
    169a:	f8 01       	movw	r30, r16
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	7b c1       	rjmp	.+758    	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    16a4:	f8 01       	movw	r30, r16
    16a6:	11 82       	std	Z+1, r1	; 0x01
    16a8:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	76 c1       	rjmp	.+748    	; 0x199a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    16ae:	82 e0       	ldi	r24, 0x02	; 2
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	f8 01       	movw	r30, r16
    16b4:	91 83       	std	Z+1, r25	; 0x01
    16b6:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	6f c1       	rjmp	.+734    	; 0x199a <calc_prescaler+0x88c>
		{
			bo_return_value = FALSE;
			// do nothing
		}
	}
	else if (enu_time_unit == ENU_SECOND)
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	09 f0       	breq	.+2      	; 0x16c2 <calc_prescaler+0x5b4>
    16c0:	69 c1       	rjmp	.+722    	; 0x1994 <calc_prescaler+0x886>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    16c2:	41 11       	cpse	r20, r1
    16c4:	69 c0       	rjmp	.+210    	; 0x1798 <calc_prescaler+0x68a>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024) )
    16c6:	2d eb       	ldi	r18, 0xBD	; 189
    16c8:	37 e3       	ldi	r19, 0x37	; 55
    16ca:	46 e0       	ldi	r20, 0x06	; 6
    16cc:	5d e3       	ldi	r21, 0x3D	; 61
    16ce:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    16d2:	18 16       	cp	r1, r24
    16d4:	0c f4       	brge	.+2      	; 0x16d8 <calc_prescaler+0x5ca>
    16d6:	59 c0       	rjmp	.+178    	; 0x178a <calc_prescaler+0x67c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
    16d8:	2d eb       	ldi	r18, 0xBD	; 189
    16da:	37 e3       	ldi	r19, 0x37	; 55
    16dc:	46 e0       	ldi	r20, 0x06	; 6
    16de:	58 e3       	ldi	r21, 0x38	; 56
    16e0:	c7 01       	movw	r24, r14
    16e2:	b6 01       	movw	r22, r12
    16e4:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    16e8:	18 16       	cp	r1, r24
    16ea:	34 f0       	brlt	.+12     	; 0x16f8 <calc_prescaler+0x5ea>
				*ptr_u16_prescale=P_1;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	f8 01       	movw	r30, r16
    16f2:	91 83       	std	Z+1, r25	; 0x01
    16f4:	80 83       	st	Z, r24
    16f6:	51 c1       	rjmp	.+674    	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
    16f8:	2d eb       	ldi	r18, 0xBD	; 189
    16fa:	37 e3       	ldi	r19, 0x37	; 55
    16fc:	46 e8       	ldi	r20, 0x86	; 134
    16fe:	59 e3       	ldi	r21, 0x39	; 57
    1700:	c7 01       	movw	r24, r14
    1702:	b6 01       	movw	r22, r12
    1704:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1708:	18 16       	cp	r1, r24
    170a:	3c f0       	brlt	.+14     	; 0x171a <calc_prescaler+0x60c>
				*ptr_u16_prescale=P_8;
    170c:	88 e0       	ldi	r24, 0x08	; 8
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	f8 01       	movw	r30, r16
    1712:	91 83       	std	Z+1, r25	; 0x01
    1714:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	40 c1       	rjmp	.+640    	; 0x199a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
    171a:	2d eb       	ldi	r18, 0xBD	; 189
    171c:	37 e3       	ldi	r19, 0x37	; 55
    171e:	46 e0       	ldi	r20, 0x06	; 6
    1720:	5b e3       	ldi	r21, 0x3B	; 59
    1722:	c7 01       	movw	r24, r14
    1724:	b6 01       	movw	r22, r12
    1726:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    172a:	18 16       	cp	r1, r24
    172c:	3c f0       	brlt	.+14     	; 0x173c <calc_prescaler+0x62e>
				*ptr_u16_prescale=P_64;
    172e:	80 e4       	ldi	r24, 0x40	; 64
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	f8 01       	movw	r30, r16
    1734:	91 83       	std	Z+1, r25	; 0x01
    1736:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	2f c1       	rjmp	.+606    	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
    173c:	2d eb       	ldi	r18, 0xBD	; 189
    173e:	37 e3       	ldi	r19, 0x37	; 55
    1740:	46 e0       	ldi	r20, 0x06	; 6
    1742:	5c e3       	ldi	r21, 0x3C	; 60
    1744:	c7 01       	movw	r24, r14
    1746:	b6 01       	movw	r22, r12
    1748:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    174c:	18 16       	cp	r1, r24
    174e:	3c f0       	brlt	.+14     	; 0x175e <calc_prescaler+0x650>
				*ptr_u16_prescale=P_256;
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	f8 01       	movw	r30, r16
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	1e c1       	rjmp	.+572    	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024))
    175e:	2d eb       	ldi	r18, 0xBD	; 189
    1760:	37 e3       	ldi	r19, 0x37	; 55
    1762:	46 e0       	ldi	r20, 0x06	; 6
    1764:	5d e3       	ldi	r21, 0x3D	; 61
    1766:	c7 01       	movw	r24, r14
    1768:	b6 01       	movw	r22, r12
    176a:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    176e:	18 16       	cp	r1, r24
    1770:	3c f0       	brlt	.+14     	; 0x1780 <calc_prescaler+0x672>
				*ptr_u16_prescale=P_1024;
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	94 e0       	ldi	r25, 0x04	; 4
    1776:	f8 01       	movw	r30, r16
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	0d c1       	rjmp	.+538    	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1780:	f8 01       	movw	r30, r16
    1782:	11 82       	std	Z+1, r1	; 0x01
    1784:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	08 c1       	rjmp	.+528    	; 0x199a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    178a:	82 e0       	ldi	r24, 0x02	; 2
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	f8 01       	movw	r30, r16
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	01 c1       	rjmp	.+514    	; 0x199a <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    1798:	41 30       	cpi	r20, 0x01	; 1
    179a:	09 f0       	breq	.+2      	; 0x179e <calc_prescaler+0x690>
    179c:	69 c0       	rjmp	.+210    	; 0x1870 <calc_prescaler+0x762>
		{
			if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024) )
    179e:	2d eb       	ldi	r18, 0xBD	; 189
    17a0:	37 e3       	ldi	r19, 0x37	; 55
    17a2:	46 e0       	ldi	r20, 0x06	; 6
    17a4:	51 e4       	ldi	r21, 0x41	; 65
    17a6:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    17aa:	18 16       	cp	r1, r24
    17ac:	0c f4       	brge	.+2      	; 0x17b0 <calc_prescaler+0x6a2>
    17ae:	59 c0       	rjmp	.+178    	; 0x1862 <calc_prescaler+0x754>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1))
    17b0:	2d eb       	ldi	r18, 0xBD	; 189
    17b2:	37 e3       	ldi	r19, 0x37	; 55
    17b4:	46 e0       	ldi	r20, 0x06	; 6
    17b6:	5c e3       	ldi	r21, 0x3C	; 60
    17b8:	c7 01       	movw	r24, r14
    17ba:	b6 01       	movw	r22, r12
    17bc:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    17c0:	18 16       	cp	r1, r24
    17c2:	34 f0       	brlt	.+12     	; 0x17d0 <calc_prescaler+0x6c2>
				*ptr_u16_prescale=P_1;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	f8 01       	movw	r30, r16
    17ca:	91 83       	std	Z+1, r25	; 0x01
    17cc:	80 83       	st	Z, r24
    17ce:	e5 c0       	rjmp	.+458    	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
    17d0:	2d eb       	ldi	r18, 0xBD	; 189
    17d2:	37 e3       	ldi	r19, 0x37	; 55
    17d4:	46 e8       	ldi	r20, 0x86	; 134
    17d6:	5d e3       	ldi	r21, 0x3D	; 61
    17d8:	c7 01       	movw	r24, r14
    17da:	b6 01       	movw	r22, r12
    17dc:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    17e0:	18 16       	cp	r1, r24
    17e2:	3c f0       	brlt	.+14     	; 0x17f2 <calc_prescaler+0x6e4>
				*ptr_u16_prescale=P_8;
    17e4:	88 e0       	ldi	r24, 0x08	; 8
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	f8 01       	movw	r30, r16
    17ea:	91 83       	std	Z+1, r25	; 0x01
    17ec:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	d4 c0       	rjmp	.+424    	; 0x199a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
    17f2:	2d eb       	ldi	r18, 0xBD	; 189
    17f4:	37 e3       	ldi	r19, 0x37	; 55
    17f6:	46 e0       	ldi	r20, 0x06	; 6
    17f8:	5f e3       	ldi	r21, 0x3F	; 63
    17fa:	c7 01       	movw	r24, r14
    17fc:	b6 01       	movw	r22, r12
    17fe:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1802:	18 16       	cp	r1, r24
    1804:	3c f0       	brlt	.+14     	; 0x1814 <calc_prescaler+0x706>
				*ptr_u16_prescale=P_64;
    1806:	80 e4       	ldi	r24, 0x40	; 64
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	f8 01       	movw	r30, r16
    180c:	91 83       	std	Z+1, r25	; 0x01
    180e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	c3 c0       	rjmp	.+390    	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
    1814:	2d eb       	ldi	r18, 0xBD	; 189
    1816:	37 e3       	ldi	r19, 0x37	; 55
    1818:	46 e0       	ldi	r20, 0x06	; 6
    181a:	50 e4       	ldi	r21, 0x40	; 64
    181c:	c7 01       	movw	r24, r14
    181e:	b6 01       	movw	r22, r12
    1820:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1824:	18 16       	cp	r1, r24
    1826:	3c f0       	brlt	.+14     	; 0x1836 <calc_prescaler+0x728>
				*ptr_u16_prescale=P_256;
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	91 e0       	ldi	r25, 0x01	; 1
    182c:	f8 01       	movw	r30, r16
    182e:	91 83       	std	Z+1, r25	; 0x01
    1830:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	b2 c0       	rjmp	.+356    	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024))
    1836:	2d eb       	ldi	r18, 0xBD	; 189
    1838:	37 e3       	ldi	r19, 0x37	; 55
    183a:	46 e0       	ldi	r20, 0x06	; 6
    183c:	51 e4       	ldi	r21, 0x41	; 65
    183e:	c7 01       	movw	r24, r14
    1840:	b6 01       	movw	r22, r12
    1842:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1846:	18 16       	cp	r1, r24
    1848:	3c f0       	brlt	.+14     	; 0x1858 <calc_prescaler+0x74a>
				*ptr_u16_prescale=P_1024;
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	94 e0       	ldi	r25, 0x04	; 4
    184e:	f8 01       	movw	r30, r16
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	a1 c0       	rjmp	.+322    	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1858:	f8 01       	movw	r30, r16
    185a:	11 82       	std	Z+1, r1	; 0x01
    185c:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	9c c0       	rjmp	.+312    	; 0x199a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1862:	82 e0       	ldi	r24, 0x02	; 2
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	f8 01       	movw	r30, r16
    1868:	91 83       	std	Z+1, r25	; 0x01
    186a:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	95 c0       	rjmp	.+298    	; 0x199a <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    1870:	42 30       	cpi	r20, 0x02	; 2
    1872:	09 f0       	breq	.+2      	; 0x1876 <calc_prescaler+0x768>
    1874:	91 c0       	rjmp	.+290    	; 0x1998 <calc_prescaler+0x88a>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024) )
    1876:	2d eb       	ldi	r18, 0xBD	; 189
    1878:	37 e3       	ldi	r19, 0x37	; 55
    187a:	46 e0       	ldi	r20, 0x06	; 6
    187c:	5d e3       	ldi	r21, 0x3D	; 61
    187e:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1882:	18 16       	cp	r1, r24
    1884:	0c f4       	brge	.+2      	; 0x1888 <calc_prescaler+0x77a>
    1886:	7b c0       	rjmp	.+246    	; 0x197e <calc_prescaler+0x870>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
    1888:	2d eb       	ldi	r18, 0xBD	; 189
    188a:	37 e3       	ldi	r19, 0x37	; 55
    188c:	46 e0       	ldi	r20, 0x06	; 6
    188e:	58 e3       	ldi	r21, 0x38	; 56
    1890:	c7 01       	movw	r24, r14
    1892:	b6 01       	movw	r22, r12
    1894:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1898:	18 16       	cp	r1, r24
    189a:	34 f0       	brlt	.+12     	; 0x18a8 <calc_prescaler+0x79a>
				*ptr_u16_prescale=P_1;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	f8 01       	movw	r30, r16
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
    18a6:	79 c0       	rjmp	.+242    	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
    18a8:	2d eb       	ldi	r18, 0xBD	; 189
    18aa:	37 e3       	ldi	r19, 0x37	; 55
    18ac:	46 e8       	ldi	r20, 0x86	; 134
    18ae:	59 e3       	ldi	r21, 0x39	; 57
    18b0:	c7 01       	movw	r24, r14
    18b2:	b6 01       	movw	r22, r12
    18b4:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    18b8:	18 16       	cp	r1, r24
    18ba:	3c f0       	brlt	.+14     	; 0x18ca <calc_prescaler+0x7bc>
				*ptr_u16_prescale=P_8;
    18bc:	88 e0       	ldi	r24, 0x08	; 8
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	f8 01       	movw	r30, r16
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	68 c0       	rjmp	.+208    	; 0x199a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
    18ca:	2d eb       	ldi	r18, 0xBD	; 189
    18cc:	37 e3       	ldi	r19, 0x37	; 55
    18ce:	46 e8       	ldi	r20, 0x86	; 134
    18d0:	5a e3       	ldi	r21, 0x3A	; 58
    18d2:	c7 01       	movw	r24, r14
    18d4:	b6 01       	movw	r22, r12
    18d6:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    18da:	18 16       	cp	r1, r24
    18dc:	3c f0       	brlt	.+14     	; 0x18ec <calc_prescaler+0x7de>
				*ptr_u16_prescale=P_32;
    18de:	80 e2       	ldi	r24, 0x20	; 32
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	f8 01       	movw	r30, r16
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	57 c0       	rjmp	.+174    	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
    18ec:	2d eb       	ldi	r18, 0xBD	; 189
    18ee:	37 e3       	ldi	r19, 0x37	; 55
    18f0:	46 e0       	ldi	r20, 0x06	; 6
    18f2:	5b e3       	ldi	r21, 0x3B	; 59
    18f4:	c7 01       	movw	r24, r14
    18f6:	b6 01       	movw	r22, r12
    18f8:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    18fc:	18 16       	cp	r1, r24
    18fe:	3c f0       	brlt	.+14     	; 0x190e <calc_prescaler+0x800>
				*ptr_u16_prescale=P_64;
    1900:	80 e4       	ldi	r24, 0x40	; 64
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	f8 01       	movw	r30, r16
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	46 c0       	rjmp	.+140    	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
    190e:	2d eb       	ldi	r18, 0xBD	; 189
    1910:	37 e3       	ldi	r19, 0x37	; 55
    1912:	46 e8       	ldi	r20, 0x86	; 134
    1914:	5b e3       	ldi	r21, 0x3B	; 59
    1916:	c7 01       	movw	r24, r14
    1918:	b6 01       	movw	r22, r12
    191a:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    191e:	18 16       	cp	r1, r24
    1920:	3c f0       	brlt	.+14     	; 0x1930 <calc_prescaler+0x822>
				*ptr_u16_prescale=P_128;
    1922:	80 e8       	ldi	r24, 0x80	; 128
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	f8 01       	movw	r30, r16
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	35 c0       	rjmp	.+106    	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
    1930:	2d eb       	ldi	r18, 0xBD	; 189
    1932:	37 e3       	ldi	r19, 0x37	; 55
    1934:	46 e0       	ldi	r20, 0x06	; 6
    1936:	5c e3       	ldi	r21, 0x3C	; 60
    1938:	c7 01       	movw	r24, r14
    193a:	b6 01       	movw	r22, r12
    193c:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1940:	18 16       	cp	r1, r24
    1942:	3c f0       	brlt	.+14     	; 0x1952 <calc_prescaler+0x844>
				*ptr_u16_prescale=P_256;
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	91 e0       	ldi	r25, 0x01	; 1
    1948:	f8 01       	movw	r30, r16
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	24 c0       	rjmp	.+72     	; 0x199a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_SEC(P_1024))
    1952:	2d eb       	ldi	r18, 0xBD	; 189
    1954:	37 e3       	ldi	r19, 0x37	; 55
    1956:	46 e0       	ldi	r20, 0x06	; 6
    1958:	5d e3       	ldi	r21, 0x3D	; 61
    195a:	c7 01       	movw	r24, r14
    195c:	b6 01       	movw	r22, r12
    195e:	0e 94 94 12 	call	0x2528	; 0x2528 <__cmpsf2>
    1962:	18 16       	cp	r1, r24
    1964:	3c f0       	brlt	.+14     	; 0x1974 <calc_prescaler+0x866>
				*ptr_u16_prescale=P_1024;
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	94 e0       	ldi	r25, 0x04	; 4
    196a:	f8 01       	movw	r30, r16
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	13 c0       	rjmp	.+38     	; 0x199a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1974:	f8 01       	movw	r30, r16
    1976:	11 82       	std	Z+1, r1	; 0x01
    1978:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	0e c0       	rjmp	.+28     	; 0x199a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    197e:	82 e0       	ldi	r24, 0x02	; 2
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	f8 01       	movw	r30, r16
    1984:	91 83       	std	Z+1, r25	; 0x01
    1986:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	07 c0       	rjmp	.+14     	; 0x199a <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	05 c0       	rjmp	.+10     	; 0x199a <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	03 c0       	rjmp	.+6      	; 0x199a <calc_prescaler+0x88c>
			// do nothing
		}
	}
	else
	{
		bo_return_value = FALSE;
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	01 c0       	rjmp	.+2      	; 0x199a <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    1998:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		bo_return_value = FALSE;
	}
	return bo_return_value;
}
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	ff 90       	pop	r15
    19a0:	ef 90       	pop	r14
    19a2:	df 90       	pop	r13
    19a4:	cf 90       	pop	r12
    19a6:	08 95       	ret

000019a8 <calc_initialValue>:

/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
    19a8:	ef 92       	push	r14
    19aa:	ff 92       	push	r15
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
	BOOLEAN bo_return_value = TRUE;
	if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    19b0:	81 11       	cpse	r24, r1
    19b2:	8a c1       	rjmp	.+788    	; 0x1cc8 <calc_initialValue+0x320>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    19b4:	61 11       	cpse	r22, r1
    19b6:	7c c0       	rjmp	.+248    	; 0x1ab0 <calc_initialValue+0x108>
		{
			switch(prescaler)
    19b8:	40 34       	cpi	r20, 0x40	; 64
    19ba:	51 05       	cpc	r21, r1
    19bc:	a9 f1       	breq	.+106    	; 0x1a28 <calc_initialValue+0x80>
    19be:	38 f4       	brcc	.+14     	; 0x19ce <calc_initialValue+0x26>
    19c0:	41 30       	cpi	r20, 0x01	; 1
    19c2:	51 05       	cpc	r21, r1
    19c4:	69 f0       	breq	.+26     	; 0x19e0 <calc_initialValue+0x38>
    19c6:	48 30       	cpi	r20, 0x08	; 8
    19c8:	51 05       	cpc	r21, r1
    19ca:	f9 f0       	breq	.+62     	; 0x1a0a <calc_initialValue+0x62>
    19cc:	6c c0       	rjmp	.+216    	; 0x1aa6 <calc_initialValue+0xfe>
    19ce:	41 15       	cp	r20, r1
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	58 07       	cpc	r21, r24
    19d4:	f1 f1       	breq	.+124    	; 0x1a52 <calc_initialValue+0xaa>
    19d6:	41 15       	cp	r20, r1
    19d8:	54 40       	sbci	r21, 0x04	; 4
    19da:	09 f4       	brne	.+2      	; 0x19de <calc_initialValue+0x36>
    19dc:	4f c0       	rjmp	.+158    	; 0x1a7c <calc_initialValue+0xd4>
    19de:	63 c0       	rjmp	.+198    	; 0x1aa6 <calc_initialValue+0xfe>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    19e0:	a9 01       	movw	r20, r18
    19e2:	98 01       	movw	r18, r16
    19e4:	60 e0       	ldi	r22, 0x00	; 0
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	92 e4       	ldi	r25, 0x42	; 66
    19ec:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
    19fc:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1a00:	f7 01       	movw	r30, r14
    1a02:	71 83       	std	Z+1, r23	; 0x01
    1a04:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    1a08:	1d c5       	rjmp	.+2618   	; 0x2444 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    1a0a:	a9 01       	movw	r20, r18
    1a0c:	98 01       	movw	r18, r16
    1a0e:	60 e0       	ldi	r22, 0x00	; 0
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	80 e8       	ldi	r24, 0x80	; 128
    1a14:	93 e4       	ldi	r25, 0x43	; 67
    1a16:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1a1a:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1a1e:	f7 01       	movw	r30, r14
    1a20:	71 83       	std	Z+1, r23	; 0x01
    1a22:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    1a26:	0e c5       	rjmp	.+2588   	; 0x2444 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    1a28:	a9 01       	movw	r20, r18
    1a2a:	98 01       	movw	r18, r16
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	95 e4       	ldi	r25, 0x45	; 69
    1a34:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	5e e3       	ldi	r21, 0x3E	; 62
    1a40:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
    1a44:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1a48:	f7 01       	movw	r30, r14
    1a4a:	71 83       	std	Z+1, r23	; 0x01
    1a4c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    1a50:	f9 c4       	rjmp	.+2546   	; 0x2444 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    1a52:	a9 01       	movw	r20, r18
    1a54:	98 01       	movw	r18, r16
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	96 e4       	ldi	r25, 0x46	; 70
    1a5e:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	5d e3       	ldi	r21, 0x3D	; 61
    1a6a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
    1a6e:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1a72:	f7 01       	movw	r30, r14
    1a74:	71 83       	std	Z+1, r23	; 0x01
    1a76:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    1a7a:	e4 c4       	rjmp	.+2504   	; 0x2444 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    1a7c:	a9 01       	movw	r20, r18
    1a7e:	98 01       	movw	r18, r16
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	97 e4       	ldi	r25, 0x47	; 71
    1a88:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	5c e3       	ldi	r21, 0x3C	; 60
    1a94:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
    1a98:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1a9c:	f7 01       	movw	r30, r14
    1a9e:	71 83       	std	Z+1, r23	; 0x01
    1aa0:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    1aa4:	cf c4       	rjmp	.+2462   	; 0x2444 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1aa6:	f7 01       	movw	r30, r14
    1aa8:	11 82       	std	Z+1, r1	; 0x01
    1aaa:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1aac:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1aae:	ca c4       	rjmp	.+2452   	; 0x2444 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    1ab0:	61 30       	cpi	r22, 0x01	; 1
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <calc_initialValue+0x10e>
    1ab4:	83 c0       	rjmp	.+262    	; 0x1bbc <calc_initialValue+0x214>
		{
			switch(prescaler)
    1ab6:	40 34       	cpi	r20, 0x40	; 64
    1ab8:	51 05       	cpc	r21, r1
    1aba:	e1 f1       	breq	.+120    	; 0x1b34 <calc_initialValue+0x18c>
    1abc:	38 f4       	brcc	.+14     	; 0x1acc <calc_initialValue+0x124>
    1abe:	41 30       	cpi	r20, 0x01	; 1
    1ac0:	51 05       	cpc	r21, r1
    1ac2:	71 f0       	breq	.+28     	; 0x1ae0 <calc_initialValue+0x138>
    1ac4:	48 30       	cpi	r20, 0x08	; 8
    1ac6:	51 05       	cpc	r21, r1
    1ac8:	01 f1       	breq	.+64     	; 0x1b0a <calc_initialValue+0x162>
    1aca:	73 c0       	rjmp	.+230    	; 0x1bb2 <calc_initialValue+0x20a>
    1acc:	41 15       	cp	r20, r1
    1ace:	f1 e0       	ldi	r31, 0x01	; 1
    1ad0:	5f 07       	cpc	r21, r31
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <calc_initialValue+0x12e>
    1ad4:	44 c0       	rjmp	.+136    	; 0x1b5e <calc_initialValue+0x1b6>
    1ad6:	41 15       	cp	r20, r1
    1ad8:	54 40       	sbci	r21, 0x04	; 4
    1ada:	09 f4       	brne	.+2      	; 0x1ade <calc_initialValue+0x136>
    1adc:	55 c0       	rjmp	.+170    	; 0x1b88 <calc_initialValue+0x1e0>
    1ade:	69 c0       	rjmp	.+210    	; 0x1bb2 <calc_initialValue+0x20a>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    1ae0:	a9 01       	movw	r20, r18
    1ae2:	98 01       	movw	r18, r16
    1ae4:	6f e6       	ldi	r22, 0x6F	; 111
    1ae6:	72 e1       	ldi	r23, 0x12	; 18
    1ae8:	83 e0       	ldi	r24, 0x03	; 3
    1aea:	9d e3       	ldi	r25, 0x3D	; 61
    1aec:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1af0:	2f e6       	ldi	r18, 0x6F	; 111
    1af2:	32 e1       	ldi	r19, 0x12	; 18
    1af4:	43 e0       	ldi	r20, 0x03	; 3
    1af6:	59 e3       	ldi	r21, 0x39	; 57
    1af8:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1afc:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1b00:	f7 01       	movw	r30, r14
    1b02:	71 83       	std	Z+1, r23	; 0x01
    1b04:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    1b08:	9d c4       	rjmp	.+2362   	; 0x2444 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    1b0a:	a9 01       	movw	r20, r18
    1b0c:	98 01       	movw	r18, r16
    1b0e:	6f e6       	ldi	r22, 0x6F	; 111
    1b10:	72 e1       	ldi	r23, 0x12	; 18
    1b12:	83 e8       	ldi	r24, 0x83	; 131
    1b14:	9e e3       	ldi	r25, 0x3E	; 62
    1b16:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1b1a:	2f e6       	ldi	r18, 0x6F	; 111
    1b1c:	32 e1       	ldi	r19, 0x12	; 18
    1b1e:	43 e8       	ldi	r20, 0x83	; 131
    1b20:	5a e3       	ldi	r21, 0x3A	; 58
    1b22:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1b26:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1b2a:	f7 01       	movw	r30, r14
    1b2c:	71 83       	std	Z+1, r23	; 0x01
    1b2e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    1b32:	88 c4       	rjmp	.+2320   	; 0x2444 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    1b34:	a9 01       	movw	r20, r18
    1b36:	98 01       	movw	r18, r16
    1b38:	6f e6       	ldi	r22, 0x6F	; 111
    1b3a:	72 e1       	ldi	r23, 0x12	; 18
    1b3c:	83 e0       	ldi	r24, 0x03	; 3
    1b3e:	90 e4       	ldi	r25, 0x40	; 64
    1b40:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1b44:	2f e6       	ldi	r18, 0x6F	; 111
    1b46:	32 e1       	ldi	r19, 0x12	; 18
    1b48:	43 e0       	ldi	r20, 0x03	; 3
    1b4a:	5c e3       	ldi	r21, 0x3C	; 60
    1b4c:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1b50:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1b54:	f7 01       	movw	r30, r14
    1b56:	71 83       	std	Z+1, r23	; 0x01
    1b58:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    1b5c:	73 c4       	rjmp	.+2278   	; 0x2444 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    1b5e:	a9 01       	movw	r20, r18
    1b60:	98 01       	movw	r18, r16
    1b62:	6f e6       	ldi	r22, 0x6F	; 111
    1b64:	72 e1       	ldi	r23, 0x12	; 18
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	91 e4       	ldi	r25, 0x41	; 65
    1b6a:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1b6e:	2f e6       	ldi	r18, 0x6F	; 111
    1b70:	32 e1       	ldi	r19, 0x12	; 18
    1b72:	43 e0       	ldi	r20, 0x03	; 3
    1b74:	5d e3       	ldi	r21, 0x3D	; 61
    1b76:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1b7a:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1b7e:	f7 01       	movw	r30, r14
    1b80:	71 83       	std	Z+1, r23	; 0x01
    1b82:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    1b86:	5e c4       	rjmp	.+2236   	; 0x2444 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    1b88:	a9 01       	movw	r20, r18
    1b8a:	98 01       	movw	r18, r16
    1b8c:	6f e6       	ldi	r22, 0x6F	; 111
    1b8e:	72 e1       	ldi	r23, 0x12	; 18
    1b90:	83 e0       	ldi	r24, 0x03	; 3
    1b92:	92 e4       	ldi	r25, 0x42	; 66
    1b94:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1b98:	2f e6       	ldi	r18, 0x6F	; 111
    1b9a:	32 e1       	ldi	r19, 0x12	; 18
    1b9c:	43 e0       	ldi	r20, 0x03	; 3
    1b9e:	5e e3       	ldi	r21, 0x3E	; 62
    1ba0:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1ba4:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1ba8:	f7 01       	movw	r30, r14
    1baa:	71 83       	std	Z+1, r23	; 0x01
    1bac:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    1bb0:	49 c4       	rjmp	.+2194   	; 0x2444 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1bb2:	f7 01       	movw	r30, r14
    1bb4:	11 82       	std	Z+1, r1	; 0x01
    1bb6:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1bba:	44 c4       	rjmp	.+2184   	; 0x2444 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    1bbc:	62 30       	cpi	r22, 0x02	; 2
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <calc_initialValue+0x21a>
    1bc0:	3a c4       	rjmp	.+2164   	; 0x2436 <calc_initialValue+0xa8e>
		{
			switch(prescaler)
    1bc2:	40 34       	cpi	r20, 0x40	; 64
    1bc4:	51 05       	cpc	r21, r1
    1bc6:	e1 f1       	breq	.+120    	; 0x1c40 <calc_initialValue+0x298>
    1bc8:	38 f4       	brcc	.+14     	; 0x1bd8 <calc_initialValue+0x230>
    1bca:	41 30       	cpi	r20, 0x01	; 1
    1bcc:	51 05       	cpc	r21, r1
    1bce:	71 f0       	breq	.+28     	; 0x1bec <calc_initialValue+0x244>
    1bd0:	48 30       	cpi	r20, 0x08	; 8
    1bd2:	51 05       	cpc	r21, r1
    1bd4:	01 f1       	breq	.+64     	; 0x1c16 <calc_initialValue+0x26e>
    1bd6:	73 c0       	rjmp	.+230    	; 0x1cbe <calc_initialValue+0x316>
    1bd8:	41 15       	cp	r20, r1
    1bda:	f1 e0       	ldi	r31, 0x01	; 1
    1bdc:	5f 07       	cpc	r21, r31
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <calc_initialValue+0x23a>
    1be0:	44 c0       	rjmp	.+136    	; 0x1c6a <calc_initialValue+0x2c2>
    1be2:	41 15       	cp	r20, r1
    1be4:	54 40       	sbci	r21, 0x04	; 4
    1be6:	09 f4       	brne	.+2      	; 0x1bea <calc_initialValue+0x242>
    1be8:	55 c0       	rjmp	.+170    	; 0x1c94 <calc_initialValue+0x2ec>
    1bea:	69 c0       	rjmp	.+210    	; 0x1cbe <calc_initialValue+0x316>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    1bec:	a9 01       	movw	r20, r18
    1bee:	98 01       	movw	r18, r16
    1bf0:	6d eb       	ldi	r22, 0xBD	; 189
    1bf2:	77 e3       	ldi	r23, 0x37	; 55
    1bf4:	86 e0       	ldi	r24, 0x06	; 6
    1bf6:	98 e3       	ldi	r25, 0x38	; 56
    1bf8:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1bfc:	2d eb       	ldi	r18, 0xBD	; 189
    1bfe:	37 e3       	ldi	r19, 0x37	; 55
    1c00:	46 e0       	ldi	r20, 0x06	; 6
    1c02:	54 e3       	ldi	r21, 0x34	; 52
    1c04:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1c08:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1c0c:	f7 01       	movw	r30, r14
    1c0e:	71 83       	std	Z+1, r23	; 0x01
    1c10:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    1c14:	17 c4       	rjmp	.+2094   	; 0x2444 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    1c16:	a9 01       	movw	r20, r18
    1c18:	98 01       	movw	r18, r16
    1c1a:	6d eb       	ldi	r22, 0xBD	; 189
    1c1c:	77 e3       	ldi	r23, 0x37	; 55
    1c1e:	86 e8       	ldi	r24, 0x86	; 134
    1c20:	99 e3       	ldi	r25, 0x39	; 57
    1c22:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1c26:	2d eb       	ldi	r18, 0xBD	; 189
    1c28:	37 e3       	ldi	r19, 0x37	; 55
    1c2a:	46 e8       	ldi	r20, 0x86	; 134
    1c2c:	55 e3       	ldi	r21, 0x35	; 53
    1c2e:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1c32:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1c36:	f7 01       	movw	r30, r14
    1c38:	71 83       	std	Z+1, r23	; 0x01
    1c3a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    1c3e:	02 c4       	rjmp	.+2052   	; 0x2444 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    1c40:	a9 01       	movw	r20, r18
    1c42:	98 01       	movw	r18, r16
    1c44:	6d eb       	ldi	r22, 0xBD	; 189
    1c46:	77 e3       	ldi	r23, 0x37	; 55
    1c48:	86 e0       	ldi	r24, 0x06	; 6
    1c4a:	9b e3       	ldi	r25, 0x3B	; 59
    1c4c:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1c50:	2d eb       	ldi	r18, 0xBD	; 189
    1c52:	37 e3       	ldi	r19, 0x37	; 55
    1c54:	46 e0       	ldi	r20, 0x06	; 6
    1c56:	57 e3       	ldi	r21, 0x37	; 55
    1c58:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1c5c:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1c60:	f7 01       	movw	r30, r14
    1c62:	71 83       	std	Z+1, r23	; 0x01
    1c64:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    1c68:	ed c3       	rjmp	.+2010   	; 0x2444 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    1c6a:	a9 01       	movw	r20, r18
    1c6c:	98 01       	movw	r18, r16
    1c6e:	6d eb       	ldi	r22, 0xBD	; 189
    1c70:	77 e3       	ldi	r23, 0x37	; 55
    1c72:	86 e0       	ldi	r24, 0x06	; 6
    1c74:	9c e3       	ldi	r25, 0x3C	; 60
    1c76:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1c7a:	2d eb       	ldi	r18, 0xBD	; 189
    1c7c:	37 e3       	ldi	r19, 0x37	; 55
    1c7e:	46 e0       	ldi	r20, 0x06	; 6
    1c80:	58 e3       	ldi	r21, 0x38	; 56
    1c82:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1c86:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1c8a:	f7 01       	movw	r30, r14
    1c8c:	71 83       	std	Z+1, r23	; 0x01
    1c8e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    1c92:	d8 c3       	rjmp	.+1968   	; 0x2444 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    1c94:	a9 01       	movw	r20, r18
    1c96:	98 01       	movw	r18, r16
    1c98:	6d eb       	ldi	r22, 0xBD	; 189
    1c9a:	77 e3       	ldi	r23, 0x37	; 55
    1c9c:	86 e0       	ldi	r24, 0x06	; 6
    1c9e:	9d e3       	ldi	r25, 0x3D	; 61
    1ca0:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1ca4:	2d eb       	ldi	r18, 0xBD	; 189
    1ca6:	37 e3       	ldi	r19, 0x37	; 55
    1ca8:	46 e0       	ldi	r20, 0x06	; 6
    1caa:	59 e3       	ldi	r21, 0x39	; 57
    1cac:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1cb0:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1cb4:	f7 01       	movw	r30, r14
    1cb6:	71 83       	std	Z+1, r23	; 0x01
    1cb8:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    1cbc:	c3 c3       	rjmp	.+1926   	; 0x2444 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1cbe:	f7 01       	movw	r30, r14
    1cc0:	11 82       	std	Z+1, r1	; 0x01
    1cc2:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1cc6:	be c3       	rjmp	.+1916   	; 0x2444 <calc_initialValue+0xa9c>
		else
		{
			// do nothing
		}
	}
	else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	09 f0       	breq	.+2      	; 0x1cce <calc_initialValue+0x326>
    1ccc:	8a c1       	rjmp	.+788    	; 0x1fe2 <calc_initialValue+0x63a>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    1cce:	61 11       	cpse	r22, r1
    1cd0:	7c c0       	rjmp	.+248    	; 0x1dca <calc_initialValue+0x422>
		{
			switch(prescaler)
    1cd2:	40 34       	cpi	r20, 0x40	; 64
    1cd4:	51 05       	cpc	r21, r1
    1cd6:	a9 f1       	breq	.+106    	; 0x1d42 <calc_initialValue+0x39a>
    1cd8:	38 f4       	brcc	.+14     	; 0x1ce8 <calc_initialValue+0x340>
    1cda:	41 30       	cpi	r20, 0x01	; 1
    1cdc:	51 05       	cpc	r21, r1
    1cde:	69 f0       	breq	.+26     	; 0x1cfa <calc_initialValue+0x352>
    1ce0:	48 30       	cpi	r20, 0x08	; 8
    1ce2:	51 05       	cpc	r21, r1
    1ce4:	f9 f0       	breq	.+62     	; 0x1d24 <calc_initialValue+0x37c>
    1ce6:	6c c0       	rjmp	.+216    	; 0x1dc0 <calc_initialValue+0x418>
    1ce8:	41 15       	cp	r20, r1
    1cea:	f1 e0       	ldi	r31, 0x01	; 1
    1cec:	5f 07       	cpc	r21, r31
    1cee:	f1 f1       	breq	.+124    	; 0x1d6c <calc_initialValue+0x3c4>
    1cf0:	41 15       	cp	r20, r1
    1cf2:	54 40       	sbci	r21, 0x04	; 4
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <calc_initialValue+0x350>
    1cf6:	4f c0       	rjmp	.+158    	; 0x1d96 <calc_initialValue+0x3ee>
    1cf8:	63 c0       	rjmp	.+198    	; 0x1dc0 <calc_initialValue+0x418>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    1cfa:	a9 01       	movw	r20, r18
    1cfc:	98 01       	movw	r18, r16
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	96 e4       	ldi	r25, 0x46	; 70
    1d06:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	51 e4       	ldi	r21, 0x41	; 65
    1d12:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
    1d16:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1d1a:	f7 01       	movw	r30, r14
    1d1c:	71 83       	std	Z+1, r23	; 0x01
    1d1e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    1d22:	90 c3       	rjmp	.+1824   	; 0x2444 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    1d24:	a9 01       	movw	r20, r18
    1d26:	98 01       	movw	r18, r16
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	80 e8       	ldi	r24, 0x80	; 128
    1d2e:	97 e4       	ldi	r25, 0x47	; 71
    1d30:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1d34:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1d38:	f7 01       	movw	r30, r14
    1d3a:	71 83       	std	Z+1, r23	; 0x01
    1d3c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    1d40:	81 c3       	rjmp	.+1794   	; 0x2444 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    1d42:	a9 01       	movw	r20, r18
    1d44:	98 01       	movw	r18, r16
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	70 e0       	ldi	r23, 0x00	; 0
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	99 e4       	ldi	r25, 0x49	; 73
    1d4e:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	5e e3       	ldi	r21, 0x3E	; 62
    1d5a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
    1d5e:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1d62:	f7 01       	movw	r30, r14
    1d64:	71 83       	std	Z+1, r23	; 0x01
    1d66:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    1d6a:	6c c3       	rjmp	.+1752   	; 0x2444 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    1d6c:	a9 01       	movw	r20, r18
    1d6e:	98 01       	movw	r18, r16
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	9a e4       	ldi	r25, 0x4A	; 74
    1d78:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	5d e3       	ldi	r21, 0x3D	; 61
    1d84:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
    1d88:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1d8c:	f7 01       	movw	r30, r14
    1d8e:	71 83       	std	Z+1, r23	; 0x01
    1d90:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    1d94:	57 c3       	rjmp	.+1710   	; 0x2444 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    1d96:	a9 01       	movw	r20, r18
    1d98:	98 01       	movw	r18, r16
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	70 e0       	ldi	r23, 0x00	; 0
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	9b e4       	ldi	r25, 0x4B	; 75
    1da2:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	5c e3       	ldi	r21, 0x3C	; 60
    1dae:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
    1db2:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1db6:	f7 01       	movw	r30, r14
    1db8:	71 83       	std	Z+1, r23	; 0x01
    1dba:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    1dbe:	42 c3       	rjmp	.+1668   	; 0x2444 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1dc0:	f7 01       	movw	r30, r14
    1dc2:	11 82       	std	Z+1, r1	; 0x01
    1dc4:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1dc8:	3d c3       	rjmp	.+1658   	; 0x2444 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    1dca:	61 30       	cpi	r22, 0x01	; 1
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <calc_initialValue+0x428>
    1dce:	83 c0       	rjmp	.+262    	; 0x1ed6 <calc_initialValue+0x52e>
		{
			switch(prescaler)
    1dd0:	40 34       	cpi	r20, 0x40	; 64
    1dd2:	51 05       	cpc	r21, r1
    1dd4:	e1 f1       	breq	.+120    	; 0x1e4e <calc_initialValue+0x4a6>
    1dd6:	38 f4       	brcc	.+14     	; 0x1de6 <calc_initialValue+0x43e>
    1dd8:	41 30       	cpi	r20, 0x01	; 1
    1dda:	51 05       	cpc	r21, r1
    1ddc:	71 f0       	breq	.+28     	; 0x1dfa <calc_initialValue+0x452>
    1dde:	48 30       	cpi	r20, 0x08	; 8
    1de0:	51 05       	cpc	r21, r1
    1de2:	01 f1       	breq	.+64     	; 0x1e24 <calc_initialValue+0x47c>
    1de4:	73 c0       	rjmp	.+230    	; 0x1ecc <calc_initialValue+0x524>
    1de6:	41 15       	cp	r20, r1
    1de8:	f1 e0       	ldi	r31, 0x01	; 1
    1dea:	5f 07       	cpc	r21, r31
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <calc_initialValue+0x448>
    1dee:	44 c0       	rjmp	.+136    	; 0x1e78 <calc_initialValue+0x4d0>
    1df0:	41 15       	cp	r20, r1
    1df2:	54 40       	sbci	r21, 0x04	; 4
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <calc_initialValue+0x450>
    1df6:	55 c0       	rjmp	.+170    	; 0x1ea2 <calc_initialValue+0x4fa>
    1df8:	69 c0       	rjmp	.+210    	; 0x1ecc <calc_initialValue+0x524>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    1dfa:	a9 01       	movw	r20, r18
    1dfc:	98 01       	movw	r18, r16
    1dfe:	6f e6       	ldi	r22, 0x6F	; 111
    1e00:	72 e1       	ldi	r23, 0x12	; 18
    1e02:	83 e0       	ldi	r24, 0x03	; 3
    1e04:	91 e4       	ldi	r25, 0x41	; 65
    1e06:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1e0a:	2f e6       	ldi	r18, 0x6F	; 111
    1e0c:	32 e1       	ldi	r19, 0x12	; 18
    1e0e:	43 e0       	ldi	r20, 0x03	; 3
    1e10:	59 e3       	ldi	r21, 0x39	; 57
    1e12:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1e16:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1e1a:	f7 01       	movw	r30, r14
    1e1c:	71 83       	std	Z+1, r23	; 0x01
    1e1e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    1e22:	10 c3       	rjmp	.+1568   	; 0x2444 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    1e24:	a9 01       	movw	r20, r18
    1e26:	98 01       	movw	r18, r16
    1e28:	6f e6       	ldi	r22, 0x6F	; 111
    1e2a:	72 e1       	ldi	r23, 0x12	; 18
    1e2c:	83 e8       	ldi	r24, 0x83	; 131
    1e2e:	92 e4       	ldi	r25, 0x42	; 66
    1e30:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1e34:	2f e6       	ldi	r18, 0x6F	; 111
    1e36:	32 e1       	ldi	r19, 0x12	; 18
    1e38:	43 e8       	ldi	r20, 0x83	; 131
    1e3a:	5a e3       	ldi	r21, 0x3A	; 58
    1e3c:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1e40:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1e44:	f7 01       	movw	r30, r14
    1e46:	71 83       	std	Z+1, r23	; 0x01
    1e48:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    1e4c:	fb c2       	rjmp	.+1526   	; 0x2444 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    1e4e:	a9 01       	movw	r20, r18
    1e50:	98 01       	movw	r18, r16
    1e52:	6f e6       	ldi	r22, 0x6F	; 111
    1e54:	72 e1       	ldi	r23, 0x12	; 18
    1e56:	83 e0       	ldi	r24, 0x03	; 3
    1e58:	94 e4       	ldi	r25, 0x44	; 68
    1e5a:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1e5e:	2f e6       	ldi	r18, 0x6F	; 111
    1e60:	32 e1       	ldi	r19, 0x12	; 18
    1e62:	43 e0       	ldi	r20, 0x03	; 3
    1e64:	5c e3       	ldi	r21, 0x3C	; 60
    1e66:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1e6a:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1e6e:	f7 01       	movw	r30, r14
    1e70:	71 83       	std	Z+1, r23	; 0x01
    1e72:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    1e76:	e6 c2       	rjmp	.+1484   	; 0x2444 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    1e78:	a9 01       	movw	r20, r18
    1e7a:	98 01       	movw	r18, r16
    1e7c:	6f e6       	ldi	r22, 0x6F	; 111
    1e7e:	72 e1       	ldi	r23, 0x12	; 18
    1e80:	83 e0       	ldi	r24, 0x03	; 3
    1e82:	95 e4       	ldi	r25, 0x45	; 69
    1e84:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1e88:	2f e6       	ldi	r18, 0x6F	; 111
    1e8a:	32 e1       	ldi	r19, 0x12	; 18
    1e8c:	43 e0       	ldi	r20, 0x03	; 3
    1e8e:	5d e3       	ldi	r21, 0x3D	; 61
    1e90:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1e94:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1e98:	f7 01       	movw	r30, r14
    1e9a:	71 83       	std	Z+1, r23	; 0x01
    1e9c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    1ea0:	d1 c2       	rjmp	.+1442   	; 0x2444 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    1ea2:	a9 01       	movw	r20, r18
    1ea4:	98 01       	movw	r18, r16
    1ea6:	6f e6       	ldi	r22, 0x6F	; 111
    1ea8:	72 e1       	ldi	r23, 0x12	; 18
    1eaa:	83 e0       	ldi	r24, 0x03	; 3
    1eac:	96 e4       	ldi	r25, 0x46	; 70
    1eae:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1eb2:	2f e6       	ldi	r18, 0x6F	; 111
    1eb4:	32 e1       	ldi	r19, 0x12	; 18
    1eb6:	43 e0       	ldi	r20, 0x03	; 3
    1eb8:	5e e3       	ldi	r21, 0x3E	; 62
    1eba:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1ebe:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1ec2:	f7 01       	movw	r30, r14
    1ec4:	71 83       	std	Z+1, r23	; 0x01
    1ec6:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    1eca:	bc c2       	rjmp	.+1400   	; 0x2444 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1ecc:	f7 01       	movw	r30, r14
    1ece:	11 82       	std	Z+1, r1	; 0x01
    1ed0:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1ed4:	b7 c2       	rjmp	.+1390   	; 0x2444 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    1ed6:	62 30       	cpi	r22, 0x02	; 2
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <calc_initialValue+0x534>
    1eda:	af c2       	rjmp	.+1374   	; 0x243a <calc_initialValue+0xa92>
		{
			switch(prescaler)
    1edc:	40 34       	cpi	r20, 0x40	; 64
    1ede:	51 05       	cpc	r21, r1
    1ee0:	e1 f1       	breq	.+120    	; 0x1f5a <calc_initialValue+0x5b2>
    1ee2:	38 f4       	brcc	.+14     	; 0x1ef2 <calc_initialValue+0x54a>
    1ee4:	41 30       	cpi	r20, 0x01	; 1
    1ee6:	51 05       	cpc	r21, r1
    1ee8:	71 f0       	breq	.+28     	; 0x1f06 <calc_initialValue+0x55e>
    1eea:	48 30       	cpi	r20, 0x08	; 8
    1eec:	51 05       	cpc	r21, r1
    1eee:	01 f1       	breq	.+64     	; 0x1f30 <calc_initialValue+0x588>
    1ef0:	73 c0       	rjmp	.+230    	; 0x1fd8 <calc_initialValue+0x630>
    1ef2:	41 15       	cp	r20, r1
    1ef4:	f1 e0       	ldi	r31, 0x01	; 1
    1ef6:	5f 07       	cpc	r21, r31
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <calc_initialValue+0x554>
    1efa:	44 c0       	rjmp	.+136    	; 0x1f84 <calc_initialValue+0x5dc>
    1efc:	41 15       	cp	r20, r1
    1efe:	54 40       	sbci	r21, 0x04	; 4
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <calc_initialValue+0x55c>
    1f02:	55 c0       	rjmp	.+170    	; 0x1fae <calc_initialValue+0x606>
    1f04:	69 c0       	rjmp	.+210    	; 0x1fd8 <calc_initialValue+0x630>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    1f06:	a9 01       	movw	r20, r18
    1f08:	98 01       	movw	r18, r16
    1f0a:	6d eb       	ldi	r22, 0xBD	; 189
    1f0c:	77 e3       	ldi	r23, 0x37	; 55
    1f0e:	86 e0       	ldi	r24, 0x06	; 6
    1f10:	9c e3       	ldi	r25, 0x3C	; 60
    1f12:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1f16:	2d eb       	ldi	r18, 0xBD	; 189
    1f18:	37 e3       	ldi	r19, 0x37	; 55
    1f1a:	46 e0       	ldi	r20, 0x06	; 6
    1f1c:	54 e3       	ldi	r21, 0x34	; 52
    1f1e:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1f22:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1f26:	f7 01       	movw	r30, r14
    1f28:	71 83       	std	Z+1, r23	; 0x01
    1f2a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    1f2e:	8a c2       	rjmp	.+1300   	; 0x2444 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    1f30:	a9 01       	movw	r20, r18
    1f32:	98 01       	movw	r18, r16
    1f34:	6d eb       	ldi	r22, 0xBD	; 189
    1f36:	77 e3       	ldi	r23, 0x37	; 55
    1f38:	86 e8       	ldi	r24, 0x86	; 134
    1f3a:	9d e3       	ldi	r25, 0x3D	; 61
    1f3c:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1f40:	2d eb       	ldi	r18, 0xBD	; 189
    1f42:	37 e3       	ldi	r19, 0x37	; 55
    1f44:	46 e8       	ldi	r20, 0x86	; 134
    1f46:	55 e3       	ldi	r21, 0x35	; 53
    1f48:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1f4c:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1f50:	f7 01       	movw	r30, r14
    1f52:	71 83       	std	Z+1, r23	; 0x01
    1f54:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    1f58:	75 c2       	rjmp	.+1258   	; 0x2444 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    1f5a:	a9 01       	movw	r20, r18
    1f5c:	98 01       	movw	r18, r16
    1f5e:	6d eb       	ldi	r22, 0xBD	; 189
    1f60:	77 e3       	ldi	r23, 0x37	; 55
    1f62:	86 e0       	ldi	r24, 0x06	; 6
    1f64:	9f e3       	ldi	r25, 0x3F	; 63
    1f66:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1f6a:	2d eb       	ldi	r18, 0xBD	; 189
    1f6c:	37 e3       	ldi	r19, 0x37	; 55
    1f6e:	46 e0       	ldi	r20, 0x06	; 6
    1f70:	57 e3       	ldi	r21, 0x37	; 55
    1f72:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1f76:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1f7a:	f7 01       	movw	r30, r14
    1f7c:	71 83       	std	Z+1, r23	; 0x01
    1f7e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    1f82:	60 c2       	rjmp	.+1216   	; 0x2444 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    1f84:	a9 01       	movw	r20, r18
    1f86:	98 01       	movw	r18, r16
    1f88:	6d eb       	ldi	r22, 0xBD	; 189
    1f8a:	77 e3       	ldi	r23, 0x37	; 55
    1f8c:	86 e0       	ldi	r24, 0x06	; 6
    1f8e:	90 e4       	ldi	r25, 0x40	; 64
    1f90:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1f94:	2d eb       	ldi	r18, 0xBD	; 189
    1f96:	37 e3       	ldi	r19, 0x37	; 55
    1f98:	46 e0       	ldi	r20, 0x06	; 6
    1f9a:	58 e3       	ldi	r21, 0x38	; 56
    1f9c:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1fa0:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1fa4:	f7 01       	movw	r30, r14
    1fa6:	71 83       	std	Z+1, r23	; 0x01
    1fa8:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    1fac:	4b c2       	rjmp	.+1174   	; 0x2444 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    1fae:	a9 01       	movw	r20, r18
    1fb0:	98 01       	movw	r18, r16
    1fb2:	6d eb       	ldi	r22, 0xBD	; 189
    1fb4:	77 e3       	ldi	r23, 0x37	; 55
    1fb6:	86 e0       	ldi	r24, 0x06	; 6
    1fb8:	91 e4       	ldi	r25, 0x41	; 65
    1fba:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    1fbe:	2d eb       	ldi	r18, 0xBD	; 189
    1fc0:	37 e3       	ldi	r19, 0x37	; 55
    1fc2:	46 e0       	ldi	r20, 0x06	; 6
    1fc4:	59 e3       	ldi	r21, 0x39	; 57
    1fc6:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    1fca:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    1fce:	f7 01       	movw	r30, r14
    1fd0:	71 83       	std	Z+1, r23	; 0x01
    1fd2:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    1fd6:	36 c2       	rjmp	.+1132   	; 0x2444 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1fd8:	f7 01       	movw	r30, r14
    1fda:	11 82       	std	Z+1, r1	; 0x01
    1fdc:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1fde:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1fe0:	31 c2       	rjmp	.+1122   	; 0x2444 <calc_initialValue+0xa9c>
		else
		{
			// do nothing
		}
	}
	else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    1fe2:	82 30       	cpi	r24, 0x02	; 2
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <calc_initialValue+0x640>
    1fe6:	2b c2       	rjmp	.+1110   	; 0x243e <calc_initialValue+0xa96>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    1fe8:	61 11       	cpse	r22, r1
    1fea:	b1 c0       	rjmp	.+354    	; 0x214e <calc_initialValue+0x7a6>
		{
			switch(prescaler)
    1fec:	40 34       	cpi	r20, 0x40	; 64
    1fee:	51 05       	cpc	r21, r1
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <calc_initialValue+0x64c>
    1ff2:	54 c0       	rjmp	.+168    	; 0x209c <calc_initialValue+0x6f4>
    1ff4:	58 f4       	brcc	.+22     	; 0x200c <calc_initialValue+0x664>
    1ff6:	48 30       	cpi	r20, 0x08	; 8
    1ff8:	51 05       	cpc	r21, r1
    1ffa:	61 f1       	breq	.+88     	; 0x2054 <calc_initialValue+0x6ac>
    1ffc:	40 32       	cpi	r20, 0x20	; 32
    1ffe:	51 05       	cpc	r21, r1
    2000:	c1 f1       	breq	.+112    	; 0x2072 <calc_initialValue+0x6ca>
    2002:	41 30       	cpi	r20, 0x01	; 1
    2004:	51 05       	cpc	r21, r1
    2006:	09 f0       	breq	.+2      	; 0x200a <calc_initialValue+0x662>
    2008:	9d c0       	rjmp	.+314    	; 0x2144 <calc_initialValue+0x79c>
    200a:	0f c0       	rjmp	.+30     	; 0x202a <calc_initialValue+0x682>
    200c:	41 15       	cp	r20, r1
    200e:	f1 e0       	ldi	r31, 0x01	; 1
    2010:	5f 07       	cpc	r21, r31
    2012:	09 f4       	brne	.+2      	; 0x2016 <calc_initialValue+0x66e>
    2014:	6d c0       	rjmp	.+218    	; 0x20f0 <calc_initialValue+0x748>
    2016:	41 15       	cp	r20, r1
    2018:	84 e0       	ldi	r24, 0x04	; 4
    201a:	58 07       	cpc	r21, r24
    201c:	09 f4       	brne	.+2      	; 0x2020 <calc_initialValue+0x678>
    201e:	7d c0       	rjmp	.+250    	; 0x211a <calc_initialValue+0x772>
    2020:	40 38       	cpi	r20, 0x80	; 128
    2022:	51 05       	cpc	r21, r1
    2024:	09 f0       	breq	.+2      	; 0x2028 <calc_initialValue+0x680>
    2026:	8e c0       	rjmp	.+284    	; 0x2144 <calc_initialValue+0x79c>
    2028:	4e c0       	rjmp	.+156    	; 0x20c6 <calc_initialValue+0x71e>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    202a:	a9 01       	movw	r20, r18
    202c:	98 01       	movw	r18, r16
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	70 e0       	ldi	r23, 0x00	; 0
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	92 e4       	ldi	r25, 0x42	; 66
    2036:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	51 e4       	ldi	r21, 0x41	; 65
    2042:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
    2046:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    204a:	f7 01       	movw	r30, r14
    204c:	71 83       	std	Z+1, r23	; 0x01
    204e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2050:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    2052:	f8 c1       	rjmp	.+1008   	; 0x2444 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    2054:	a9 01       	movw	r20, r18
    2056:	98 01       	movw	r18, r16
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	80 e8       	ldi	r24, 0x80	; 128
    205e:	93 e4       	ldi	r25, 0x43	; 67
    2060:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    2064:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    2068:	f7 01       	movw	r30, r14
    206a:	71 83       	std	Z+1, r23	; 0x01
    206c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    206e:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    2070:	e9 c1       	rjmp	.+978    	; 0x2444 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
    2072:	a9 01       	movw	r20, r18
    2074:	98 01       	movw	r18, r16
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	70 e0       	ldi	r23, 0x00	; 0
    207a:	80 e8       	ldi	r24, 0x80	; 128
    207c:	94 e4       	ldi	r25, 0x44	; 68
    207e:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5e e3       	ldi	r21, 0x3E	; 62
    208a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
    208e:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    2092:	f7 01       	movw	r30, r14
    2094:	71 83       	std	Z+1, r23	; 0x01
    2096:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2098:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
				break;
    209a:	d4 c1       	rjmp	.+936    	; 0x2444 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    209c:	a9 01       	movw	r20, r18
    209e:	98 01       	movw	r18, r16
    20a0:	60 e0       	ldi	r22, 0x00	; 0
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	95 e4       	ldi	r25, 0x45	; 69
    20a8:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	5e e3       	ldi	r21, 0x3E	; 62
    20b4:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
    20b8:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    20bc:	f7 01       	movw	r30, r14
    20be:	71 83       	std	Z+1, r23	; 0x01
    20c0:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    20c4:	bf c1       	rjmp	.+894    	; 0x2444 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
    20c6:	a9 01       	movw	r20, r18
    20c8:	98 01       	movw	r18, r16
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	80 e8       	ldi	r24, 0x80	; 128
    20d0:	95 e4       	ldi	r25, 0x45	; 69
    20d2:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e8       	ldi	r20, 0x80	; 128
    20dc:	5d e3       	ldi	r21, 0x3D	; 61
    20de:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
    20e2:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    20e6:	f7 01       	movw	r30, r14
    20e8:	71 83       	std	Z+1, r23	; 0x01
    20ea:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
				break;
    20ee:	aa c1       	rjmp	.+852    	; 0x2444 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    20f0:	a9 01       	movw	r20, r18
    20f2:	98 01       	movw	r18, r16
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	96 e4       	ldi	r25, 0x46	; 70
    20fc:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	5d e3       	ldi	r21, 0x3D	; 61
    2108:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
    210c:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    2110:	f7 01       	movw	r30, r14
    2112:	71 83       	std	Z+1, r23	; 0x01
    2114:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2116:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    2118:	95 c1       	rjmp	.+810    	; 0x2444 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    211a:	a9 01       	movw	r20, r18
    211c:	98 01       	movw	r18, r16
    211e:	60 e0       	ldi	r22, 0x00	; 0
    2120:	70 e0       	ldi	r23, 0x00	; 0
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	97 e4       	ldi	r25, 0x47	; 71
    2126:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e0       	ldi	r20, 0x00	; 0
    2130:	5c e3       	ldi	r21, 0x3C	; 60
    2132:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsf3>
    2136:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    213a:	f7 01       	movw	r30, r14
    213c:	71 83       	std	Z+1, r23	; 0x01
    213e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2140:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    2142:	80 c1       	rjmp	.+768    	; 0x2444 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2144:	f7 01       	movw	r30, r14
    2146:	11 82       	std	Z+1, r1	; 0x01
    2148:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    214a:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    214c:	7b c1       	rjmp	.+758    	; 0x2444 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    214e:	61 30       	cpi	r22, 0x01	; 1
    2150:	09 f0       	breq	.+2      	; 0x2154 <calc_initialValue+0x7ac>
    2152:	b7 c0       	rjmp	.+366    	; 0x22c2 <calc_initialValue+0x91a>
		{
			switch(prescaler)
    2154:	40 34       	cpi	r20, 0x40	; 64
    2156:	51 05       	cpc	r21, r1
    2158:	09 f4       	brne	.+2      	; 0x215c <calc_initialValue+0x7b4>
    215a:	5a c0       	rjmp	.+180    	; 0x2210 <calc_initialValue+0x868>
    215c:	58 f4       	brcc	.+22     	; 0x2174 <calc_initialValue+0x7cc>
    215e:	48 30       	cpi	r20, 0x08	; 8
    2160:	51 05       	cpc	r21, r1
    2162:	61 f1       	breq	.+88     	; 0x21bc <calc_initialValue+0x814>
    2164:	40 32       	cpi	r20, 0x20	; 32
    2166:	51 05       	cpc	r21, r1
    2168:	f1 f1       	breq	.+124    	; 0x21e6 <calc_initialValue+0x83e>
    216a:	41 30       	cpi	r20, 0x01	; 1
    216c:	51 05       	cpc	r21, r1
    216e:	09 f0       	breq	.+2      	; 0x2172 <calc_initialValue+0x7ca>
    2170:	a3 c0       	rjmp	.+326    	; 0x22b8 <calc_initialValue+0x910>
    2172:	0f c0       	rjmp	.+30     	; 0x2192 <calc_initialValue+0x7ea>
    2174:	41 15       	cp	r20, r1
    2176:	f1 e0       	ldi	r31, 0x01	; 1
    2178:	5f 07       	cpc	r21, r31
    217a:	09 f4       	brne	.+2      	; 0x217e <calc_initialValue+0x7d6>
    217c:	73 c0       	rjmp	.+230    	; 0x2264 <calc_initialValue+0x8bc>
    217e:	41 15       	cp	r20, r1
    2180:	84 e0       	ldi	r24, 0x04	; 4
    2182:	58 07       	cpc	r21, r24
    2184:	09 f4       	brne	.+2      	; 0x2188 <calc_initialValue+0x7e0>
    2186:	83 c0       	rjmp	.+262    	; 0x228e <calc_initialValue+0x8e6>
    2188:	40 38       	cpi	r20, 0x80	; 128
    218a:	51 05       	cpc	r21, r1
    218c:	09 f0       	breq	.+2      	; 0x2190 <calc_initialValue+0x7e8>
    218e:	94 c0       	rjmp	.+296    	; 0x22b8 <calc_initialValue+0x910>
    2190:	54 c0       	rjmp	.+168    	; 0x223a <calc_initialValue+0x892>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    2192:	a9 01       	movw	r20, r18
    2194:	98 01       	movw	r18, r16
    2196:	6f e6       	ldi	r22, 0x6F	; 111
    2198:	72 e1       	ldi	r23, 0x12	; 18
    219a:	83 e0       	ldi	r24, 0x03	; 3
    219c:	9d e3       	ldi	r25, 0x3D	; 61
    219e:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    21a2:	2f e6       	ldi	r18, 0x6F	; 111
    21a4:	32 e1       	ldi	r19, 0x12	; 18
    21a6:	43 e0       	ldi	r20, 0x03	; 3
    21a8:	59 e3       	ldi	r21, 0x39	; 57
    21aa:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    21ae:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    21b2:	f7 01       	movw	r30, r14
    21b4:	71 83       	std	Z+1, r23	; 0x01
    21b6:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    21ba:	44 c1       	rjmp	.+648    	; 0x2444 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    21bc:	a9 01       	movw	r20, r18
    21be:	98 01       	movw	r18, r16
    21c0:	6f e6       	ldi	r22, 0x6F	; 111
    21c2:	72 e1       	ldi	r23, 0x12	; 18
    21c4:	83 e8       	ldi	r24, 0x83	; 131
    21c6:	9e e3       	ldi	r25, 0x3E	; 62
    21c8:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    21cc:	2f e6       	ldi	r18, 0x6F	; 111
    21ce:	32 e1       	ldi	r19, 0x12	; 18
    21d0:	43 e8       	ldi	r20, 0x83	; 131
    21d2:	5a e3       	ldi	r21, 0x3A	; 58
    21d4:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    21d8:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    21dc:	f7 01       	movw	r30, r14
    21de:	71 83       	std	Z+1, r23	; 0x01
    21e0:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    21e4:	2f c1       	rjmp	.+606    	; 0x2444 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
    21e6:	a9 01       	movw	r20, r18
    21e8:	98 01       	movw	r18, r16
    21ea:	6f e6       	ldi	r22, 0x6F	; 111
    21ec:	72 e1       	ldi	r23, 0x12	; 18
    21ee:	83 e8       	ldi	r24, 0x83	; 131
    21f0:	9f e3       	ldi	r25, 0x3F	; 63
    21f2:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    21f6:	2f e6       	ldi	r18, 0x6F	; 111
    21f8:	32 e1       	ldi	r19, 0x12	; 18
    21fa:	43 e8       	ldi	r20, 0x83	; 131
    21fc:	5b e3       	ldi	r21, 0x3B	; 59
    21fe:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    2202:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    2206:	f7 01       	movw	r30, r14
    2208:	71 83       	std	Z+1, r23	; 0x01
    220a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    220c:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
				break;
    220e:	1a c1       	rjmp	.+564    	; 0x2444 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    2210:	a9 01       	movw	r20, r18
    2212:	98 01       	movw	r18, r16
    2214:	6f e6       	ldi	r22, 0x6F	; 111
    2216:	72 e1       	ldi	r23, 0x12	; 18
    2218:	83 e0       	ldi	r24, 0x03	; 3
    221a:	90 e4       	ldi	r25, 0x40	; 64
    221c:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    2220:	2f e6       	ldi	r18, 0x6F	; 111
    2222:	32 e1       	ldi	r19, 0x12	; 18
    2224:	43 e0       	ldi	r20, 0x03	; 3
    2226:	5c e3       	ldi	r21, 0x3C	; 60
    2228:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    222c:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    2230:	f7 01       	movw	r30, r14
    2232:	71 83       	std	Z+1, r23	; 0x01
    2234:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2236:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    2238:	05 c1       	rjmp	.+522    	; 0x2444 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
    223a:	a9 01       	movw	r20, r18
    223c:	98 01       	movw	r18, r16
    223e:	6f e6       	ldi	r22, 0x6F	; 111
    2240:	72 e1       	ldi	r23, 0x12	; 18
    2242:	83 e8       	ldi	r24, 0x83	; 131
    2244:	90 e4       	ldi	r25, 0x40	; 64
    2246:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    224a:	2f e6       	ldi	r18, 0x6F	; 111
    224c:	32 e1       	ldi	r19, 0x12	; 18
    224e:	43 e8       	ldi	r20, 0x83	; 131
    2250:	5c e3       	ldi	r21, 0x3C	; 60
    2252:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    2256:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    225a:	f7 01       	movw	r30, r14
    225c:	71 83       	std	Z+1, r23	; 0x01
    225e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2260:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
				break;
    2262:	f0 c0       	rjmp	.+480    	; 0x2444 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    2264:	a9 01       	movw	r20, r18
    2266:	98 01       	movw	r18, r16
    2268:	6f e6       	ldi	r22, 0x6F	; 111
    226a:	72 e1       	ldi	r23, 0x12	; 18
    226c:	83 e0       	ldi	r24, 0x03	; 3
    226e:	91 e4       	ldi	r25, 0x41	; 65
    2270:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    2274:	2f e6       	ldi	r18, 0x6F	; 111
    2276:	32 e1       	ldi	r19, 0x12	; 18
    2278:	43 e0       	ldi	r20, 0x03	; 3
    227a:	5d e3       	ldi	r21, 0x3D	; 61
    227c:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    2280:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    2284:	f7 01       	movw	r30, r14
    2286:	71 83       	std	Z+1, r23	; 0x01
    2288:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    228a:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    228c:	db c0       	rjmp	.+438    	; 0x2444 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    228e:	a9 01       	movw	r20, r18
    2290:	98 01       	movw	r18, r16
    2292:	6f e6       	ldi	r22, 0x6F	; 111
    2294:	72 e1       	ldi	r23, 0x12	; 18
    2296:	83 e0       	ldi	r24, 0x03	; 3
    2298:	92 e4       	ldi	r25, 0x42	; 66
    229a:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    229e:	2f e6       	ldi	r18, 0x6F	; 111
    22a0:	32 e1       	ldi	r19, 0x12	; 18
    22a2:	43 e0       	ldi	r20, 0x03	; 3
    22a4:	5e e3       	ldi	r21, 0x3E	; 62
    22a6:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    22aa:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    22ae:	f7 01       	movw	r30, r14
    22b0:	71 83       	std	Z+1, r23	; 0x01
    22b2:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    22b6:	c6 c0       	rjmp	.+396    	; 0x2444 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    22b8:	f7 01       	movw	r30, r14
    22ba:	11 82       	std	Z+1, r1	; 0x01
    22bc:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    22be:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    22c0:	c1 c0       	rjmp	.+386    	; 0x2444 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    22c2:	62 30       	cpi	r22, 0x02	; 2
    22c4:	09 f0       	breq	.+2      	; 0x22c8 <calc_initialValue+0x920>
    22c6:	bd c0       	rjmp	.+378    	; 0x2442 <calc_initialValue+0xa9a>
		{
			switch(prescaler)
    22c8:	40 34       	cpi	r20, 0x40	; 64
    22ca:	51 05       	cpc	r21, r1
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <calc_initialValue+0x928>
    22ce:	5a c0       	rjmp	.+180    	; 0x2384 <calc_initialValue+0x9dc>
    22d0:	58 f4       	brcc	.+22     	; 0x22e8 <calc_initialValue+0x940>
    22d2:	48 30       	cpi	r20, 0x08	; 8
    22d4:	51 05       	cpc	r21, r1
    22d6:	61 f1       	breq	.+88     	; 0x2330 <calc_initialValue+0x988>
    22d8:	40 32       	cpi	r20, 0x20	; 32
    22da:	51 05       	cpc	r21, r1
    22dc:	f1 f1       	breq	.+124    	; 0x235a <calc_initialValue+0x9b2>
    22de:	41 30       	cpi	r20, 0x01	; 1
    22e0:	51 05       	cpc	r21, r1
    22e2:	09 f0       	breq	.+2      	; 0x22e6 <calc_initialValue+0x93e>
    22e4:	a3 c0       	rjmp	.+326    	; 0x242c <calc_initialValue+0xa84>
    22e6:	0f c0       	rjmp	.+30     	; 0x2306 <calc_initialValue+0x95e>
    22e8:	41 15       	cp	r20, r1
    22ea:	f1 e0       	ldi	r31, 0x01	; 1
    22ec:	5f 07       	cpc	r21, r31
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <calc_initialValue+0x94a>
    22f0:	73 c0       	rjmp	.+230    	; 0x23d8 <calc_initialValue+0xa30>
    22f2:	41 15       	cp	r20, r1
    22f4:	84 e0       	ldi	r24, 0x04	; 4
    22f6:	58 07       	cpc	r21, r24
    22f8:	09 f4       	brne	.+2      	; 0x22fc <calc_initialValue+0x954>
    22fa:	83 c0       	rjmp	.+262    	; 0x2402 <calc_initialValue+0xa5a>
    22fc:	40 38       	cpi	r20, 0x80	; 128
    22fe:	51 05       	cpc	r21, r1
    2300:	09 f0       	breq	.+2      	; 0x2304 <calc_initialValue+0x95c>
    2302:	94 c0       	rjmp	.+296    	; 0x242c <calc_initialValue+0xa84>
    2304:	54 c0       	rjmp	.+168    	; 0x23ae <calc_initialValue+0xa06>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    2306:	a9 01       	movw	r20, r18
    2308:	98 01       	movw	r18, r16
    230a:	6d eb       	ldi	r22, 0xBD	; 189
    230c:	77 e3       	ldi	r23, 0x37	; 55
    230e:	86 e0       	ldi	r24, 0x06	; 6
    2310:	98 e3       	ldi	r25, 0x38	; 56
    2312:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    2316:	2d eb       	ldi	r18, 0xBD	; 189
    2318:	37 e3       	ldi	r19, 0x37	; 55
    231a:	46 e0       	ldi	r20, 0x06	; 6
    231c:	54 e3       	ldi	r21, 0x34	; 52
    231e:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    2322:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    2326:	f7 01       	movw	r30, r14
    2328:	71 83       	std	Z+1, r23	; 0x01
    232a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    232c:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    232e:	8a c0       	rjmp	.+276    	; 0x2444 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    2330:	a9 01       	movw	r20, r18
    2332:	98 01       	movw	r18, r16
    2334:	6d eb       	ldi	r22, 0xBD	; 189
    2336:	77 e3       	ldi	r23, 0x37	; 55
    2338:	86 e8       	ldi	r24, 0x86	; 134
    233a:	99 e3       	ldi	r25, 0x39	; 57
    233c:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    2340:	2d eb       	ldi	r18, 0xBD	; 189
    2342:	37 e3       	ldi	r19, 0x37	; 55
    2344:	46 e8       	ldi	r20, 0x86	; 134
    2346:	55 e3       	ldi	r21, 0x35	; 53
    2348:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    234c:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    2350:	f7 01       	movw	r30, r14
    2352:	71 83       	std	Z+1, r23	; 0x01
    2354:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2356:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    2358:	75 c0       	rjmp	.+234    	; 0x2444 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
    235a:	a9 01       	movw	r20, r18
    235c:	98 01       	movw	r18, r16
    235e:	6d eb       	ldi	r22, 0xBD	; 189
    2360:	77 e3       	ldi	r23, 0x37	; 55
    2362:	86 e8       	ldi	r24, 0x86	; 134
    2364:	9a e3       	ldi	r25, 0x3A	; 58
    2366:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    236a:	2d eb       	ldi	r18, 0xBD	; 189
    236c:	37 e3       	ldi	r19, 0x37	; 55
    236e:	46 e8       	ldi	r20, 0x86	; 134
    2370:	56 e3       	ldi	r21, 0x36	; 54
    2372:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    2376:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    237a:	f7 01       	movw	r30, r14
    237c:	71 83       	std	Z+1, r23	; 0x01
    237e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2380:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
				break;
    2382:	60 c0       	rjmp	.+192    	; 0x2444 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    2384:	a9 01       	movw	r20, r18
    2386:	98 01       	movw	r18, r16
    2388:	6d eb       	ldi	r22, 0xBD	; 189
    238a:	77 e3       	ldi	r23, 0x37	; 55
    238c:	86 e0       	ldi	r24, 0x06	; 6
    238e:	9b e3       	ldi	r25, 0x3B	; 59
    2390:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    2394:	2d eb       	ldi	r18, 0xBD	; 189
    2396:	37 e3       	ldi	r19, 0x37	; 55
    2398:	46 e0       	ldi	r20, 0x06	; 6
    239a:	57 e3       	ldi	r21, 0x37	; 55
    239c:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    23a0:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    23a4:	f7 01       	movw	r30, r14
    23a6:	71 83       	std	Z+1, r23	; 0x01
    23a8:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    23ac:	4b c0       	rjmp	.+150    	; 0x2444 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
    23ae:	a9 01       	movw	r20, r18
    23b0:	98 01       	movw	r18, r16
    23b2:	6d eb       	ldi	r22, 0xBD	; 189
    23b4:	77 e3       	ldi	r23, 0x37	; 55
    23b6:	86 e8       	ldi	r24, 0x86	; 134
    23b8:	9b e3       	ldi	r25, 0x3B	; 59
    23ba:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    23be:	2d eb       	ldi	r18, 0xBD	; 189
    23c0:	37 e3       	ldi	r19, 0x37	; 55
    23c2:	46 e8       	ldi	r20, 0x86	; 134
    23c4:	57 e3       	ldi	r21, 0x37	; 55
    23c6:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    23ca:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    23ce:	f7 01       	movw	r30, r14
    23d0:	71 83       	std	Z+1, r23	; 0x01
    23d2:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
				break;
    23d6:	36 c0       	rjmp	.+108    	; 0x2444 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    23d8:	a9 01       	movw	r20, r18
    23da:	98 01       	movw	r18, r16
    23dc:	6d eb       	ldi	r22, 0xBD	; 189
    23de:	77 e3       	ldi	r23, 0x37	; 55
    23e0:	86 e0       	ldi	r24, 0x06	; 6
    23e2:	9c e3       	ldi	r25, 0x3C	; 60
    23e4:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    23e8:	2d eb       	ldi	r18, 0xBD	; 189
    23ea:	37 e3       	ldi	r19, 0x37	; 55
    23ec:	46 e0       	ldi	r20, 0x06	; 6
    23ee:	58 e3       	ldi	r21, 0x38	; 56
    23f0:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    23f4:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    23f8:	f7 01       	movw	r30, r14
    23fa:	71 83       	std	Z+1, r23	; 0x01
    23fc:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    2400:	21 c0       	rjmp	.+66     	; 0x2444 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    2402:	a9 01       	movw	r20, r18
    2404:	98 01       	movw	r18, r16
    2406:	6d eb       	ldi	r22, 0xBD	; 189
    2408:	77 e3       	ldi	r23, 0x37	; 55
    240a:	86 e0       	ldi	r24, 0x06	; 6
    240c:	9d e3       	ldi	r25, 0x3D	; 61
    240e:	0e 94 27 12 	call	0x244e	; 0x244e <__subsf3>
    2412:	2d eb       	ldi	r18, 0xBD	; 189
    2414:	37 e3       	ldi	r19, 0x37	; 55
    2416:	46 e0       	ldi	r20, 0x06	; 6
    2418:	59 e3       	ldi	r21, 0x39	; 57
    241a:	0e 94 99 12 	call	0x2532	; 0x2532 <__divsf3>
    241e:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fixunssfsi>
    2422:	f7 01       	movw	r30, r14
    2424:	71 83       	std	Z+1, r23	; 0x01
    2426:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2428:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    242a:	0c c0       	rjmp	.+24     	; 0x2444 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    242c:	f7 01       	movw	r30, r14
    242e:	11 82       	std	Z+1, r1	; 0x01
    2430:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2432:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2434:	07 c0       	rjmp	.+14     	; 0x2444 <calc_initialValue+0xa9c>
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	05 c0       	rjmp	.+10     	; 0x2444 <calc_initialValue+0xa9c>
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	03 c0       	rjmp	.+6      	; 0x2444 <calc_initialValue+0xa9c>
		}
		
	}
	else
	{
		bo_return_value = FALSE;
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	01 c0       	rjmp	.+2      	; 0x2444 <calc_initialValue+0xa9c>
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2442:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		bo_return_value = FALSE;
	}
	return bo_return_value;
    2444:	1f 91       	pop	r17
    2446:	0f 91       	pop	r16
    2448:	ff 90       	pop	r15
    244a:	ef 90       	pop	r14
    244c:	08 95       	ret

0000244e <__subsf3>:
    244e:	50 58       	subi	r21, 0x80	; 128

00002450 <__addsf3>:
    2450:	bb 27       	eor	r27, r27
    2452:	aa 27       	eor	r26, r26
    2454:	0e 94 3f 12 	call	0x247e	; 0x247e <__addsf3x>
    2458:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__fp_round>
    245c:	0e 94 a4 13 	call	0x2748	; 0x2748 <__fp_pscA>
    2460:	38 f0       	brcs	.+14     	; 0x2470 <__addsf3+0x20>
    2462:	0e 94 ab 13 	call	0x2756	; 0x2756 <__fp_pscB>
    2466:	20 f0       	brcs	.+8      	; 0x2470 <__addsf3+0x20>
    2468:	39 f4       	brne	.+14     	; 0x2478 <__addsf3+0x28>
    246a:	9f 3f       	cpi	r25, 0xFF	; 255
    246c:	19 f4       	brne	.+6      	; 0x2474 <__addsf3+0x24>
    246e:	26 f4       	brtc	.+8      	; 0x2478 <__addsf3+0x28>
    2470:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__fp_nan>
    2474:	0e f4       	brtc	.+2      	; 0x2478 <__addsf3+0x28>
    2476:	e0 95       	com	r30
    2478:	e7 fb       	bst	r30, 7
    247a:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__fp_inf>

0000247e <__addsf3x>:
    247e:	e9 2f       	mov	r30, r25
    2480:	0e 94 c3 13 	call	0x2786	; 0x2786 <__fp_split3>
    2484:	58 f3       	brcs	.-42     	; 0x245c <__addsf3+0xc>
    2486:	ba 17       	cp	r27, r26
    2488:	62 07       	cpc	r22, r18
    248a:	73 07       	cpc	r23, r19
    248c:	84 07       	cpc	r24, r20
    248e:	95 07       	cpc	r25, r21
    2490:	20 f0       	brcs	.+8      	; 0x249a <__addsf3x+0x1c>
    2492:	79 f4       	brne	.+30     	; 0x24b2 <__addsf3x+0x34>
    2494:	a6 f5       	brtc	.+104    	; 0x24fe <__addsf3x+0x80>
    2496:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__fp_zero>
    249a:	0e f4       	brtc	.+2      	; 0x249e <__addsf3x+0x20>
    249c:	e0 95       	com	r30
    249e:	0b 2e       	mov	r0, r27
    24a0:	ba 2f       	mov	r27, r26
    24a2:	a0 2d       	mov	r26, r0
    24a4:	0b 01       	movw	r0, r22
    24a6:	b9 01       	movw	r22, r18
    24a8:	90 01       	movw	r18, r0
    24aa:	0c 01       	movw	r0, r24
    24ac:	ca 01       	movw	r24, r20
    24ae:	a0 01       	movw	r20, r0
    24b0:	11 24       	eor	r1, r1
    24b2:	ff 27       	eor	r31, r31
    24b4:	59 1b       	sub	r21, r25
    24b6:	99 f0       	breq	.+38     	; 0x24de <__addsf3x+0x60>
    24b8:	59 3f       	cpi	r21, 0xF9	; 249
    24ba:	50 f4       	brcc	.+20     	; 0x24d0 <__addsf3x+0x52>
    24bc:	50 3e       	cpi	r21, 0xE0	; 224
    24be:	68 f1       	brcs	.+90     	; 0x251a <__addsf3x+0x9c>
    24c0:	1a 16       	cp	r1, r26
    24c2:	f0 40       	sbci	r31, 0x00	; 0
    24c4:	a2 2f       	mov	r26, r18
    24c6:	23 2f       	mov	r18, r19
    24c8:	34 2f       	mov	r19, r20
    24ca:	44 27       	eor	r20, r20
    24cc:	58 5f       	subi	r21, 0xF8	; 248
    24ce:	f3 cf       	rjmp	.-26     	; 0x24b6 <__addsf3x+0x38>
    24d0:	46 95       	lsr	r20
    24d2:	37 95       	ror	r19
    24d4:	27 95       	ror	r18
    24d6:	a7 95       	ror	r26
    24d8:	f0 40       	sbci	r31, 0x00	; 0
    24da:	53 95       	inc	r21
    24dc:	c9 f7       	brne	.-14     	; 0x24d0 <__addsf3x+0x52>
    24de:	7e f4       	brtc	.+30     	; 0x24fe <__addsf3x+0x80>
    24e0:	1f 16       	cp	r1, r31
    24e2:	ba 0b       	sbc	r27, r26
    24e4:	62 0b       	sbc	r22, r18
    24e6:	73 0b       	sbc	r23, r19
    24e8:	84 0b       	sbc	r24, r20
    24ea:	ba f0       	brmi	.+46     	; 0x251a <__addsf3x+0x9c>
    24ec:	91 50       	subi	r25, 0x01	; 1
    24ee:	a1 f0       	breq	.+40     	; 0x2518 <__addsf3x+0x9a>
    24f0:	ff 0f       	add	r31, r31
    24f2:	bb 1f       	adc	r27, r27
    24f4:	66 1f       	adc	r22, r22
    24f6:	77 1f       	adc	r23, r23
    24f8:	88 1f       	adc	r24, r24
    24fa:	c2 f7       	brpl	.-16     	; 0x24ec <__addsf3x+0x6e>
    24fc:	0e c0       	rjmp	.+28     	; 0x251a <__addsf3x+0x9c>
    24fe:	ba 0f       	add	r27, r26
    2500:	62 1f       	adc	r22, r18
    2502:	73 1f       	adc	r23, r19
    2504:	84 1f       	adc	r24, r20
    2506:	48 f4       	brcc	.+18     	; 0x251a <__addsf3x+0x9c>
    2508:	87 95       	ror	r24
    250a:	77 95       	ror	r23
    250c:	67 95       	ror	r22
    250e:	b7 95       	ror	r27
    2510:	f7 95       	ror	r31
    2512:	9e 3f       	cpi	r25, 0xFE	; 254
    2514:	08 f0       	brcs	.+2      	; 0x2518 <__addsf3x+0x9a>
    2516:	b0 cf       	rjmp	.-160    	; 0x2478 <__addsf3+0x28>
    2518:	93 95       	inc	r25
    251a:	88 0f       	add	r24, r24
    251c:	08 f0       	brcs	.+2      	; 0x2520 <__addsf3x+0xa2>
    251e:	99 27       	eor	r25, r25
    2520:	ee 0f       	add	r30, r30
    2522:	97 95       	ror	r25
    2524:	87 95       	ror	r24
    2526:	08 95       	ret

00002528 <__cmpsf2>:
    2528:	0e 94 77 13 	call	0x26ee	; 0x26ee <__fp_cmp>
    252c:	08 f4       	brcc	.+2      	; 0x2530 <__cmpsf2+0x8>
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	08 95       	ret

00002532 <__divsf3>:
    2532:	0e 94 ad 12 	call	0x255a	; 0x255a <__divsf3x>
    2536:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__fp_round>
    253a:	0e 94 ab 13 	call	0x2756	; 0x2756 <__fp_pscB>
    253e:	58 f0       	brcs	.+22     	; 0x2556 <__divsf3+0x24>
    2540:	0e 94 a4 13 	call	0x2748	; 0x2748 <__fp_pscA>
    2544:	40 f0       	brcs	.+16     	; 0x2556 <__divsf3+0x24>
    2546:	29 f4       	brne	.+10     	; 0x2552 <__divsf3+0x20>
    2548:	5f 3f       	cpi	r21, 0xFF	; 255
    254a:	29 f0       	breq	.+10     	; 0x2556 <__divsf3+0x24>
    254c:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__fp_inf>
    2550:	51 11       	cpse	r21, r1
    2552:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__fp_szero>
    2556:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__fp_nan>

0000255a <__divsf3x>:
    255a:	0e 94 c3 13 	call	0x2786	; 0x2786 <__fp_split3>
    255e:	68 f3       	brcs	.-38     	; 0x253a <__divsf3+0x8>

00002560 <__divsf3_pse>:
    2560:	99 23       	and	r25, r25
    2562:	b1 f3       	breq	.-20     	; 0x2550 <__divsf3+0x1e>
    2564:	55 23       	and	r21, r21
    2566:	91 f3       	breq	.-28     	; 0x254c <__divsf3+0x1a>
    2568:	95 1b       	sub	r25, r21
    256a:	55 0b       	sbc	r21, r21
    256c:	bb 27       	eor	r27, r27
    256e:	aa 27       	eor	r26, r26
    2570:	62 17       	cp	r22, r18
    2572:	73 07       	cpc	r23, r19
    2574:	84 07       	cpc	r24, r20
    2576:	38 f0       	brcs	.+14     	; 0x2586 <__divsf3_pse+0x26>
    2578:	9f 5f       	subi	r25, 0xFF	; 255
    257a:	5f 4f       	sbci	r21, 0xFF	; 255
    257c:	22 0f       	add	r18, r18
    257e:	33 1f       	adc	r19, r19
    2580:	44 1f       	adc	r20, r20
    2582:	aa 1f       	adc	r26, r26
    2584:	a9 f3       	breq	.-22     	; 0x2570 <__divsf3_pse+0x10>
    2586:	35 d0       	rcall	.+106    	; 0x25f2 <__divsf3_pse+0x92>
    2588:	0e 2e       	mov	r0, r30
    258a:	3a f0       	brmi	.+14     	; 0x259a <__divsf3_pse+0x3a>
    258c:	e0 e8       	ldi	r30, 0x80	; 128
    258e:	32 d0       	rcall	.+100    	; 0x25f4 <__divsf3_pse+0x94>
    2590:	91 50       	subi	r25, 0x01	; 1
    2592:	50 40       	sbci	r21, 0x00	; 0
    2594:	e6 95       	lsr	r30
    2596:	00 1c       	adc	r0, r0
    2598:	ca f7       	brpl	.-14     	; 0x258c <__divsf3_pse+0x2c>
    259a:	2b d0       	rcall	.+86     	; 0x25f2 <__divsf3_pse+0x92>
    259c:	fe 2f       	mov	r31, r30
    259e:	29 d0       	rcall	.+82     	; 0x25f2 <__divsf3_pse+0x92>
    25a0:	66 0f       	add	r22, r22
    25a2:	77 1f       	adc	r23, r23
    25a4:	88 1f       	adc	r24, r24
    25a6:	bb 1f       	adc	r27, r27
    25a8:	26 17       	cp	r18, r22
    25aa:	37 07       	cpc	r19, r23
    25ac:	48 07       	cpc	r20, r24
    25ae:	ab 07       	cpc	r26, r27
    25b0:	b0 e8       	ldi	r27, 0x80	; 128
    25b2:	09 f0       	breq	.+2      	; 0x25b6 <__divsf3_pse+0x56>
    25b4:	bb 0b       	sbc	r27, r27
    25b6:	80 2d       	mov	r24, r0
    25b8:	bf 01       	movw	r22, r30
    25ba:	ff 27       	eor	r31, r31
    25bc:	93 58       	subi	r25, 0x83	; 131
    25be:	5f 4f       	sbci	r21, 0xFF	; 255
    25c0:	3a f0       	brmi	.+14     	; 0x25d0 <__divsf3_pse+0x70>
    25c2:	9e 3f       	cpi	r25, 0xFE	; 254
    25c4:	51 05       	cpc	r21, r1
    25c6:	78 f0       	brcs	.+30     	; 0x25e6 <__divsf3_pse+0x86>
    25c8:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__fp_inf>
    25cc:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__fp_szero>
    25d0:	5f 3f       	cpi	r21, 0xFF	; 255
    25d2:	e4 f3       	brlt	.-8      	; 0x25cc <__divsf3_pse+0x6c>
    25d4:	98 3e       	cpi	r25, 0xE8	; 232
    25d6:	d4 f3       	brlt	.-12     	; 0x25cc <__divsf3_pse+0x6c>
    25d8:	86 95       	lsr	r24
    25da:	77 95       	ror	r23
    25dc:	67 95       	ror	r22
    25de:	b7 95       	ror	r27
    25e0:	f7 95       	ror	r31
    25e2:	9f 5f       	subi	r25, 0xFF	; 255
    25e4:	c9 f7       	brne	.-14     	; 0x25d8 <__divsf3_pse+0x78>
    25e6:	88 0f       	add	r24, r24
    25e8:	91 1d       	adc	r25, r1
    25ea:	96 95       	lsr	r25
    25ec:	87 95       	ror	r24
    25ee:	97 f9       	bld	r25, 7
    25f0:	08 95       	ret
    25f2:	e1 e0       	ldi	r30, 0x01	; 1
    25f4:	66 0f       	add	r22, r22
    25f6:	77 1f       	adc	r23, r23
    25f8:	88 1f       	adc	r24, r24
    25fa:	bb 1f       	adc	r27, r27
    25fc:	62 17       	cp	r22, r18
    25fe:	73 07       	cpc	r23, r19
    2600:	84 07       	cpc	r24, r20
    2602:	ba 07       	cpc	r27, r26
    2604:	20 f0       	brcs	.+8      	; 0x260e <__divsf3_pse+0xae>
    2606:	62 1b       	sub	r22, r18
    2608:	73 0b       	sbc	r23, r19
    260a:	84 0b       	sbc	r24, r20
    260c:	ba 0b       	sbc	r27, r26
    260e:	ee 1f       	adc	r30, r30
    2610:	88 f7       	brcc	.-30     	; 0x25f4 <__divsf3_pse+0x94>
    2612:	e0 95       	com	r30
    2614:	08 95       	ret

00002616 <__fixunssfsi>:
    2616:	0e 94 cb 13 	call	0x2796	; 0x2796 <__fp_splitA>
    261a:	88 f0       	brcs	.+34     	; 0x263e <__fixunssfsi+0x28>
    261c:	9f 57       	subi	r25, 0x7F	; 127
    261e:	98 f0       	brcs	.+38     	; 0x2646 <__fixunssfsi+0x30>
    2620:	b9 2f       	mov	r27, r25
    2622:	99 27       	eor	r25, r25
    2624:	b7 51       	subi	r27, 0x17	; 23
    2626:	b0 f0       	brcs	.+44     	; 0x2654 <__fixunssfsi+0x3e>
    2628:	e1 f0       	breq	.+56     	; 0x2662 <__fixunssfsi+0x4c>
    262a:	66 0f       	add	r22, r22
    262c:	77 1f       	adc	r23, r23
    262e:	88 1f       	adc	r24, r24
    2630:	99 1f       	adc	r25, r25
    2632:	1a f0       	brmi	.+6      	; 0x263a <__fixunssfsi+0x24>
    2634:	ba 95       	dec	r27
    2636:	c9 f7       	brne	.-14     	; 0x262a <__fixunssfsi+0x14>
    2638:	14 c0       	rjmp	.+40     	; 0x2662 <__fixunssfsi+0x4c>
    263a:	b1 30       	cpi	r27, 0x01	; 1
    263c:	91 f0       	breq	.+36     	; 0x2662 <__fixunssfsi+0x4c>
    263e:	0e 94 e5 13 	call	0x27ca	; 0x27ca <__fp_zero>
    2642:	b1 e0       	ldi	r27, 0x01	; 1
    2644:	08 95       	ret
    2646:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__fp_zero>
    264a:	67 2f       	mov	r22, r23
    264c:	78 2f       	mov	r23, r24
    264e:	88 27       	eor	r24, r24
    2650:	b8 5f       	subi	r27, 0xF8	; 248
    2652:	39 f0       	breq	.+14     	; 0x2662 <__fixunssfsi+0x4c>
    2654:	b9 3f       	cpi	r27, 0xF9	; 249
    2656:	cc f3       	brlt	.-14     	; 0x264a <__fixunssfsi+0x34>
    2658:	86 95       	lsr	r24
    265a:	77 95       	ror	r23
    265c:	67 95       	ror	r22
    265e:	b3 95       	inc	r27
    2660:	d9 f7       	brne	.-10     	; 0x2658 <__fixunssfsi+0x42>
    2662:	3e f4       	brtc	.+14     	; 0x2672 <__fixunssfsi+0x5c>
    2664:	90 95       	com	r25
    2666:	80 95       	com	r24
    2668:	70 95       	com	r23
    266a:	61 95       	neg	r22
    266c:	7f 4f       	sbci	r23, 0xFF	; 255
    266e:	8f 4f       	sbci	r24, 0xFF	; 255
    2670:	9f 4f       	sbci	r25, 0xFF	; 255
    2672:	08 95       	ret

00002674 <__floatunsisf>:
    2674:	e8 94       	clt
    2676:	09 c0       	rjmp	.+18     	; 0x268a <__floatsisf+0x12>

00002678 <__floatsisf>:
    2678:	97 fb       	bst	r25, 7
    267a:	3e f4       	brtc	.+14     	; 0x268a <__floatsisf+0x12>
    267c:	90 95       	com	r25
    267e:	80 95       	com	r24
    2680:	70 95       	com	r23
    2682:	61 95       	neg	r22
    2684:	7f 4f       	sbci	r23, 0xFF	; 255
    2686:	8f 4f       	sbci	r24, 0xFF	; 255
    2688:	9f 4f       	sbci	r25, 0xFF	; 255
    268a:	99 23       	and	r25, r25
    268c:	a9 f0       	breq	.+42     	; 0x26b8 <__floatsisf+0x40>
    268e:	f9 2f       	mov	r31, r25
    2690:	96 e9       	ldi	r25, 0x96	; 150
    2692:	bb 27       	eor	r27, r27
    2694:	93 95       	inc	r25
    2696:	f6 95       	lsr	r31
    2698:	87 95       	ror	r24
    269a:	77 95       	ror	r23
    269c:	67 95       	ror	r22
    269e:	b7 95       	ror	r27
    26a0:	f1 11       	cpse	r31, r1
    26a2:	f8 cf       	rjmp	.-16     	; 0x2694 <__floatsisf+0x1c>
    26a4:	fa f4       	brpl	.+62     	; 0x26e4 <__floatsisf+0x6c>
    26a6:	bb 0f       	add	r27, r27
    26a8:	11 f4       	brne	.+4      	; 0x26ae <__floatsisf+0x36>
    26aa:	60 ff       	sbrs	r22, 0
    26ac:	1b c0       	rjmp	.+54     	; 0x26e4 <__floatsisf+0x6c>
    26ae:	6f 5f       	subi	r22, 0xFF	; 255
    26b0:	7f 4f       	sbci	r23, 0xFF	; 255
    26b2:	8f 4f       	sbci	r24, 0xFF	; 255
    26b4:	9f 4f       	sbci	r25, 0xFF	; 255
    26b6:	16 c0       	rjmp	.+44     	; 0x26e4 <__floatsisf+0x6c>
    26b8:	88 23       	and	r24, r24
    26ba:	11 f0       	breq	.+4      	; 0x26c0 <__floatsisf+0x48>
    26bc:	96 e9       	ldi	r25, 0x96	; 150
    26be:	11 c0       	rjmp	.+34     	; 0x26e2 <__floatsisf+0x6a>
    26c0:	77 23       	and	r23, r23
    26c2:	21 f0       	breq	.+8      	; 0x26cc <__floatsisf+0x54>
    26c4:	9e e8       	ldi	r25, 0x8E	; 142
    26c6:	87 2f       	mov	r24, r23
    26c8:	76 2f       	mov	r23, r22
    26ca:	05 c0       	rjmp	.+10     	; 0x26d6 <__floatsisf+0x5e>
    26cc:	66 23       	and	r22, r22
    26ce:	71 f0       	breq	.+28     	; 0x26ec <__floatsisf+0x74>
    26d0:	96 e8       	ldi	r25, 0x86	; 134
    26d2:	86 2f       	mov	r24, r22
    26d4:	70 e0       	ldi	r23, 0x00	; 0
    26d6:	60 e0       	ldi	r22, 0x00	; 0
    26d8:	2a f0       	brmi	.+10     	; 0x26e4 <__floatsisf+0x6c>
    26da:	9a 95       	dec	r25
    26dc:	66 0f       	add	r22, r22
    26de:	77 1f       	adc	r23, r23
    26e0:	88 1f       	adc	r24, r24
    26e2:	da f7       	brpl	.-10     	; 0x26da <__floatsisf+0x62>
    26e4:	88 0f       	add	r24, r24
    26e6:	96 95       	lsr	r25
    26e8:	87 95       	ror	r24
    26ea:	97 f9       	bld	r25, 7
    26ec:	08 95       	ret

000026ee <__fp_cmp>:
    26ee:	99 0f       	add	r25, r25
    26f0:	00 08       	sbc	r0, r0
    26f2:	55 0f       	add	r21, r21
    26f4:	aa 0b       	sbc	r26, r26
    26f6:	e0 e8       	ldi	r30, 0x80	; 128
    26f8:	fe ef       	ldi	r31, 0xFE	; 254
    26fa:	16 16       	cp	r1, r22
    26fc:	17 06       	cpc	r1, r23
    26fe:	e8 07       	cpc	r30, r24
    2700:	f9 07       	cpc	r31, r25
    2702:	c0 f0       	brcs	.+48     	; 0x2734 <__fp_cmp+0x46>
    2704:	12 16       	cp	r1, r18
    2706:	13 06       	cpc	r1, r19
    2708:	e4 07       	cpc	r30, r20
    270a:	f5 07       	cpc	r31, r21
    270c:	98 f0       	brcs	.+38     	; 0x2734 <__fp_cmp+0x46>
    270e:	62 1b       	sub	r22, r18
    2710:	73 0b       	sbc	r23, r19
    2712:	84 0b       	sbc	r24, r20
    2714:	95 0b       	sbc	r25, r21
    2716:	39 f4       	brne	.+14     	; 0x2726 <__fp_cmp+0x38>
    2718:	0a 26       	eor	r0, r26
    271a:	61 f0       	breq	.+24     	; 0x2734 <__fp_cmp+0x46>
    271c:	23 2b       	or	r18, r19
    271e:	24 2b       	or	r18, r20
    2720:	25 2b       	or	r18, r21
    2722:	21 f4       	brne	.+8      	; 0x272c <__fp_cmp+0x3e>
    2724:	08 95       	ret
    2726:	0a 26       	eor	r0, r26
    2728:	09 f4       	brne	.+2      	; 0x272c <__fp_cmp+0x3e>
    272a:	a1 40       	sbci	r26, 0x01	; 1
    272c:	a6 95       	lsr	r26
    272e:	8f ef       	ldi	r24, 0xFF	; 255
    2730:	81 1d       	adc	r24, r1
    2732:	81 1d       	adc	r24, r1
    2734:	08 95       	ret

00002736 <__fp_inf>:
    2736:	97 f9       	bld	r25, 7
    2738:	9f 67       	ori	r25, 0x7F	; 127
    273a:	80 e8       	ldi	r24, 0x80	; 128
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	60 e0       	ldi	r22, 0x00	; 0
    2740:	08 95       	ret

00002742 <__fp_nan>:
    2742:	9f ef       	ldi	r25, 0xFF	; 255
    2744:	80 ec       	ldi	r24, 0xC0	; 192
    2746:	08 95       	ret

00002748 <__fp_pscA>:
    2748:	00 24       	eor	r0, r0
    274a:	0a 94       	dec	r0
    274c:	16 16       	cp	r1, r22
    274e:	17 06       	cpc	r1, r23
    2750:	18 06       	cpc	r1, r24
    2752:	09 06       	cpc	r0, r25
    2754:	08 95       	ret

00002756 <__fp_pscB>:
    2756:	00 24       	eor	r0, r0
    2758:	0a 94       	dec	r0
    275a:	12 16       	cp	r1, r18
    275c:	13 06       	cpc	r1, r19
    275e:	14 06       	cpc	r1, r20
    2760:	05 06       	cpc	r0, r21
    2762:	08 95       	ret

00002764 <__fp_round>:
    2764:	09 2e       	mov	r0, r25
    2766:	03 94       	inc	r0
    2768:	00 0c       	add	r0, r0
    276a:	11 f4       	brne	.+4      	; 0x2770 <__fp_round+0xc>
    276c:	88 23       	and	r24, r24
    276e:	52 f0       	brmi	.+20     	; 0x2784 <__fp_round+0x20>
    2770:	bb 0f       	add	r27, r27
    2772:	40 f4       	brcc	.+16     	; 0x2784 <__fp_round+0x20>
    2774:	bf 2b       	or	r27, r31
    2776:	11 f4       	brne	.+4      	; 0x277c <__fp_round+0x18>
    2778:	60 ff       	sbrs	r22, 0
    277a:	04 c0       	rjmp	.+8      	; 0x2784 <__fp_round+0x20>
    277c:	6f 5f       	subi	r22, 0xFF	; 255
    277e:	7f 4f       	sbci	r23, 0xFF	; 255
    2780:	8f 4f       	sbci	r24, 0xFF	; 255
    2782:	9f 4f       	sbci	r25, 0xFF	; 255
    2784:	08 95       	ret

00002786 <__fp_split3>:
    2786:	57 fd       	sbrc	r21, 7
    2788:	90 58       	subi	r25, 0x80	; 128
    278a:	44 0f       	add	r20, r20
    278c:	55 1f       	adc	r21, r21
    278e:	59 f0       	breq	.+22     	; 0x27a6 <__fp_splitA+0x10>
    2790:	5f 3f       	cpi	r21, 0xFF	; 255
    2792:	71 f0       	breq	.+28     	; 0x27b0 <__fp_splitA+0x1a>
    2794:	47 95       	ror	r20

00002796 <__fp_splitA>:
    2796:	88 0f       	add	r24, r24
    2798:	97 fb       	bst	r25, 7
    279a:	99 1f       	adc	r25, r25
    279c:	61 f0       	breq	.+24     	; 0x27b6 <__fp_splitA+0x20>
    279e:	9f 3f       	cpi	r25, 0xFF	; 255
    27a0:	79 f0       	breq	.+30     	; 0x27c0 <__fp_splitA+0x2a>
    27a2:	87 95       	ror	r24
    27a4:	08 95       	ret
    27a6:	12 16       	cp	r1, r18
    27a8:	13 06       	cpc	r1, r19
    27aa:	14 06       	cpc	r1, r20
    27ac:	55 1f       	adc	r21, r21
    27ae:	f2 cf       	rjmp	.-28     	; 0x2794 <__fp_split3+0xe>
    27b0:	46 95       	lsr	r20
    27b2:	f1 df       	rcall	.-30     	; 0x2796 <__fp_splitA>
    27b4:	08 c0       	rjmp	.+16     	; 0x27c6 <__fp_splitA+0x30>
    27b6:	16 16       	cp	r1, r22
    27b8:	17 06       	cpc	r1, r23
    27ba:	18 06       	cpc	r1, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	f1 cf       	rjmp	.-30     	; 0x27a2 <__fp_splitA+0xc>
    27c0:	86 95       	lsr	r24
    27c2:	71 05       	cpc	r23, r1
    27c4:	61 05       	cpc	r22, r1
    27c6:	08 94       	sec
    27c8:	08 95       	ret

000027ca <__fp_zero>:
    27ca:	e8 94       	clt

000027cc <__fp_szero>:
    27cc:	bb 27       	eor	r27, r27
    27ce:	66 27       	eor	r22, r22
    27d0:	77 27       	eor	r23, r23
    27d2:	cb 01       	movw	r24, r22
    27d4:	97 f9       	bld	r25, 7
    27d6:	08 95       	ret

000027d8 <__gesf2>:
    27d8:	0e 94 77 13 	call	0x26ee	; 0x26ee <__fp_cmp>
    27dc:	08 f4       	brcc	.+2      	; 0x27e0 <__gesf2+0x8>
    27de:	8f ef       	ldi	r24, 0xFF	; 255
    27e0:	08 95       	ret

000027e2 <__mulsf3>:
    27e2:	0e 94 04 14 	call	0x2808	; 0x2808 <__mulsf3x>
    27e6:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__fp_round>
    27ea:	0e 94 a4 13 	call	0x2748	; 0x2748 <__fp_pscA>
    27ee:	38 f0       	brcs	.+14     	; 0x27fe <__mulsf3+0x1c>
    27f0:	0e 94 ab 13 	call	0x2756	; 0x2756 <__fp_pscB>
    27f4:	20 f0       	brcs	.+8      	; 0x27fe <__mulsf3+0x1c>
    27f6:	95 23       	and	r25, r21
    27f8:	11 f0       	breq	.+4      	; 0x27fe <__mulsf3+0x1c>
    27fa:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__fp_inf>
    27fe:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__fp_nan>
    2802:	11 24       	eor	r1, r1
    2804:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__fp_szero>

00002808 <__mulsf3x>:
    2808:	0e 94 c3 13 	call	0x2786	; 0x2786 <__fp_split3>
    280c:	70 f3       	brcs	.-36     	; 0x27ea <__mulsf3+0x8>

0000280e <__mulsf3_pse>:
    280e:	95 9f       	mul	r25, r21
    2810:	c1 f3       	breq	.-16     	; 0x2802 <__mulsf3+0x20>
    2812:	95 0f       	add	r25, r21
    2814:	50 e0       	ldi	r21, 0x00	; 0
    2816:	55 1f       	adc	r21, r21
    2818:	62 9f       	mul	r22, r18
    281a:	f0 01       	movw	r30, r0
    281c:	72 9f       	mul	r23, r18
    281e:	bb 27       	eor	r27, r27
    2820:	f0 0d       	add	r31, r0
    2822:	b1 1d       	adc	r27, r1
    2824:	63 9f       	mul	r22, r19
    2826:	aa 27       	eor	r26, r26
    2828:	f0 0d       	add	r31, r0
    282a:	b1 1d       	adc	r27, r1
    282c:	aa 1f       	adc	r26, r26
    282e:	64 9f       	mul	r22, r20
    2830:	66 27       	eor	r22, r22
    2832:	b0 0d       	add	r27, r0
    2834:	a1 1d       	adc	r26, r1
    2836:	66 1f       	adc	r22, r22
    2838:	82 9f       	mul	r24, r18
    283a:	22 27       	eor	r18, r18
    283c:	b0 0d       	add	r27, r0
    283e:	a1 1d       	adc	r26, r1
    2840:	62 1f       	adc	r22, r18
    2842:	73 9f       	mul	r23, r19
    2844:	b0 0d       	add	r27, r0
    2846:	a1 1d       	adc	r26, r1
    2848:	62 1f       	adc	r22, r18
    284a:	83 9f       	mul	r24, r19
    284c:	a0 0d       	add	r26, r0
    284e:	61 1d       	adc	r22, r1
    2850:	22 1f       	adc	r18, r18
    2852:	74 9f       	mul	r23, r20
    2854:	33 27       	eor	r19, r19
    2856:	a0 0d       	add	r26, r0
    2858:	61 1d       	adc	r22, r1
    285a:	23 1f       	adc	r18, r19
    285c:	84 9f       	mul	r24, r20
    285e:	60 0d       	add	r22, r0
    2860:	21 1d       	adc	r18, r1
    2862:	82 2f       	mov	r24, r18
    2864:	76 2f       	mov	r23, r22
    2866:	6a 2f       	mov	r22, r26
    2868:	11 24       	eor	r1, r1
    286a:	9f 57       	subi	r25, 0x7F	; 127
    286c:	50 40       	sbci	r21, 0x00	; 0
    286e:	9a f0       	brmi	.+38     	; 0x2896 <__mulsf3_pse+0x88>
    2870:	f1 f0       	breq	.+60     	; 0x28ae <__mulsf3_pse+0xa0>
    2872:	88 23       	and	r24, r24
    2874:	4a f0       	brmi	.+18     	; 0x2888 <__mulsf3_pse+0x7a>
    2876:	ee 0f       	add	r30, r30
    2878:	ff 1f       	adc	r31, r31
    287a:	bb 1f       	adc	r27, r27
    287c:	66 1f       	adc	r22, r22
    287e:	77 1f       	adc	r23, r23
    2880:	88 1f       	adc	r24, r24
    2882:	91 50       	subi	r25, 0x01	; 1
    2884:	50 40       	sbci	r21, 0x00	; 0
    2886:	a9 f7       	brne	.-22     	; 0x2872 <__mulsf3_pse+0x64>
    2888:	9e 3f       	cpi	r25, 0xFE	; 254
    288a:	51 05       	cpc	r21, r1
    288c:	80 f0       	brcs	.+32     	; 0x28ae <__mulsf3_pse+0xa0>
    288e:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__fp_inf>
    2892:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__fp_szero>
    2896:	5f 3f       	cpi	r21, 0xFF	; 255
    2898:	e4 f3       	brlt	.-8      	; 0x2892 <__mulsf3_pse+0x84>
    289a:	98 3e       	cpi	r25, 0xE8	; 232
    289c:	d4 f3       	brlt	.-12     	; 0x2892 <__mulsf3_pse+0x84>
    289e:	86 95       	lsr	r24
    28a0:	77 95       	ror	r23
    28a2:	67 95       	ror	r22
    28a4:	b7 95       	ror	r27
    28a6:	f7 95       	ror	r31
    28a8:	e7 95       	ror	r30
    28aa:	9f 5f       	subi	r25, 0xFF	; 255
    28ac:	c1 f7       	brne	.-16     	; 0x289e <__mulsf3_pse+0x90>
    28ae:	fe 2b       	or	r31, r30
    28b0:	88 0f       	add	r24, r24
    28b2:	91 1d       	adc	r25, r1
    28b4:	96 95       	lsr	r25
    28b6:	87 95       	ror	r24
    28b8:	97 f9       	bld	r25, 7
    28ba:	08 95       	ret

000028bc <_exit>:
    28bc:	f8 94       	cli

000028be <__stop_program>:
    28be:	ff cf       	rjmp	.-2      	; 0x28be <__stop_program>
