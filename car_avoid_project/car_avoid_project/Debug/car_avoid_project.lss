
car_avoid_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000029ce  00002a62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800064  00800064  00002a66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002a98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003873  00000000  00000000  00002d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db6  00000000  00000000  000065f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000031d2  00000000  00000000  000073ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009cc  00000000  00000000  0000a580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014c0  00000000  00000000  0000af4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005098  00000000  00000000  0000c40c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  000114a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_1>
       8:	0c 94 35 04 	jmp	0x86a	; 0x86a <__vector_2>
       c:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__vector_3>
      10:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__vector_4>
      14:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 40 08 	jmp	0x1080	; 0x1080 <__vector_9>
      28:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__vector_10>
      2c:	0c 94 17 08 	jmp	0x102e	; 0x102e <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	2a 07       	cpc	r18, r26
      56:	2f 07       	cpc	r18, r31
      58:	35 07       	cpc	r19, r21
      5a:	e5 07       	cpc	r30, r21
      5c:	3b 07       	cpc	r19, r27
      5e:	e5 07       	cpc	r30, r21
      60:	41 07       	cpc	r20, r17
      62:	47 07       	cpc	r20, r23
      64:	4d 07       	cpc	r20, r29
      66:	53 07       	cpc	r21, r19
      68:	6d 07       	cpc	r22, r29
      6a:	72 07       	cpc	r23, r18
      6c:	78 07       	cpc	r23, r24
      6e:	ed 07       	cpc	r30, r29
      70:	7e 07       	cpc	r23, r30
      72:	ed 07       	cpc	r30, r29
      74:	84 07       	cpc	r24, r20
      76:	8a 07       	cpc	r24, r26
      78:	90 07       	cpc	r25, r16
      7a:	96 07       	cpc	r25, r22
      7c:	ab 07       	cpc	r26, r27
      7e:	b0 07       	cpc	r27, r16
      80:	b6 07       	cpc	r27, r22
      82:	bc 07       	cpc	r27, r28
      84:	c2 07       	cpc	r28, r18
      86:	c8 07       	cpc	r28, r24
      88:	ce 07       	cpc	r28, r30
      8a:	d4 07       	cpc	r29, r20

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	ee ec       	ldi	r30, 0xCE	; 206
      a0:	f9 e2       	ldi	r31, 0x29	; 41
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a4 36       	cpi	r26, 0x64	; 100
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	a4 e6       	ldi	r26, 0x64	; 100
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a7 38       	cpi	r26, 0x87	; 135
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 a2 02 	call	0x544	; 0x544 <main>
      c2:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <dcMotor_init>:
/**
 * @brief       dcMotor_init        		: Function used to initialize the motor pin connections      
 */

enu_dcMotor_error_t dcMotor_init (str_dcMotor_config_t* str_dcMotor_config)
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
	uint8 u8_l_returnValue = ZERO_VALUE;
	if(str_dcMotor_config != NULL_PTR)
      ce:	00 97       	sbiw	r24, 0x00	; 0
      d0:	11 f1       	breq	.+68     	; 0x116 <dcMotor_init+0x4c>
      d2:	ec 01       	movw	r28, r24
	{
		u8_l_returnValue = DIO_pinMode(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_OUTPUT);
      d4:	69 81       	ldd	r22, Y+1	; 0x01
      d6:	41 e0       	ldi	r20, 0x01	; 1
      d8:	88 81       	ld	r24, Y
      da:	0e 94 be 02 	call	0x57c	; 0x57c <DIO_pinMode>
		if(u8_l_returnValue == VALID)
      de:	81 30       	cpi	r24, 0x01	; 1
      e0:	e1 f4       	brne	.+56     	; 0x11a <dcMotor_init+0x50>
		{
			u8_l_returnValue = DIO_pinMode(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_OUTPUT);
      e2:	6b 81       	ldd	r22, Y+3	; 0x03
      e4:	41 e0       	ldi	r20, 0x01	; 1
      e6:	8a 81       	ldd	r24, Y+2	; 0x02
      e8:	0e 94 be 02 	call	0x57c	; 0x57c <DIO_pinMode>
			if(u8_l_returnValue == VALID)
      ec:	81 30       	cpi	r24, 0x01	; 1
      ee:	b9 f4       	brne	.+46     	; 0x11e <dcMotor_init+0x54>
			{
				u8_l_returnValue = PWM_Init(str_dcMotor_config->enable_terminal.port_id, str_dcMotor_config->enable_terminal.pin_id,PWM_ID);
      f0:	6d 81       	ldd	r22, Y+5	; 0x05
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	8c 81       	ldd	r24, Y+4	; 0x04
      f6:	0e 94 38 01 	call	0x270	; 0x270 <PWM_Init>
				if(u8_l_returnValue == VALID)
      fa:	81 30       	cpi	r24, 0x01	; 1
      fc:	91 f4       	brne	.+36     	; 0x122 <dcMotor_init+0x58>
				{
					DIO_writePin(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_LOW);
      fe:	40 e0       	ldi	r20, 0x00	; 0
     100:	69 81       	ldd	r22, Y+1	; 0x01
     102:	88 81       	ld	r24, Y
     104:	0e 94 44 03 	call	0x688	; 0x688 <DIO_writePin>
					DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_LOW);
     108:	40 e0       	ldi	r20, 0x00	; 0
     10a:	6b 81       	ldd	r22, Y+3	; 0x03
     10c:	8a 81       	ldd	r24, Y+2	; 0x02
     10e:	0e 94 44 03 	call	0x688	; 0x688 <DIO_writePin>
 * @brief       dcMotor_init        		: Function used to initialize the motor pin connections      
 */

enu_dcMotor_error_t dcMotor_init (str_dcMotor_config_t* str_dcMotor_config)
{
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	07 c0       	rjmp	.+14     	; 0x124 <dcMotor_init+0x5a>
			enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
		}
	}
	else
	{
		enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	05 c0       	rjmp	.+10     	; 0x124 <dcMotor_init+0x5a>
				enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
			}
		}
		else
		{
			enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	03 c0       	rjmp	.+6      	; 0x124 <dcMotor_init+0x5a>
					DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_LOW);
				}					
			}
			else
			{
				enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	01 c0       	rjmp	.+2      	; 0x124 <dcMotor_init+0x5a>
 * @brief       dcMotor_init        		: Function used to initialize the motor pin connections      
 */

enu_dcMotor_error_t dcMotor_init (str_dcMotor_config_t* str_dcMotor_config)
{
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
     122:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
	}
	return enu_dcMotor_error;
}
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <dcMotor_rotate>:

/**
 * @brief       dcMotor_rotate        		: Function used to control motor rotation direction and the rotation speed    
 */
enu_dcMotor_error_t dcMotor_rotate (str_dcMotor_config_t* str_dcMotor_config,enu_dcMotor_state_t enu_dcMotor_state,uint8 u8_dcMotor_speed)
{
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
	if((str_dcMotor_config != NULL_PTR) && (enu_dcMotor_state < ENU_DCMOTOR_MAX_STATE) && (u8_dcMotor_speed < MAX_MOTOR_SPEED))
     130:	00 97       	sbiw	r24, 0x00	; 0
     132:	41 f1       	breq	.+80     	; 0x184 <dcMotor_rotate+0x5a>
     134:	62 30       	cpi	r22, 0x02	; 2
     136:	40 f5       	brcc	.+80     	; 0x188 <dcMotor_rotate+0x5e>
     138:	44 36       	cpi	r20, 0x64	; 100
     13a:	40 f5       	brcc	.+80     	; 0x18c <dcMotor_rotate+0x62>
     13c:	24 2f       	mov	r18, r20
     13e:	16 2f       	mov	r17, r22
     140:	ec 01       	movw	r28, r24
	{
		PWM_start(PWM_ID,PWM_PERIODIC_TIME,u8_dcMotor_speed);
     142:	44 e0       	ldi	r20, 0x04	; 4
     144:	50 e0       	ldi	r21, 0x00	; 0
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	0e 94 84 01 	call	0x308	; 0x308 <PWM_start>
		if(enu_dcMotor_state == ENU_DCMOTOR_CW)
     150:	11 11       	cpse	r17, r1
     152:	0c c0       	rjmp	.+24     	; 0x16c <dcMotor_rotate+0x42>
		{
			DIO_writePin(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_HIGH);
     154:	41 e0       	ldi	r20, 0x01	; 1
     156:	69 81       	ldd	r22, Y+1	; 0x01
     158:	88 81       	ld	r24, Y
     15a:	0e 94 44 03 	call	0x688	; 0x688 <DIO_writePin>
			DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_LOW);
     15e:	40 e0       	ldi	r20, 0x00	; 0
     160:	6b 81       	ldd	r22, Y+3	; 0x03
     162:	8a 81       	ldd	r24, Y+2	; 0x02
     164:	0e 94 44 03 	call	0x688	; 0x688 <DIO_writePin>
/**
 * @brief       dcMotor_rotate        		: Function used to control motor rotation direction and the rotation speed    
 */
enu_dcMotor_error_t dcMotor_rotate (str_dcMotor_config_t* str_dcMotor_config,enu_dcMotor_state_t enu_dcMotor_state,uint8 u8_dcMotor_speed)
{
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	11 c0       	rjmp	.+34     	; 0x18e <dcMotor_rotate+0x64>
			DIO_writePin(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_HIGH);
			DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_LOW);
		}
		else
		{
			DIO_writePin(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_LOW);
     16c:	40 e0       	ldi	r20, 0x00	; 0
     16e:	69 81       	ldd	r22, Y+1	; 0x01
     170:	88 81       	ld	r24, Y
     172:	0e 94 44 03 	call	0x688	; 0x688 <DIO_writePin>
			DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_HIGH);
     176:	41 e0       	ldi	r20, 0x01	; 1
     178:	6b 81       	ldd	r22, Y+3	; 0x03
     17a:	8a 81       	ldd	r24, Y+2	; 0x02
     17c:	0e 94 44 03 	call	0x688	; 0x688 <DIO_writePin>
/**
 * @brief       dcMotor_rotate        		: Function used to control motor rotation direction and the rotation speed    
 */
enu_dcMotor_error_t dcMotor_rotate (str_dcMotor_config_t* str_dcMotor_config,enu_dcMotor_state_t enu_dcMotor_state,uint8 u8_dcMotor_speed)
{
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	05 c0       	rjmp	.+10     	; 0x18e <dcMotor_rotate+0x64>
			DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_HIGH);
		}
	}
	else
	{
		enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	03 c0       	rjmp	.+6      	; 0x18e <dcMotor_rotate+0x64>
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	01 c0       	rjmp	.+2      	; 0x18e <dcMotor_rotate+0x64>
     18c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enu_dcMotor_error;
}
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	08 95       	ret

00000196 <PWM_callback>:
}


/* ============= PWM CALLBACK FUNCTION =============*/
void PWM_callback (void)
{
     196:	cf 92       	push	r12
     198:	df 92       	push	r13
     19a:	ef 92       	push	r14
     19c:	ff 92       	push	r15
     19e:	cf 93       	push	r28
	if((gs_u8_duty_cycle < MAX_DUTY_CYCLE) && ((gs_u8_duty_cycle > ZERO_VALUE)))
     1a0:	c0 91 6d 00 	lds	r28, 0x006D	; 0x80006d <gs_u8_duty_cycle>
     1a4:	6c 2f       	mov	r22, r28
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
     1b0:	6b 01       	movw	r12, r22
     1b2:	7c 01       	movw	r14, r24
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	48 ec       	ldi	r20, 0xC8	; 200
     1ba:	52 e4       	ldi	r21, 0x42	; 66
     1bc:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
     1c0:	88 23       	and	r24, r24
     1c2:	bc f5       	brge	.+110    	; 0x232 <PWM_callback+0x9c>
     1c4:	cc 23       	and	r28, r28
     1c6:	a9 f1       	breq	.+106    	; 0x232 <PWM_callback+0x9c>
	{
		DIO_togglePin(gs_u8_gpio_port_id,gs_u8_gpio_pin_id);
     1c8:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <gs_u8_gpio_pin_id>
     1cc:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <gs_u8_gpio_port_id>
     1d0:	0e 94 ca 03 	call	0x794	; 0x794 <DIO_togglePin>
		timer_stop(gs_u8_timer_id);
     1d4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gs_u8_timer_id>
     1d8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <timer_stop>
		if(gs_bo_pwm_flag == FALSE)		
     1dc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gs_bo_pwm_flag>
     1e0:	81 11       	cpse	r24, r1
     1e2:	12 c0       	rjmp	.+36     	; 0x208 <PWM_callback+0x72>
		{
			timer_setClock(gs_u8_timer_id,gs_u8_offTime_prescale);
     1e4:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <gs_u8_offTime_prescale>
     1e8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gs_u8_timer_id>
     1ec:	0e 94 75 06 	call	0xcea	; 0xcea <timer_setClock>
			timer_setInitialValue(gs_u8_timer_id,gs_u16_offTime_initValue);
     1f0:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <gs_u16_offTime_initValue>
     1f4:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <gs_u16_offTime_initValue+0x1>
     1f8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gs_u8_timer_id>
     1fc:	0e 94 4a 06 	call	0xc94	; 0xc94 <timer_setInitialValue>
			gs_bo_pwm_flag = TRUE;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <gs_bo_pwm_flag>
     206:	10 c0       	rjmp	.+32     	; 0x228 <PWM_callback+0x92>
		}
		else
		{
			timer_setClock(gs_u8_timer_id,gs_u8_onTime_prescale);
     208:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <gs_u8_onTime_prescale>
     20c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gs_u8_timer_id>
     210:	0e 94 75 06 	call	0xcea	; 0xcea <timer_setClock>
			timer_setInitialValue(gs_u8_timer_id,gs_u16_onTime_initValue);
     214:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__data_end>
     218:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__data_end+0x1>
     21c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gs_u8_timer_id>
     220:	0e 94 4a 06 	call	0xc94	; 0xc94 <timer_setInitialValue>
			gs_bo_pwm_flag = FALSE;
     224:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <gs_bo_pwm_flag>
		}
		timer_start(gs_u8_timer_id);
     228:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gs_u8_timer_id>
     22c:	0e 94 02 07 	call	0xe04	; 0xe04 <timer_start>
     230:	19 c0       	rjmp	.+50     	; 0x264 <PWM_callback+0xce>
	}
	else if (gs_u8_duty_cycle == MAX_DUTY_CYCLE)
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	48 ec       	ldi	r20, 0xC8	; 200
     238:	52 e4       	ldi	r21, 0x42	; 66
     23a:	c7 01       	movw	r24, r14
     23c:	b6 01       	movw	r22, r12
     23e:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
     242:	81 11       	cpse	r24, r1
     244:	08 c0       	rjmp	.+16     	; 0x256 <PWM_callback+0xc0>
	{
		DIO_writePin(gs_u8_gpio_port_id,gs_u8_gpio_pin_id,PIN_HIGH);
     246:	41 e0       	ldi	r20, 0x01	; 1
     248:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <gs_u8_gpio_pin_id>
     24c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <gs_u8_gpio_port_id>
     250:	0e 94 44 03 	call	0x688	; 0x688 <DIO_writePin>
     254:	07 c0       	rjmp	.+14     	; 0x264 <PWM_callback+0xce>
	}
	else
	{
		DIO_writePin(gs_u8_gpio_port_id,gs_u8_gpio_pin_id,PIN_LOW);
     256:	40 e0       	ldi	r20, 0x00	; 0
     258:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <gs_u8_gpio_pin_id>
     25c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <gs_u8_gpio_port_id>
     260:	0e 94 44 03 	call	0x688	; 0x688 <DIO_writePin>
	}
}
     264:	cf 91       	pop	r28
     266:	ff 90       	pop	r15
     268:	ef 90       	pop	r14
     26a:	df 90       	pop	r13
     26c:	cf 90       	pop	r12
     26e:	08 95       	ret

00000270 <PWM_Init>:
 *
 * @return      ENU_PWM_VALID_OPERATION		: in case of successful operation     
 *				ENU_PWM_INVALID_OPERATION	:	in case of wrong value       
 */
enu_pwm_error_t PWM_Init(uint8 u8_pwm_port_id,uint8 u8_pwm_pin_id,uint8 u8_pwm_timer_id)
{
     270:	ff 92       	push	r15
     272:	0f 93       	push	r16
     274:	1f 93       	push	r17
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	29 97       	sbiw	r28, 0x09	; 9
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	f8 94       	cli
     284:	de bf       	out	0x3e, r29	; 62
     286:	0f be       	out	0x3f, r0	; 63
     288:	cd bf       	out	0x3d, r28	; 61
	enu_pwm_error_t enu_pwm_error = ENU_PWM_VALID_OPERATION;
	str_tmr_config_t str_tmr_config;
	//check the passing parameters
	if((u8_pwm_port_id < MAX_PORT_ID) && (u8_pwm_pin_id < MAX_PIN_ID) && (u8_pwm_timer_id < MAX_ENU_TMR_CHANNEL))
     28a:	84 30       	cpi	r24, 0x04	; 4
     28c:	60 f5       	brcc	.+88     	; 0x2e6 <PWM_Init+0x76>
     28e:	68 30       	cpi	r22, 0x08	; 8
     290:	60 f5       	brcc	.+88     	; 0x2ea <PWM_Init+0x7a>
     292:	43 30       	cpi	r20, 0x03	; 3
     294:	60 f5       	brcc	.+88     	; 0x2ee <PWM_Init+0x7e>
     296:	f4 2e       	mov	r15, r20
     298:	06 2f       	mov	r16, r22
     29a:	18 2f       	mov	r17, r24
	{
		//set global variables
		gs_u8_gpio_port_id	= u8_pwm_port_id;
     29c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <gs_u8_gpio_port_id>
		gs_u8_gpio_pin_id	= u8_pwm_pin_id;
     2a0:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <gs_u8_gpio_pin_id>
		gs_u8_timer_id		= u8_pwm_timer_id;
     2a4:	40 93 6f 00 	sts	0x006F, r20	; 0x80006f <gs_u8_timer_id>
		//initialize TIMER
		str_tmr_config.enu_tmr_channel_id		= u8_pwm_timer_id;
     2a8:	49 83       	std	Y+1, r20	; 0x01
		str_tmr_config.enu_tmr_clk				= ENU_TMR_NO_CLK;
     2aa:	1d 82       	std	Y+5, r1	; 0x05
		str_tmr_config.enu_tmr_mode				= ENU_TMR_NORMAL_MODE;
     2ac:	1a 82       	std	Y+2, r1	; 0x02
		str_tmr_config.enu_tmr_cmp_mode			= ENU_TMR_CMP_DISCONNECT;
     2ae:	1c 82       	std	Y+4, r1	; 0x04
		str_tmr_config.enu_tmr_interrupt_state	= ENU_TMR_INT_ENABLE;
     2b0:	1b 82       	std	Y+3, r1	; 0x03
		str_tmr_config.u16_tmr_initial_value	= ZERO_VALUE;
     2b2:	1f 82       	std	Y+7, r1	; 0x07
     2b4:	1e 82       	std	Y+6, r1	; 0x06
		str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
     2b6:	19 86       	std	Y+9, r1	; 0x09
     2b8:	18 86       	std	Y+8, r1	; 0x08
		timer_init(&str_tmr_config);
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 8b 04 	call	0x916	; 0x916 <timer_init>
		timer_setCallBack(u8_pwm_timer_id,PWM_callback,ENU_TMR_NORMAL_MODE);
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	6b ec       	ldi	r22, 0xCB	; 203
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	8f 2d       	mov	r24, r15
     2ca:	0e 94 b7 06 	call	0xd6e	; 0xd6e <timer_setCallBack>
		//initialize GPIO
		DIO_pinMode(u8_pwm_port_id,u8_pwm_pin_id,PIN_OUTPUT);
     2ce:	41 e0       	ldi	r20, 0x01	; 1
     2d0:	60 2f       	mov	r22, r16
     2d2:	81 2f       	mov	r24, r17
     2d4:	0e 94 be 02 	call	0x57c	; 0x57c <DIO_pinMode>
		DIO_writePin(u8_pwm_port_id,u8_pwm_pin_id,PIN_LOW);
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	60 2f       	mov	r22, r16
     2dc:	81 2f       	mov	r24, r17
     2de:	0e 94 44 03 	call	0x688	; 0x688 <DIO_writePin>
 * @return      ENU_PWM_VALID_OPERATION		: in case of successful operation     
 *				ENU_PWM_INVALID_OPERATION	:	in case of wrong value       
 */
enu_pwm_error_t PWM_Init(uint8 u8_pwm_port_id,uint8 u8_pwm_pin_id,uint8 u8_pwm_timer_id)
{
	enu_pwm_error_t enu_pwm_error = ENU_PWM_VALID_OPERATION;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
		str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
		timer_init(&str_tmr_config);
		timer_setCallBack(u8_pwm_timer_id,PWM_callback,ENU_TMR_NORMAL_MODE);
		//initialize GPIO
		DIO_pinMode(u8_pwm_port_id,u8_pwm_pin_id,PIN_OUTPUT);
		DIO_writePin(u8_pwm_port_id,u8_pwm_pin_id,PIN_LOW);
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <PWM_Init+0x80>
	}
	else
	{
		enu_pwm_error = ENU_PWM_INVALID_OPERATION;
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <PWM_Init+0x80>
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <PWM_Init+0x80>
     2ee:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enu_pwm_error;
}
     2f0:	29 96       	adiw	r28, 0x09	; 9
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	08 95       	ret

00000308 <PWM_start>:
 * @param[in]   u8_duty_cycle			: PWM duty cycle percentage it should be [0%--100%]
 * @return      ENU_PWM_VALID_OPERATION		: in case of successful operation     
 *				ENU_PWM_INVALID_OPERATION	:in case of wrong value       
 */
enu_pwm_error_t PWM_start(uint8 u8_pwm_timer_id,uint32 u32_periodic_time,uint8 u8_duty_cycle)
{
     308:	4f 92       	push	r4
     30a:	5f 92       	push	r5
     30c:	6f 92       	push	r6
     30e:	7f 92       	push	r7
     310:	8f 92       	push	r8
     312:	9f 92       	push	r9
     314:	af 92       	push	r10
     316:	bf 92       	push	r11
     318:	df 92       	push	r13
     31a:	ef 92       	push	r14
     31c:	ff 92       	push	r15
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	2a 97       	sbiw	r28, 0x0a	; 10
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f be       	out	0x3f, r0	; 63
     334:	cd bf       	out	0x3d, r28	; 61
	enu_pwm_error_t enu_pwm_error	= ENU_PWM_VALID_OPERATION;
	float32 f32_on_time				= ZERO_VALUE;
	float32 f32_off_time			= ZERO_VALUE;
	uint16  u16_periodic_prescale	= ZERO_VALUE;
     336:	1a 82       	std	Y+2, r1	; 0x02
     338:	19 82       	std	Y+1, r1	; 0x01
	uint16	u16_offTime_prescale	= ZERO_VALUE;
     33a:	1c 82       	std	Y+4, r1	; 0x04
     33c:	1b 82       	std	Y+3, r1	; 0x03
	uint16	u16_onTime_prescale		= ZERO_VALUE;
     33e:	1e 82       	std	Y+6, r1	; 0x06
     340:	1d 82       	std	Y+5, r1	; 0x05
	gs_u8_duty_cycle				= u8_duty_cycle;
     342:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <gs_u8_duty_cycle>
	
	if((u8_pwm_timer_id < MAX_ENU_TMR_CHANNEL) && (u32_periodic_time > ZERO_VALUE))
     346:	83 30       	cpi	r24, 0x03	; 3
     348:	08 f0       	brcs	.+2      	; 0x34c <PWM_start+0x44>
     34a:	b6 c0       	rjmp	.+364    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     34c:	41 15       	cp	r20, r1
     34e:	51 05       	cpc	r21, r1
     350:	61 05       	cpc	r22, r1
     352:	71 05       	cpc	r23, r1
     354:	09 f4       	brne	.+2      	; 0x358 <PWM_start+0x50>
     356:	b2 c0       	rjmp	.+356    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     358:	12 2f       	mov	r17, r18
     35a:	4a 01       	movw	r8, r20
     35c:	5b 01       	movw	r10, r22
     35e:	d8 2e       	mov	r13, r24
	{
		if((u8_duty_cycle < MAX_DUTY_CYCLE) && (u8_duty_cycle > ZERO_VALUE))
     360:	62 2f       	mov	r22, r18
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
     36c:	2b 01       	movw	r4, r22
     36e:	3c 01       	movw	r6, r24
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	48 ec       	ldi	r20, 0xC8	; 200
     376:	52 e4       	ldi	r21, 0x42	; 66
     378:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
     37c:	88 23       	and	r24, r24
     37e:	0c f0       	brlt	.+2      	; 0x382 <PWM_start+0x7a>
     380:	69 c0       	rjmp	.+210    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     382:	11 23       	and	r17, r17
     384:	09 f4       	brne	.+2      	; 0x388 <PWM_start+0x80>
     386:	66 c0       	rjmp	.+204    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		{
			f32_off_time	= ((float32)u32_periodic_time*u8_duty_cycle)/MAX_DUTY_CYCLE;	//calculate on time delay
     388:	c5 01       	movw	r24, r10
     38a:	b4 01       	movw	r22, r8
     38c:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
     390:	6f 83       	std	Y+7, r22	; 0x07
     392:	78 87       	std	Y+8, r23	; 0x08
     394:	89 87       	std	Y+9, r24	; 0x09
     396:	9a 87       	std	Y+10, r25	; 0x0a
     398:	9b 01       	movw	r18, r22
     39a:	ac 01       	movw	r20, r24
     39c:	c3 01       	movw	r24, r6
     39e:	b2 01       	movw	r22, r4
     3a0:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__mulsf3>
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	48 ec       	ldi	r20, 0xC8	; 200
     3aa:	52 e4       	ldi	r21, 0x42	; 66
     3ac:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
     3b0:	4b 01       	movw	r8, r22
     3b2:	5c 01       	movw	r10, r24
			f32_on_time		= u32_periodic_time - f32_off_time;
     3b4:	9b 01       	movw	r18, r22
     3b6:	ac 01       	movw	r20, r24
     3b8:	6f 81       	ldd	r22, Y+7	; 0x07
     3ba:	78 85       	ldd	r23, Y+8	; 0x08
     3bc:	89 85       	ldd	r24, Y+9	; 0x09
     3be:	9a 85       	ldd	r25, Y+10	; 0x0a
     3c0:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
     3c4:	2b 01       	movw	r4, r22
     3c6:	3c 01       	movw	r6, r24
			//gs_f32_on_time	= f32_on_time;
			//gs_f32_off_time = f32_off_time;
			calc_prescaler(f32_off_time,u8_pwm_timer_id,ENU_MILLI_SECOND,&u16_offTime_prescale);
     3c8:	8e 01       	movw	r16, r28
     3ca:	0d 5f       	subi	r16, 0xFD	; 253
     3cc:	1f 4f       	sbci	r17, 0xFF	; 255
     3ce:	21 e0       	ldi	r18, 0x01	; 1
     3d0:	4d 2d       	mov	r20, r13
     3d2:	c5 01       	movw	r24, r10
     3d4:	b4 01       	movw	r22, r8
     3d6:	0e 94 0d 09 	call	0x121a	; 0x121a <calc_prescaler>
			calc_prescaler(f32_on_time,u8_pwm_timer_id,ENU_MILLI_SECOND,&u16_onTime_prescale);
     3da:	0e 5f       	subi	r16, 0xFE	; 254
     3dc:	1f 4f       	sbci	r17, 0xFF	; 255
     3de:	21 e0       	ldi	r18, 0x01	; 1
     3e0:	4d 2d       	mov	r20, r13
     3e2:	c3 01       	movw	r24, r6
     3e4:	b2 01       	movw	r22, r4
     3e6:	0e 94 0d 09 	call	0x121a	; 0x121a <calc_prescaler>
			calc_initialValue(u8_pwm_timer_id,ENU_MILLI_SECOND,u16_offTime_prescale,f32_off_time,&gs_u16_offTime_initValue);
     3ea:	4b 81       	ldd	r20, Y+3	; 0x03
     3ec:	5c 81       	ldd	r21, Y+4	; 0x04
     3ee:	0f 2e       	mov	r0, r31
     3f0:	f6 e6       	ldi	r31, 0x66	; 102
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	ff 2e       	mov	r15, r31
     3f8:	f0 2d       	mov	r31, r0
     3fa:	95 01       	movw	r18, r10
     3fc:	84 01       	movw	r16, r8
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	8d 2d       	mov	r24, r13
     402:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <calc_initialValue>
			calc_initialValue(u8_pwm_timer_id,ENU_MILLI_SECOND,u16_onTime_prescale,f32_on_time,&gs_u16_onTime_initValue);
     406:	4d 81       	ldd	r20, Y+5	; 0x05
     408:	5e 81       	ldd	r21, Y+6	; 0x06
     40a:	0f 2e       	mov	r0, r31
     40c:	f4 e6       	ldi	r31, 0x64	; 100
     40e:	ef 2e       	mov	r14, r31
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	ff 2e       	mov	r15, r31
     414:	f0 2d       	mov	r31, r0
     416:	93 01       	movw	r18, r6
     418:	82 01       	movw	r16, r4
     41a:	61 e0       	ldi	r22, 0x01	; 1
     41c:	8d 2d       	mov	r24, r13
     41e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <calc_initialValue>
			gs_u8_onTime_prescale	= (uint8) timer_clk_map(u16_onTime_prescale);
     422:	8d 81       	ldd	r24, Y+5	; 0x05
     424:	9e 81       	ldd	r25, Y+6	; 0x06
     426:	0e 94 75 02 	call	0x4ea	; 0x4ea <timer_clk_map>
     42a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <gs_u8_onTime_prescale>
			gs_u8_offTime_prescale	= (uint8) timer_clk_map(u16_offTime_prescale);
     42e:	8b 81       	ldd	r24, Y+3	; 0x03
     430:	9c 81       	ldd	r25, Y+4	; 0x04
     432:	0e 94 75 02 	call	0x4ea	; 0x4ea <timer_clk_map>
     436:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <gs_u8_offTime_prescale>
			timer_setInitialValue(u8_pwm_timer_id,gs_u16_onTime_initValue);
     43a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__data_end>
     43e:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__data_end+0x1>
     442:	8d 2d       	mov	r24, r13
     444:	0e 94 4a 06 	call	0xc94	; 0xc94 <timer_setInitialValue>
			timer_setClock(u8_pwm_timer_id,gs_u8_onTime_prescale);
     448:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <gs_u8_onTime_prescale>
     44c:	8d 2d       	mov	r24, r13
     44e:	0e 94 75 06 	call	0xcea	; 0xcea <timer_setClock>
	gs_u8_duty_cycle				= u8_duty_cycle;
	
	if((u8_pwm_timer_id < MAX_ENU_TMR_CHANNEL) && (u32_periodic_time > ZERO_VALUE))
	{
		if((u8_duty_cycle < MAX_DUTY_CYCLE) && (u8_duty_cycle > ZERO_VALUE))
		{
     452:	2d c0       	rjmp	.+90     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			timer_setInitialValue(u8_pwm_timer_id,gs_u16_onTime_initValue);
			timer_setClock(u8_pwm_timer_id,gs_u8_onTime_prescale);
		}
		else 
		{
			calc_prescaler(u32_periodic_time,u8_pwm_timer_id,ENU_MILLI_SECOND,&u16_periodic_prescale);
     454:	c5 01       	movw	r24, r10
     456:	b4 01       	movw	r22, r8
     458:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
     45c:	4b 01       	movw	r8, r22
     45e:	5c 01       	movw	r10, r24
     460:	8e 01       	movw	r16, r28
     462:	0f 5f       	subi	r16, 0xFF	; 255
     464:	1f 4f       	sbci	r17, 0xFF	; 255
     466:	21 e0       	ldi	r18, 0x01	; 1
     468:	4d 2d       	mov	r20, r13
     46a:	0e 94 0d 09 	call	0x121a	; 0x121a <calc_prescaler>
			calc_initialValue(u8_pwm_timer_id,ENU_MILLI_SECOND,u16_periodic_prescale,u32_periodic_time,&gs_u16_periodic_initValue);
     46e:	49 81       	ldd	r20, Y+1	; 0x01
     470:	5a 81       	ldd	r21, Y+2	; 0x02
     472:	0f 2e       	mov	r0, r31
     474:	f8 e6       	ldi	r31, 0x68	; 104
     476:	ef 2e       	mov	r14, r31
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	ff 2e       	mov	r15, r31
     47c:	f0 2d       	mov	r31, r0
     47e:	95 01       	movw	r18, r10
     480:	84 01       	movw	r16, r8
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	8d 2d       	mov	r24, r13
     486:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <calc_initialValue>
			gs_u8_periodic_prescale	= (uint8) timer_clk_map(u16_periodic_prescale);
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	9a 81       	ldd	r25, Y+2	; 0x02
     48e:	0e 94 75 02 	call	0x4ea	; 0x4ea <timer_clk_map>
     492:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <gs_u8_periodic_prescale>
			timer_setInitialValue(u8_pwm_timer_id,gs_u16_periodic_initValue);
     496:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <gs_u16_periodic_initValue>
     49a:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <gs_u16_periodic_initValue+0x1>
     49e:	8d 2d       	mov	r24, r13
     4a0:	0e 94 4a 06 	call	0xc94	; 0xc94 <timer_setInitialValue>
			timer_setClock(u8_pwm_timer_id,gs_u8_periodic_prescale);
     4a4:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <gs_u8_periodic_prescale>
     4a8:	8d 2d       	mov	r24, r13
     4aa:	0e 94 75 06 	call	0xcea	; 0xcea <timer_setClock>
		}
		timer_start(u8_pwm_timer_id);
     4ae:	8d 2d       	mov	r24, r13
     4b0:	0e 94 02 07 	call	0xe04	; 0xe04 <timer_start>
 * @return      ENU_PWM_VALID_OPERATION		: in case of successful operation     
 *				ENU_PWM_INVALID_OPERATION	:in case of wrong value       
 */
enu_pwm_error_t PWM_start(uint8 u8_pwm_timer_id,uint32 u32_periodic_time,uint8 u8_duty_cycle)
{
	enu_pwm_error_t enu_pwm_error	= ENU_PWM_VALID_OPERATION;
     4b4:	81 e0       	ldi	r24, 0x01	; 1
			calc_initialValue(u8_pwm_timer_id,ENU_MILLI_SECOND,u16_periodic_prescale,u32_periodic_time,&gs_u16_periodic_initValue);
			gs_u8_periodic_prescale	= (uint8) timer_clk_map(u16_periodic_prescale);
			timer_setInitialValue(u8_pwm_timer_id,gs_u16_periodic_initValue);
			timer_setClock(u8_pwm_timer_id,gs_u8_periodic_prescale);
		}
		timer_start(u8_pwm_timer_id);
     4b6:	03 c0       	rjmp	.+6      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
	}
	else
	{
		enu_pwm_error = ENU_PWM_INVALID_OPERATION;
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     4bc:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enu_pwm_error;
}
     4be:	2a 96       	adiw	r28, 0x0a	; 10
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	ff 90       	pop	r15
     4d4:	ef 90       	pop	r14
     4d6:	df 90       	pop	r13
     4d8:	bf 90       	pop	r11
     4da:	af 90       	pop	r10
     4dc:	9f 90       	pop	r9
     4de:	8f 90       	pop	r8
     4e0:	7f 90       	pop	r7
     4e2:	6f 90       	pop	r6
     4e4:	5f 90       	pop	r5
     4e6:	4f 90       	pop	r4
     4e8:	08 95       	ret

000004ea <timer_clk_map>:
}

enu_tmr_clk_t timer_clk_map(uint16 u16_l_prescale)
{
	enu_tmr_clk_t enu_tmr_clk = ENU_TMR_MAX_CLK;
	switch(u16_l_prescale)
     4ea:	80 32       	cpi	r24, 0x20	; 32
     4ec:	91 05       	cpc	r25, r1
     4ee:	e1 f0       	breq	.+56     	; 0x528 <timer_clk_map+0x3e>
     4f0:	38 f4       	brcc	.+14     	; 0x500 <timer_clk_map+0x16>
     4f2:	81 30       	cpi	r24, 0x01	; 1
     4f4:	91 05       	cpc	r25, r1
     4f6:	21 f1       	breq	.+72     	; 0x540 <timer_clk_map+0x56>
     4f8:	98 f0       	brcs	.+38     	; 0x520 <timer_clk_map+0x36>
     4fa:	08 97       	sbiw	r24, 0x08	; 8
     4fc:	99 f0       	breq	.+38     	; 0x524 <timer_clk_map+0x3a>
     4fe:	1e c0       	rjmp	.+60     	; 0x53c <timer_clk_map+0x52>
     500:	80 38       	cpi	r24, 0x80	; 128
     502:	91 05       	cpc	r25, r1
     504:	a9 f0       	breq	.+42     	; 0x530 <timer_clk_map+0x46>
     506:	20 f4       	brcc	.+8      	; 0x510 <timer_clk_map+0x26>
     508:	80 34       	cpi	r24, 0x40	; 64
     50a:	91 05       	cpc	r25, r1
     50c:	79 f0       	breq	.+30     	; 0x52c <timer_clk_map+0x42>
     50e:	16 c0       	rjmp	.+44     	; 0x53c <timer_clk_map+0x52>
     510:	81 15       	cp	r24, r1
     512:	21 e0       	ldi	r18, 0x01	; 1
     514:	92 07       	cpc	r25, r18
     516:	71 f0       	breq	.+28     	; 0x534 <timer_clk_map+0x4a>
     518:	81 15       	cp	r24, r1
     51a:	94 40       	sbci	r25, 0x04	; 4
     51c:	69 f0       	breq	.+26     	; 0x538 <timer_clk_map+0x4e>
     51e:	0e c0       	rjmp	.+28     	; 0x53c <timer_clk_map+0x52>
	{
		case 0:		enu_tmr_clk = ENU_TMR_NO_CLK;	break;
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	08 95       	ret
		case 1:		enu_tmr_clk = ENU_TMR_CLK_1;	break;
		case 8:		enu_tmr_clk = ENU_TMR_CLK_8;	break;
     524:	82 e0       	ldi	r24, 0x02	; 2
     526:	08 95       	ret
		case 32:	enu_tmr_clk = ENU_TMR_CLK_32;	break;
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	08 95       	ret
		case 64:	enu_tmr_clk = ENU_TMR_CLK_64;	break;
     52c:	84 e0       	ldi	r24, 0x04	; 4
     52e:	08 95       	ret
		case 128:	enu_tmr_clk = ENU_TMR_CLK_128;	break;
     530:	85 e0       	ldi	r24, 0x05	; 5
     532:	08 95       	ret
		case 256:	enu_tmr_clk = ENU_TMR_CLK_256;	break;
     534:	86 e0       	ldi	r24, 0x06	; 6
     536:	08 95       	ret
		case 1024:	enu_tmr_clk = ENU_TMR_CLK_1024; break;
     538:	87 e0       	ldi	r24, 0x07	; 7
     53a:	08 95       	ret
		default:	enu_tmr_clk = ENU_TMR_MAX_CLK;	break;
     53c:	8a e0       	ldi	r24, 0x0A	; 10
     53e:	08 95       	ret
{
	enu_tmr_clk_t enu_tmr_clk = ENU_TMR_MAX_CLK;
	switch(u16_l_prescale)
	{
		case 0:		enu_tmr_clk = ENU_TMR_NO_CLK;	break;
		case 1:		enu_tmr_clk = ENU_TMR_CLK_1;	break;
     540:	81 e0       	ldi	r24, 0x01	; 1
		case 256:	enu_tmr_clk = ENU_TMR_CLK_256;	break;
		case 1024:	enu_tmr_clk = ENU_TMR_CLK_1024; break;
		default:	enu_tmr_clk = ENU_TMR_MAX_CLK;	break;
	}
	return enu_tmr_clk;
     542:	08 95       	ret

00000544 <main>:
{
	
}

int main(void)
{
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	00 d0       	rcall	.+0      	; 0x54a <main+0x6>
     54a:	00 d0       	rcall	.+0      	; 0x54c <main+0x8>
     54c:	00 d0       	rcall	.+0      	; 0x54e <main+0xa>
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
	str_dcMotor_config_t str_dcMotor_config;
	str_dcMotor_config.positive_terminal.port_id = PORTA_ID;
     552:	19 82       	std	Y+1, r1	; 0x01
	str_dcMotor_config.positive_terminal.pin_id	 = PIN1_ID;
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	8a 83       	std	Y+2, r24	; 0x02
	str_dcMotor_config.negative_terminal.port_id = PORTA_ID;
     558:	1b 82       	std	Y+3, r1	; 0x03
	str_dcMotor_config.negative_terminal.pin_id  = PIN2_ID;
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	8c 83       	std	Y+4, r24	; 0x04
	str_dcMotor_config.enable_terminal.port_id	 = PORTA_ID;
     55e:	1d 82       	std	Y+5, r1	; 0x05
	str_dcMotor_config.enable_terminal.pin_id	 = PIN0_ID; 
     560:	1e 82       	std	Y+6, r1	; 0x06
	dcMotor_init(&str_dcMotor_config);
     562:	ce 01       	movw	r24, r28
     564:	01 96       	adiw	r24, 0x01	; 1
     566:	0e 94 65 00 	call	0xca	; 0xca <dcMotor_init>
	enable_global_interrupt();
     56a:	0e 94 87 04 	call	0x90e	; 0x90e <enable_global_interrupt>
	dcMotor_rotate(&str_dcMotor_config,ENU_DCMOTOR_ACW,10);
     56e:	4a e0       	ldi	r20, 0x0A	; 10
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	ce 01       	movw	r24, r28
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	0e 94 95 00 	call	0x12a	; 0x12a <dcMotor_rotate>
     57a:	ff cf       	rjmp	.-2      	; 0x57a <main+0x36>

0000057c <DIO_pinMode>:
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
     57c:	84 30       	cpi	r24, 0x04	; 4
     57e:	08 f0       	brcs	.+2      	; 0x582 <DIO_pinMode+0x6>
     580:	7b c0       	rjmp	.+246    	; 0x678 <DIO_pinMode+0xfc>
     582:	68 30       	cpi	r22, 0x08	; 8
     584:	08 f0       	brcs	.+2      	; 0x588 <DIO_pinMode+0xc>
     586:	7a c0       	rjmp	.+244    	; 0x67c <DIO_pinMode+0x100>
     588:	42 30       	cpi	r20, 0x02	; 2
     58a:	08 f0       	brcs	.+2      	; 0x58e <DIO_pinMode+0x12>
     58c:	79 c0       	rjmp	.+242    	; 0x680 <DIO_pinMode+0x104>
     58e:	81 30       	cpi	r24, 0x01	; 1
     590:	11 f1       	breq	.+68     	; 0x5d6 <DIO_pinMode+0x5a>
     592:	30 f0       	brcs	.+12     	; 0x5a0 <DIO_pinMode+0x24>
     594:	82 30       	cpi	r24, 0x02	; 2
     596:	d1 f1       	breq	.+116    	; 0x60c <DIO_pinMode+0x90>
     598:	83 30       	cpi	r24, 0x03	; 3
     59a:	09 f4       	brne	.+2      	; 0x59e <DIO_pinMode+0x22>
     59c:	52 c0       	rjmp	.+164    	; 0x642 <DIO_pinMode+0xc6>
     59e:	72 c0       	rjmp	.+228    	; 0x684 <DIO_pinMode+0x108>
     5a0:	41 30       	cpi	r20, 0x01	; 1
     5a2:	61 f4       	brne	.+24     	; 0x5bc <DIO_pinMode+0x40>
     5a4:	2a b3       	in	r18, 0x1a	; 26
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_pinMode+0x34>
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	6a 95       	dec	r22
     5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_pinMode+0x30>
     5b4:	82 2b       	or	r24, r18
     5b6:	8a bb       	out	0x1a, r24	; 26
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	08 95       	ret
     5bc:	2a b3       	in	r18, 0x1a	; 26
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_pinMode+0x4c>
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	6a 95       	dec	r22
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_pinMode+0x48>
     5cc:	80 95       	com	r24
     5ce:	82 23       	and	r24, r18
     5d0:	8a bb       	out	0x1a, r24	; 26
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	08 95       	ret
     5d6:	41 30       	cpi	r20, 0x01	; 1
     5d8:	61 f4       	brne	.+24     	; 0x5f2 <DIO_pinMode+0x76>
     5da:	27 b3       	in	r18, 0x17	; 23
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_pinMode+0x6a>
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	6a 95       	dec	r22
     5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_pinMode+0x66>
     5ea:	82 2b       	or	r24, r18
     5ec:	87 bb       	out	0x17, r24	; 23
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	08 95       	ret
     5f2:	27 b3       	in	r18, 0x17	; 23
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_pinMode+0x82>
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	6a 95       	dec	r22
     600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_pinMode+0x7e>
     602:	80 95       	com	r24
     604:	82 23       	and	r24, r18
     606:	87 bb       	out	0x17, r24	; 23
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	08 95       	ret
     60c:	41 30       	cpi	r20, 0x01	; 1
     60e:	61 f4       	brne	.+24     	; 0x628 <DIO_pinMode+0xac>
     610:	24 b3       	in	r18, 0x14	; 20
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_pinMode+0xa0>
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	6a 95       	dec	r22
     61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_pinMode+0x9c>
     620:	82 2b       	or	r24, r18
     622:	84 bb       	out	0x14, r24	; 20
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	08 95       	ret
     628:	24 b3       	in	r18, 0x14	; 20
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_pinMode+0xb8>
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	6a 95       	dec	r22
     636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_pinMode+0xb4>
     638:	80 95       	com	r24
     63a:	82 23       	and	r24, r18
     63c:	84 bb       	out	0x14, r24	; 20
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	08 95       	ret
     642:	41 30       	cpi	r20, 0x01	; 1
     644:	61 f4       	brne	.+24     	; 0x65e <DIO_pinMode+0xe2>
     646:	21 b3       	in	r18, 0x11	; 17
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_pinMode+0xd6>
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	6a 95       	dec	r22
     654:	e2 f7       	brpl	.-8      	; 0x64e <DIO_pinMode+0xd2>
     656:	82 2b       	or	r24, r18
     658:	81 bb       	out	0x11, r24	; 17
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	08 95       	ret
     65e:	21 b3       	in	r18, 0x11	; 17
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_pinMode+0xee>
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	6a 95       	dec	r22
     66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_pinMode+0xea>
     66e:	80 95       	com	r24
     670:	82 23       	and	r24, r18
     672:	81 bb       	out	0x11, r24	; 17
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	08 95       	ret
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	08 95       	ret
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	08 95       	ret
     680:	84 e0       	ldi	r24, 0x04	; 4
     682:	08 95       	ret
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	08 95       	ret

00000688 <DIO_writePin>:
     688:	84 30       	cpi	r24, 0x04	; 4
     68a:	08 f0       	brcs	.+2      	; 0x68e <DIO_writePin+0x6>
     68c:	7b c0       	rjmp	.+246    	; 0x784 <DIO_writePin+0xfc>
     68e:	68 30       	cpi	r22, 0x08	; 8
     690:	08 f0       	brcs	.+2      	; 0x694 <DIO_writePin+0xc>
     692:	7a c0       	rjmp	.+244    	; 0x788 <DIO_writePin+0x100>
     694:	42 30       	cpi	r20, 0x02	; 2
     696:	08 f0       	brcs	.+2      	; 0x69a <DIO_writePin+0x12>
     698:	79 c0       	rjmp	.+242    	; 0x78c <DIO_writePin+0x104>
     69a:	81 30       	cpi	r24, 0x01	; 1
     69c:	11 f1       	breq	.+68     	; 0x6e2 <DIO_writePin+0x5a>
     69e:	30 f0       	brcs	.+12     	; 0x6ac <DIO_writePin+0x24>
     6a0:	82 30       	cpi	r24, 0x02	; 2
     6a2:	d1 f1       	breq	.+116    	; 0x718 <DIO_writePin+0x90>
     6a4:	83 30       	cpi	r24, 0x03	; 3
     6a6:	09 f4       	brne	.+2      	; 0x6aa <DIO_writePin+0x22>
     6a8:	52 c0       	rjmp	.+164    	; 0x74e <DIO_writePin+0xc6>
     6aa:	72 c0       	rjmp	.+228    	; 0x790 <DIO_writePin+0x108>
     6ac:	41 30       	cpi	r20, 0x01	; 1
     6ae:	61 f4       	brne	.+24     	; 0x6c8 <DIO_writePin+0x40>
     6b0:	2b b3       	in	r18, 0x1b	; 27
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_writePin+0x34>
     6b8:	88 0f       	add	r24, r24
     6ba:	99 1f       	adc	r25, r25
     6bc:	6a 95       	dec	r22
     6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_writePin+0x30>
     6c0:	82 2b       	or	r24, r18
     6c2:	8b bb       	out	0x1b, r24	; 27
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	08 95       	ret
     6c8:	2b b3       	in	r18, 0x1b	; 27
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_writePin+0x4c>
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	6a 95       	dec	r22
     6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_writePin+0x48>
     6d8:	80 95       	com	r24
     6da:	82 23       	and	r24, r18
     6dc:	8b bb       	out	0x1b, r24	; 27
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	08 95       	ret
     6e2:	41 30       	cpi	r20, 0x01	; 1
     6e4:	61 f4       	brne	.+24     	; 0x6fe <DIO_writePin+0x76>
     6e6:	28 b3       	in	r18, 0x18	; 24
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DIO_writePin+0x6a>
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	6a 95       	dec	r22
     6f4:	e2 f7       	brpl	.-8      	; 0x6ee <DIO_writePin+0x66>
     6f6:	82 2b       	or	r24, r18
     6f8:	88 bb       	out	0x18, r24	; 24
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	08 95       	ret
     6fe:	28 b3       	in	r18, 0x18	; 24
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	02 c0       	rjmp	.+4      	; 0x70a <DIO_writePin+0x82>
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	6a 95       	dec	r22
     70c:	e2 f7       	brpl	.-8      	; 0x706 <DIO_writePin+0x7e>
     70e:	80 95       	com	r24
     710:	82 23       	and	r24, r18
     712:	88 bb       	out	0x18, r24	; 24
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	08 95       	ret
     718:	41 30       	cpi	r20, 0x01	; 1
     71a:	61 f4       	brne	.+24     	; 0x734 <DIO_writePin+0xac>
     71c:	25 b3       	in	r18, 0x15	; 21
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	02 c0       	rjmp	.+4      	; 0x728 <DIO_writePin+0xa0>
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	6a 95       	dec	r22
     72a:	e2 f7       	brpl	.-8      	; 0x724 <DIO_writePin+0x9c>
     72c:	82 2b       	or	r24, r18
     72e:	85 bb       	out	0x15, r24	; 21
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	08 95       	ret
     734:	25 b3       	in	r18, 0x15	; 21
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	02 c0       	rjmp	.+4      	; 0x740 <DIO_writePin+0xb8>
     73c:	88 0f       	add	r24, r24
     73e:	99 1f       	adc	r25, r25
     740:	6a 95       	dec	r22
     742:	e2 f7       	brpl	.-8      	; 0x73c <DIO_writePin+0xb4>
     744:	80 95       	com	r24
     746:	82 23       	and	r24, r18
     748:	85 bb       	out	0x15, r24	; 21
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	08 95       	ret
     74e:	41 30       	cpi	r20, 0x01	; 1
     750:	61 f4       	brne	.+24     	; 0x76a <DIO_writePin+0xe2>
     752:	22 b3       	in	r18, 0x12	; 18
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	02 c0       	rjmp	.+4      	; 0x75e <DIO_writePin+0xd6>
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	6a 95       	dec	r22
     760:	e2 f7       	brpl	.-8      	; 0x75a <DIO_writePin+0xd2>
     762:	82 2b       	or	r24, r18
     764:	82 bb       	out	0x12, r24	; 18
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	08 95       	ret
     76a:	22 b3       	in	r18, 0x12	; 18
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_writePin+0xee>
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	6a 95       	dec	r22
     778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_writePin+0xea>
     77a:	80 95       	com	r24
     77c:	82 23       	and	r24, r18
     77e:	82 bb       	out	0x12, r24	; 18
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	08 95       	ret
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	08 95       	ret
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	08 95       	ret
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	08 95       	ret
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	08 95       	ret

00000794 <DIO_togglePin>:
/*===========================================================================*/

enu_dio_error_t DIO_togglePin	(uint8 port,uint8 pin)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
     794:	84 30       	cpi	r24, 0x04	; 4
     796:	d0 f5       	brcc	.+116    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
	{
		if((pin >= PIN0_ID) && (pin < MAX_PIN_ID))
     798:	68 30       	cpi	r22, 0x08	; 8
     79a:	d0 f5       	brcc	.+116    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
		{
				switch(port)
     79c:	81 30       	cpi	r24, 0x01	; 1
     79e:	91 f0       	breq	.+36     	; 0x7c4 <DIO_togglePin+0x30>
     7a0:	28 f0       	brcs	.+10     	; 0x7ac <DIO_togglePin+0x18>
     7a2:	82 30       	cpi	r24, 0x02	; 2
     7a4:	d9 f0       	breq	.+54     	; 0x7dc <DIO_togglePin+0x48>
     7a6:	83 30       	cpi	r24, 0x03	; 3
     7a8:	29 f1       	breq	.+74     	; 0x7f4 <DIO_togglePin+0x60>
     7aa:	34 c0       	rjmp	.+104    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
				{
					case PORTA_ID:	TOGGLE_BIT(PORTA,pin);	break;
     7ac:	2b b3       	in	r18, 0x1b	; 27
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_togglePin+0x24>
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	6a 95       	dec	r22
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_togglePin+0x20>
     7bc:	82 27       	eor	r24, r18
     7be:	8b bb       	out	0x1b, r24	; 27

/*===========================================================================*/

enu_dio_error_t DIO_togglePin	(uint8 port,uint8 pin)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
	{
		if((pin >= PIN0_ID) && (pin < MAX_PIN_ID))
		{
				switch(port)
				{
					case PORTA_ID:	TOGGLE_BIT(PORTA,pin);	break;
     7c2:	08 95       	ret
					case PORTB_ID:	TOGGLE_BIT(PORTB,pin);	break;
     7c4:	28 b3       	in	r18, 0x18	; 24
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <DIO_togglePin+0x3c>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	6a 95       	dec	r22
     7d2:	e2 f7       	brpl	.-8      	; 0x7cc <DIO_togglePin+0x38>
     7d4:	82 27       	eor	r24, r18
     7d6:	88 bb       	out	0x18, r24	; 24

/*===========================================================================*/

enu_dio_error_t DIO_togglePin	(uint8 port,uint8 pin)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
		if((pin >= PIN0_ID) && (pin < MAX_PIN_ID))
		{
				switch(port)
				{
					case PORTA_ID:	TOGGLE_BIT(PORTA,pin);	break;
					case PORTB_ID:	TOGGLE_BIT(PORTB,pin);	break;
     7da:	08 95       	ret
					case PORTC_ID:	TOGGLE_BIT(PORTC,pin);	break;
     7dc:	25 b3       	in	r18, 0x15	; 21
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <DIO_togglePin+0x54>
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	6a 95       	dec	r22
     7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <DIO_togglePin+0x50>
     7ec:	82 27       	eor	r24, r18
     7ee:	85 bb       	out	0x15, r24	; 21

/*===========================================================================*/

enu_dio_error_t DIO_togglePin	(uint8 port,uint8 pin)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
		{
				switch(port)
				{
					case PORTA_ID:	TOGGLE_BIT(PORTA,pin);	break;
					case PORTB_ID:	TOGGLE_BIT(PORTB,pin);	break;
					case PORTC_ID:	TOGGLE_BIT(PORTC,pin);	break;
     7f2:	08 95       	ret
					case PORTD_ID:	TOGGLE_BIT(PORTD,pin);	break;
     7f4:	22 b3       	in	r18, 0x12	; 18
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
     7fc:	88 0f       	add	r24, r24
     7fe:	99 1f       	adc	r25, r25
     800:	6a 95       	dec	r22
     802:	e2 f7       	brpl	.-8      	; 0x7fc <DIO_togglePin+0x68>
     804:	82 27       	eor	r24, r18
     806:	82 bb       	out	0x12, r24	; 18

/*===========================================================================*/

enu_dio_error_t DIO_togglePin	(uint8 port,uint8 pin)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     808:	81 e0       	ldi	r24, 0x01	; 1
				switch(port)
				{
					case PORTA_ID:	TOGGLE_BIT(PORTA,pin);	break;
					case PORTB_ID:	TOGGLE_BIT(PORTB,pin);	break;
					case PORTC_ID:	TOGGLE_BIT(PORTC,pin);	break;
					case PORTD_ID:	TOGGLE_BIT(PORTD,pin);	break;
     80a:	08 95       	ret
			enu_dio_error = DIO_INVALID_PIN_ID;
		}
	}
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	08 95       	ret
					break;
				}
		}
		else
		{
			enu_dio_error = DIO_INVALID_PIN_ID;
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	08 95       	ret

/*===========================================================================*/

enu_dio_error_t DIO_togglePin	(uint8 port,uint8 pin)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     814:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
     816:	08 95       	ret

00000818 <__vector_1>:
	}
	return enu_interrupt_error ;
}

ISR_HANDLER(EXT_INT0)
{
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	2f 93       	push	r18
     824:	3f 93       	push	r19
     826:	4f 93       	push	r20
     828:	5f 93       	push	r21
     82a:	6f 93       	push	r22
     82c:	7f 93       	push	r23
     82e:	8f 93       	push	r24
     830:	9f 93       	push	r25
     832:	af 93       	push	r26
     834:	bf 93       	push	r27
     836:	ef 93       	push	r30
     838:	ff 93       	push	r31
	if(gl_callbackptr_0 != NULL_PTR)
     83a:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <gl_callbackptr_0>
     83e:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <gl_callbackptr_0+0x1>
     842:	30 97       	sbiw	r30, 0x00	; 0
     844:	09 f0       	breq	.+2      	; 0x848 <__vector_1+0x30>
	{
		gl_callbackptr_0();
     846:	09 95       	icall
	}
}
     848:	ff 91       	pop	r31
     84a:	ef 91       	pop	r30
     84c:	bf 91       	pop	r27
     84e:	af 91       	pop	r26
     850:	9f 91       	pop	r25
     852:	8f 91       	pop	r24
     854:	7f 91       	pop	r23
     856:	6f 91       	pop	r22
     858:	5f 91       	pop	r21
     85a:	4f 91       	pop	r20
     85c:	3f 91       	pop	r19
     85e:	2f 91       	pop	r18
     860:	0f 90       	pop	r0
     862:	0f be       	out	0x3f, r0	; 63
     864:	0f 90       	pop	r0
     866:	1f 90       	pop	r1
     868:	18 95       	reti

0000086a <__vector_2>:

ISR_HANDLER(EXT_INT1)
{
     86a:	1f 92       	push	r1
     86c:	0f 92       	push	r0
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	0f 92       	push	r0
     872:	11 24       	eor	r1, r1
     874:	2f 93       	push	r18
     876:	3f 93       	push	r19
     878:	4f 93       	push	r20
     87a:	5f 93       	push	r21
     87c:	6f 93       	push	r22
     87e:	7f 93       	push	r23
     880:	8f 93       	push	r24
     882:	9f 93       	push	r25
     884:	af 93       	push	r26
     886:	bf 93       	push	r27
     888:	ef 93       	push	r30
     88a:	ff 93       	push	r31
	if(gl_callbackptr_1 != NULL_PTR)
     88c:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <gl_callbackptr_1>
     890:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <gl_callbackptr_1+0x1>
     894:	30 97       	sbiw	r30, 0x00	; 0
     896:	09 f0       	breq	.+2      	; 0x89a <__vector_2+0x30>
	{
		gl_callbackptr_1();
     898:	09 95       	icall
	}
}
     89a:	ff 91       	pop	r31
     89c:	ef 91       	pop	r30
     89e:	bf 91       	pop	r27
     8a0:	af 91       	pop	r26
     8a2:	9f 91       	pop	r25
     8a4:	8f 91       	pop	r24
     8a6:	7f 91       	pop	r23
     8a8:	6f 91       	pop	r22
     8aa:	5f 91       	pop	r21
     8ac:	4f 91       	pop	r20
     8ae:	3f 91       	pop	r19
     8b0:	2f 91       	pop	r18
     8b2:	0f 90       	pop	r0
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	0f 90       	pop	r0
     8b8:	1f 90       	pop	r1
     8ba:	18 95       	reti

000008bc <__vector_3>:

ISR_HANDLER(EXT_INT2)
{
     8bc:	1f 92       	push	r1
     8be:	0f 92       	push	r0
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	0f 92       	push	r0
     8c4:	11 24       	eor	r1, r1
     8c6:	2f 93       	push	r18
     8c8:	3f 93       	push	r19
     8ca:	4f 93       	push	r20
     8cc:	5f 93       	push	r21
     8ce:	6f 93       	push	r22
     8d0:	7f 93       	push	r23
     8d2:	8f 93       	push	r24
     8d4:	9f 93       	push	r25
     8d6:	af 93       	push	r26
     8d8:	bf 93       	push	r27
     8da:	ef 93       	push	r30
     8dc:	ff 93       	push	r31
	if(gl_callbackptr_2 != NULL_PTR)
     8de:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <gl_callbackptr_2>
     8e2:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <gl_callbackptr_2+0x1>
     8e6:	30 97       	sbiw	r30, 0x00	; 0
     8e8:	09 f0       	breq	.+2      	; 0x8ec <__vector_3+0x30>
	{
		gl_callbackptr_2();
     8ea:	09 95       	icall
	}
}
     8ec:	ff 91       	pop	r31
     8ee:	ef 91       	pop	r30
     8f0:	bf 91       	pop	r27
     8f2:	af 91       	pop	r26
     8f4:	9f 91       	pop	r25
     8f6:	8f 91       	pop	r24
     8f8:	7f 91       	pop	r23
     8fa:	6f 91       	pop	r22
     8fc:	5f 91       	pop	r21
     8fe:	4f 91       	pop	r20
     900:	3f 91       	pop	r19
     902:	2f 91       	pop	r18
     904:	0f 90       	pop	r0
     906:	0f be       	out	0x3f, r0	; 63
     908:	0f 90       	pop	r0
     90a:	1f 90       	pop	r1
     90c:	18 95       	reti

0000090e <enable_global_interrupt>:


/*================ APIS ================*/
void enable_global_interrupt (void)
{
	SET_BIT(SREG,PIN7);
     90e:	8f b7       	in	r24, 0x3f	; 63
     910:	80 68       	ori	r24, 0x80	; 128
     912:	8f bf       	out	0x3f, r24	; 63
     914:	08 95       	ret

00000916 <timer_init>:
	else
	{
		enu_tmr_error = ENU_TMR_INVALID_ID;
	}
	return enu_tmr_error;
}
     916:	fc 01       	movw	r30, r24
     918:	89 2b       	or	r24, r25
     91a:	09 f4       	brne	.+2      	; 0x91e <timer_init+0x8>
     91c:	95 c1       	rjmp	.+810    	; 0xc48 <timer_init+0x332>
     91e:	80 81       	ld	r24, Z
     920:	83 30       	cpi	r24, 0x03	; 3
     922:	08 f0       	brcs	.+2      	; 0x926 <timer_init+0x10>
     924:	93 c1       	rjmp	.+806    	; 0xc4c <timer_init+0x336>
     926:	91 81       	ldd	r25, Z+1	; 0x01
     928:	92 30       	cpi	r25, 0x02	; 2
     92a:	08 f0       	brcs	.+2      	; 0x92e <timer_init+0x18>
     92c:	91 c1       	rjmp	.+802    	; 0xc50 <timer_init+0x33a>
     92e:	92 81       	ldd	r25, Z+2	; 0x02
     930:	92 30       	cpi	r25, 0x02	; 2
     932:	08 f0       	brcs	.+2      	; 0x936 <timer_init+0x20>
     934:	8f c1       	rjmp	.+798    	; 0xc54 <timer_init+0x33e>
     936:	93 81       	ldd	r25, Z+3	; 0x03
     938:	94 30       	cpi	r25, 0x04	; 4
     93a:	08 f0       	brcs	.+2      	; 0x93e <timer_init+0x28>
     93c:	8d c1       	rjmp	.+794    	; 0xc58 <timer_init+0x342>
     93e:	94 81       	ldd	r25, Z+4	; 0x04
     940:	9a 30       	cpi	r25, 0x0A	; 10
     942:	08 f0       	brcs	.+2      	; 0x946 <timer_init+0x30>
     944:	8b c1       	rjmp	.+790    	; 0xc5c <timer_init+0x346>
     946:	81 11       	cpse	r24, r1
     948:	7d c0       	rjmp	.+250    	; 0xa44 <timer_init+0x12e>
     94a:	83 b7       	in	r24, 0x33	; 51
     94c:	80 68       	ori	r24, 0x80	; 128
     94e:	83 bf       	out	0x33, r24	; 51
     950:	81 81       	ldd	r24, Z+1	; 0x01
     952:	88 23       	and	r24, r24
     954:	19 f0       	breq	.+6      	; 0x95c <timer_init+0x46>
     956:	81 30       	cpi	r24, 0x01	; 1
     958:	41 f0       	breq	.+16     	; 0x96a <timer_init+0x54>
     95a:	0d c0       	rjmp	.+26     	; 0x976 <timer_init+0x60>
     95c:	83 b7       	in	r24, 0x33	; 51
     95e:	8f 7b       	andi	r24, 0xBF	; 191
     960:	83 bf       	out	0x33, r24	; 51
     962:	83 b7       	in	r24, 0x33	; 51
     964:	87 7f       	andi	r24, 0xF7	; 247
     966:	83 bf       	out	0x33, r24	; 51
     968:	06 c0       	rjmp	.+12     	; 0x976 <timer_init+0x60>
     96a:	83 b7       	in	r24, 0x33	; 51
     96c:	8f 7b       	andi	r24, 0xBF	; 191
     96e:	83 bf       	out	0x33, r24	; 51
     970:	83 b7       	in	r24, 0x33	; 51
     972:	88 60       	ori	r24, 0x08	; 8
     974:	83 bf       	out	0x33, r24	; 51
     976:	83 81       	ldd	r24, Z+3	; 0x03
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	69 f0       	breq	.+26     	; 0x996 <timer_init+0x80>
     97c:	28 f0       	brcs	.+10     	; 0x988 <timer_init+0x72>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	a1 f0       	breq	.+40     	; 0x9aa <timer_init+0x94>
     982:	83 30       	cpi	r24, 0x03	; 3
     984:	e1 f0       	breq	.+56     	; 0x9be <timer_init+0xa8>
     986:	24 c0       	rjmp	.+72     	; 0x9d0 <timer_init+0xba>
     988:	83 b7       	in	r24, 0x33	; 51
     98a:	8f 7e       	andi	r24, 0xEF	; 239
     98c:	83 bf       	out	0x33, r24	; 51
     98e:	83 b7       	in	r24, 0x33	; 51
     990:	8f 7d       	andi	r24, 0xDF	; 223
     992:	83 bf       	out	0x33, r24	; 51
     994:	1d c0       	rjmp	.+58     	; 0x9d0 <timer_init+0xba>
     996:	87 b3       	in	r24, 0x17	; 23
     998:	88 60       	ori	r24, 0x08	; 8
     99a:	87 bb       	out	0x17, r24	; 23
     99c:	83 b7       	in	r24, 0x33	; 51
     99e:	80 61       	ori	r24, 0x10	; 16
     9a0:	83 bf       	out	0x33, r24	; 51
     9a2:	83 b7       	in	r24, 0x33	; 51
     9a4:	8f 7d       	andi	r24, 0xDF	; 223
     9a6:	83 bf       	out	0x33, r24	; 51
     9a8:	13 c0       	rjmp	.+38     	; 0x9d0 <timer_init+0xba>
     9aa:	87 b3       	in	r24, 0x17	; 23
     9ac:	88 60       	ori	r24, 0x08	; 8
     9ae:	87 bb       	out	0x17, r24	; 23
     9b0:	83 b7       	in	r24, 0x33	; 51
     9b2:	8f 7e       	andi	r24, 0xEF	; 239
     9b4:	83 bf       	out	0x33, r24	; 51
     9b6:	83 b7       	in	r24, 0x33	; 51
     9b8:	80 62       	ori	r24, 0x20	; 32
     9ba:	83 bf       	out	0x33, r24	; 51
     9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <timer_init+0xba>
     9be:	87 b3       	in	r24, 0x17	; 23
     9c0:	88 60       	ori	r24, 0x08	; 8
     9c2:	87 bb       	out	0x17, r24	; 23
     9c4:	83 b7       	in	r24, 0x33	; 51
     9c6:	80 61       	ori	r24, 0x10	; 16
     9c8:	83 bf       	out	0x33, r24	; 51
     9ca:	83 b7       	in	r24, 0x33	; 51
     9cc:	80 62       	ori	r24, 0x20	; 32
     9ce:	83 bf       	out	0x33, r24	; 51
     9d0:	84 81       	ldd	r24, Z+4	; 0x04
     9d2:	83 30       	cpi	r24, 0x03	; 3
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <timer_init+0xc2>
     9d6:	44 c1       	rjmp	.+648    	; 0xc60 <timer_init+0x34a>
     9d8:	85 30       	cpi	r24, 0x05	; 5
     9da:	09 f4       	brne	.+2      	; 0x9de <timer_init+0xc8>
     9dc:	43 c1       	rjmp	.+646    	; 0xc64 <timer_init+0x34e>
     9de:	a0 81       	ld	r26, Z
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	a0 5a       	subi	r26, 0xA0	; 160
     9e4:	bf 4f       	sbci	r27, 0xFF	; 255
     9e6:	8c 93       	st	X, r24
     9e8:	82 81       	ldd	r24, Z+2	; 0x02
     9ea:	81 11       	cpse	r24, r1
     9ec:	0b c0       	rjmp	.+22     	; 0xa04 <timer_init+0xee>
     9ee:	81 81       	ldd	r24, Z+1	; 0x01
     9f0:	81 11       	cpse	r24, r1
     9f2:	04 c0       	rjmp	.+8      	; 0x9fc <timer_init+0xe6>
     9f4:	89 b7       	in	r24, 0x39	; 57
     9f6:	81 60       	ori	r24, 0x01	; 1
     9f8:	89 bf       	out	0x39, r24	; 57
     9fa:	0a c0       	rjmp	.+20     	; 0xa10 <timer_init+0xfa>
     9fc:	89 b7       	in	r24, 0x39	; 57
     9fe:	82 60       	ori	r24, 0x02	; 2
     a00:	89 bf       	out	0x39, r24	; 57
     a02:	06 c0       	rjmp	.+12     	; 0xa10 <timer_init+0xfa>
     a04:	89 b7       	in	r24, 0x39	; 57
     a06:	8e 7f       	andi	r24, 0xFE	; 254
     a08:	89 bf       	out	0x39, r24	; 57
     a0a:	89 b7       	in	r24, 0x39	; 57
     a0c:	8d 7f       	andi	r24, 0xFD	; 253
     a0e:	89 bf       	out	0x39, r24	; 57
     a10:	85 81       	ldd	r24, Z+5	; 0x05
     a12:	96 81       	ldd	r25, Z+6	; 0x06
     a14:	8f 3f       	cpi	r24, 0xFF	; 255
     a16:	91 05       	cpc	r25, r1
     a18:	11 f0       	breq	.+4      	; 0xa1e <timer_init+0x108>
     a1a:	08 f0       	brcs	.+2      	; 0xa1e <timer_init+0x108>
     a1c:	25 c1       	rjmp	.+586    	; 0xc68 <timer_init+0x352>
     a1e:	27 81       	ldd	r18, Z+7	; 0x07
     a20:	30 85       	ldd	r19, Z+8	; 0x08
     a22:	2f 3f       	cpi	r18, 0xFF	; 255
     a24:	31 05       	cpc	r19, r1
     a26:	11 f0       	breq	.+4      	; 0xa2c <timer_init+0x116>
     a28:	08 f0       	brcs	.+2      	; 0xa2c <timer_init+0x116>
     a2a:	20 c1       	rjmp	.+576    	; 0xc6c <timer_init+0x356>
     a2c:	21 81       	ldd	r18, Z+1	; 0x01
     a2e:	21 11       	cpse	r18, r1
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <timer_init+0x124>
     a32:	82 bf       	out	0x32, r24	; 50
     a34:	1c be       	out	0x3c, r1	; 60
     a36:	86 e0       	ldi	r24, 0x06	; 6
     a38:	24 c1       	rjmp	.+584    	; 0xc82 <timer_init+0x36c>
     a3a:	12 be       	out	0x32, r1	; 50
     a3c:	87 81       	ldd	r24, Z+7	; 0x07
     a3e:	8c bf       	out	0x3c, r24	; 60
     a40:	86 e0       	ldi	r24, 0x06	; 6
     a42:	1f c1       	rjmp	.+574    	; 0xc82 <timer_init+0x36c>
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	09 f0       	breq	.+2      	; 0xa4a <timer_init+0x134>
     a48:	85 c0       	rjmp	.+266    	; 0xb54 <timer_init+0x23e>
     a4a:	8f b5       	in	r24, 0x2f	; 47
     a4c:	88 60       	ori	r24, 0x08	; 8
     a4e:	8f bd       	out	0x2f, r24	; 47
     a50:	8f b5       	in	r24, 0x2f	; 47
     a52:	84 60       	ori	r24, 0x04	; 4
     a54:	8f bd       	out	0x2f, r24	; 47
     a56:	81 81       	ldd	r24, Z+1	; 0x01
     a58:	88 23       	and	r24, r24
     a5a:	19 f0       	breq	.+6      	; 0xa62 <timer_init+0x14c>
     a5c:	81 30       	cpi	r24, 0x01	; 1
     a5e:	71 f0       	breq	.+28     	; 0xa7c <timer_init+0x166>
     a60:	19 c0       	rjmp	.+50     	; 0xa94 <timer_init+0x17e>
     a62:	8f b5       	in	r24, 0x2f	; 47
     a64:	8e 7f       	andi	r24, 0xFE	; 254
     a66:	8f bd       	out	0x2f, r24	; 47
     a68:	8f b5       	in	r24, 0x2f	; 47
     a6a:	8d 7f       	andi	r24, 0xFD	; 253
     a6c:	8f bd       	out	0x2f, r24	; 47
     a6e:	8e b5       	in	r24, 0x2e	; 46
     a70:	87 7f       	andi	r24, 0xF7	; 247
     a72:	8e bd       	out	0x2e, r24	; 46
     a74:	8e b5       	in	r24, 0x2e	; 46
     a76:	8f 7e       	andi	r24, 0xEF	; 239
     a78:	8e bd       	out	0x2e, r24	; 46
     a7a:	0c c0       	rjmp	.+24     	; 0xa94 <timer_init+0x17e>
     a7c:	8f b5       	in	r24, 0x2f	; 47
     a7e:	8e 7f       	andi	r24, 0xFE	; 254
     a80:	8f bd       	out	0x2f, r24	; 47
     a82:	8f b5       	in	r24, 0x2f	; 47
     a84:	8d 7f       	andi	r24, 0xFD	; 253
     a86:	8f bd       	out	0x2f, r24	; 47
     a88:	8e b5       	in	r24, 0x2e	; 46
     a8a:	88 60       	ori	r24, 0x08	; 8
     a8c:	8e bd       	out	0x2e, r24	; 46
     a8e:	8e b5       	in	r24, 0x2e	; 46
     a90:	8f 7e       	andi	r24, 0xEF	; 239
     a92:	8e bd       	out	0x2e, r24	; 46
     a94:	83 81       	ldd	r24, Z+3	; 0x03
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	69 f0       	breq	.+26     	; 0xab4 <timer_init+0x19e>
     a9a:	28 f0       	brcs	.+10     	; 0xaa6 <timer_init+0x190>
     a9c:	82 30       	cpi	r24, 0x02	; 2
     a9e:	a1 f0       	breq	.+40     	; 0xac8 <timer_init+0x1b2>
     aa0:	83 30       	cpi	r24, 0x03	; 3
     aa2:	e1 f0       	breq	.+56     	; 0xadc <timer_init+0x1c6>
     aa4:	24 c0       	rjmp	.+72     	; 0xaee <timer_init+0x1d8>
     aa6:	8f b5       	in	r24, 0x2f	; 47
     aa8:	8f 7b       	andi	r24, 0xBF	; 191
     aaa:	8f bd       	out	0x2f, r24	; 47
     aac:	8f b5       	in	r24, 0x2f	; 47
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	8f bd       	out	0x2f, r24	; 47
     ab2:	1d c0       	rjmp	.+58     	; 0xaee <timer_init+0x1d8>
     ab4:	81 b3       	in	r24, 0x11	; 17
     ab6:	80 62       	ori	r24, 0x20	; 32
     ab8:	81 bb       	out	0x11, r24	; 17
     aba:	8f b5       	in	r24, 0x2f	; 47
     abc:	80 64       	ori	r24, 0x40	; 64
     abe:	8f bd       	out	0x2f, r24	; 47
     ac0:	8f b5       	in	r24, 0x2f	; 47
     ac2:	8f 77       	andi	r24, 0x7F	; 127
     ac4:	8f bd       	out	0x2f, r24	; 47
     ac6:	13 c0       	rjmp	.+38     	; 0xaee <timer_init+0x1d8>
     ac8:	81 b3       	in	r24, 0x11	; 17
     aca:	80 62       	ori	r24, 0x20	; 32
     acc:	81 bb       	out	0x11, r24	; 17
     ace:	8f b5       	in	r24, 0x2f	; 47
     ad0:	8f 7b       	andi	r24, 0xBF	; 191
     ad2:	8f bd       	out	0x2f, r24	; 47
     ad4:	8f b5       	in	r24, 0x2f	; 47
     ad6:	80 68       	ori	r24, 0x80	; 128
     ad8:	8f bd       	out	0x2f, r24	; 47
     ada:	09 c0       	rjmp	.+18     	; 0xaee <timer_init+0x1d8>
     adc:	81 b3       	in	r24, 0x11	; 17
     ade:	80 62       	ori	r24, 0x20	; 32
     ae0:	81 bb       	out	0x11, r24	; 17
     ae2:	8f b5       	in	r24, 0x2f	; 47
     ae4:	80 64       	ori	r24, 0x40	; 64
     ae6:	8f bd       	out	0x2f, r24	; 47
     ae8:	8f b5       	in	r24, 0x2f	; 47
     aea:	80 68       	ori	r24, 0x80	; 128
     aec:	8f bd       	out	0x2f, r24	; 47
     aee:	84 81       	ldd	r24, Z+4	; 0x04
     af0:	83 30       	cpi	r24, 0x03	; 3
     af2:	09 f4       	brne	.+2      	; 0xaf6 <timer_init+0x1e0>
     af4:	bd c0       	rjmp	.+378    	; 0xc70 <timer_init+0x35a>
     af6:	85 30       	cpi	r24, 0x05	; 5
     af8:	09 f4       	brne	.+2      	; 0xafc <timer_init+0x1e6>
     afa:	bc c0       	rjmp	.+376    	; 0xc74 <timer_init+0x35e>
     afc:	a0 81       	ld	r26, Z
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	a0 5a       	subi	r26, 0xA0	; 160
     b02:	bf 4f       	sbci	r27, 0xFF	; 255
     b04:	8c 93       	st	X, r24
     b06:	82 81       	ldd	r24, Z+2	; 0x02
     b08:	81 11       	cpse	r24, r1
     b0a:	0b c0       	rjmp	.+22     	; 0xb22 <timer_init+0x20c>
     b0c:	81 81       	ldd	r24, Z+1	; 0x01
     b0e:	81 11       	cpse	r24, r1
     b10:	04 c0       	rjmp	.+8      	; 0xb1a <timer_init+0x204>
     b12:	89 b7       	in	r24, 0x39	; 57
     b14:	84 60       	ori	r24, 0x04	; 4
     b16:	89 bf       	out	0x39, r24	; 57
     b18:	0a c0       	rjmp	.+20     	; 0xb2e <timer_init+0x218>
     b1a:	89 b7       	in	r24, 0x39	; 57
     b1c:	80 61       	ori	r24, 0x10	; 16
     b1e:	89 bf       	out	0x39, r24	; 57
     b20:	06 c0       	rjmp	.+12     	; 0xb2e <timer_init+0x218>
     b22:	89 b7       	in	r24, 0x39	; 57
     b24:	8b 7f       	andi	r24, 0xFB	; 251
     b26:	89 bf       	out	0x39, r24	; 57
     b28:	89 b7       	in	r24, 0x39	; 57
     b2a:	8f 7e       	andi	r24, 0xEF	; 239
     b2c:	89 bf       	out	0x39, r24	; 57
     b2e:	81 81       	ldd	r24, Z+1	; 0x01
     b30:	81 11       	cpse	r24, r1
     b32:	08 c0       	rjmp	.+16     	; 0xb44 <timer_init+0x22e>
     b34:	85 81       	ldd	r24, Z+5	; 0x05
     b36:	96 81       	ldd	r25, Z+6	; 0x06
     b38:	9d bd       	out	0x2d, r25	; 45
     b3a:	8c bd       	out	0x2c, r24	; 44
     b3c:	1b bc       	out	0x2b, r1	; 43
     b3e:	1a bc       	out	0x2a, r1	; 42
     b40:	86 e0       	ldi	r24, 0x06	; 6
     b42:	9f c0       	rjmp	.+318    	; 0xc82 <timer_init+0x36c>
     b44:	1d bc       	out	0x2d, r1	; 45
     b46:	1c bc       	out	0x2c, r1	; 44
     b48:	87 81       	ldd	r24, Z+7	; 0x07
     b4a:	90 85       	ldd	r25, Z+8	; 0x08
     b4c:	9b bd       	out	0x2b, r25	; 43
     b4e:	8a bd       	out	0x2a, r24	; 42
     b50:	86 e0       	ldi	r24, 0x06	; 6
     b52:	97 c0       	rjmp	.+302    	; 0xc82 <timer_init+0x36c>
     b54:	85 b5       	in	r24, 0x25	; 37
     b56:	80 68       	ori	r24, 0x80	; 128
     b58:	85 bd       	out	0x25, r24	; 37
     b5a:	81 81       	ldd	r24, Z+1	; 0x01
     b5c:	88 23       	and	r24, r24
     b5e:	19 f0       	breq	.+6      	; 0xb66 <timer_init+0x250>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	41 f0       	breq	.+16     	; 0xb74 <timer_init+0x25e>
     b64:	0d c0       	rjmp	.+26     	; 0xb80 <timer_init+0x26a>
     b66:	85 b5       	in	r24, 0x25	; 37
     b68:	8f 7b       	andi	r24, 0xBF	; 191
     b6a:	85 bd       	out	0x25, r24	; 37
     b6c:	85 b5       	in	r24, 0x25	; 37
     b6e:	87 7f       	andi	r24, 0xF7	; 247
     b70:	85 bd       	out	0x25, r24	; 37
     b72:	06 c0       	rjmp	.+12     	; 0xb80 <timer_init+0x26a>
     b74:	85 b5       	in	r24, 0x25	; 37
     b76:	8f 7b       	andi	r24, 0xBF	; 191
     b78:	85 bd       	out	0x25, r24	; 37
     b7a:	85 b5       	in	r24, 0x25	; 37
     b7c:	88 60       	ori	r24, 0x08	; 8
     b7e:	85 bd       	out	0x25, r24	; 37
     b80:	83 81       	ldd	r24, Z+3	; 0x03
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	69 f0       	breq	.+26     	; 0xba0 <timer_init+0x28a>
     b86:	28 f0       	brcs	.+10     	; 0xb92 <timer_init+0x27c>
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	a1 f0       	breq	.+40     	; 0xbb4 <timer_init+0x29e>
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	e1 f0       	breq	.+56     	; 0xbc8 <timer_init+0x2b2>
     b90:	24 c0       	rjmp	.+72     	; 0xbda <timer_init+0x2c4>
     b92:	85 b5       	in	r24, 0x25	; 37
     b94:	8f 7e       	andi	r24, 0xEF	; 239
     b96:	85 bd       	out	0x25, r24	; 37
     b98:	85 b5       	in	r24, 0x25	; 37
     b9a:	8f 7d       	andi	r24, 0xDF	; 223
     b9c:	85 bd       	out	0x25, r24	; 37
     b9e:	1d c0       	rjmp	.+58     	; 0xbda <timer_init+0x2c4>
     ba0:	81 b3       	in	r24, 0x11	; 17
     ba2:	80 68       	ori	r24, 0x80	; 128
     ba4:	81 bb       	out	0x11, r24	; 17
     ba6:	85 b5       	in	r24, 0x25	; 37
     ba8:	80 61       	ori	r24, 0x10	; 16
     baa:	85 bd       	out	0x25, r24	; 37
     bac:	85 b5       	in	r24, 0x25	; 37
     bae:	8f 7d       	andi	r24, 0xDF	; 223
     bb0:	85 bd       	out	0x25, r24	; 37
     bb2:	13 c0       	rjmp	.+38     	; 0xbda <timer_init+0x2c4>
     bb4:	81 b3       	in	r24, 0x11	; 17
     bb6:	80 68       	ori	r24, 0x80	; 128
     bb8:	81 bb       	out	0x11, r24	; 17
     bba:	85 b5       	in	r24, 0x25	; 37
     bbc:	8f 7e       	andi	r24, 0xEF	; 239
     bbe:	85 bd       	out	0x25, r24	; 37
     bc0:	85 b5       	in	r24, 0x25	; 37
     bc2:	80 62       	ori	r24, 0x20	; 32
     bc4:	85 bd       	out	0x25, r24	; 37
     bc6:	09 c0       	rjmp	.+18     	; 0xbda <timer_init+0x2c4>
     bc8:	81 b3       	in	r24, 0x11	; 17
     bca:	80 68       	ori	r24, 0x80	; 128
     bcc:	81 bb       	out	0x11, r24	; 17
     bce:	85 b5       	in	r24, 0x25	; 37
     bd0:	80 61       	ori	r24, 0x10	; 16
     bd2:	85 bd       	out	0x25, r24	; 37
     bd4:	85 b5       	in	r24, 0x25	; 37
     bd6:	80 62       	ori	r24, 0x20	; 32
     bd8:	85 bd       	out	0x25, r24	; 37
     bda:	84 81       	ldd	r24, Z+4	; 0x04
     bdc:	98 ef       	ldi	r25, 0xF8	; 248
     bde:	98 0f       	add	r25, r24
     be0:	92 30       	cpi	r25, 0x02	; 2
     be2:	08 f4       	brcc	.+2      	; 0xbe6 <timer_init+0x2d0>
     be4:	49 c0       	rjmp	.+146    	; 0xc78 <timer_init+0x362>
     be6:	a0 81       	ld	r26, Z
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	a0 5a       	subi	r26, 0xA0	; 160
     bec:	bf 4f       	sbci	r27, 0xFF	; 255
     bee:	8c 93       	st	X, r24
     bf0:	82 81       	ldd	r24, Z+2	; 0x02
     bf2:	81 11       	cpse	r24, r1
     bf4:	0b c0       	rjmp	.+22     	; 0xc0c <timer_init+0x2f6>
     bf6:	81 81       	ldd	r24, Z+1	; 0x01
     bf8:	81 11       	cpse	r24, r1
     bfa:	04 c0       	rjmp	.+8      	; 0xc04 <timer_init+0x2ee>
     bfc:	89 b7       	in	r24, 0x39	; 57
     bfe:	80 64       	ori	r24, 0x40	; 64
     c00:	89 bf       	out	0x39, r24	; 57
     c02:	0a c0       	rjmp	.+20     	; 0xc18 <timer_init+0x302>
     c04:	89 b7       	in	r24, 0x39	; 57
     c06:	80 68       	ori	r24, 0x80	; 128
     c08:	89 bf       	out	0x39, r24	; 57
     c0a:	06 c0       	rjmp	.+12     	; 0xc18 <timer_init+0x302>
     c0c:	89 b7       	in	r24, 0x39	; 57
     c0e:	8f 7b       	andi	r24, 0xBF	; 191
     c10:	89 bf       	out	0x39, r24	; 57
     c12:	89 b7       	in	r24, 0x39	; 57
     c14:	8f 77       	andi	r24, 0x7F	; 127
     c16:	89 bf       	out	0x39, r24	; 57
     c18:	85 81       	ldd	r24, Z+5	; 0x05
     c1a:	96 81       	ldd	r25, Z+6	; 0x06
     c1c:	8f 3f       	cpi	r24, 0xFF	; 255
     c1e:	91 05       	cpc	r25, r1
     c20:	09 f0       	breq	.+2      	; 0xc24 <timer_init+0x30e>
     c22:	60 f5       	brcc	.+88     	; 0xc7c <timer_init+0x366>
     c24:	27 81       	ldd	r18, Z+7	; 0x07
     c26:	30 85       	ldd	r19, Z+8	; 0x08
     c28:	2f 3f       	cpi	r18, 0xFF	; 255
     c2a:	31 05       	cpc	r19, r1
     c2c:	09 f0       	breq	.+2      	; 0xc30 <timer_init+0x31a>
     c2e:	40 f5       	brcc	.+80     	; 0xc80 <timer_init+0x36a>
     c30:	21 81       	ldd	r18, Z+1	; 0x01
     c32:	21 11       	cpse	r18, r1
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <timer_init+0x328>
     c36:	84 bd       	out	0x24, r24	; 36
     c38:	13 bc       	out	0x23, r1	; 35
     c3a:	86 e0       	ldi	r24, 0x06	; 6
     c3c:	22 c0       	rjmp	.+68     	; 0xc82 <timer_init+0x36c>
     c3e:	14 bc       	out	0x24, r1	; 36
     c40:	87 81       	ldd	r24, Z+7	; 0x07
     c42:	83 bd       	out	0x23, r24	; 35
     c44:	86 e0       	ldi	r24, 0x06	; 6
     c46:	1d c0       	rjmp	.+58     	; 0xc82 <timer_init+0x36c>
     c48:	85 e0       	ldi	r24, 0x05	; 5
     c4a:	1b c0       	rjmp	.+54     	; 0xc82 <timer_init+0x36c>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	19 c0       	rjmp	.+50     	; 0xc82 <timer_init+0x36c>
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	17 c0       	rjmp	.+46     	; 0xc82 <timer_init+0x36c>
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	15 c0       	rjmp	.+42     	; 0xc82 <timer_init+0x36c>
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	13 c0       	rjmp	.+38     	; 0xc82 <timer_init+0x36c>
     c5c:	84 e0       	ldi	r24, 0x04	; 4
     c5e:	11 c0       	rjmp	.+34     	; 0xc82 <timer_init+0x36c>
     c60:	84 e0       	ldi	r24, 0x04	; 4
     c62:	0f c0       	rjmp	.+30     	; 0xc82 <timer_init+0x36c>
     c64:	84 e0       	ldi	r24, 0x04	; 4
     c66:	0d c0       	rjmp	.+26     	; 0xc82 <timer_init+0x36c>
     c68:	85 e0       	ldi	r24, 0x05	; 5
     c6a:	0b c0       	rjmp	.+22     	; 0xc82 <timer_init+0x36c>
     c6c:	85 e0       	ldi	r24, 0x05	; 5
     c6e:	09 c0       	rjmp	.+18     	; 0xc82 <timer_init+0x36c>
     c70:	84 e0       	ldi	r24, 0x04	; 4
     c72:	07 c0       	rjmp	.+14     	; 0xc82 <timer_init+0x36c>
     c74:	84 e0       	ldi	r24, 0x04	; 4
     c76:	05 c0       	rjmp	.+10     	; 0xc82 <timer_init+0x36c>
     c78:	84 e0       	ldi	r24, 0x04	; 4
     c7a:	03 c0       	rjmp	.+6      	; 0xc82 <timer_init+0x36c>
     c7c:	85 e0       	ldi	r24, 0x05	; 5
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <timer_init+0x36c>
     c80:	85 e0       	ldi	r24, 0x05	; 5
     c82:	86 30       	cpi	r24, 0x06	; 6
     c84:	31 f4       	brne	.+12     	; 0xc92 <timer_init+0x37c>
     c86:	e0 81       	ld	r30, Z
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	ec 57       	subi	r30, 0x7C	; 124
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	90 83       	st	Z, r25
     c92:	08 95       	ret

00000c94 <timer_setInitialValue>:
     c94:	83 30       	cpi	r24, 0x03	; 3
     c96:	f8 f4       	brcc	.+62     	; 0xcd6 <timer_setInitialValue+0x42>
     c98:	e8 2f       	mov	r30, r24
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	ec 57       	subi	r30, 0x7C	; 124
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	90 81       	ld	r25, Z
     ca2:	91 30       	cpi	r25, 0x01	; 1
     ca4:	d1 f4       	brne	.+52     	; 0xcda <timer_setInitialValue+0x46>
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	59 f0       	breq	.+22     	; 0xcc0 <timer_setInitialValue+0x2c>
     caa:	18 f0       	brcs	.+6      	; 0xcb2 <timer_setInitialValue+0x1e>
     cac:	82 30       	cpi	r24, 0x02	; 2
     cae:	61 f0       	breq	.+24     	; 0xcc8 <timer_setInitialValue+0x34>
     cb0:	16 c0       	rjmp	.+44     	; 0xcde <timer_setInitialValue+0x4a>
     cb2:	6f 3f       	cpi	r22, 0xFF	; 255
     cb4:	71 05       	cpc	r23, r1
     cb6:	09 f0       	breq	.+2      	; 0xcba <timer_setInitialValue+0x26>
     cb8:	a0 f4       	brcc	.+40     	; 0xce2 <timer_setInitialValue+0x4e>
     cba:	62 bf       	out	0x32, r22	; 50
     cbc:	86 e0       	ldi	r24, 0x06	; 6
     cbe:	08 95       	ret
     cc0:	7d bd       	out	0x2d, r23	; 45
     cc2:	6c bd       	out	0x2c, r22	; 44
     cc4:	86 e0       	ldi	r24, 0x06	; 6
     cc6:	08 95       	ret
     cc8:	6f 3f       	cpi	r22, 0xFF	; 255
     cca:	71 05       	cpc	r23, r1
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <timer_setInitialValue+0x3c>
     cce:	58 f4       	brcc	.+22     	; 0xce6 <timer_setInitialValue+0x52>
     cd0:	64 bd       	out	0x24, r22	; 36
     cd2:	86 e0       	ldi	r24, 0x06	; 6
     cd4:	08 95       	ret
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	08 95       	ret
     cda:	88 e0       	ldi	r24, 0x08	; 8
     cdc:	08 95       	ret
     cde:	86 e0       	ldi	r24, 0x06	; 6
     ce0:	08 95       	ret
     ce2:	85 e0       	ldi	r24, 0x05	; 5
     ce4:	08 95       	ret
     ce6:	85 e0       	ldi	r24, 0x05	; 5
     ce8:	08 95       	ret

00000cea <timer_setClock>:
     cea:	83 30       	cpi	r24, 0x03	; 3
     cec:	70 f5       	brcc	.+92     	; 0xd4a <timer_setClock+0x60>
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	f9 01       	movw	r30, r18
     cf4:	ec 57       	subi	r30, 0x7C	; 124
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	90 81       	ld	r25, Z
     cfa:	91 30       	cpi	r25, 0x01	; 1
     cfc:	41 f5       	brne	.+80     	; 0xd4e <timer_setClock+0x64>
     cfe:	6a 30       	cpi	r22, 0x0A	; 10
     d00:	40 f5       	brcc	.+80     	; 0xd52 <timer_setClock+0x68>
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	71 f0       	breq	.+28     	; 0xd22 <timer_setClock+0x38>
     d06:	18 f0       	brcs	.+6      	; 0xd0e <timer_setClock+0x24>
     d08:	82 30       	cpi	r24, 0x02	; 2
     d0a:	a9 f0       	breq	.+42     	; 0xd36 <timer_setClock+0x4c>
     d0c:	24 c0       	rjmp	.+72     	; 0xd56 <timer_setClock+0x6c>
     d0e:	63 30       	cpi	r22, 0x03	; 3
     d10:	21 f1       	breq	.+72     	; 0xd5a <timer_setClock+0x70>
     d12:	65 30       	cpi	r22, 0x05	; 5
     d14:	21 f1       	breq	.+72     	; 0xd5e <timer_setClock+0x74>
     d16:	f9 01       	movw	r30, r18
     d18:	e0 5a       	subi	r30, 0xA0	; 160
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	60 83       	st	Z, r22
     d1e:	86 e0       	ldi	r24, 0x06	; 6
     d20:	08 95       	ret
     d22:	63 30       	cpi	r22, 0x03	; 3
     d24:	f1 f0       	breq	.+60     	; 0xd62 <timer_setClock+0x78>
     d26:	65 30       	cpi	r22, 0x05	; 5
     d28:	f1 f0       	breq	.+60     	; 0xd66 <timer_setClock+0x7c>
     d2a:	f9 01       	movw	r30, r18
     d2c:	e0 5a       	subi	r30, 0xA0	; 160
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	60 83       	st	Z, r22
     d32:	86 e0       	ldi	r24, 0x06	; 6
     d34:	08 95       	ret
     d36:	88 ef       	ldi	r24, 0xF8	; 248
     d38:	86 0f       	add	r24, r22
     d3a:	82 30       	cpi	r24, 0x02	; 2
     d3c:	b0 f0       	brcs	.+44     	; 0xd6a <timer_setClock+0x80>
     d3e:	f9 01       	movw	r30, r18
     d40:	e0 5a       	subi	r30, 0xA0	; 160
     d42:	ff 4f       	sbci	r31, 0xFF	; 255
     d44:	60 83       	st	Z, r22
     d46:	86 e0       	ldi	r24, 0x06	; 6
     d48:	08 95       	ret
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	08 95       	ret
     d4e:	88 e0       	ldi	r24, 0x08	; 8
     d50:	08 95       	ret
     d52:	84 e0       	ldi	r24, 0x04	; 4
     d54:	08 95       	ret
     d56:	86 e0       	ldi	r24, 0x06	; 6
     d58:	08 95       	ret
     d5a:	84 e0       	ldi	r24, 0x04	; 4
     d5c:	08 95       	ret
     d5e:	84 e0       	ldi	r24, 0x04	; 4
     d60:	08 95       	ret
     d62:	84 e0       	ldi	r24, 0x04	; 4
     d64:	08 95       	ret
     d66:	84 e0       	ldi	r24, 0x04	; 4
     d68:	08 95       	ret
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	08 95       	ret

00000d6e <timer_setCallBack>:
     d6e:	83 30       	cpi	r24, 0x03	; 3
     d70:	d8 f5       	brcc	.+118    	; 0xde8 <timer_setCallBack+0x7a>
     d72:	42 30       	cpi	r20, 0x02	; 2
     d74:	d8 f5       	brcc	.+118    	; 0xdec <timer_setCallBack+0x7e>
     d76:	61 15       	cp	r22, r1
     d78:	71 05       	cpc	r23, r1
     d7a:	d1 f1       	breq	.+116    	; 0xdf0 <timer_setCallBack+0x82>
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	a1 f0       	breq	.+40     	; 0xda8 <timer_setCallBack+0x3a>
     d80:	18 f0       	brcs	.+6      	; 0xd88 <timer_setCallBack+0x1a>
     d82:	82 30       	cpi	r24, 0x02	; 2
     d84:	09 f1       	breq	.+66     	; 0xdc8 <timer_setCallBack+0x5a>
     d86:	36 c0       	rjmp	.+108    	; 0xdf4 <timer_setCallBack+0x86>
     d88:	41 11       	cpse	r20, r1
     d8a:	06 c0       	rjmp	.+12     	; 0xd98 <timer_setCallBack+0x2a>
     d8c:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <gl_callBackPtr_timer0_OVF+0x1>
     d90:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <gl_callBackPtr_timer0_OVF>
     d94:	86 e0       	ldi	r24, 0x06	; 6
     d96:	08 95       	ret
     d98:	41 30       	cpi	r20, 0x01	; 1
     d9a:	71 f5       	brne	.+92     	; 0xdf8 <timer_setCallBack+0x8a>
     d9c:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <gl_callBackPtr_timer0_COMP+0x1>
     da0:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <gl_callBackPtr_timer0_COMP>
     da4:	86 e0       	ldi	r24, 0x06	; 6
     da6:	08 95       	ret
     da8:	41 11       	cpse	r20, r1
     daa:	06 c0       	rjmp	.+12     	; 0xdb8 <timer_setCallBack+0x4a>
     dac:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <gl_callBackPtr_timer1_OVF+0x1>
     db0:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <gl_callBackPtr_timer1_OVF>
     db4:	86 e0       	ldi	r24, 0x06	; 6
     db6:	08 95       	ret
     db8:	41 30       	cpi	r20, 0x01	; 1
     dba:	01 f5       	brne	.+64     	; 0xdfc <timer_setCallBack+0x8e>
     dbc:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <gl_callBackPtr_timer1_COMP+0x1>
     dc0:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <gl_callBackPtr_timer1_COMP>
     dc4:	86 e0       	ldi	r24, 0x06	; 6
     dc6:	08 95       	ret
     dc8:	41 11       	cpse	r20, r1
     dca:	06 c0       	rjmp	.+12     	; 0xdd8 <timer_setCallBack+0x6a>
     dcc:	70 93 7f 00 	sts	0x007F, r23	; 0x80007f <gl_callBackPtr_timer2_OVF+0x1>
     dd0:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <gl_callBackPtr_timer2_OVF>
     dd4:	86 e0       	ldi	r24, 0x06	; 6
     dd6:	08 95       	ret
     dd8:	41 30       	cpi	r20, 0x01	; 1
     dda:	91 f4       	brne	.+36     	; 0xe00 <timer_setCallBack+0x92>
     ddc:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <gl_callBackPtr_timer2_COMP+0x1>
     de0:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <gl_callBackPtr_timer2_COMP>
     de4:	86 e0       	ldi	r24, 0x06	; 6
     de6:	08 95       	ret
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	08 95       	ret
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	08 95       	ret
     df0:	85 e0       	ldi	r24, 0x05	; 5
     df2:	08 95       	ret
     df4:	86 e0       	ldi	r24, 0x06	; 6
     df6:	08 95       	ret
     df8:	86 e0       	ldi	r24, 0x06	; 6
     dfa:	08 95       	ret
     dfc:	86 e0       	ldi	r24, 0x06	; 6
     dfe:	08 95       	ret
     e00:	86 e0       	ldi	r24, 0x06	; 6
     e02:	08 95       	ret

00000e04 <timer_start>:
     e04:	83 30       	cpi	r24, 0x03	; 3
     e06:	08 f0       	brcs	.+2      	; 0xe0a <timer_start+0x6>
     e08:	d4 c0       	rjmp	.+424    	; 0xfb2 <timer_start+0x1ae>
     e0a:	e8 2f       	mov	r30, r24
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	ec 57       	subi	r30, 0x7C	; 124
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	90 81       	ld	r25, Z
     e14:	91 30       	cpi	r25, 0x01	; 1
     e16:	09 f0       	breq	.+2      	; 0xe1a <timer_start+0x16>
     e18:	ce c0       	rjmp	.+412    	; 0xfb6 <timer_start+0x1b2>
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <timer_start+0x1c>
     e1e:	48 c0       	rjmp	.+144    	; 0xeb0 <timer_start+0xac>
     e20:	20 f0       	brcs	.+8      	; 0xe2a <timer_start+0x26>
     e22:	82 30       	cpi	r24, 0x02	; 2
     e24:	09 f4       	brne	.+2      	; 0xe28 <timer_start+0x24>
     e26:	87 c0       	rjmp	.+270    	; 0xf36 <timer_start+0x132>
     e28:	c8 c0       	rjmp	.+400    	; 0xfba <timer_start+0x1b6>
     e2a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     e2e:	8a 30       	cpi	r24, 0x0A	; 10
     e30:	08 f0       	brcs	.+2      	; 0xe34 <timer_start+0x30>
     e32:	c5 c0       	rjmp	.+394    	; 0xfbe <timer_start+0x1ba>
     e34:	83 30       	cpi	r24, 0x03	; 3
     e36:	09 f4       	brne	.+2      	; 0xe3a <timer_start+0x36>
     e38:	c4 c0       	rjmp	.+392    	; 0xfc2 <timer_start+0x1be>
     e3a:	85 30       	cpi	r24, 0x05	; 5
     e3c:	09 f4       	brne	.+2      	; 0xe40 <timer_start+0x3c>
     e3e:	c3 c0       	rjmp	.+390    	; 0xfc6 <timer_start+0x1c2>
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	8a 30       	cpi	r24, 0x0A	; 10
     e44:	91 05       	cpc	r25, r1
     e46:	08 f0       	brcs	.+2      	; 0xe4a <timer_start+0x46>
     e48:	c0 c0       	rjmp	.+384    	; 0xfca <timer_start+0x1c6>
     e4a:	fc 01       	movw	r30, r24
     e4c:	e6 5d       	subi	r30, 0xD6	; 214
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	0c 94 df 14 	jmp	0x29be	; 0x29be <__tablejump2__>
     e54:	83 b7       	in	r24, 0x33	; 51
     e56:	88 7f       	andi	r24, 0xF8	; 248
     e58:	83 bf       	out	0x33, r24	; 51
     e5a:	86 e0       	ldi	r24, 0x06	; 6
     e5c:	08 95       	ret
     e5e:	83 b7       	in	r24, 0x33	; 51
     e60:	88 7f       	andi	r24, 0xF8	; 248
     e62:	81 60       	ori	r24, 0x01	; 1
     e64:	83 bf       	out	0x33, r24	; 51
     e66:	86 e0       	ldi	r24, 0x06	; 6
     e68:	08 95       	ret
     e6a:	83 b7       	in	r24, 0x33	; 51
     e6c:	88 7f       	andi	r24, 0xF8	; 248
     e6e:	82 60       	ori	r24, 0x02	; 2
     e70:	83 bf       	out	0x33, r24	; 51
     e72:	86 e0       	ldi	r24, 0x06	; 6
     e74:	08 95       	ret
     e76:	83 b7       	in	r24, 0x33	; 51
     e78:	88 7f       	andi	r24, 0xF8	; 248
     e7a:	83 60       	ori	r24, 0x03	; 3
     e7c:	83 bf       	out	0x33, r24	; 51
     e7e:	86 e0       	ldi	r24, 0x06	; 6
     e80:	08 95       	ret
     e82:	83 b7       	in	r24, 0x33	; 51
     e84:	88 7f       	andi	r24, 0xF8	; 248
     e86:	84 60       	ori	r24, 0x04	; 4
     e88:	83 bf       	out	0x33, r24	; 51
     e8a:	86 e0       	ldi	r24, 0x06	; 6
     e8c:	08 95       	ret
     e8e:	83 b7       	in	r24, 0x33	; 51
     e90:	88 7f       	andi	r24, 0xF8	; 248
     e92:	85 60       	ori	r24, 0x05	; 5
     e94:	83 bf       	out	0x33, r24	; 51
     e96:	86 e0       	ldi	r24, 0x06	; 6
     e98:	08 95       	ret
     e9a:	83 b7       	in	r24, 0x33	; 51
     e9c:	88 7f       	andi	r24, 0xF8	; 248
     e9e:	86 60       	ori	r24, 0x06	; 6
     ea0:	83 bf       	out	0x33, r24	; 51
     ea2:	86 e0       	ldi	r24, 0x06	; 6
     ea4:	08 95       	ret
     ea6:	83 b7       	in	r24, 0x33	; 51
     ea8:	87 60       	ori	r24, 0x07	; 7
     eaa:	83 bf       	out	0x33, r24	; 51
     eac:	86 e0       	ldi	r24, 0x06	; 6
     eae:	08 95       	ret
     eb0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__data_start+0x1>
     eb4:	8a 30       	cpi	r24, 0x0A	; 10
     eb6:	08 f0       	brcs	.+2      	; 0xeba <timer_start+0xb6>
     eb8:	8a c0       	rjmp	.+276    	; 0xfce <timer_start+0x1ca>
     eba:	83 30       	cpi	r24, 0x03	; 3
     ebc:	09 f4       	brne	.+2      	; 0xec0 <timer_start+0xbc>
     ebe:	89 c0       	rjmp	.+274    	; 0xfd2 <timer_start+0x1ce>
     ec0:	85 30       	cpi	r24, 0x05	; 5
     ec2:	09 f4       	brne	.+2      	; 0xec6 <timer_start+0xc2>
     ec4:	88 c0       	rjmp	.+272    	; 0xfd6 <timer_start+0x1d2>
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	8a 30       	cpi	r24, 0x0A	; 10
     eca:	91 05       	cpc	r25, r1
     ecc:	08 f0       	brcs	.+2      	; 0xed0 <timer_start+0xcc>
     ece:	85 c0       	rjmp	.+266    	; 0xfda <timer_start+0x1d6>
     ed0:	fc 01       	movw	r30, r24
     ed2:	ec 5c       	subi	r30, 0xCC	; 204
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	0c 94 df 14 	jmp	0x29be	; 0x29be <__tablejump2__>
     eda:	8e b5       	in	r24, 0x2e	; 46
     edc:	88 7f       	andi	r24, 0xF8	; 248
     ede:	8e bd       	out	0x2e, r24	; 46
     ee0:	86 e0       	ldi	r24, 0x06	; 6
     ee2:	08 95       	ret
     ee4:	8e b5       	in	r24, 0x2e	; 46
     ee6:	88 7f       	andi	r24, 0xF8	; 248
     ee8:	81 60       	ori	r24, 0x01	; 1
     eea:	8e bd       	out	0x2e, r24	; 46
     eec:	86 e0       	ldi	r24, 0x06	; 6
     eee:	08 95       	ret
     ef0:	8e b5       	in	r24, 0x2e	; 46
     ef2:	88 7f       	andi	r24, 0xF8	; 248
     ef4:	82 60       	ori	r24, 0x02	; 2
     ef6:	8e bd       	out	0x2e, r24	; 46
     ef8:	86 e0       	ldi	r24, 0x06	; 6
     efa:	08 95       	ret
     efc:	8e b5       	in	r24, 0x2e	; 46
     efe:	88 7f       	andi	r24, 0xF8	; 248
     f00:	83 60       	ori	r24, 0x03	; 3
     f02:	8e bd       	out	0x2e, r24	; 46
     f04:	86 e0       	ldi	r24, 0x06	; 6
     f06:	08 95       	ret
     f08:	8e b5       	in	r24, 0x2e	; 46
     f0a:	88 7f       	andi	r24, 0xF8	; 248
     f0c:	84 60       	ori	r24, 0x04	; 4
     f0e:	8e bd       	out	0x2e, r24	; 46
     f10:	86 e0       	ldi	r24, 0x06	; 6
     f12:	08 95       	ret
     f14:	8e b5       	in	r24, 0x2e	; 46
     f16:	88 7f       	andi	r24, 0xF8	; 248
     f18:	85 60       	ori	r24, 0x05	; 5
     f1a:	8e bd       	out	0x2e, r24	; 46
     f1c:	86 e0       	ldi	r24, 0x06	; 6
     f1e:	08 95       	ret
     f20:	8e b5       	in	r24, 0x2e	; 46
     f22:	88 7f       	andi	r24, 0xF8	; 248
     f24:	86 60       	ori	r24, 0x06	; 6
     f26:	8e bd       	out	0x2e, r24	; 46
     f28:	86 e0       	ldi	r24, 0x06	; 6
     f2a:	08 95       	ret
     f2c:	8e b5       	in	r24, 0x2e	; 46
     f2e:	87 60       	ori	r24, 0x07	; 7
     f30:	8e bd       	out	0x2e, r24	; 46
     f32:	86 e0       	ldi	r24, 0x06	; 6
     f34:	08 95       	ret
     f36:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_start+0x2>
     f3a:	e8 30       	cpi	r30, 0x08	; 8
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <timer_start+0x13c>
     f3e:	4f c0       	rjmp	.+158    	; 0xfde <timer_start+0x1da>
     f40:	8e 2f       	mov	r24, r30
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	88 30       	cpi	r24, 0x08	; 8
     f46:	91 05       	cpc	r25, r1
     f48:	08 f0       	brcs	.+2      	; 0xf4c <timer_start+0x148>
     f4a:	4b c0       	rjmp	.+150    	; 0xfe2 <timer_start+0x1de>
     f4c:	fc 01       	movw	r30, r24
     f4e:	e2 5c       	subi	r30, 0xC2	; 194
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	0c 94 df 14 	jmp	0x29be	; 0x29be <__tablejump2__>
     f56:	85 b5       	in	r24, 0x25	; 37
     f58:	88 7f       	andi	r24, 0xF8	; 248
     f5a:	85 bd       	out	0x25, r24	; 37
     f5c:	86 e0       	ldi	r24, 0x06	; 6
     f5e:	08 95       	ret
     f60:	85 b5       	in	r24, 0x25	; 37
     f62:	88 7f       	andi	r24, 0xF8	; 248
     f64:	81 60       	ori	r24, 0x01	; 1
     f66:	85 bd       	out	0x25, r24	; 37
     f68:	86 e0       	ldi	r24, 0x06	; 6
     f6a:	08 95       	ret
     f6c:	85 b5       	in	r24, 0x25	; 37
     f6e:	88 7f       	andi	r24, 0xF8	; 248
     f70:	82 60       	ori	r24, 0x02	; 2
     f72:	85 bd       	out	0x25, r24	; 37
     f74:	86 e0       	ldi	r24, 0x06	; 6
     f76:	08 95       	ret
     f78:	85 b5       	in	r24, 0x25	; 37
     f7a:	88 7f       	andi	r24, 0xF8	; 248
     f7c:	83 60       	ori	r24, 0x03	; 3
     f7e:	85 bd       	out	0x25, r24	; 37
     f80:	86 e0       	ldi	r24, 0x06	; 6
     f82:	08 95       	ret
     f84:	85 b5       	in	r24, 0x25	; 37
     f86:	88 7f       	andi	r24, 0xF8	; 248
     f88:	84 60       	ori	r24, 0x04	; 4
     f8a:	85 bd       	out	0x25, r24	; 37
     f8c:	86 e0       	ldi	r24, 0x06	; 6
     f8e:	08 95       	ret
     f90:	85 b5       	in	r24, 0x25	; 37
     f92:	88 7f       	andi	r24, 0xF8	; 248
     f94:	85 60       	ori	r24, 0x05	; 5
     f96:	85 bd       	out	0x25, r24	; 37
     f98:	86 e0       	ldi	r24, 0x06	; 6
     f9a:	08 95       	ret
     f9c:	85 b5       	in	r24, 0x25	; 37
     f9e:	88 7f       	andi	r24, 0xF8	; 248
     fa0:	86 60       	ori	r24, 0x06	; 6
     fa2:	85 bd       	out	0x25, r24	; 37
     fa4:	86 e0       	ldi	r24, 0x06	; 6
     fa6:	08 95       	ret
     fa8:	85 b5       	in	r24, 0x25	; 37
     faa:	87 60       	ori	r24, 0x07	; 7
     fac:	85 bd       	out	0x25, r24	; 37
     fae:	86 e0       	ldi	r24, 0x06	; 6
     fb0:	08 95       	ret
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	08 95       	ret
     fb6:	88 e0       	ldi	r24, 0x08	; 8
     fb8:	08 95       	ret
     fba:	86 e0       	ldi	r24, 0x06	; 6
     fbc:	08 95       	ret
     fbe:	84 e0       	ldi	r24, 0x04	; 4
     fc0:	08 95       	ret
     fc2:	84 e0       	ldi	r24, 0x04	; 4
     fc4:	08 95       	ret
     fc6:	84 e0       	ldi	r24, 0x04	; 4
     fc8:	08 95       	ret
     fca:	86 e0       	ldi	r24, 0x06	; 6
     fcc:	08 95       	ret
     fce:	84 e0       	ldi	r24, 0x04	; 4
     fd0:	08 95       	ret
     fd2:	84 e0       	ldi	r24, 0x04	; 4
     fd4:	08 95       	ret
     fd6:	84 e0       	ldi	r24, 0x04	; 4
     fd8:	08 95       	ret
     fda:	86 e0       	ldi	r24, 0x06	; 6
     fdc:	08 95       	ret
     fde:	84 e0       	ldi	r24, 0x04	; 4
     fe0:	08 95       	ret
     fe2:	86 e0       	ldi	r24, 0x06	; 6
     fe4:	08 95       	ret

00000fe6 <timer_stop>:
     fe6:	83 30       	cpi	r24, 0x03	; 3
     fe8:	e0 f4       	brcc	.+56     	; 0x1022 <timer_stop+0x3c>
     fea:	e8 2f       	mov	r30, r24
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	ec 57       	subi	r30, 0x7C	; 124
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	90 81       	ld	r25, Z
     ff4:	91 30       	cpi	r25, 0x01	; 1
     ff6:	b9 f4       	brne	.+46     	; 0x1026 <timer_stop+0x40>
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	49 f0       	breq	.+18     	; 0x100e <timer_stop+0x28>
     ffc:	18 f0       	brcs	.+6      	; 0x1004 <timer_stop+0x1e>
     ffe:	82 30       	cpi	r24, 0x02	; 2
    1000:	59 f0       	breq	.+22     	; 0x1018 <timer_stop+0x32>
    1002:	13 c0       	rjmp	.+38     	; 0x102a <timer_stop+0x44>
    1004:	83 b7       	in	r24, 0x33	; 51
    1006:	88 7f       	andi	r24, 0xF8	; 248
    1008:	83 bf       	out	0x33, r24	; 51
    100a:	86 e0       	ldi	r24, 0x06	; 6
    100c:	08 95       	ret
    100e:	8e b5       	in	r24, 0x2e	; 46
    1010:	88 7f       	andi	r24, 0xF8	; 248
    1012:	8e bd       	out	0x2e, r24	; 46
    1014:	86 e0       	ldi	r24, 0x06	; 6
    1016:	08 95       	ret
    1018:	85 b5       	in	r24, 0x25	; 37
    101a:	88 7f       	andi	r24, 0xF8	; 248
    101c:	85 bd       	out	0x25, r24	; 37
    101e:	86 e0       	ldi	r24, 0x06	; 6
    1020:	08 95       	ret
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	08 95       	ret
    1026:	88 e0       	ldi	r24, 0x08	; 8
    1028:	08 95       	ret
    102a:	86 e0       	ldi	r24, 0x06	; 6
    102c:	08 95       	ret

0000102e <__vector_11>:

/*===============ISR HANDLERS================*/
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR_HANDLER(TMR0_OVF)
{
    102e:	1f 92       	push	r1
    1030:	0f 92       	push	r0
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	0f 92       	push	r0
    1036:	11 24       	eor	r1, r1
    1038:	2f 93       	push	r18
    103a:	3f 93       	push	r19
    103c:	4f 93       	push	r20
    103e:	5f 93       	push	r21
    1040:	6f 93       	push	r22
    1042:	7f 93       	push	r23
    1044:	8f 93       	push	r24
    1046:	9f 93       	push	r25
    1048:	af 93       	push	r26
    104a:	bf 93       	push	r27
    104c:	ef 93       	push	r30
    104e:	ff 93       	push	r31
	if(gl_callBackPtr_timer0_OVF != NULL_PTR)
    1050:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <gl_callBackPtr_timer0_OVF>
    1054:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <gl_callBackPtr_timer0_OVF+0x1>
    1058:	30 97       	sbiw	r30, 0x00	; 0
    105a:	09 f0       	breq	.+2      	; 0x105e <__vector_11+0x30>
	{
		gl_callBackPtr_timer0_OVF();
    105c:	09 95       	icall
	}
}
    105e:	ff 91       	pop	r31
    1060:	ef 91       	pop	r30
    1062:	bf 91       	pop	r27
    1064:	af 91       	pop	r26
    1066:	9f 91       	pop	r25
    1068:	8f 91       	pop	r24
    106a:	7f 91       	pop	r23
    106c:	6f 91       	pop	r22
    106e:	5f 91       	pop	r21
    1070:	4f 91       	pop	r20
    1072:	3f 91       	pop	r19
    1074:	2f 91       	pop	r18
    1076:	0f 90       	pop	r0
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	0f 90       	pop	r0
    107c:	1f 90       	pop	r1
    107e:	18 95       	reti

00001080 <__vector_9>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR_HANDLER(TMR1_OVF)
{
    1080:	1f 92       	push	r1
    1082:	0f 92       	push	r0
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	0f 92       	push	r0
    1088:	11 24       	eor	r1, r1
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
	if(gl_callBackPtr_timer1_OVF != NULL_PTR)
    10a2:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <gl_callBackPtr_timer1_OVF>
    10a6:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <gl_callBackPtr_timer1_OVF+0x1>
    10aa:	30 97       	sbiw	r30, 0x00	; 0
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <__vector_9+0x30>
	{
		gl_callBackPtr_timer1_OVF();
    10ae:	09 95       	icall
	}
}
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	bf 91       	pop	r27
    10b6:	af 91       	pop	r26
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	7f 91       	pop	r23
    10be:	6f 91       	pop	r22
    10c0:	5f 91       	pop	r21
    10c2:	4f 91       	pop	r20
    10c4:	3f 91       	pop	r19
    10c6:	2f 91       	pop	r18
    10c8:	0f 90       	pop	r0
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	0f 90       	pop	r0
    10ce:	1f 90       	pop	r1
    10d0:	18 95       	reti

000010d2 <__vector_5>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR_HANDLER(TMR2_OVF)
{
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	0f 92       	push	r0
    10da:	11 24       	eor	r1, r1
    10dc:	2f 93       	push	r18
    10de:	3f 93       	push	r19
    10e0:	4f 93       	push	r20
    10e2:	5f 93       	push	r21
    10e4:	6f 93       	push	r22
    10e6:	7f 93       	push	r23
    10e8:	8f 93       	push	r24
    10ea:	9f 93       	push	r25
    10ec:	af 93       	push	r26
    10ee:	bf 93       	push	r27
    10f0:	ef 93       	push	r30
    10f2:	ff 93       	push	r31
	if(gl_callBackPtr_timer2_OVF != NULL_PTR)
    10f4:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <gl_callBackPtr_timer2_OVF>
    10f8:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <gl_callBackPtr_timer2_OVF+0x1>
    10fc:	30 97       	sbiw	r30, 0x00	; 0
    10fe:	09 f0       	breq	.+2      	; 0x1102 <__vector_5+0x30>
	{
		gl_callBackPtr_timer2_OVF();
    1100:	09 95       	icall
	}
}
    1102:	ff 91       	pop	r31
    1104:	ef 91       	pop	r30
    1106:	bf 91       	pop	r27
    1108:	af 91       	pop	r26
    110a:	9f 91       	pop	r25
    110c:	8f 91       	pop	r24
    110e:	7f 91       	pop	r23
    1110:	6f 91       	pop	r22
    1112:	5f 91       	pop	r21
    1114:	4f 91       	pop	r20
    1116:	3f 91       	pop	r19
    1118:	2f 91       	pop	r18
    111a:	0f 90       	pop	r0
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	0f 90       	pop	r0
    1120:	1f 90       	pop	r1
    1122:	18 95       	reti

00001124 <__vector_10>:
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR_HANDLER(TMR0_CMP)
{
    1124:	1f 92       	push	r1
    1126:	0f 92       	push	r0
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	0f 92       	push	r0
    112c:	11 24       	eor	r1, r1
    112e:	2f 93       	push	r18
    1130:	3f 93       	push	r19
    1132:	4f 93       	push	r20
    1134:	5f 93       	push	r21
    1136:	6f 93       	push	r22
    1138:	7f 93       	push	r23
    113a:	8f 93       	push	r24
    113c:	9f 93       	push	r25
    113e:	af 93       	push	r26
    1140:	bf 93       	push	r27
    1142:	ef 93       	push	r30
    1144:	ff 93       	push	r31
	if(gl_callBackPtr_timer0_COMP != NULL_PTR)
    1146:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <gl_callBackPtr_timer0_COMP>
    114a:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <gl_callBackPtr_timer0_COMP+0x1>
    114e:	30 97       	sbiw	r30, 0x00	; 0
    1150:	09 f0       	breq	.+2      	; 0x1154 <__vector_10+0x30>
	{
		gl_callBackPtr_timer0_COMP();
    1152:	09 95       	icall
	}
}
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	bf 91       	pop	r27
    115a:	af 91       	pop	r26
    115c:	9f 91       	pop	r25
    115e:	8f 91       	pop	r24
    1160:	7f 91       	pop	r23
    1162:	6f 91       	pop	r22
    1164:	5f 91       	pop	r21
    1166:	4f 91       	pop	r20
    1168:	3f 91       	pop	r19
    116a:	2f 91       	pop	r18
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

00001176 <__vector_7>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR_HANDLER(TMR1_CMP_A)
{
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	0f 92       	push	r0
    117e:	11 24       	eor	r1, r1
    1180:	2f 93       	push	r18
    1182:	3f 93       	push	r19
    1184:	4f 93       	push	r20
    1186:	5f 93       	push	r21
    1188:	6f 93       	push	r22
    118a:	7f 93       	push	r23
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	af 93       	push	r26
    1192:	bf 93       	push	r27
    1194:	ef 93       	push	r30
    1196:	ff 93       	push	r31
	if(gl_callBackPtr_timer1_COMP != NULL_PTR)
    1198:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <gl_callBackPtr_timer1_COMP>
    119c:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <gl_callBackPtr_timer1_COMP+0x1>
    11a0:	30 97       	sbiw	r30, 0x00	; 0
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <__vector_7+0x30>
	{
		gl_callBackPtr_timer1_COMP();
    11a4:	09 95       	icall
	}
}
    11a6:	ff 91       	pop	r31
    11a8:	ef 91       	pop	r30
    11aa:	bf 91       	pop	r27
    11ac:	af 91       	pop	r26
    11ae:	9f 91       	pop	r25
    11b0:	8f 91       	pop	r24
    11b2:	7f 91       	pop	r23
    11b4:	6f 91       	pop	r22
    11b6:	5f 91       	pop	r21
    11b8:	4f 91       	pop	r20
    11ba:	3f 91       	pop	r19
    11bc:	2f 91       	pop	r18
    11be:	0f 90       	pop	r0
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	0f 90       	pop	r0
    11c4:	1f 90       	pop	r1
    11c6:	18 95       	reti

000011c8 <__vector_4>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR_HANDLER(TMR2_CMP)
{
    11c8:	1f 92       	push	r1
    11ca:	0f 92       	push	r0
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	0f 92       	push	r0
    11d0:	11 24       	eor	r1, r1
    11d2:	2f 93       	push	r18
    11d4:	3f 93       	push	r19
    11d6:	4f 93       	push	r20
    11d8:	5f 93       	push	r21
    11da:	6f 93       	push	r22
    11dc:	7f 93       	push	r23
    11de:	8f 93       	push	r24
    11e0:	9f 93       	push	r25
    11e2:	af 93       	push	r26
    11e4:	bf 93       	push	r27
    11e6:	ef 93       	push	r30
    11e8:	ff 93       	push	r31
	if(gl_callBackPtr_timer2_COMP != NULL_PTR)
    11ea:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <gl_callBackPtr_timer2_COMP>
    11ee:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <gl_callBackPtr_timer2_COMP+0x1>
    11f2:	30 97       	sbiw	r30, 0x00	; 0
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <__vector_4+0x30>
	{
		gl_callBackPtr_timer2_COMP(); 
    11f6:	09 95       	icall
	}
    11f8:	ff 91       	pop	r31
    11fa:	ef 91       	pop	r30
    11fc:	bf 91       	pop	r27
    11fe:	af 91       	pop	r26
    1200:	9f 91       	pop	r25
    1202:	8f 91       	pop	r24
    1204:	7f 91       	pop	r23
    1206:	6f 91       	pop	r22
    1208:	5f 91       	pop	r21
    120a:	4f 91       	pop	r20
    120c:	3f 91       	pop	r19
    120e:	2f 91       	pop	r18
    1210:	0f 90       	pop	r0
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	0f 90       	pop	r0
    1216:	1f 90       	pop	r1
    1218:	18 95       	reti

0000121a <calc_prescaler>:

/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
    121a:	cf 92       	push	r12
    121c:	df 92       	push	r13
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	6b 01       	movw	r12, r22
    1228:	7c 01       	movw	r14, r24
	BOOLEAN bo_return_value = TRUE;
	if(enu_time_unit == ENU_MICRO_SECOND)
    122a:	21 11       	cpse	r18, r1
    122c:	65 c1       	rjmp	.+714    	; 0x14f8 <calc_prescaler+0x2de>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    122e:	41 11       	cpse	r20, r1
    1230:	69 c0       	rjmp	.+210    	; 0x1304 <calc_prescaler+0xea>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e0       	ldi	r20, 0x00	; 0
    1238:	57 e4       	ldi	r21, 0x47	; 71
    123a:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    123e:	18 16       	cp	r1, r24
    1240:	0c f4       	brge	.+2      	; 0x1244 <calc_prescaler+0x2a>
    1242:	59 c0       	rjmp	.+178    	; 0x12f6 <calc_prescaler+0xdc>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	52 e4       	ldi	r21, 0x42	; 66
    124c:	c7 01       	movw	r24, r14
    124e:	b6 01       	movw	r22, r12
    1250:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1254:	18 16       	cp	r1, r24
    1256:	34 f0       	brlt	.+12     	; 0x1264 <calc_prescaler+0x4a>
				*ptr_u16_prescale=P_1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	f8 01       	movw	r30, r16
    125e:	91 83       	std	Z+1, r25	; 0x01
    1260:	80 83       	st	Z, r24
    1262:	21 c4       	rjmp	.+2114   	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e8       	ldi	r20, 0x80	; 128
    126a:	53 e4       	ldi	r21, 0x43	; 67
    126c:	c7 01       	movw	r24, r14
    126e:	b6 01       	movw	r22, r12
    1270:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1274:	18 16       	cp	r1, r24
    1276:	3c f0       	brlt	.+14     	; 0x1286 <calc_prescaler+0x6c>
				*ptr_u16_prescale=P_8;
    1278:	88 e0       	ldi	r24, 0x08	; 8
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	f8 01       	movw	r30, r16
    127e:	91 83       	std	Z+1, r25	; 0x01
    1280:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	10 c4       	rjmp	.+2080   	; 0x1aa6 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	55 e4       	ldi	r21, 0x45	; 69
    128e:	c7 01       	movw	r24, r14
    1290:	b6 01       	movw	r22, r12
    1292:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1296:	18 16       	cp	r1, r24
    1298:	3c f0       	brlt	.+14     	; 0x12a8 <calc_prescaler+0x8e>
				*ptr_u16_prescale=P_64;
    129a:	80 e4       	ldi	r24, 0x40	; 64
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	f8 01       	movw	r30, r16
    12a0:	91 83       	std	Z+1, r25	; 0x01
    12a2:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	ff c3       	rjmp	.+2046   	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	56 e4       	ldi	r21, 0x46	; 70
    12b0:	c7 01       	movw	r24, r14
    12b2:	b6 01       	movw	r22, r12
    12b4:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    12b8:	18 16       	cp	r1, r24
    12ba:	3c f0       	brlt	.+14     	; 0x12ca <calc_prescaler+0xb0>
				*ptr_u16_prescale=P_256;
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	f8 01       	movw	r30, r16
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	ee c3       	rjmp	.+2012   	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024))
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	57 e4       	ldi	r21, 0x47	; 71
    12d2:	c7 01       	movw	r24, r14
    12d4:	b6 01       	movw	r22, r12
    12d6:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    12da:	18 16       	cp	r1, r24
    12dc:	3c f0       	brlt	.+14     	; 0x12ec <calc_prescaler+0xd2>
				*ptr_u16_prescale=P_1024;
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	94 e0       	ldi	r25, 0x04	; 4
    12e2:	f8 01       	movw	r30, r16
    12e4:	91 83       	std	Z+1, r25	; 0x01
    12e6:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	dd c3       	rjmp	.+1978   	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    12ec:	f8 01       	movw	r30, r16
    12ee:	11 82       	std	Z+1, r1	; 0x01
    12f0:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	d8 c3       	rjmp	.+1968   	; 0x1aa6 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    12f6:	8c ed       	ldi	r24, 0xDC	; 220
    12f8:	95 e0       	ldi	r25, 0x05	; 5
    12fa:	f8 01       	movw	r30, r16
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	80 83       	st	Z, r24
				bo_return_value = TRUE;	
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	d1 c3       	rjmp	.+1954   	; 0x1aa6 <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    1304:	41 30       	cpi	r20, 0x01	; 1
    1306:	09 f0       	breq	.+2      	; 0x130a <calc_prescaler+0xf0>
    1308:	69 c0       	rjmp	.+210    	; 0x13dc <calc_prescaler+0x1c2>
		{
			if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024) )
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	5b e4       	ldi	r21, 0x4B	; 75
    1312:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1316:	18 16       	cp	r1, r24
    1318:	0c f4       	brge	.+2      	; 0x131c <calc_prescaler+0x102>
    131a:	59 c0       	rjmp	.+178    	; 0x13ce <calc_prescaler+0x1b4>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_US(P_1))
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	56 e4       	ldi	r21, 0x46	; 70
    1324:	c7 01       	movw	r24, r14
    1326:	b6 01       	movw	r22, r12
    1328:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    132c:	18 16       	cp	r1, r24
    132e:	34 f0       	brlt	.+12     	; 0x133c <calc_prescaler+0x122>
				*ptr_u16_prescale=P_1;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	f8 01       	movw	r30, r16
    1336:	91 83       	std	Z+1, r25	; 0x01
    1338:	80 83       	st	Z, r24
    133a:	b5 c3       	rjmp	.+1898   	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e8       	ldi	r20, 0x80	; 128
    1342:	57 e4       	ldi	r21, 0x47	; 71
    1344:	c7 01       	movw	r24, r14
    1346:	b6 01       	movw	r22, r12
    1348:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    134c:	18 16       	cp	r1, r24
    134e:	3c f0       	brlt	.+14     	; 0x135e <calc_prescaler+0x144>
				*ptr_u16_prescale=P_8;
    1350:	88 e0       	ldi	r24, 0x08	; 8
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	f8 01       	movw	r30, r16
    1356:	91 83       	std	Z+1, r25	; 0x01
    1358:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	a4 c3       	rjmp	.+1864   	; 0x1aa6 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	59 e4       	ldi	r21, 0x49	; 73
    1366:	c7 01       	movw	r24, r14
    1368:	b6 01       	movw	r22, r12
    136a:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    136e:	18 16       	cp	r1, r24
    1370:	3c f0       	brlt	.+14     	; 0x1380 <calc_prescaler+0x166>
				*ptr_u16_prescale=P_64;
    1372:	80 e4       	ldi	r24, 0x40	; 64
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	f8 01       	movw	r30, r16
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	93 c3       	rjmp	.+1830   	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	5a e4       	ldi	r21, 0x4A	; 74
    1388:	c7 01       	movw	r24, r14
    138a:	b6 01       	movw	r22, r12
    138c:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1390:	18 16       	cp	r1, r24
    1392:	3c f0       	brlt	.+14     	; 0x13a2 <calc_prescaler+0x188>
				*ptr_u16_prescale=P_256;
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	f8 01       	movw	r30, r16
    139a:	91 83       	std	Z+1, r25	; 0x01
    139c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	82 c3       	rjmp	.+1796   	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024))
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e0       	ldi	r20, 0x00	; 0
    13a8:	5b e4       	ldi	r21, 0x4B	; 75
    13aa:	c7 01       	movw	r24, r14
    13ac:	b6 01       	movw	r22, r12
    13ae:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    13b2:	18 16       	cp	r1, r24
    13b4:	3c f0       	brlt	.+14     	; 0x13c4 <calc_prescaler+0x1aa>
				*ptr_u16_prescale=P_1024;
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	94 e0       	ldi	r25, 0x04	; 4
    13ba:	f8 01       	movw	r30, r16
    13bc:	91 83       	std	Z+1, r25	; 0x01
    13be:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	71 c3       	rjmp	.+1762   	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    13c4:	f8 01       	movw	r30, r16
    13c6:	11 82       	std	Z+1, r1	; 0x01
    13c8:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	6c c3       	rjmp	.+1752   	; 0x1aa6 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    13ce:	8c ed       	ldi	r24, 0xDC	; 220
    13d0:	95 e0       	ldi	r25, 0x05	; 5
    13d2:	f8 01       	movw	r30, r16
    13d4:	91 83       	std	Z+1, r25	; 0x01
    13d6:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	65 c3       	rjmp	.+1738   	; 0x1aa6 <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    13dc:	42 30       	cpi	r20, 0x02	; 2
    13de:	09 f0       	breq	.+2      	; 0x13e2 <calc_prescaler+0x1c8>
    13e0:	5b c3       	rjmp	.+1718   	; 0x1a98 <calc_prescaler+0x87e>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	57 e4       	ldi	r21, 0x47	; 71
    13ea:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    13ee:	18 16       	cp	r1, r24
    13f0:	0c f4       	brge	.+2      	; 0x13f4 <calc_prescaler+0x1da>
    13f2:	7b c0       	rjmp	.+246    	; 0x14ea <calc_prescaler+0x2d0>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	52 e4       	ldi	r21, 0x42	; 66
    13fc:	c7 01       	movw	r24, r14
    13fe:	b6 01       	movw	r22, r12
    1400:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1404:	18 16       	cp	r1, r24
    1406:	34 f0       	brlt	.+12     	; 0x1414 <calc_prescaler+0x1fa>
				*ptr_u16_prescale=P_1;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	f8 01       	movw	r30, r16
    140e:	91 83       	std	Z+1, r25	; 0x01
    1410:	80 83       	st	Z, r24
    1412:	49 c3       	rjmp	.+1682   	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e8       	ldi	r20, 0x80	; 128
    141a:	53 e4       	ldi	r21, 0x43	; 67
    141c:	c7 01       	movw	r24, r14
    141e:	b6 01       	movw	r22, r12
    1420:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1424:	18 16       	cp	r1, r24
    1426:	3c f0       	brlt	.+14     	; 0x1436 <calc_prescaler+0x21c>
				*ptr_u16_prescale=P_8;
    1428:	88 e0       	ldi	r24, 0x08	; 8
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	f8 01       	movw	r30, r16
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	38 c3       	rjmp	.+1648   	; 0x1aa6 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e8       	ldi	r20, 0x80	; 128
    143c:	54 e4       	ldi	r21, 0x44	; 68
    143e:	c7 01       	movw	r24, r14
    1440:	b6 01       	movw	r22, r12
    1442:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1446:	18 16       	cp	r1, r24
    1448:	3c f0       	brlt	.+14     	; 0x1458 <calc_prescaler+0x23e>
				*ptr_u16_prescale=P_32;
    144a:	80 e2       	ldi	r24, 0x20	; 32
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	f8 01       	movw	r30, r16
    1450:	91 83       	std	Z+1, r25	; 0x01
    1452:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	27 c3       	rjmp	.+1614   	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	55 e4       	ldi	r21, 0x45	; 69
    1460:	c7 01       	movw	r24, r14
    1462:	b6 01       	movw	r22, r12
    1464:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1468:	18 16       	cp	r1, r24
    146a:	3c f0       	brlt	.+14     	; 0x147a <calc_prescaler+0x260>
				*ptr_u16_prescale=P_64;
    146c:	80 e4       	ldi	r24, 0x40	; 64
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	f8 01       	movw	r30, r16
    1472:	91 83       	std	Z+1, r25	; 0x01
    1474:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	16 c3       	rjmp	.+1580   	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e8       	ldi	r20, 0x80	; 128
    1480:	55 e4       	ldi	r21, 0x45	; 69
    1482:	c7 01       	movw	r24, r14
    1484:	b6 01       	movw	r22, r12
    1486:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    148a:	18 16       	cp	r1, r24
    148c:	3c f0       	brlt	.+14     	; 0x149c <calc_prescaler+0x282>
				*ptr_u16_prescale=P_128;
    148e:	80 e8       	ldi	r24, 0x80	; 128
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	f8 01       	movw	r30, r16
    1494:	91 83       	std	Z+1, r25	; 0x01
    1496:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	05 c3       	rjmp	.+1546   	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	56 e4       	ldi	r21, 0x46	; 70
    14a4:	c7 01       	movw	r24, r14
    14a6:	b6 01       	movw	r22, r12
    14a8:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    14ac:	18 16       	cp	r1, r24
    14ae:	3c f0       	brlt	.+14     	; 0x14be <calc_prescaler+0x2a4>
				*ptr_u16_prescale=P_256;
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	f8 01       	movw	r30, r16
    14b6:	91 83       	std	Z+1, r25	; 0x01
    14b8:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	f4 c2       	rjmp	.+1512   	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_US(P_1024))
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e0       	ldi	r20, 0x00	; 0
    14c4:	57 e4       	ldi	r21, 0x47	; 71
    14c6:	c7 01       	movw	r24, r14
    14c8:	b6 01       	movw	r22, r12
    14ca:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    14ce:	18 16       	cp	r1, r24
    14d0:	3c f0       	brlt	.+14     	; 0x14e0 <calc_prescaler+0x2c6>
				*ptr_u16_prescale=P_1024;
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	94 e0       	ldi	r25, 0x04	; 4
    14d6:	f8 01       	movw	r30, r16
    14d8:	91 83       	std	Z+1, r25	; 0x01
    14da:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	e3 c2       	rjmp	.+1478   	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    14e0:	f8 01       	movw	r30, r16
    14e2:	11 82       	std	Z+1, r1	; 0x01
    14e4:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	de c2       	rjmp	.+1468   	; 0x1aa6 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    14ea:	8c ed       	ldi	r24, 0xDC	; 220
    14ec:	95 e0       	ldi	r25, 0x05	; 5
    14ee:	f8 01       	movw	r30, r16
    14f0:	91 83       	std	Z+1, r25	; 0x01
    14f2:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	d7 c2       	rjmp	.+1454   	; 0x1aa6 <calc_prescaler+0x88c>
		else
		{
			bo_return_value = FALSE;
		}
	}
	else if (enu_time_unit == ENU_MILLI_SECOND)
    14f8:	21 30       	cpi	r18, 0x01	; 1
    14fa:	09 f0       	breq	.+2      	; 0x14fe <calc_prescaler+0x2e4>
    14fc:	65 c1       	rjmp	.+714    	; 0x17c8 <calc_prescaler+0x5ae>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    14fe:	41 11       	cpse	r20, r1
    1500:	69 c0       	rjmp	.+210    	; 0x15d4 <calc_prescaler+0x3ba>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024) )
    1502:	2f e6       	ldi	r18, 0x6F	; 111
    1504:	32 e1       	ldi	r19, 0x12	; 18
    1506:	43 e0       	ldi	r20, 0x03	; 3
    1508:	52 e4       	ldi	r21, 0x42	; 66
    150a:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    150e:	18 16       	cp	r1, r24
    1510:	0c f4       	brge	.+2      	; 0x1514 <calc_prescaler+0x2fa>
    1512:	59 c0       	rjmp	.+178    	; 0x15c6 <calc_prescaler+0x3ac>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
    1514:	2f e6       	ldi	r18, 0x6F	; 111
    1516:	32 e1       	ldi	r19, 0x12	; 18
    1518:	43 e0       	ldi	r20, 0x03	; 3
    151a:	5d e3       	ldi	r21, 0x3D	; 61
    151c:	c7 01       	movw	r24, r14
    151e:	b6 01       	movw	r22, r12
    1520:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1524:	18 16       	cp	r1, r24
    1526:	34 f0       	brlt	.+12     	; 0x1534 <calc_prescaler+0x31a>
				*ptr_u16_prescale=P_1;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	f8 01       	movw	r30, r16
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	80 83       	st	Z, r24
    1532:	b9 c2       	rjmp	.+1394   	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
    1534:	2f e6       	ldi	r18, 0x6F	; 111
    1536:	32 e1       	ldi	r19, 0x12	; 18
    1538:	43 e8       	ldi	r20, 0x83	; 131
    153a:	5e e3       	ldi	r21, 0x3E	; 62
    153c:	c7 01       	movw	r24, r14
    153e:	b6 01       	movw	r22, r12
    1540:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1544:	18 16       	cp	r1, r24
    1546:	3c f0       	brlt	.+14     	; 0x1556 <calc_prescaler+0x33c>
				*ptr_u16_prescale=P_8;
    1548:	88 e0       	ldi	r24, 0x08	; 8
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	f8 01       	movw	r30, r16
    154e:	91 83       	std	Z+1, r25	; 0x01
    1550:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	a8 c2       	rjmp	.+1360   	; 0x1aa6 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
    1556:	2f e6       	ldi	r18, 0x6F	; 111
    1558:	32 e1       	ldi	r19, 0x12	; 18
    155a:	43 e0       	ldi	r20, 0x03	; 3
    155c:	50 e4       	ldi	r21, 0x40	; 64
    155e:	c7 01       	movw	r24, r14
    1560:	b6 01       	movw	r22, r12
    1562:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1566:	18 16       	cp	r1, r24
    1568:	3c f0       	brlt	.+14     	; 0x1578 <calc_prescaler+0x35e>
				*ptr_u16_prescale=P_64;
    156a:	80 e4       	ldi	r24, 0x40	; 64
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	f8 01       	movw	r30, r16
    1570:	91 83       	std	Z+1, r25	; 0x01
    1572:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	97 c2       	rjmp	.+1326   	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
    1578:	2f e6       	ldi	r18, 0x6F	; 111
    157a:	32 e1       	ldi	r19, 0x12	; 18
    157c:	43 e0       	ldi	r20, 0x03	; 3
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	c7 01       	movw	r24, r14
    1582:	b6 01       	movw	r22, r12
    1584:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1588:	18 16       	cp	r1, r24
    158a:	3c f0       	brlt	.+14     	; 0x159a <calc_prescaler+0x380>
				*ptr_u16_prescale=P_256;
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	91 e0       	ldi	r25, 0x01	; 1
    1590:	f8 01       	movw	r30, r16
    1592:	91 83       	std	Z+1, r25	; 0x01
    1594:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	86 c2       	rjmp	.+1292   	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024))
    159a:	2f e6       	ldi	r18, 0x6F	; 111
    159c:	32 e1       	ldi	r19, 0x12	; 18
    159e:	43 e0       	ldi	r20, 0x03	; 3
    15a0:	52 e4       	ldi	r21, 0x42	; 66
    15a2:	c7 01       	movw	r24, r14
    15a4:	b6 01       	movw	r22, r12
    15a6:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    15aa:	18 16       	cp	r1, r24
    15ac:	3c f0       	brlt	.+14     	; 0x15bc <calc_prescaler+0x3a2>
				*ptr_u16_prescale=P_1024;
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	94 e0       	ldi	r25, 0x04	; 4
    15b2:	f8 01       	movw	r30, r16
    15b4:	91 83       	std	Z+1, r25	; 0x01
    15b6:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	75 c2       	rjmp	.+1258   	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    15bc:	f8 01       	movw	r30, r16
    15be:	11 82       	std	Z+1, r1	; 0x01
    15c0:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	70 c2       	rjmp	.+1248   	; 0x1aa6 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    15c6:	8c ed       	ldi	r24, 0xDC	; 220
    15c8:	95 e0       	ldi	r25, 0x05	; 5
    15ca:	f8 01       	movw	r30, r16
    15cc:	91 83       	std	Z+1, r25	; 0x01
    15ce:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	69 c2       	rjmp	.+1234   	; 0x1aa6 <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    15d4:	41 30       	cpi	r20, 0x01	; 1
    15d6:	09 f0       	breq	.+2      	; 0x15da <calc_prescaler+0x3c0>
    15d8:	69 c0       	rjmp	.+210    	; 0x16ac <calc_prescaler+0x492>
		{

			if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024) )
    15da:	2f e6       	ldi	r18, 0x6F	; 111
    15dc:	32 e1       	ldi	r19, 0x12	; 18
    15de:	43 e0       	ldi	r20, 0x03	; 3
    15e0:	56 e4       	ldi	r21, 0x46	; 70
    15e2:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    15e6:	18 16       	cp	r1, r24
    15e8:	0c f4       	brge	.+2      	; 0x15ec <calc_prescaler+0x3d2>
    15ea:	59 c0       	rjmp	.+178    	; 0x169e <calc_prescaler+0x484>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1))
    15ec:	2f e6       	ldi	r18, 0x6F	; 111
    15ee:	32 e1       	ldi	r19, 0x12	; 18
    15f0:	43 e0       	ldi	r20, 0x03	; 3
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	c7 01       	movw	r24, r14
    15f6:	b6 01       	movw	r22, r12
    15f8:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    15fc:	18 16       	cp	r1, r24
    15fe:	34 f0       	brlt	.+12     	; 0x160c <calc_prescaler+0x3f2>
				*ptr_u16_prescale=P_1;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	f8 01       	movw	r30, r16
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	80 83       	st	Z, r24
    160a:	4d c2       	rjmp	.+1178   	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
    160c:	2f e6       	ldi	r18, 0x6F	; 111
    160e:	32 e1       	ldi	r19, 0x12	; 18
    1610:	43 e8       	ldi	r20, 0x83	; 131
    1612:	52 e4       	ldi	r21, 0x42	; 66
    1614:	c7 01       	movw	r24, r14
    1616:	b6 01       	movw	r22, r12
    1618:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    161c:	18 16       	cp	r1, r24
    161e:	3c f0       	brlt	.+14     	; 0x162e <calc_prescaler+0x414>
				*ptr_u16_prescale=P_8;
    1620:	88 e0       	ldi	r24, 0x08	; 8
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	f8 01       	movw	r30, r16
    1626:	91 83       	std	Z+1, r25	; 0x01
    1628:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	3c c2       	rjmp	.+1144   	; 0x1aa6 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
    162e:	2f e6       	ldi	r18, 0x6F	; 111
    1630:	32 e1       	ldi	r19, 0x12	; 18
    1632:	43 e0       	ldi	r20, 0x03	; 3
    1634:	54 e4       	ldi	r21, 0x44	; 68
    1636:	c7 01       	movw	r24, r14
    1638:	b6 01       	movw	r22, r12
    163a:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    163e:	18 16       	cp	r1, r24
    1640:	3c f0       	brlt	.+14     	; 0x1650 <calc_prescaler+0x436>
				*ptr_u16_prescale=P_64;
    1642:	80 e4       	ldi	r24, 0x40	; 64
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	f8 01       	movw	r30, r16
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	2b c2       	rjmp	.+1110   	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
    1650:	2f e6       	ldi	r18, 0x6F	; 111
    1652:	32 e1       	ldi	r19, 0x12	; 18
    1654:	43 e0       	ldi	r20, 0x03	; 3
    1656:	55 e4       	ldi	r21, 0x45	; 69
    1658:	c7 01       	movw	r24, r14
    165a:	b6 01       	movw	r22, r12
    165c:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1660:	18 16       	cp	r1, r24
    1662:	3c f0       	brlt	.+14     	; 0x1672 <calc_prescaler+0x458>
				*ptr_u16_prescale=P_256;
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	f8 01       	movw	r30, r16
    166a:	91 83       	std	Z+1, r25	; 0x01
    166c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	1a c2       	rjmp	.+1076   	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024))
    1672:	2f e6       	ldi	r18, 0x6F	; 111
    1674:	32 e1       	ldi	r19, 0x12	; 18
    1676:	43 e0       	ldi	r20, 0x03	; 3
    1678:	56 e4       	ldi	r21, 0x46	; 70
    167a:	c7 01       	movw	r24, r14
    167c:	b6 01       	movw	r22, r12
    167e:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1682:	18 16       	cp	r1, r24
    1684:	3c f0       	brlt	.+14     	; 0x1694 <calc_prescaler+0x47a>
				*ptr_u16_prescale=P_1024;
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	94 e0       	ldi	r25, 0x04	; 4
    168a:	f8 01       	movw	r30, r16
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	09 c2       	rjmp	.+1042   	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale= P_0;
    1694:	f8 01       	movw	r30, r16
    1696:	11 82       	std	Z+1, r1	; 0x01
    1698:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	04 c2       	rjmp	.+1032   	; 0x1aa6 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale= P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    169e:	8c ed       	ldi	r24, 0xDC	; 220
    16a0:	95 e0       	ldi	r25, 0x05	; 5
    16a2:	f8 01       	movw	r30, r16
    16a4:	91 83       	std	Z+1, r25	; 0x01
    16a6:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	fd c1       	rjmp	.+1018   	; 0x1aa6 <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    16ac:	42 30       	cpi	r20, 0x02	; 2
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <calc_prescaler+0x498>
    16b0:	f5 c1       	rjmp	.+1002   	; 0x1a9c <calc_prescaler+0x882>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e0       	ldi	r20, 0x00	; 0
    16b8:	57 e4       	ldi	r21, 0x47	; 71
    16ba:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    16be:	18 16       	cp	r1, r24
    16c0:	0c f4       	brge	.+2      	; 0x16c4 <calc_prescaler+0x4aa>
    16c2:	7b c0       	rjmp	.+246    	; 0x17ba <calc_prescaler+0x5a0>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
    16c4:	2f e6       	ldi	r18, 0x6F	; 111
    16c6:	32 e1       	ldi	r19, 0x12	; 18
    16c8:	43 e0       	ldi	r20, 0x03	; 3
    16ca:	5d e3       	ldi	r21, 0x3D	; 61
    16cc:	c7 01       	movw	r24, r14
    16ce:	b6 01       	movw	r22, r12
    16d0:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    16d4:	18 16       	cp	r1, r24
    16d6:	34 f0       	brlt	.+12     	; 0x16e4 <calc_prescaler+0x4ca>
				*ptr_u16_prescale=P_1;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	f8 01       	movw	r30, r16
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	80 83       	st	Z, r24
    16e2:	e1 c1       	rjmp	.+962    	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
    16e4:	2f e6       	ldi	r18, 0x6F	; 111
    16e6:	32 e1       	ldi	r19, 0x12	; 18
    16e8:	43 e8       	ldi	r20, 0x83	; 131
    16ea:	5e e3       	ldi	r21, 0x3E	; 62
    16ec:	c7 01       	movw	r24, r14
    16ee:	b6 01       	movw	r22, r12
    16f0:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    16f4:	18 16       	cp	r1, r24
    16f6:	3c f0       	brlt	.+14     	; 0x1706 <calc_prescaler+0x4ec>
				*ptr_u16_prescale=P_8;
    16f8:	88 e0       	ldi	r24, 0x08	; 8
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	f8 01       	movw	r30, r16
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	d0 c1       	rjmp	.+928    	; 0x1aa6 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
    1706:	2f e6       	ldi	r18, 0x6F	; 111
    1708:	32 e1       	ldi	r19, 0x12	; 18
    170a:	43 e8       	ldi	r20, 0x83	; 131
    170c:	5f e3       	ldi	r21, 0x3F	; 63
    170e:	c7 01       	movw	r24, r14
    1710:	b6 01       	movw	r22, r12
    1712:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1716:	18 16       	cp	r1, r24
    1718:	3c f0       	brlt	.+14     	; 0x1728 <calc_prescaler+0x50e>
				*ptr_u16_prescale=P_32;
    171a:	80 e2       	ldi	r24, 0x20	; 32
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	f8 01       	movw	r30, r16
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	bf c1       	rjmp	.+894    	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
    1728:	2f e6       	ldi	r18, 0x6F	; 111
    172a:	32 e1       	ldi	r19, 0x12	; 18
    172c:	43 e0       	ldi	r20, 0x03	; 3
    172e:	50 e4       	ldi	r21, 0x40	; 64
    1730:	c7 01       	movw	r24, r14
    1732:	b6 01       	movw	r22, r12
    1734:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1738:	18 16       	cp	r1, r24
    173a:	3c f0       	brlt	.+14     	; 0x174a <calc_prescaler+0x530>
				*ptr_u16_prescale=P_64;
    173c:	80 e4       	ldi	r24, 0x40	; 64
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	f8 01       	movw	r30, r16
    1742:	91 83       	std	Z+1, r25	; 0x01
    1744:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	ae c1       	rjmp	.+860    	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
    174a:	2f e6       	ldi	r18, 0x6F	; 111
    174c:	32 e1       	ldi	r19, 0x12	; 18
    174e:	43 e8       	ldi	r20, 0x83	; 131
    1750:	50 e4       	ldi	r21, 0x40	; 64
    1752:	c7 01       	movw	r24, r14
    1754:	b6 01       	movw	r22, r12
    1756:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    175a:	18 16       	cp	r1, r24
    175c:	3c f0       	brlt	.+14     	; 0x176c <calc_prescaler+0x552>
				*ptr_u16_prescale=P_128;
    175e:	80 e8       	ldi	r24, 0x80	; 128
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	f8 01       	movw	r30, r16
    1764:	91 83       	std	Z+1, r25	; 0x01
    1766:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	9d c1       	rjmp	.+826    	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
    176c:	2f e6       	ldi	r18, 0x6F	; 111
    176e:	32 e1       	ldi	r19, 0x12	; 18
    1770:	43 e0       	ldi	r20, 0x03	; 3
    1772:	51 e4       	ldi	r21, 0x41	; 65
    1774:	c7 01       	movw	r24, r14
    1776:	b6 01       	movw	r22, r12
    1778:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    177c:	18 16       	cp	r1, r24
    177e:	3c f0       	brlt	.+14     	; 0x178e <calc_prescaler+0x574>
				*ptr_u16_prescale=P_256;
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	f8 01       	movw	r30, r16
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	8c c1       	rjmp	.+792    	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_MS(P_1024))
    178e:	2f e6       	ldi	r18, 0x6F	; 111
    1790:	32 e1       	ldi	r19, 0x12	; 18
    1792:	43 e0       	ldi	r20, 0x03	; 3
    1794:	52 e4       	ldi	r21, 0x42	; 66
    1796:	c7 01       	movw	r24, r14
    1798:	b6 01       	movw	r22, r12
    179a:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    179e:	18 16       	cp	r1, r24
    17a0:	3c f0       	brlt	.+14     	; 0x17b0 <calc_prescaler+0x596>
				*ptr_u16_prescale=P_1024;
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	94 e0       	ldi	r25, 0x04	; 4
    17a6:	f8 01       	movw	r30, r16
    17a8:	91 83       	std	Z+1, r25	; 0x01
    17aa:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	7b c1       	rjmp	.+758    	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    17b0:	f8 01       	movw	r30, r16
    17b2:	11 82       	std	Z+1, r1	; 0x01
    17b4:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	76 c1       	rjmp	.+748    	; 0x1aa6 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    17ba:	8c ed       	ldi	r24, 0xDC	; 220
    17bc:	95 e0       	ldi	r25, 0x05	; 5
    17be:	f8 01       	movw	r30, r16
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	6f c1       	rjmp	.+734    	; 0x1aa6 <calc_prescaler+0x88c>
		{
			bo_return_value = FALSE;
			// do nothing
		}
	}
	else if (enu_time_unit == ENU_SECOND)
    17c8:	22 30       	cpi	r18, 0x02	; 2
    17ca:	09 f0       	breq	.+2      	; 0x17ce <calc_prescaler+0x5b4>
    17cc:	69 c1       	rjmp	.+722    	; 0x1aa0 <calc_prescaler+0x886>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    17ce:	41 11       	cpse	r20, r1
    17d0:	69 c0       	rjmp	.+210    	; 0x18a4 <calc_prescaler+0x68a>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024) )
    17d2:	2d eb       	ldi	r18, 0xBD	; 189
    17d4:	37 e3       	ldi	r19, 0x37	; 55
    17d6:	46 e0       	ldi	r20, 0x06	; 6
    17d8:	5d e3       	ldi	r21, 0x3D	; 61
    17da:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    17de:	18 16       	cp	r1, r24
    17e0:	0c f4       	brge	.+2      	; 0x17e4 <calc_prescaler+0x5ca>
    17e2:	59 c0       	rjmp	.+178    	; 0x1896 <calc_prescaler+0x67c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
    17e4:	2d eb       	ldi	r18, 0xBD	; 189
    17e6:	37 e3       	ldi	r19, 0x37	; 55
    17e8:	46 e0       	ldi	r20, 0x06	; 6
    17ea:	58 e3       	ldi	r21, 0x38	; 56
    17ec:	c7 01       	movw	r24, r14
    17ee:	b6 01       	movw	r22, r12
    17f0:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    17f4:	18 16       	cp	r1, r24
    17f6:	34 f0       	brlt	.+12     	; 0x1804 <calc_prescaler+0x5ea>
				*ptr_u16_prescale=P_1;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	f8 01       	movw	r30, r16
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
    1802:	51 c1       	rjmp	.+674    	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
    1804:	2d eb       	ldi	r18, 0xBD	; 189
    1806:	37 e3       	ldi	r19, 0x37	; 55
    1808:	46 e8       	ldi	r20, 0x86	; 134
    180a:	59 e3       	ldi	r21, 0x39	; 57
    180c:	c7 01       	movw	r24, r14
    180e:	b6 01       	movw	r22, r12
    1810:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1814:	18 16       	cp	r1, r24
    1816:	3c f0       	brlt	.+14     	; 0x1826 <calc_prescaler+0x60c>
				*ptr_u16_prescale=P_8;
    1818:	88 e0       	ldi	r24, 0x08	; 8
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	f8 01       	movw	r30, r16
    181e:	91 83       	std	Z+1, r25	; 0x01
    1820:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	40 c1       	rjmp	.+640    	; 0x1aa6 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
    1826:	2d eb       	ldi	r18, 0xBD	; 189
    1828:	37 e3       	ldi	r19, 0x37	; 55
    182a:	46 e0       	ldi	r20, 0x06	; 6
    182c:	5b e3       	ldi	r21, 0x3B	; 59
    182e:	c7 01       	movw	r24, r14
    1830:	b6 01       	movw	r22, r12
    1832:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1836:	18 16       	cp	r1, r24
    1838:	3c f0       	brlt	.+14     	; 0x1848 <calc_prescaler+0x62e>
				*ptr_u16_prescale=P_64;
    183a:	80 e4       	ldi	r24, 0x40	; 64
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	f8 01       	movw	r30, r16
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	2f c1       	rjmp	.+606    	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
    1848:	2d eb       	ldi	r18, 0xBD	; 189
    184a:	37 e3       	ldi	r19, 0x37	; 55
    184c:	46 e0       	ldi	r20, 0x06	; 6
    184e:	5c e3       	ldi	r21, 0x3C	; 60
    1850:	c7 01       	movw	r24, r14
    1852:	b6 01       	movw	r22, r12
    1854:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1858:	18 16       	cp	r1, r24
    185a:	3c f0       	brlt	.+14     	; 0x186a <calc_prescaler+0x650>
				*ptr_u16_prescale=P_256;
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	f8 01       	movw	r30, r16
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	1e c1       	rjmp	.+572    	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024))
    186a:	2d eb       	ldi	r18, 0xBD	; 189
    186c:	37 e3       	ldi	r19, 0x37	; 55
    186e:	46 e0       	ldi	r20, 0x06	; 6
    1870:	5d e3       	ldi	r21, 0x3D	; 61
    1872:	c7 01       	movw	r24, r14
    1874:	b6 01       	movw	r22, r12
    1876:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    187a:	18 16       	cp	r1, r24
    187c:	3c f0       	brlt	.+14     	; 0x188c <calc_prescaler+0x672>
				*ptr_u16_prescale=P_1024;
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	94 e0       	ldi	r25, 0x04	; 4
    1882:	f8 01       	movw	r30, r16
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	0d c1       	rjmp	.+538    	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    188c:	f8 01       	movw	r30, r16
    188e:	11 82       	std	Z+1, r1	; 0x01
    1890:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	08 c1       	rjmp	.+528    	; 0x1aa6 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1896:	8c ed       	ldi	r24, 0xDC	; 220
    1898:	95 e0       	ldi	r25, 0x05	; 5
    189a:	f8 01       	movw	r30, r16
    189c:	91 83       	std	Z+1, r25	; 0x01
    189e:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	01 c1       	rjmp	.+514    	; 0x1aa6 <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    18a4:	41 30       	cpi	r20, 0x01	; 1
    18a6:	09 f0       	breq	.+2      	; 0x18aa <calc_prescaler+0x690>
    18a8:	69 c0       	rjmp	.+210    	; 0x197c <calc_prescaler+0x762>
		{
			if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024) )
    18aa:	2d eb       	ldi	r18, 0xBD	; 189
    18ac:	37 e3       	ldi	r19, 0x37	; 55
    18ae:	46 e0       	ldi	r20, 0x06	; 6
    18b0:	51 e4       	ldi	r21, 0x41	; 65
    18b2:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	0c f4       	brge	.+2      	; 0x18bc <calc_prescaler+0x6a2>
    18ba:	59 c0       	rjmp	.+178    	; 0x196e <calc_prescaler+0x754>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1))
    18bc:	2d eb       	ldi	r18, 0xBD	; 189
    18be:	37 e3       	ldi	r19, 0x37	; 55
    18c0:	46 e0       	ldi	r20, 0x06	; 6
    18c2:	5c e3       	ldi	r21, 0x3C	; 60
    18c4:	c7 01       	movw	r24, r14
    18c6:	b6 01       	movw	r22, r12
    18c8:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    18cc:	18 16       	cp	r1, r24
    18ce:	34 f0       	brlt	.+12     	; 0x18dc <calc_prescaler+0x6c2>
				*ptr_u16_prescale=P_1;
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	f8 01       	movw	r30, r16
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	80 83       	st	Z, r24
    18da:	e5 c0       	rjmp	.+458    	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
    18dc:	2d eb       	ldi	r18, 0xBD	; 189
    18de:	37 e3       	ldi	r19, 0x37	; 55
    18e0:	46 e8       	ldi	r20, 0x86	; 134
    18e2:	5d e3       	ldi	r21, 0x3D	; 61
    18e4:	c7 01       	movw	r24, r14
    18e6:	b6 01       	movw	r22, r12
    18e8:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	3c f0       	brlt	.+14     	; 0x18fe <calc_prescaler+0x6e4>
				*ptr_u16_prescale=P_8;
    18f0:	88 e0       	ldi	r24, 0x08	; 8
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	f8 01       	movw	r30, r16
    18f6:	91 83       	std	Z+1, r25	; 0x01
    18f8:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	d4 c0       	rjmp	.+424    	; 0x1aa6 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
    18fe:	2d eb       	ldi	r18, 0xBD	; 189
    1900:	37 e3       	ldi	r19, 0x37	; 55
    1902:	46 e0       	ldi	r20, 0x06	; 6
    1904:	5f e3       	ldi	r21, 0x3F	; 63
    1906:	c7 01       	movw	r24, r14
    1908:	b6 01       	movw	r22, r12
    190a:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    190e:	18 16       	cp	r1, r24
    1910:	3c f0       	brlt	.+14     	; 0x1920 <calc_prescaler+0x706>
				*ptr_u16_prescale=P_64;
    1912:	80 e4       	ldi	r24, 0x40	; 64
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	f8 01       	movw	r30, r16
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	c3 c0       	rjmp	.+390    	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
    1920:	2d eb       	ldi	r18, 0xBD	; 189
    1922:	37 e3       	ldi	r19, 0x37	; 55
    1924:	46 e0       	ldi	r20, 0x06	; 6
    1926:	50 e4       	ldi	r21, 0x40	; 64
    1928:	c7 01       	movw	r24, r14
    192a:	b6 01       	movw	r22, r12
    192c:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1930:	18 16       	cp	r1, r24
    1932:	3c f0       	brlt	.+14     	; 0x1942 <calc_prescaler+0x728>
				*ptr_u16_prescale=P_256;
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	91 e0       	ldi	r25, 0x01	; 1
    1938:	f8 01       	movw	r30, r16
    193a:	91 83       	std	Z+1, r25	; 0x01
    193c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	b2 c0       	rjmp	.+356    	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024))
    1942:	2d eb       	ldi	r18, 0xBD	; 189
    1944:	37 e3       	ldi	r19, 0x37	; 55
    1946:	46 e0       	ldi	r20, 0x06	; 6
    1948:	51 e4       	ldi	r21, 0x41	; 65
    194a:	c7 01       	movw	r24, r14
    194c:	b6 01       	movw	r22, r12
    194e:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1952:	18 16       	cp	r1, r24
    1954:	3c f0       	brlt	.+14     	; 0x1964 <calc_prescaler+0x74a>
				*ptr_u16_prescale=P_1024;
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	94 e0       	ldi	r25, 0x04	; 4
    195a:	f8 01       	movw	r30, r16
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	a1 c0       	rjmp	.+322    	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1964:	f8 01       	movw	r30, r16
    1966:	11 82       	std	Z+1, r1	; 0x01
    1968:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	9c c0       	rjmp	.+312    	; 0x1aa6 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    196e:	8c ed       	ldi	r24, 0xDC	; 220
    1970:	95 e0       	ldi	r25, 0x05	; 5
    1972:	f8 01       	movw	r30, r16
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	95 c0       	rjmp	.+298    	; 0x1aa6 <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    197c:	42 30       	cpi	r20, 0x02	; 2
    197e:	09 f0       	breq	.+2      	; 0x1982 <calc_prescaler+0x768>
    1980:	91 c0       	rjmp	.+290    	; 0x1aa4 <calc_prescaler+0x88a>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024) )
    1982:	2d eb       	ldi	r18, 0xBD	; 189
    1984:	37 e3       	ldi	r19, 0x37	; 55
    1986:	46 e0       	ldi	r20, 0x06	; 6
    1988:	5d e3       	ldi	r21, 0x3D	; 61
    198a:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    198e:	18 16       	cp	r1, r24
    1990:	0c f4       	brge	.+2      	; 0x1994 <calc_prescaler+0x77a>
    1992:	7b c0       	rjmp	.+246    	; 0x1a8a <calc_prescaler+0x870>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
    1994:	2d eb       	ldi	r18, 0xBD	; 189
    1996:	37 e3       	ldi	r19, 0x37	; 55
    1998:	46 e0       	ldi	r20, 0x06	; 6
    199a:	58 e3       	ldi	r21, 0x38	; 56
    199c:	c7 01       	movw	r24, r14
    199e:	b6 01       	movw	r22, r12
    19a0:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    19a4:	18 16       	cp	r1, r24
    19a6:	34 f0       	brlt	.+12     	; 0x19b4 <calc_prescaler+0x79a>
				*ptr_u16_prescale=P_1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	f8 01       	movw	r30, r16
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	80 83       	st	Z, r24
    19b2:	79 c0       	rjmp	.+242    	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
    19b4:	2d eb       	ldi	r18, 0xBD	; 189
    19b6:	37 e3       	ldi	r19, 0x37	; 55
    19b8:	46 e8       	ldi	r20, 0x86	; 134
    19ba:	59 e3       	ldi	r21, 0x39	; 57
    19bc:	c7 01       	movw	r24, r14
    19be:	b6 01       	movw	r22, r12
    19c0:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    19c4:	18 16       	cp	r1, r24
    19c6:	3c f0       	brlt	.+14     	; 0x19d6 <calc_prescaler+0x7bc>
				*ptr_u16_prescale=P_8;
    19c8:	88 e0       	ldi	r24, 0x08	; 8
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	f8 01       	movw	r30, r16
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	68 c0       	rjmp	.+208    	; 0x1aa6 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
    19d6:	2d eb       	ldi	r18, 0xBD	; 189
    19d8:	37 e3       	ldi	r19, 0x37	; 55
    19da:	46 e8       	ldi	r20, 0x86	; 134
    19dc:	5a e3       	ldi	r21, 0x3A	; 58
    19de:	c7 01       	movw	r24, r14
    19e0:	b6 01       	movw	r22, r12
    19e2:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    19e6:	18 16       	cp	r1, r24
    19e8:	3c f0       	brlt	.+14     	; 0x19f8 <calc_prescaler+0x7de>
				*ptr_u16_prescale=P_32;
    19ea:	80 e2       	ldi	r24, 0x20	; 32
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	f8 01       	movw	r30, r16
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	57 c0       	rjmp	.+174    	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
    19f8:	2d eb       	ldi	r18, 0xBD	; 189
    19fa:	37 e3       	ldi	r19, 0x37	; 55
    19fc:	46 e0       	ldi	r20, 0x06	; 6
    19fe:	5b e3       	ldi	r21, 0x3B	; 59
    1a00:	c7 01       	movw	r24, r14
    1a02:	b6 01       	movw	r22, r12
    1a04:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	3c f0       	brlt	.+14     	; 0x1a1a <calc_prescaler+0x800>
				*ptr_u16_prescale=P_64;
    1a0c:	80 e4       	ldi	r24, 0x40	; 64
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	f8 01       	movw	r30, r16
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	46 c0       	rjmp	.+140    	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
    1a1a:	2d eb       	ldi	r18, 0xBD	; 189
    1a1c:	37 e3       	ldi	r19, 0x37	; 55
    1a1e:	46 e8       	ldi	r20, 0x86	; 134
    1a20:	5b e3       	ldi	r21, 0x3B	; 59
    1a22:	c7 01       	movw	r24, r14
    1a24:	b6 01       	movw	r22, r12
    1a26:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1a2a:	18 16       	cp	r1, r24
    1a2c:	3c f0       	brlt	.+14     	; 0x1a3c <calc_prescaler+0x822>
				*ptr_u16_prescale=P_128;
    1a2e:	80 e8       	ldi	r24, 0x80	; 128
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	f8 01       	movw	r30, r16
    1a34:	91 83       	std	Z+1, r25	; 0x01
    1a36:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	35 c0       	rjmp	.+106    	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
    1a3c:	2d eb       	ldi	r18, 0xBD	; 189
    1a3e:	37 e3       	ldi	r19, 0x37	; 55
    1a40:	46 e0       	ldi	r20, 0x06	; 6
    1a42:	5c e3       	ldi	r21, 0x3C	; 60
    1a44:	c7 01       	movw	r24, r14
    1a46:	b6 01       	movw	r22, r12
    1a48:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1a4c:	18 16       	cp	r1, r24
    1a4e:	3c f0       	brlt	.+14     	; 0x1a5e <calc_prescaler+0x844>
				*ptr_u16_prescale=P_256;
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	f8 01       	movw	r30, r16
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	24 c0       	rjmp	.+72     	; 0x1aa6 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_SEC(P_1024))
    1a5e:	2d eb       	ldi	r18, 0xBD	; 189
    1a60:	37 e3       	ldi	r19, 0x37	; 55
    1a62:	46 e0       	ldi	r20, 0x06	; 6
    1a64:	5d e3       	ldi	r21, 0x3D	; 61
    1a66:	c7 01       	movw	r24, r14
    1a68:	b6 01       	movw	r22, r12
    1a6a:	0e 94 1a 13 	call	0x2634	; 0x2634 <__cmpsf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	3c f0       	brlt	.+14     	; 0x1a80 <calc_prescaler+0x866>
				*ptr_u16_prescale=P_1024;
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	94 e0       	ldi	r25, 0x04	; 4
    1a76:	f8 01       	movw	r30, r16
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	13 c0       	rjmp	.+38     	; 0x1aa6 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1a80:	f8 01       	movw	r30, r16
    1a82:	11 82       	std	Z+1, r1	; 0x01
    1a84:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	0e c0       	rjmp	.+28     	; 0x1aa6 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1a8a:	8c ed       	ldi	r24, 0xDC	; 220
    1a8c:	95 e0       	ldi	r25, 0x05	; 5
    1a8e:	f8 01       	movw	r30, r16
    1a90:	91 83       	std	Z+1, r25	; 0x01
    1a92:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	07 c0       	rjmp	.+14     	; 0x1aa6 <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	05 c0       	rjmp	.+10     	; 0x1aa6 <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	03 c0       	rjmp	.+6      	; 0x1aa6 <calc_prescaler+0x88c>
			// do nothing
		}
	}
	else
	{
		bo_return_value = FALSE;
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		bo_return_value = FALSE;
	}
	return bo_return_value;
}
    1aa6:	1f 91       	pop	r17
    1aa8:	0f 91       	pop	r16
    1aaa:	ff 90       	pop	r15
    1aac:	ef 90       	pop	r14
    1aae:	df 90       	pop	r13
    1ab0:	cf 90       	pop	r12
    1ab2:	08 95       	ret

00001ab4 <calc_initialValue>:

/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
    1ab4:	ef 92       	push	r14
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
	BOOLEAN bo_return_value = TRUE;
	if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    1abc:	81 11       	cpse	r24, r1
    1abe:	8a c1       	rjmp	.+788    	; 0x1dd4 <calc_initialValue+0x320>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    1ac0:	61 11       	cpse	r22, r1
    1ac2:	7c c0       	rjmp	.+248    	; 0x1bbc <calc_initialValue+0x108>
		{
			switch(prescaler)
    1ac4:	40 34       	cpi	r20, 0x40	; 64
    1ac6:	51 05       	cpc	r21, r1
    1ac8:	a9 f1       	breq	.+106    	; 0x1b34 <calc_initialValue+0x80>
    1aca:	38 f4       	brcc	.+14     	; 0x1ada <calc_initialValue+0x26>
    1acc:	41 30       	cpi	r20, 0x01	; 1
    1ace:	51 05       	cpc	r21, r1
    1ad0:	69 f0       	breq	.+26     	; 0x1aec <calc_initialValue+0x38>
    1ad2:	48 30       	cpi	r20, 0x08	; 8
    1ad4:	51 05       	cpc	r21, r1
    1ad6:	f9 f0       	breq	.+62     	; 0x1b16 <calc_initialValue+0x62>
    1ad8:	6c c0       	rjmp	.+216    	; 0x1bb2 <calc_initialValue+0xfe>
    1ada:	41 15       	cp	r20, r1
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	58 07       	cpc	r21, r24
    1ae0:	f1 f1       	breq	.+124    	; 0x1b5e <calc_initialValue+0xaa>
    1ae2:	41 15       	cp	r20, r1
    1ae4:	54 40       	sbci	r21, 0x04	; 4
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <calc_initialValue+0x36>
    1ae8:	4f c0       	rjmp	.+158    	; 0x1b88 <calc_initialValue+0xd4>
    1aea:	63 c0       	rjmp	.+198    	; 0x1bb2 <calc_initialValue+0xfe>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    1aec:	a9 01       	movw	r20, r18
    1aee:	98 01       	movw	r18, r16
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	92 e4       	ldi	r25, 0x42	; 66
    1af8:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__mulsf3>
    1b08:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1b0c:	f7 01       	movw	r30, r14
    1b0e:	71 83       	std	Z+1, r23	; 0x01
    1b10:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    1b14:	1d c5       	rjmp	.+2618   	; 0x2550 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    1b16:	a9 01       	movw	r20, r18
    1b18:	98 01       	movw	r18, r16
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	80 e8       	ldi	r24, 0x80	; 128
    1b20:	93 e4       	ldi	r25, 0x43	; 67
    1b22:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1b26:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1b2a:	f7 01       	movw	r30, r14
    1b2c:	71 83       	std	Z+1, r23	; 0x01
    1b2e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    1b32:	0e c5       	rjmp	.+2588   	; 0x2550 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    1b34:	a9 01       	movw	r20, r18
    1b36:	98 01       	movw	r18, r16
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	70 e0       	ldi	r23, 0x00	; 0
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	95 e4       	ldi	r25, 0x45	; 69
    1b40:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e0       	ldi	r20, 0x00	; 0
    1b4a:	5e e3       	ldi	r21, 0x3E	; 62
    1b4c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__mulsf3>
    1b50:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1b54:	f7 01       	movw	r30, r14
    1b56:	71 83       	std	Z+1, r23	; 0x01
    1b58:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    1b5c:	f9 c4       	rjmp	.+2546   	; 0x2550 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    1b5e:	a9 01       	movw	r20, r18
    1b60:	98 01       	movw	r18, r16
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	96 e4       	ldi	r25, 0x46	; 70
    1b6a:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	5d e3       	ldi	r21, 0x3D	; 61
    1b76:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__mulsf3>
    1b7a:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1b7e:	f7 01       	movw	r30, r14
    1b80:	71 83       	std	Z+1, r23	; 0x01
    1b82:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    1b86:	e4 c4       	rjmp	.+2504   	; 0x2550 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    1b88:	a9 01       	movw	r20, r18
    1b8a:	98 01       	movw	r18, r16
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	70 e0       	ldi	r23, 0x00	; 0
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	97 e4       	ldi	r25, 0x47	; 71
    1b94:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	5c e3       	ldi	r21, 0x3C	; 60
    1ba0:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__mulsf3>
    1ba4:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1ba8:	f7 01       	movw	r30, r14
    1baa:	71 83       	std	Z+1, r23	; 0x01
    1bac:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    1bb0:	cf c4       	rjmp	.+2462   	; 0x2550 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1bb2:	f7 01       	movw	r30, r14
    1bb4:	11 82       	std	Z+1, r1	; 0x01
    1bb6:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1bba:	ca c4       	rjmp	.+2452   	; 0x2550 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    1bbc:	61 30       	cpi	r22, 0x01	; 1
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <calc_initialValue+0x10e>
    1bc0:	83 c0       	rjmp	.+262    	; 0x1cc8 <calc_initialValue+0x214>
		{
			switch(prescaler)
    1bc2:	40 34       	cpi	r20, 0x40	; 64
    1bc4:	51 05       	cpc	r21, r1
    1bc6:	e1 f1       	breq	.+120    	; 0x1c40 <calc_initialValue+0x18c>
    1bc8:	38 f4       	brcc	.+14     	; 0x1bd8 <calc_initialValue+0x124>
    1bca:	41 30       	cpi	r20, 0x01	; 1
    1bcc:	51 05       	cpc	r21, r1
    1bce:	71 f0       	breq	.+28     	; 0x1bec <calc_initialValue+0x138>
    1bd0:	48 30       	cpi	r20, 0x08	; 8
    1bd2:	51 05       	cpc	r21, r1
    1bd4:	01 f1       	breq	.+64     	; 0x1c16 <calc_initialValue+0x162>
    1bd6:	73 c0       	rjmp	.+230    	; 0x1cbe <calc_initialValue+0x20a>
    1bd8:	41 15       	cp	r20, r1
    1bda:	f1 e0       	ldi	r31, 0x01	; 1
    1bdc:	5f 07       	cpc	r21, r31
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <calc_initialValue+0x12e>
    1be0:	44 c0       	rjmp	.+136    	; 0x1c6a <calc_initialValue+0x1b6>
    1be2:	41 15       	cp	r20, r1
    1be4:	54 40       	sbci	r21, 0x04	; 4
    1be6:	09 f4       	brne	.+2      	; 0x1bea <calc_initialValue+0x136>
    1be8:	55 c0       	rjmp	.+170    	; 0x1c94 <calc_initialValue+0x1e0>
    1bea:	69 c0       	rjmp	.+210    	; 0x1cbe <calc_initialValue+0x20a>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    1bec:	a9 01       	movw	r20, r18
    1bee:	98 01       	movw	r18, r16
    1bf0:	6f e6       	ldi	r22, 0x6F	; 111
    1bf2:	72 e1       	ldi	r23, 0x12	; 18
    1bf4:	83 e0       	ldi	r24, 0x03	; 3
    1bf6:	9d e3       	ldi	r25, 0x3D	; 61
    1bf8:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1bfc:	2f e6       	ldi	r18, 0x6F	; 111
    1bfe:	32 e1       	ldi	r19, 0x12	; 18
    1c00:	43 e0       	ldi	r20, 0x03	; 3
    1c02:	59 e3       	ldi	r21, 0x39	; 57
    1c04:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    1c08:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1c0c:	f7 01       	movw	r30, r14
    1c0e:	71 83       	std	Z+1, r23	; 0x01
    1c10:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    1c14:	9d c4       	rjmp	.+2362   	; 0x2550 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    1c16:	a9 01       	movw	r20, r18
    1c18:	98 01       	movw	r18, r16
    1c1a:	6f e6       	ldi	r22, 0x6F	; 111
    1c1c:	72 e1       	ldi	r23, 0x12	; 18
    1c1e:	83 e8       	ldi	r24, 0x83	; 131
    1c20:	9e e3       	ldi	r25, 0x3E	; 62
    1c22:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1c26:	2f e6       	ldi	r18, 0x6F	; 111
    1c28:	32 e1       	ldi	r19, 0x12	; 18
    1c2a:	43 e8       	ldi	r20, 0x83	; 131
    1c2c:	5a e3       	ldi	r21, 0x3A	; 58
    1c2e:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    1c32:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1c36:	f7 01       	movw	r30, r14
    1c38:	71 83       	std	Z+1, r23	; 0x01
    1c3a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    1c3e:	88 c4       	rjmp	.+2320   	; 0x2550 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    1c40:	a9 01       	movw	r20, r18
    1c42:	98 01       	movw	r18, r16
    1c44:	6f e6       	ldi	r22, 0x6F	; 111
    1c46:	72 e1       	ldi	r23, 0x12	; 18
    1c48:	83 e0       	ldi	r24, 0x03	; 3
    1c4a:	90 e4       	ldi	r25, 0x40	; 64
    1c4c:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1c50:	2f e6       	ldi	r18, 0x6F	; 111
    1c52:	32 e1       	ldi	r19, 0x12	; 18
    1c54:	43 e0       	ldi	r20, 0x03	; 3
    1c56:	5c e3       	ldi	r21, 0x3C	; 60
    1c58:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    1c5c:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1c60:	f7 01       	movw	r30, r14
    1c62:	71 83       	std	Z+1, r23	; 0x01
    1c64:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    1c68:	73 c4       	rjmp	.+2278   	; 0x2550 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    1c6a:	a9 01       	movw	r20, r18
    1c6c:	98 01       	movw	r18, r16
    1c6e:	6f e6       	ldi	r22, 0x6F	; 111
    1c70:	72 e1       	ldi	r23, 0x12	; 18
    1c72:	83 e0       	ldi	r24, 0x03	; 3
    1c74:	91 e4       	ldi	r25, 0x41	; 65
    1c76:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1c7a:	2f e6       	ldi	r18, 0x6F	; 111
    1c7c:	32 e1       	ldi	r19, 0x12	; 18
    1c7e:	43 e0       	ldi	r20, 0x03	; 3
    1c80:	5d e3       	ldi	r21, 0x3D	; 61
    1c82:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    1c86:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1c8a:	f7 01       	movw	r30, r14
    1c8c:	71 83       	std	Z+1, r23	; 0x01
    1c8e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    1c92:	5e c4       	rjmp	.+2236   	; 0x2550 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    1c94:	a9 01       	movw	r20, r18
    1c96:	98 01       	movw	r18, r16
    1c98:	6f e6       	ldi	r22, 0x6F	; 111
    1c9a:	72 e1       	ldi	r23, 0x12	; 18
    1c9c:	83 e0       	ldi	r24, 0x03	; 3
    1c9e:	92 e4       	ldi	r25, 0x42	; 66
    1ca0:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1ca4:	2f e6       	ldi	r18, 0x6F	; 111
    1ca6:	32 e1       	ldi	r19, 0x12	; 18
    1ca8:	43 e0       	ldi	r20, 0x03	; 3
    1caa:	5e e3       	ldi	r21, 0x3E	; 62
    1cac:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    1cb0:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1cb4:	f7 01       	movw	r30, r14
    1cb6:	71 83       	std	Z+1, r23	; 0x01
    1cb8:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    1cbc:	49 c4       	rjmp	.+2194   	; 0x2550 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1cbe:	f7 01       	movw	r30, r14
    1cc0:	11 82       	std	Z+1, r1	; 0x01
    1cc2:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1cc6:	44 c4       	rjmp	.+2184   	; 0x2550 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    1cc8:	62 30       	cpi	r22, 0x02	; 2
    1cca:	09 f0       	breq	.+2      	; 0x1cce <calc_initialValue+0x21a>
    1ccc:	3a c4       	rjmp	.+2164   	; 0x2542 <calc_initialValue+0xa8e>
		{
			switch(prescaler)
    1cce:	40 34       	cpi	r20, 0x40	; 64
    1cd0:	51 05       	cpc	r21, r1
    1cd2:	e1 f1       	breq	.+120    	; 0x1d4c <calc_initialValue+0x298>
    1cd4:	38 f4       	brcc	.+14     	; 0x1ce4 <calc_initialValue+0x230>
    1cd6:	41 30       	cpi	r20, 0x01	; 1
    1cd8:	51 05       	cpc	r21, r1
    1cda:	71 f0       	breq	.+28     	; 0x1cf8 <calc_initialValue+0x244>
    1cdc:	48 30       	cpi	r20, 0x08	; 8
    1cde:	51 05       	cpc	r21, r1
    1ce0:	01 f1       	breq	.+64     	; 0x1d22 <calc_initialValue+0x26e>
    1ce2:	73 c0       	rjmp	.+230    	; 0x1dca <calc_initialValue+0x316>
    1ce4:	41 15       	cp	r20, r1
    1ce6:	f1 e0       	ldi	r31, 0x01	; 1
    1ce8:	5f 07       	cpc	r21, r31
    1cea:	09 f4       	brne	.+2      	; 0x1cee <calc_initialValue+0x23a>
    1cec:	44 c0       	rjmp	.+136    	; 0x1d76 <calc_initialValue+0x2c2>
    1cee:	41 15       	cp	r20, r1
    1cf0:	54 40       	sbci	r21, 0x04	; 4
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <calc_initialValue+0x242>
    1cf4:	55 c0       	rjmp	.+170    	; 0x1da0 <calc_initialValue+0x2ec>
    1cf6:	69 c0       	rjmp	.+210    	; 0x1dca <calc_initialValue+0x316>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    1cf8:	a9 01       	movw	r20, r18
    1cfa:	98 01       	movw	r18, r16
    1cfc:	6d eb       	ldi	r22, 0xBD	; 189
    1cfe:	77 e3       	ldi	r23, 0x37	; 55
    1d00:	86 e0       	ldi	r24, 0x06	; 6
    1d02:	98 e3       	ldi	r25, 0x38	; 56
    1d04:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1d08:	2d eb       	ldi	r18, 0xBD	; 189
    1d0a:	37 e3       	ldi	r19, 0x37	; 55
    1d0c:	46 e0       	ldi	r20, 0x06	; 6
    1d0e:	54 e3       	ldi	r21, 0x34	; 52
    1d10:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    1d14:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1d18:	f7 01       	movw	r30, r14
    1d1a:	71 83       	std	Z+1, r23	; 0x01
    1d1c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    1d20:	17 c4       	rjmp	.+2094   	; 0x2550 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    1d22:	a9 01       	movw	r20, r18
    1d24:	98 01       	movw	r18, r16
    1d26:	6d eb       	ldi	r22, 0xBD	; 189
    1d28:	77 e3       	ldi	r23, 0x37	; 55
    1d2a:	86 e8       	ldi	r24, 0x86	; 134
    1d2c:	99 e3       	ldi	r25, 0x39	; 57
    1d2e:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1d32:	2d eb       	ldi	r18, 0xBD	; 189
    1d34:	37 e3       	ldi	r19, 0x37	; 55
    1d36:	46 e8       	ldi	r20, 0x86	; 134
    1d38:	55 e3       	ldi	r21, 0x35	; 53
    1d3a:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    1d3e:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1d42:	f7 01       	movw	r30, r14
    1d44:	71 83       	std	Z+1, r23	; 0x01
    1d46:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    1d4a:	02 c4       	rjmp	.+2052   	; 0x2550 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    1d4c:	a9 01       	movw	r20, r18
    1d4e:	98 01       	movw	r18, r16
    1d50:	6d eb       	ldi	r22, 0xBD	; 189
    1d52:	77 e3       	ldi	r23, 0x37	; 55
    1d54:	86 e0       	ldi	r24, 0x06	; 6
    1d56:	9b e3       	ldi	r25, 0x3B	; 59
    1d58:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1d5c:	2d eb       	ldi	r18, 0xBD	; 189
    1d5e:	37 e3       	ldi	r19, 0x37	; 55
    1d60:	46 e0       	ldi	r20, 0x06	; 6
    1d62:	57 e3       	ldi	r21, 0x37	; 55
    1d64:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    1d68:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1d6c:	f7 01       	movw	r30, r14
    1d6e:	71 83       	std	Z+1, r23	; 0x01
    1d70:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    1d74:	ed c3       	rjmp	.+2010   	; 0x2550 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    1d76:	a9 01       	movw	r20, r18
    1d78:	98 01       	movw	r18, r16
    1d7a:	6d eb       	ldi	r22, 0xBD	; 189
    1d7c:	77 e3       	ldi	r23, 0x37	; 55
    1d7e:	86 e0       	ldi	r24, 0x06	; 6
    1d80:	9c e3       	ldi	r25, 0x3C	; 60
    1d82:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1d86:	2d eb       	ldi	r18, 0xBD	; 189
    1d88:	37 e3       	ldi	r19, 0x37	; 55
    1d8a:	46 e0       	ldi	r20, 0x06	; 6
    1d8c:	58 e3       	ldi	r21, 0x38	; 56
    1d8e:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    1d92:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1d96:	f7 01       	movw	r30, r14
    1d98:	71 83       	std	Z+1, r23	; 0x01
    1d9a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    1d9e:	d8 c3       	rjmp	.+1968   	; 0x2550 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    1da0:	a9 01       	movw	r20, r18
    1da2:	98 01       	movw	r18, r16
    1da4:	6d eb       	ldi	r22, 0xBD	; 189
    1da6:	77 e3       	ldi	r23, 0x37	; 55
    1da8:	86 e0       	ldi	r24, 0x06	; 6
    1daa:	9d e3       	ldi	r25, 0x3D	; 61
    1dac:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1db0:	2d eb       	ldi	r18, 0xBD	; 189
    1db2:	37 e3       	ldi	r19, 0x37	; 55
    1db4:	46 e0       	ldi	r20, 0x06	; 6
    1db6:	59 e3       	ldi	r21, 0x39	; 57
    1db8:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    1dbc:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1dc0:	f7 01       	movw	r30, r14
    1dc2:	71 83       	std	Z+1, r23	; 0x01
    1dc4:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    1dc8:	c3 c3       	rjmp	.+1926   	; 0x2550 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1dca:	f7 01       	movw	r30, r14
    1dcc:	11 82       	std	Z+1, r1	; 0x01
    1dce:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1dd2:	be c3       	rjmp	.+1916   	; 0x2550 <calc_initialValue+0xa9c>
		else
		{
			// do nothing
		}
	}
	else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <calc_initialValue+0x326>
    1dd8:	8a c1       	rjmp	.+788    	; 0x20ee <calc_initialValue+0x63a>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    1dda:	61 11       	cpse	r22, r1
    1ddc:	7c c0       	rjmp	.+248    	; 0x1ed6 <calc_initialValue+0x422>
		{
			switch(prescaler)
    1dde:	40 34       	cpi	r20, 0x40	; 64
    1de0:	51 05       	cpc	r21, r1
    1de2:	a9 f1       	breq	.+106    	; 0x1e4e <calc_initialValue+0x39a>
    1de4:	38 f4       	brcc	.+14     	; 0x1df4 <calc_initialValue+0x340>
    1de6:	41 30       	cpi	r20, 0x01	; 1
    1de8:	51 05       	cpc	r21, r1
    1dea:	69 f0       	breq	.+26     	; 0x1e06 <calc_initialValue+0x352>
    1dec:	48 30       	cpi	r20, 0x08	; 8
    1dee:	51 05       	cpc	r21, r1
    1df0:	f9 f0       	breq	.+62     	; 0x1e30 <calc_initialValue+0x37c>
    1df2:	6c c0       	rjmp	.+216    	; 0x1ecc <calc_initialValue+0x418>
    1df4:	41 15       	cp	r20, r1
    1df6:	f1 e0       	ldi	r31, 0x01	; 1
    1df8:	5f 07       	cpc	r21, r31
    1dfa:	f1 f1       	breq	.+124    	; 0x1e78 <calc_initialValue+0x3c4>
    1dfc:	41 15       	cp	r20, r1
    1dfe:	54 40       	sbci	r21, 0x04	; 4
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <calc_initialValue+0x350>
    1e02:	4f c0       	rjmp	.+158    	; 0x1ea2 <calc_initialValue+0x3ee>
    1e04:	63 c0       	rjmp	.+198    	; 0x1ecc <calc_initialValue+0x418>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    1e06:	a9 01       	movw	r20, r18
    1e08:	98 01       	movw	r18, r16
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	96 e4       	ldi	r25, 0x46	; 70
    1e12:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	51 e4       	ldi	r21, 0x41	; 65
    1e1e:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__mulsf3>
    1e22:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1e26:	f7 01       	movw	r30, r14
    1e28:	71 83       	std	Z+1, r23	; 0x01
    1e2a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    1e2e:	90 c3       	rjmp	.+1824   	; 0x2550 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    1e30:	a9 01       	movw	r20, r18
    1e32:	98 01       	movw	r18, r16
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	70 e0       	ldi	r23, 0x00	; 0
    1e38:	80 e8       	ldi	r24, 0x80	; 128
    1e3a:	97 e4       	ldi	r25, 0x47	; 71
    1e3c:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1e40:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1e44:	f7 01       	movw	r30, r14
    1e46:	71 83       	std	Z+1, r23	; 0x01
    1e48:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    1e4c:	81 c3       	rjmp	.+1794   	; 0x2550 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    1e4e:	a9 01       	movw	r20, r18
    1e50:	98 01       	movw	r18, r16
    1e52:	60 e0       	ldi	r22, 0x00	; 0
    1e54:	70 e0       	ldi	r23, 0x00	; 0
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	99 e4       	ldi	r25, 0x49	; 73
    1e5a:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	5e e3       	ldi	r21, 0x3E	; 62
    1e66:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__mulsf3>
    1e6a:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1e6e:	f7 01       	movw	r30, r14
    1e70:	71 83       	std	Z+1, r23	; 0x01
    1e72:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    1e76:	6c c3       	rjmp	.+1752   	; 0x2550 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    1e78:	a9 01       	movw	r20, r18
    1e7a:	98 01       	movw	r18, r16
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	70 e0       	ldi	r23, 0x00	; 0
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	9a e4       	ldi	r25, 0x4A	; 74
    1e84:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	5d e3       	ldi	r21, 0x3D	; 61
    1e90:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__mulsf3>
    1e94:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1e98:	f7 01       	movw	r30, r14
    1e9a:	71 83       	std	Z+1, r23	; 0x01
    1e9c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    1ea0:	57 c3       	rjmp	.+1710   	; 0x2550 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    1ea2:	a9 01       	movw	r20, r18
    1ea4:	98 01       	movw	r18, r16
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	70 e0       	ldi	r23, 0x00	; 0
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	9b e4       	ldi	r25, 0x4B	; 75
    1eae:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	5c e3       	ldi	r21, 0x3C	; 60
    1eba:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__mulsf3>
    1ebe:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1ec2:	f7 01       	movw	r30, r14
    1ec4:	71 83       	std	Z+1, r23	; 0x01
    1ec6:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    1eca:	42 c3       	rjmp	.+1668   	; 0x2550 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1ecc:	f7 01       	movw	r30, r14
    1ece:	11 82       	std	Z+1, r1	; 0x01
    1ed0:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1ed4:	3d c3       	rjmp	.+1658   	; 0x2550 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    1ed6:	61 30       	cpi	r22, 0x01	; 1
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <calc_initialValue+0x428>
    1eda:	83 c0       	rjmp	.+262    	; 0x1fe2 <calc_initialValue+0x52e>
		{
			switch(prescaler)
    1edc:	40 34       	cpi	r20, 0x40	; 64
    1ede:	51 05       	cpc	r21, r1
    1ee0:	e1 f1       	breq	.+120    	; 0x1f5a <calc_initialValue+0x4a6>
    1ee2:	38 f4       	brcc	.+14     	; 0x1ef2 <calc_initialValue+0x43e>
    1ee4:	41 30       	cpi	r20, 0x01	; 1
    1ee6:	51 05       	cpc	r21, r1
    1ee8:	71 f0       	breq	.+28     	; 0x1f06 <calc_initialValue+0x452>
    1eea:	48 30       	cpi	r20, 0x08	; 8
    1eec:	51 05       	cpc	r21, r1
    1eee:	01 f1       	breq	.+64     	; 0x1f30 <calc_initialValue+0x47c>
    1ef0:	73 c0       	rjmp	.+230    	; 0x1fd8 <calc_initialValue+0x524>
    1ef2:	41 15       	cp	r20, r1
    1ef4:	f1 e0       	ldi	r31, 0x01	; 1
    1ef6:	5f 07       	cpc	r21, r31
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <calc_initialValue+0x448>
    1efa:	44 c0       	rjmp	.+136    	; 0x1f84 <calc_initialValue+0x4d0>
    1efc:	41 15       	cp	r20, r1
    1efe:	54 40       	sbci	r21, 0x04	; 4
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <calc_initialValue+0x450>
    1f02:	55 c0       	rjmp	.+170    	; 0x1fae <calc_initialValue+0x4fa>
    1f04:	69 c0       	rjmp	.+210    	; 0x1fd8 <calc_initialValue+0x524>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    1f06:	a9 01       	movw	r20, r18
    1f08:	98 01       	movw	r18, r16
    1f0a:	6f e6       	ldi	r22, 0x6F	; 111
    1f0c:	72 e1       	ldi	r23, 0x12	; 18
    1f0e:	83 e0       	ldi	r24, 0x03	; 3
    1f10:	91 e4       	ldi	r25, 0x41	; 65
    1f12:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1f16:	2f e6       	ldi	r18, 0x6F	; 111
    1f18:	32 e1       	ldi	r19, 0x12	; 18
    1f1a:	43 e0       	ldi	r20, 0x03	; 3
    1f1c:	59 e3       	ldi	r21, 0x39	; 57
    1f1e:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    1f22:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1f26:	f7 01       	movw	r30, r14
    1f28:	71 83       	std	Z+1, r23	; 0x01
    1f2a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    1f2e:	10 c3       	rjmp	.+1568   	; 0x2550 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    1f30:	a9 01       	movw	r20, r18
    1f32:	98 01       	movw	r18, r16
    1f34:	6f e6       	ldi	r22, 0x6F	; 111
    1f36:	72 e1       	ldi	r23, 0x12	; 18
    1f38:	83 e8       	ldi	r24, 0x83	; 131
    1f3a:	92 e4       	ldi	r25, 0x42	; 66
    1f3c:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1f40:	2f e6       	ldi	r18, 0x6F	; 111
    1f42:	32 e1       	ldi	r19, 0x12	; 18
    1f44:	43 e8       	ldi	r20, 0x83	; 131
    1f46:	5a e3       	ldi	r21, 0x3A	; 58
    1f48:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    1f4c:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1f50:	f7 01       	movw	r30, r14
    1f52:	71 83       	std	Z+1, r23	; 0x01
    1f54:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    1f58:	fb c2       	rjmp	.+1526   	; 0x2550 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    1f5a:	a9 01       	movw	r20, r18
    1f5c:	98 01       	movw	r18, r16
    1f5e:	6f e6       	ldi	r22, 0x6F	; 111
    1f60:	72 e1       	ldi	r23, 0x12	; 18
    1f62:	83 e0       	ldi	r24, 0x03	; 3
    1f64:	94 e4       	ldi	r25, 0x44	; 68
    1f66:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1f6a:	2f e6       	ldi	r18, 0x6F	; 111
    1f6c:	32 e1       	ldi	r19, 0x12	; 18
    1f6e:	43 e0       	ldi	r20, 0x03	; 3
    1f70:	5c e3       	ldi	r21, 0x3C	; 60
    1f72:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    1f76:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1f7a:	f7 01       	movw	r30, r14
    1f7c:	71 83       	std	Z+1, r23	; 0x01
    1f7e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    1f82:	e6 c2       	rjmp	.+1484   	; 0x2550 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    1f84:	a9 01       	movw	r20, r18
    1f86:	98 01       	movw	r18, r16
    1f88:	6f e6       	ldi	r22, 0x6F	; 111
    1f8a:	72 e1       	ldi	r23, 0x12	; 18
    1f8c:	83 e0       	ldi	r24, 0x03	; 3
    1f8e:	95 e4       	ldi	r25, 0x45	; 69
    1f90:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1f94:	2f e6       	ldi	r18, 0x6F	; 111
    1f96:	32 e1       	ldi	r19, 0x12	; 18
    1f98:	43 e0       	ldi	r20, 0x03	; 3
    1f9a:	5d e3       	ldi	r21, 0x3D	; 61
    1f9c:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    1fa0:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1fa4:	f7 01       	movw	r30, r14
    1fa6:	71 83       	std	Z+1, r23	; 0x01
    1fa8:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    1fac:	d1 c2       	rjmp	.+1442   	; 0x2550 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    1fae:	a9 01       	movw	r20, r18
    1fb0:	98 01       	movw	r18, r16
    1fb2:	6f e6       	ldi	r22, 0x6F	; 111
    1fb4:	72 e1       	ldi	r23, 0x12	; 18
    1fb6:	83 e0       	ldi	r24, 0x03	; 3
    1fb8:	96 e4       	ldi	r25, 0x46	; 70
    1fba:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1fbe:	2f e6       	ldi	r18, 0x6F	; 111
    1fc0:	32 e1       	ldi	r19, 0x12	; 18
    1fc2:	43 e0       	ldi	r20, 0x03	; 3
    1fc4:	5e e3       	ldi	r21, 0x3E	; 62
    1fc6:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    1fca:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    1fce:	f7 01       	movw	r30, r14
    1fd0:	71 83       	std	Z+1, r23	; 0x01
    1fd2:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    1fd6:	bc c2       	rjmp	.+1400   	; 0x2550 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1fd8:	f7 01       	movw	r30, r14
    1fda:	11 82       	std	Z+1, r1	; 0x01
    1fdc:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1fde:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1fe0:	b7 c2       	rjmp	.+1390   	; 0x2550 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    1fe2:	62 30       	cpi	r22, 0x02	; 2
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <calc_initialValue+0x534>
    1fe6:	af c2       	rjmp	.+1374   	; 0x2546 <calc_initialValue+0xa92>
		{
			switch(prescaler)
    1fe8:	40 34       	cpi	r20, 0x40	; 64
    1fea:	51 05       	cpc	r21, r1
    1fec:	e1 f1       	breq	.+120    	; 0x2066 <calc_initialValue+0x5b2>
    1fee:	38 f4       	brcc	.+14     	; 0x1ffe <calc_initialValue+0x54a>
    1ff0:	41 30       	cpi	r20, 0x01	; 1
    1ff2:	51 05       	cpc	r21, r1
    1ff4:	71 f0       	breq	.+28     	; 0x2012 <calc_initialValue+0x55e>
    1ff6:	48 30       	cpi	r20, 0x08	; 8
    1ff8:	51 05       	cpc	r21, r1
    1ffa:	01 f1       	breq	.+64     	; 0x203c <calc_initialValue+0x588>
    1ffc:	73 c0       	rjmp	.+230    	; 0x20e4 <calc_initialValue+0x630>
    1ffe:	41 15       	cp	r20, r1
    2000:	f1 e0       	ldi	r31, 0x01	; 1
    2002:	5f 07       	cpc	r21, r31
    2004:	09 f4       	brne	.+2      	; 0x2008 <calc_initialValue+0x554>
    2006:	44 c0       	rjmp	.+136    	; 0x2090 <calc_initialValue+0x5dc>
    2008:	41 15       	cp	r20, r1
    200a:	54 40       	sbci	r21, 0x04	; 4
    200c:	09 f4       	brne	.+2      	; 0x2010 <calc_initialValue+0x55c>
    200e:	55 c0       	rjmp	.+170    	; 0x20ba <calc_initialValue+0x606>
    2010:	69 c0       	rjmp	.+210    	; 0x20e4 <calc_initialValue+0x630>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    2012:	a9 01       	movw	r20, r18
    2014:	98 01       	movw	r18, r16
    2016:	6d eb       	ldi	r22, 0xBD	; 189
    2018:	77 e3       	ldi	r23, 0x37	; 55
    201a:	86 e0       	ldi	r24, 0x06	; 6
    201c:	9c e3       	ldi	r25, 0x3C	; 60
    201e:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    2022:	2d eb       	ldi	r18, 0xBD	; 189
    2024:	37 e3       	ldi	r19, 0x37	; 55
    2026:	46 e0       	ldi	r20, 0x06	; 6
    2028:	54 e3       	ldi	r21, 0x34	; 52
    202a:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    202e:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    2032:	f7 01       	movw	r30, r14
    2034:	71 83       	std	Z+1, r23	; 0x01
    2036:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2038:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    203a:	8a c2       	rjmp	.+1300   	; 0x2550 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    203c:	a9 01       	movw	r20, r18
    203e:	98 01       	movw	r18, r16
    2040:	6d eb       	ldi	r22, 0xBD	; 189
    2042:	77 e3       	ldi	r23, 0x37	; 55
    2044:	86 e8       	ldi	r24, 0x86	; 134
    2046:	9d e3       	ldi	r25, 0x3D	; 61
    2048:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    204c:	2d eb       	ldi	r18, 0xBD	; 189
    204e:	37 e3       	ldi	r19, 0x37	; 55
    2050:	46 e8       	ldi	r20, 0x86	; 134
    2052:	55 e3       	ldi	r21, 0x35	; 53
    2054:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    2058:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    205c:	f7 01       	movw	r30, r14
    205e:	71 83       	std	Z+1, r23	; 0x01
    2060:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2062:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    2064:	75 c2       	rjmp	.+1258   	; 0x2550 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    2066:	a9 01       	movw	r20, r18
    2068:	98 01       	movw	r18, r16
    206a:	6d eb       	ldi	r22, 0xBD	; 189
    206c:	77 e3       	ldi	r23, 0x37	; 55
    206e:	86 e0       	ldi	r24, 0x06	; 6
    2070:	9f e3       	ldi	r25, 0x3F	; 63
    2072:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    2076:	2d eb       	ldi	r18, 0xBD	; 189
    2078:	37 e3       	ldi	r19, 0x37	; 55
    207a:	46 e0       	ldi	r20, 0x06	; 6
    207c:	57 e3       	ldi	r21, 0x37	; 55
    207e:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    2082:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    2086:	f7 01       	movw	r30, r14
    2088:	71 83       	std	Z+1, r23	; 0x01
    208a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    208c:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    208e:	60 c2       	rjmp	.+1216   	; 0x2550 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    2090:	a9 01       	movw	r20, r18
    2092:	98 01       	movw	r18, r16
    2094:	6d eb       	ldi	r22, 0xBD	; 189
    2096:	77 e3       	ldi	r23, 0x37	; 55
    2098:	86 e0       	ldi	r24, 0x06	; 6
    209a:	90 e4       	ldi	r25, 0x40	; 64
    209c:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    20a0:	2d eb       	ldi	r18, 0xBD	; 189
    20a2:	37 e3       	ldi	r19, 0x37	; 55
    20a4:	46 e0       	ldi	r20, 0x06	; 6
    20a6:	58 e3       	ldi	r21, 0x38	; 56
    20a8:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    20ac:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    20b0:	f7 01       	movw	r30, r14
    20b2:	71 83       	std	Z+1, r23	; 0x01
    20b4:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    20b8:	4b c2       	rjmp	.+1174   	; 0x2550 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    20ba:	a9 01       	movw	r20, r18
    20bc:	98 01       	movw	r18, r16
    20be:	6d eb       	ldi	r22, 0xBD	; 189
    20c0:	77 e3       	ldi	r23, 0x37	; 55
    20c2:	86 e0       	ldi	r24, 0x06	; 6
    20c4:	91 e4       	ldi	r25, 0x41	; 65
    20c6:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    20ca:	2d eb       	ldi	r18, 0xBD	; 189
    20cc:	37 e3       	ldi	r19, 0x37	; 55
    20ce:	46 e0       	ldi	r20, 0x06	; 6
    20d0:	59 e3       	ldi	r21, 0x39	; 57
    20d2:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    20d6:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    20da:	f7 01       	movw	r30, r14
    20dc:	71 83       	std	Z+1, r23	; 0x01
    20de:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    20e2:	36 c2       	rjmp	.+1132   	; 0x2550 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    20e4:	f7 01       	movw	r30, r14
    20e6:	11 82       	std	Z+1, r1	; 0x01
    20e8:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    20ea:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    20ec:	31 c2       	rjmp	.+1122   	; 0x2550 <calc_initialValue+0xa9c>
		else
		{
			// do nothing
		}
	}
	else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    20ee:	82 30       	cpi	r24, 0x02	; 2
    20f0:	09 f0       	breq	.+2      	; 0x20f4 <calc_initialValue+0x640>
    20f2:	2b c2       	rjmp	.+1110   	; 0x254a <calc_initialValue+0xa96>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    20f4:	61 11       	cpse	r22, r1
    20f6:	b1 c0       	rjmp	.+354    	; 0x225a <calc_initialValue+0x7a6>
		{
			switch(prescaler)
    20f8:	40 34       	cpi	r20, 0x40	; 64
    20fa:	51 05       	cpc	r21, r1
    20fc:	09 f4       	brne	.+2      	; 0x2100 <calc_initialValue+0x64c>
    20fe:	54 c0       	rjmp	.+168    	; 0x21a8 <calc_initialValue+0x6f4>
    2100:	58 f4       	brcc	.+22     	; 0x2118 <calc_initialValue+0x664>
    2102:	48 30       	cpi	r20, 0x08	; 8
    2104:	51 05       	cpc	r21, r1
    2106:	61 f1       	breq	.+88     	; 0x2160 <calc_initialValue+0x6ac>
    2108:	40 32       	cpi	r20, 0x20	; 32
    210a:	51 05       	cpc	r21, r1
    210c:	c1 f1       	breq	.+112    	; 0x217e <calc_initialValue+0x6ca>
    210e:	41 30       	cpi	r20, 0x01	; 1
    2110:	51 05       	cpc	r21, r1
    2112:	09 f0       	breq	.+2      	; 0x2116 <calc_initialValue+0x662>
    2114:	9d c0       	rjmp	.+314    	; 0x2250 <calc_initialValue+0x79c>
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <calc_initialValue+0x682>
    2118:	41 15       	cp	r20, r1
    211a:	f1 e0       	ldi	r31, 0x01	; 1
    211c:	5f 07       	cpc	r21, r31
    211e:	09 f4       	brne	.+2      	; 0x2122 <calc_initialValue+0x66e>
    2120:	6d c0       	rjmp	.+218    	; 0x21fc <calc_initialValue+0x748>
    2122:	41 15       	cp	r20, r1
    2124:	84 e0       	ldi	r24, 0x04	; 4
    2126:	58 07       	cpc	r21, r24
    2128:	09 f4       	brne	.+2      	; 0x212c <calc_initialValue+0x678>
    212a:	7d c0       	rjmp	.+250    	; 0x2226 <calc_initialValue+0x772>
    212c:	40 38       	cpi	r20, 0x80	; 128
    212e:	51 05       	cpc	r21, r1
    2130:	09 f0       	breq	.+2      	; 0x2134 <calc_initialValue+0x680>
    2132:	8e c0       	rjmp	.+284    	; 0x2250 <calc_initialValue+0x79c>
    2134:	4e c0       	rjmp	.+156    	; 0x21d2 <calc_initialValue+0x71e>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    2136:	a9 01       	movw	r20, r18
    2138:	98 01       	movw	r18, r16
    213a:	60 e0       	ldi	r22, 0x00	; 0
    213c:	70 e0       	ldi	r23, 0x00	; 0
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	92 e4       	ldi	r25, 0x42	; 66
    2142:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e0       	ldi	r20, 0x00	; 0
    214c:	51 e4       	ldi	r21, 0x41	; 65
    214e:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__mulsf3>
    2152:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    2156:	f7 01       	movw	r30, r14
    2158:	71 83       	std	Z+1, r23	; 0x01
    215a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    215c:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    215e:	f8 c1       	rjmp	.+1008   	; 0x2550 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    2160:	a9 01       	movw	r20, r18
    2162:	98 01       	movw	r18, r16
    2164:	60 e0       	ldi	r22, 0x00	; 0
    2166:	70 e0       	ldi	r23, 0x00	; 0
    2168:	80 e8       	ldi	r24, 0x80	; 128
    216a:	93 e4       	ldi	r25, 0x43	; 67
    216c:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    2170:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    2174:	f7 01       	movw	r30, r14
    2176:	71 83       	std	Z+1, r23	; 0x01
    2178:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    217a:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    217c:	e9 c1       	rjmp	.+978    	; 0x2550 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
    217e:	a9 01       	movw	r20, r18
    2180:	98 01       	movw	r18, r16
    2182:	60 e0       	ldi	r22, 0x00	; 0
    2184:	70 e0       	ldi	r23, 0x00	; 0
    2186:	80 e8       	ldi	r24, 0x80	; 128
    2188:	94 e4       	ldi	r25, 0x44	; 68
    218a:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e8       	ldi	r20, 0x80	; 128
    2194:	5e e3       	ldi	r21, 0x3E	; 62
    2196:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__mulsf3>
    219a:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    219e:	f7 01       	movw	r30, r14
    21a0:	71 83       	std	Z+1, r23	; 0x01
    21a2:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
				break;
    21a6:	d4 c1       	rjmp	.+936    	; 0x2550 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    21a8:	a9 01       	movw	r20, r18
    21aa:	98 01       	movw	r18, r16
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	70 e0       	ldi	r23, 0x00	; 0
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	95 e4       	ldi	r25, 0x45	; 69
    21b4:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e0       	ldi	r20, 0x00	; 0
    21be:	5e e3       	ldi	r21, 0x3E	; 62
    21c0:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__mulsf3>
    21c4:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    21c8:	f7 01       	movw	r30, r14
    21ca:	71 83       	std	Z+1, r23	; 0x01
    21cc:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    21d0:	bf c1       	rjmp	.+894    	; 0x2550 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
    21d2:	a9 01       	movw	r20, r18
    21d4:	98 01       	movw	r18, r16
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	70 e0       	ldi	r23, 0x00	; 0
    21da:	80 e8       	ldi	r24, 0x80	; 128
    21dc:	95 e4       	ldi	r25, 0x45	; 69
    21de:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e8       	ldi	r20, 0x80	; 128
    21e8:	5d e3       	ldi	r21, 0x3D	; 61
    21ea:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__mulsf3>
    21ee:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    21f2:	f7 01       	movw	r30, r14
    21f4:	71 83       	std	Z+1, r23	; 0x01
    21f6:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
				break;
    21fa:	aa c1       	rjmp	.+852    	; 0x2550 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    21fc:	a9 01       	movw	r20, r18
    21fe:	98 01       	movw	r18, r16
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	70 e0       	ldi	r23, 0x00	; 0
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	96 e4       	ldi	r25, 0x46	; 70
    2208:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e0       	ldi	r20, 0x00	; 0
    2212:	5d e3       	ldi	r21, 0x3D	; 61
    2214:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__mulsf3>
    2218:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    221c:	f7 01       	movw	r30, r14
    221e:	71 83       	std	Z+1, r23	; 0x01
    2220:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2222:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    2224:	95 c1       	rjmp	.+810    	; 0x2550 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    2226:	a9 01       	movw	r20, r18
    2228:	98 01       	movw	r18, r16
    222a:	60 e0       	ldi	r22, 0x00	; 0
    222c:	70 e0       	ldi	r23, 0x00	; 0
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	97 e4       	ldi	r25, 0x47	; 71
    2232:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	5c e3       	ldi	r21, 0x3C	; 60
    223e:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__mulsf3>
    2242:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    2246:	f7 01       	movw	r30, r14
    2248:	71 83       	std	Z+1, r23	; 0x01
    224a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    224c:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    224e:	80 c1       	rjmp	.+768    	; 0x2550 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2250:	f7 01       	movw	r30, r14
    2252:	11 82       	std	Z+1, r1	; 0x01
    2254:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2256:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2258:	7b c1       	rjmp	.+758    	; 0x2550 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    225a:	61 30       	cpi	r22, 0x01	; 1
    225c:	09 f0       	breq	.+2      	; 0x2260 <calc_initialValue+0x7ac>
    225e:	b7 c0       	rjmp	.+366    	; 0x23ce <calc_initialValue+0x91a>
		{
			switch(prescaler)
    2260:	40 34       	cpi	r20, 0x40	; 64
    2262:	51 05       	cpc	r21, r1
    2264:	09 f4       	brne	.+2      	; 0x2268 <calc_initialValue+0x7b4>
    2266:	5a c0       	rjmp	.+180    	; 0x231c <calc_initialValue+0x868>
    2268:	58 f4       	brcc	.+22     	; 0x2280 <calc_initialValue+0x7cc>
    226a:	48 30       	cpi	r20, 0x08	; 8
    226c:	51 05       	cpc	r21, r1
    226e:	61 f1       	breq	.+88     	; 0x22c8 <calc_initialValue+0x814>
    2270:	40 32       	cpi	r20, 0x20	; 32
    2272:	51 05       	cpc	r21, r1
    2274:	f1 f1       	breq	.+124    	; 0x22f2 <calc_initialValue+0x83e>
    2276:	41 30       	cpi	r20, 0x01	; 1
    2278:	51 05       	cpc	r21, r1
    227a:	09 f0       	breq	.+2      	; 0x227e <calc_initialValue+0x7ca>
    227c:	a3 c0       	rjmp	.+326    	; 0x23c4 <calc_initialValue+0x910>
    227e:	0f c0       	rjmp	.+30     	; 0x229e <calc_initialValue+0x7ea>
    2280:	41 15       	cp	r20, r1
    2282:	f1 e0       	ldi	r31, 0x01	; 1
    2284:	5f 07       	cpc	r21, r31
    2286:	09 f4       	brne	.+2      	; 0x228a <calc_initialValue+0x7d6>
    2288:	73 c0       	rjmp	.+230    	; 0x2370 <calc_initialValue+0x8bc>
    228a:	41 15       	cp	r20, r1
    228c:	84 e0       	ldi	r24, 0x04	; 4
    228e:	58 07       	cpc	r21, r24
    2290:	09 f4       	brne	.+2      	; 0x2294 <calc_initialValue+0x7e0>
    2292:	83 c0       	rjmp	.+262    	; 0x239a <calc_initialValue+0x8e6>
    2294:	40 38       	cpi	r20, 0x80	; 128
    2296:	51 05       	cpc	r21, r1
    2298:	09 f0       	breq	.+2      	; 0x229c <calc_initialValue+0x7e8>
    229a:	94 c0       	rjmp	.+296    	; 0x23c4 <calc_initialValue+0x910>
    229c:	54 c0       	rjmp	.+168    	; 0x2346 <calc_initialValue+0x892>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    229e:	a9 01       	movw	r20, r18
    22a0:	98 01       	movw	r18, r16
    22a2:	6f e6       	ldi	r22, 0x6F	; 111
    22a4:	72 e1       	ldi	r23, 0x12	; 18
    22a6:	83 e0       	ldi	r24, 0x03	; 3
    22a8:	9d e3       	ldi	r25, 0x3D	; 61
    22aa:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    22ae:	2f e6       	ldi	r18, 0x6F	; 111
    22b0:	32 e1       	ldi	r19, 0x12	; 18
    22b2:	43 e0       	ldi	r20, 0x03	; 3
    22b4:	59 e3       	ldi	r21, 0x39	; 57
    22b6:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    22ba:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    22be:	f7 01       	movw	r30, r14
    22c0:	71 83       	std	Z+1, r23	; 0x01
    22c2:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    22c6:	44 c1       	rjmp	.+648    	; 0x2550 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    22c8:	a9 01       	movw	r20, r18
    22ca:	98 01       	movw	r18, r16
    22cc:	6f e6       	ldi	r22, 0x6F	; 111
    22ce:	72 e1       	ldi	r23, 0x12	; 18
    22d0:	83 e8       	ldi	r24, 0x83	; 131
    22d2:	9e e3       	ldi	r25, 0x3E	; 62
    22d4:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    22d8:	2f e6       	ldi	r18, 0x6F	; 111
    22da:	32 e1       	ldi	r19, 0x12	; 18
    22dc:	43 e8       	ldi	r20, 0x83	; 131
    22de:	5a e3       	ldi	r21, 0x3A	; 58
    22e0:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    22e4:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    22e8:	f7 01       	movw	r30, r14
    22ea:	71 83       	std	Z+1, r23	; 0x01
    22ec:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    22f0:	2f c1       	rjmp	.+606    	; 0x2550 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
    22f2:	a9 01       	movw	r20, r18
    22f4:	98 01       	movw	r18, r16
    22f6:	6f e6       	ldi	r22, 0x6F	; 111
    22f8:	72 e1       	ldi	r23, 0x12	; 18
    22fa:	83 e8       	ldi	r24, 0x83	; 131
    22fc:	9f e3       	ldi	r25, 0x3F	; 63
    22fe:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    2302:	2f e6       	ldi	r18, 0x6F	; 111
    2304:	32 e1       	ldi	r19, 0x12	; 18
    2306:	43 e8       	ldi	r20, 0x83	; 131
    2308:	5b e3       	ldi	r21, 0x3B	; 59
    230a:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    230e:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    2312:	f7 01       	movw	r30, r14
    2314:	71 83       	std	Z+1, r23	; 0x01
    2316:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2318:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
				break;
    231a:	1a c1       	rjmp	.+564    	; 0x2550 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    231c:	a9 01       	movw	r20, r18
    231e:	98 01       	movw	r18, r16
    2320:	6f e6       	ldi	r22, 0x6F	; 111
    2322:	72 e1       	ldi	r23, 0x12	; 18
    2324:	83 e0       	ldi	r24, 0x03	; 3
    2326:	90 e4       	ldi	r25, 0x40	; 64
    2328:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    232c:	2f e6       	ldi	r18, 0x6F	; 111
    232e:	32 e1       	ldi	r19, 0x12	; 18
    2330:	43 e0       	ldi	r20, 0x03	; 3
    2332:	5c e3       	ldi	r21, 0x3C	; 60
    2334:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    2338:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    233c:	f7 01       	movw	r30, r14
    233e:	71 83       	std	Z+1, r23	; 0x01
    2340:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2342:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    2344:	05 c1       	rjmp	.+522    	; 0x2550 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
    2346:	a9 01       	movw	r20, r18
    2348:	98 01       	movw	r18, r16
    234a:	6f e6       	ldi	r22, 0x6F	; 111
    234c:	72 e1       	ldi	r23, 0x12	; 18
    234e:	83 e8       	ldi	r24, 0x83	; 131
    2350:	90 e4       	ldi	r25, 0x40	; 64
    2352:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    2356:	2f e6       	ldi	r18, 0x6F	; 111
    2358:	32 e1       	ldi	r19, 0x12	; 18
    235a:	43 e8       	ldi	r20, 0x83	; 131
    235c:	5c e3       	ldi	r21, 0x3C	; 60
    235e:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    2362:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    2366:	f7 01       	movw	r30, r14
    2368:	71 83       	std	Z+1, r23	; 0x01
    236a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    236c:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
				break;
    236e:	f0 c0       	rjmp	.+480    	; 0x2550 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    2370:	a9 01       	movw	r20, r18
    2372:	98 01       	movw	r18, r16
    2374:	6f e6       	ldi	r22, 0x6F	; 111
    2376:	72 e1       	ldi	r23, 0x12	; 18
    2378:	83 e0       	ldi	r24, 0x03	; 3
    237a:	91 e4       	ldi	r25, 0x41	; 65
    237c:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    2380:	2f e6       	ldi	r18, 0x6F	; 111
    2382:	32 e1       	ldi	r19, 0x12	; 18
    2384:	43 e0       	ldi	r20, 0x03	; 3
    2386:	5d e3       	ldi	r21, 0x3D	; 61
    2388:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    238c:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    2390:	f7 01       	movw	r30, r14
    2392:	71 83       	std	Z+1, r23	; 0x01
    2394:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2396:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    2398:	db c0       	rjmp	.+438    	; 0x2550 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    239a:	a9 01       	movw	r20, r18
    239c:	98 01       	movw	r18, r16
    239e:	6f e6       	ldi	r22, 0x6F	; 111
    23a0:	72 e1       	ldi	r23, 0x12	; 18
    23a2:	83 e0       	ldi	r24, 0x03	; 3
    23a4:	92 e4       	ldi	r25, 0x42	; 66
    23a6:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    23aa:	2f e6       	ldi	r18, 0x6F	; 111
    23ac:	32 e1       	ldi	r19, 0x12	; 18
    23ae:	43 e0       	ldi	r20, 0x03	; 3
    23b0:	5e e3       	ldi	r21, 0x3E	; 62
    23b2:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    23b6:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    23ba:	f7 01       	movw	r30, r14
    23bc:	71 83       	std	Z+1, r23	; 0x01
    23be:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    23c0:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    23c2:	c6 c0       	rjmp	.+396    	; 0x2550 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    23c4:	f7 01       	movw	r30, r14
    23c6:	11 82       	std	Z+1, r1	; 0x01
    23c8:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    23ca:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    23cc:	c1 c0       	rjmp	.+386    	; 0x2550 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    23ce:	62 30       	cpi	r22, 0x02	; 2
    23d0:	09 f0       	breq	.+2      	; 0x23d4 <calc_initialValue+0x920>
    23d2:	bd c0       	rjmp	.+378    	; 0x254e <calc_initialValue+0xa9a>
		{
			switch(prescaler)
    23d4:	40 34       	cpi	r20, 0x40	; 64
    23d6:	51 05       	cpc	r21, r1
    23d8:	09 f4       	brne	.+2      	; 0x23dc <calc_initialValue+0x928>
    23da:	5a c0       	rjmp	.+180    	; 0x2490 <calc_initialValue+0x9dc>
    23dc:	58 f4       	brcc	.+22     	; 0x23f4 <calc_initialValue+0x940>
    23de:	48 30       	cpi	r20, 0x08	; 8
    23e0:	51 05       	cpc	r21, r1
    23e2:	61 f1       	breq	.+88     	; 0x243c <calc_initialValue+0x988>
    23e4:	40 32       	cpi	r20, 0x20	; 32
    23e6:	51 05       	cpc	r21, r1
    23e8:	f1 f1       	breq	.+124    	; 0x2466 <calc_initialValue+0x9b2>
    23ea:	41 30       	cpi	r20, 0x01	; 1
    23ec:	51 05       	cpc	r21, r1
    23ee:	09 f0       	breq	.+2      	; 0x23f2 <calc_initialValue+0x93e>
    23f0:	a3 c0       	rjmp	.+326    	; 0x2538 <calc_initialValue+0xa84>
    23f2:	0f c0       	rjmp	.+30     	; 0x2412 <calc_initialValue+0x95e>
    23f4:	41 15       	cp	r20, r1
    23f6:	f1 e0       	ldi	r31, 0x01	; 1
    23f8:	5f 07       	cpc	r21, r31
    23fa:	09 f4       	brne	.+2      	; 0x23fe <calc_initialValue+0x94a>
    23fc:	73 c0       	rjmp	.+230    	; 0x24e4 <calc_initialValue+0xa30>
    23fe:	41 15       	cp	r20, r1
    2400:	84 e0       	ldi	r24, 0x04	; 4
    2402:	58 07       	cpc	r21, r24
    2404:	09 f4       	brne	.+2      	; 0x2408 <calc_initialValue+0x954>
    2406:	83 c0       	rjmp	.+262    	; 0x250e <calc_initialValue+0xa5a>
    2408:	40 38       	cpi	r20, 0x80	; 128
    240a:	51 05       	cpc	r21, r1
    240c:	09 f0       	breq	.+2      	; 0x2410 <calc_initialValue+0x95c>
    240e:	94 c0       	rjmp	.+296    	; 0x2538 <calc_initialValue+0xa84>
    2410:	54 c0       	rjmp	.+168    	; 0x24ba <calc_initialValue+0xa06>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    2412:	a9 01       	movw	r20, r18
    2414:	98 01       	movw	r18, r16
    2416:	6d eb       	ldi	r22, 0xBD	; 189
    2418:	77 e3       	ldi	r23, 0x37	; 55
    241a:	86 e0       	ldi	r24, 0x06	; 6
    241c:	98 e3       	ldi	r25, 0x38	; 56
    241e:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    2422:	2d eb       	ldi	r18, 0xBD	; 189
    2424:	37 e3       	ldi	r19, 0x37	; 55
    2426:	46 e0       	ldi	r20, 0x06	; 6
    2428:	54 e3       	ldi	r21, 0x34	; 52
    242a:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    242e:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    2432:	f7 01       	movw	r30, r14
    2434:	71 83       	std	Z+1, r23	; 0x01
    2436:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2438:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    243a:	8a c0       	rjmp	.+276    	; 0x2550 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    243c:	a9 01       	movw	r20, r18
    243e:	98 01       	movw	r18, r16
    2440:	6d eb       	ldi	r22, 0xBD	; 189
    2442:	77 e3       	ldi	r23, 0x37	; 55
    2444:	86 e8       	ldi	r24, 0x86	; 134
    2446:	99 e3       	ldi	r25, 0x39	; 57
    2448:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    244c:	2d eb       	ldi	r18, 0xBD	; 189
    244e:	37 e3       	ldi	r19, 0x37	; 55
    2450:	46 e8       	ldi	r20, 0x86	; 134
    2452:	55 e3       	ldi	r21, 0x35	; 53
    2454:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    2458:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    245c:	f7 01       	movw	r30, r14
    245e:	71 83       	std	Z+1, r23	; 0x01
    2460:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2462:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    2464:	75 c0       	rjmp	.+234    	; 0x2550 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
    2466:	a9 01       	movw	r20, r18
    2468:	98 01       	movw	r18, r16
    246a:	6d eb       	ldi	r22, 0xBD	; 189
    246c:	77 e3       	ldi	r23, 0x37	; 55
    246e:	86 e8       	ldi	r24, 0x86	; 134
    2470:	9a e3       	ldi	r25, 0x3A	; 58
    2472:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    2476:	2d eb       	ldi	r18, 0xBD	; 189
    2478:	37 e3       	ldi	r19, 0x37	; 55
    247a:	46 e8       	ldi	r20, 0x86	; 134
    247c:	56 e3       	ldi	r21, 0x36	; 54
    247e:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    2482:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    2486:	f7 01       	movw	r30, r14
    2488:	71 83       	std	Z+1, r23	; 0x01
    248a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    248c:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
				break;
    248e:	60 c0       	rjmp	.+192    	; 0x2550 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    2490:	a9 01       	movw	r20, r18
    2492:	98 01       	movw	r18, r16
    2494:	6d eb       	ldi	r22, 0xBD	; 189
    2496:	77 e3       	ldi	r23, 0x37	; 55
    2498:	86 e0       	ldi	r24, 0x06	; 6
    249a:	9b e3       	ldi	r25, 0x3B	; 59
    249c:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    24a0:	2d eb       	ldi	r18, 0xBD	; 189
    24a2:	37 e3       	ldi	r19, 0x37	; 55
    24a4:	46 e0       	ldi	r20, 0x06	; 6
    24a6:	57 e3       	ldi	r21, 0x37	; 55
    24a8:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    24ac:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    24b0:	f7 01       	movw	r30, r14
    24b2:	71 83       	std	Z+1, r23	; 0x01
    24b4:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    24b8:	4b c0       	rjmp	.+150    	; 0x2550 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
    24ba:	a9 01       	movw	r20, r18
    24bc:	98 01       	movw	r18, r16
    24be:	6d eb       	ldi	r22, 0xBD	; 189
    24c0:	77 e3       	ldi	r23, 0x37	; 55
    24c2:	86 e8       	ldi	r24, 0x86	; 134
    24c4:	9b e3       	ldi	r25, 0x3B	; 59
    24c6:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    24ca:	2d eb       	ldi	r18, 0xBD	; 189
    24cc:	37 e3       	ldi	r19, 0x37	; 55
    24ce:	46 e8       	ldi	r20, 0x86	; 134
    24d0:	57 e3       	ldi	r21, 0x37	; 55
    24d2:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    24d6:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    24da:	f7 01       	movw	r30, r14
    24dc:	71 83       	std	Z+1, r23	; 0x01
    24de:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    24e0:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
				break;
    24e2:	36 c0       	rjmp	.+108    	; 0x2550 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    24e4:	a9 01       	movw	r20, r18
    24e6:	98 01       	movw	r18, r16
    24e8:	6d eb       	ldi	r22, 0xBD	; 189
    24ea:	77 e3       	ldi	r23, 0x37	; 55
    24ec:	86 e0       	ldi	r24, 0x06	; 6
    24ee:	9c e3       	ldi	r25, 0x3C	; 60
    24f0:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    24f4:	2d eb       	ldi	r18, 0xBD	; 189
    24f6:	37 e3       	ldi	r19, 0x37	; 55
    24f8:	46 e0       	ldi	r20, 0x06	; 6
    24fa:	58 e3       	ldi	r21, 0x38	; 56
    24fc:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    2500:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    2504:	f7 01       	movw	r30, r14
    2506:	71 83       	std	Z+1, r23	; 0x01
    2508:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    250a:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    250c:	21 c0       	rjmp	.+66     	; 0x2550 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    250e:	a9 01       	movw	r20, r18
    2510:	98 01       	movw	r18, r16
    2512:	6d eb       	ldi	r22, 0xBD	; 189
    2514:	77 e3       	ldi	r23, 0x37	; 55
    2516:	86 e0       	ldi	r24, 0x06	; 6
    2518:	9d e3       	ldi	r25, 0x3D	; 61
    251a:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    251e:	2d eb       	ldi	r18, 0xBD	; 189
    2520:	37 e3       	ldi	r19, 0x37	; 55
    2522:	46 e0       	ldi	r20, 0x06	; 6
    2524:	59 e3       	ldi	r21, 0x39	; 57
    2526:	0e 94 1f 13 	call	0x263e	; 0x263e <__divsf3>
    252a:	0e 94 91 13 	call	0x2722	; 0x2722 <__fixunssfsi>
    252e:	f7 01       	movw	r30, r14
    2530:	71 83       	std	Z+1, r23	; 0x01
    2532:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2534:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    2536:	0c c0       	rjmp	.+24     	; 0x2550 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2538:	f7 01       	movw	r30, r14
    253a:	11 82       	std	Z+1, r1	; 0x01
    253c:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    253e:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2540:	07 c0       	rjmp	.+14     	; 0x2550 <calc_initialValue+0xa9c>
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	05 c0       	rjmp	.+10     	; 0x2550 <calc_initialValue+0xa9c>
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	03 c0       	rjmp	.+6      	; 0x2550 <calc_initialValue+0xa9c>
		}
		
	}
	else
	{
		bo_return_value = FALSE;
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	01 c0       	rjmp	.+2      	; 0x2550 <calc_initialValue+0xa9c>
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    254e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		bo_return_value = FALSE;
	}
	return bo_return_value;
    2550:	1f 91       	pop	r17
    2552:	0f 91       	pop	r16
    2554:	ff 90       	pop	r15
    2556:	ef 90       	pop	r14
    2558:	08 95       	ret

0000255a <__subsf3>:
    255a:	50 58       	subi	r21, 0x80	; 128

0000255c <__addsf3>:
    255c:	bb 27       	eor	r27, r27
    255e:	aa 27       	eor	r26, r26
    2560:	0e 94 c5 12 	call	0x258a	; 0x258a <__addsf3x>
    2564:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__fp_round>
    2568:	0e 94 2a 14 	call	0x2854	; 0x2854 <__fp_pscA>
    256c:	38 f0       	brcs	.+14     	; 0x257c <__addsf3+0x20>
    256e:	0e 94 31 14 	call	0x2862	; 0x2862 <__fp_pscB>
    2572:	20 f0       	brcs	.+8      	; 0x257c <__addsf3+0x20>
    2574:	39 f4       	brne	.+14     	; 0x2584 <__addsf3+0x28>
    2576:	9f 3f       	cpi	r25, 0xFF	; 255
    2578:	19 f4       	brne	.+6      	; 0x2580 <__addsf3+0x24>
    257a:	26 f4       	brtc	.+8      	; 0x2584 <__addsf3+0x28>
    257c:	0c 94 27 14 	jmp	0x284e	; 0x284e <__fp_nan>
    2580:	0e f4       	brtc	.+2      	; 0x2584 <__addsf3+0x28>
    2582:	e0 95       	com	r30
    2584:	e7 fb       	bst	r30, 7
    2586:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__fp_inf>

0000258a <__addsf3x>:
    258a:	e9 2f       	mov	r30, r25
    258c:	0e 94 49 14 	call	0x2892	; 0x2892 <__fp_split3>
    2590:	58 f3       	brcs	.-42     	; 0x2568 <__addsf3+0xc>
    2592:	ba 17       	cp	r27, r26
    2594:	62 07       	cpc	r22, r18
    2596:	73 07       	cpc	r23, r19
    2598:	84 07       	cpc	r24, r20
    259a:	95 07       	cpc	r25, r21
    259c:	20 f0       	brcs	.+8      	; 0x25a6 <__addsf3x+0x1c>
    259e:	79 f4       	brne	.+30     	; 0x25be <__addsf3x+0x34>
    25a0:	a6 f5       	brtc	.+104    	; 0x260a <__addsf3x+0x80>
    25a2:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__fp_zero>
    25a6:	0e f4       	brtc	.+2      	; 0x25aa <__addsf3x+0x20>
    25a8:	e0 95       	com	r30
    25aa:	0b 2e       	mov	r0, r27
    25ac:	ba 2f       	mov	r27, r26
    25ae:	a0 2d       	mov	r26, r0
    25b0:	0b 01       	movw	r0, r22
    25b2:	b9 01       	movw	r22, r18
    25b4:	90 01       	movw	r18, r0
    25b6:	0c 01       	movw	r0, r24
    25b8:	ca 01       	movw	r24, r20
    25ba:	a0 01       	movw	r20, r0
    25bc:	11 24       	eor	r1, r1
    25be:	ff 27       	eor	r31, r31
    25c0:	59 1b       	sub	r21, r25
    25c2:	99 f0       	breq	.+38     	; 0x25ea <__addsf3x+0x60>
    25c4:	59 3f       	cpi	r21, 0xF9	; 249
    25c6:	50 f4       	brcc	.+20     	; 0x25dc <__addsf3x+0x52>
    25c8:	50 3e       	cpi	r21, 0xE0	; 224
    25ca:	68 f1       	brcs	.+90     	; 0x2626 <__addsf3x+0x9c>
    25cc:	1a 16       	cp	r1, r26
    25ce:	f0 40       	sbci	r31, 0x00	; 0
    25d0:	a2 2f       	mov	r26, r18
    25d2:	23 2f       	mov	r18, r19
    25d4:	34 2f       	mov	r19, r20
    25d6:	44 27       	eor	r20, r20
    25d8:	58 5f       	subi	r21, 0xF8	; 248
    25da:	f3 cf       	rjmp	.-26     	; 0x25c2 <__addsf3x+0x38>
    25dc:	46 95       	lsr	r20
    25de:	37 95       	ror	r19
    25e0:	27 95       	ror	r18
    25e2:	a7 95       	ror	r26
    25e4:	f0 40       	sbci	r31, 0x00	; 0
    25e6:	53 95       	inc	r21
    25e8:	c9 f7       	brne	.-14     	; 0x25dc <__addsf3x+0x52>
    25ea:	7e f4       	brtc	.+30     	; 0x260a <__addsf3x+0x80>
    25ec:	1f 16       	cp	r1, r31
    25ee:	ba 0b       	sbc	r27, r26
    25f0:	62 0b       	sbc	r22, r18
    25f2:	73 0b       	sbc	r23, r19
    25f4:	84 0b       	sbc	r24, r20
    25f6:	ba f0       	brmi	.+46     	; 0x2626 <__addsf3x+0x9c>
    25f8:	91 50       	subi	r25, 0x01	; 1
    25fa:	a1 f0       	breq	.+40     	; 0x2624 <__addsf3x+0x9a>
    25fc:	ff 0f       	add	r31, r31
    25fe:	bb 1f       	adc	r27, r27
    2600:	66 1f       	adc	r22, r22
    2602:	77 1f       	adc	r23, r23
    2604:	88 1f       	adc	r24, r24
    2606:	c2 f7       	brpl	.-16     	; 0x25f8 <__addsf3x+0x6e>
    2608:	0e c0       	rjmp	.+28     	; 0x2626 <__addsf3x+0x9c>
    260a:	ba 0f       	add	r27, r26
    260c:	62 1f       	adc	r22, r18
    260e:	73 1f       	adc	r23, r19
    2610:	84 1f       	adc	r24, r20
    2612:	48 f4       	brcc	.+18     	; 0x2626 <__addsf3x+0x9c>
    2614:	87 95       	ror	r24
    2616:	77 95       	ror	r23
    2618:	67 95       	ror	r22
    261a:	b7 95       	ror	r27
    261c:	f7 95       	ror	r31
    261e:	9e 3f       	cpi	r25, 0xFE	; 254
    2620:	08 f0       	brcs	.+2      	; 0x2624 <__addsf3x+0x9a>
    2622:	b0 cf       	rjmp	.-160    	; 0x2584 <__addsf3+0x28>
    2624:	93 95       	inc	r25
    2626:	88 0f       	add	r24, r24
    2628:	08 f0       	brcs	.+2      	; 0x262c <__addsf3x+0xa2>
    262a:	99 27       	eor	r25, r25
    262c:	ee 0f       	add	r30, r30
    262e:	97 95       	ror	r25
    2630:	87 95       	ror	r24
    2632:	08 95       	ret

00002634 <__cmpsf2>:
    2634:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__fp_cmp>
    2638:	08 f4       	brcc	.+2      	; 0x263c <__cmpsf2+0x8>
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	08 95       	ret

0000263e <__divsf3>:
    263e:	0e 94 33 13 	call	0x2666	; 0x2666 <__divsf3x>
    2642:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__fp_round>
    2646:	0e 94 31 14 	call	0x2862	; 0x2862 <__fp_pscB>
    264a:	58 f0       	brcs	.+22     	; 0x2662 <__divsf3+0x24>
    264c:	0e 94 2a 14 	call	0x2854	; 0x2854 <__fp_pscA>
    2650:	40 f0       	brcs	.+16     	; 0x2662 <__divsf3+0x24>
    2652:	29 f4       	brne	.+10     	; 0x265e <__divsf3+0x20>
    2654:	5f 3f       	cpi	r21, 0xFF	; 255
    2656:	29 f0       	breq	.+10     	; 0x2662 <__divsf3+0x24>
    2658:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__fp_inf>
    265c:	51 11       	cpse	r21, r1
    265e:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__fp_szero>
    2662:	0c 94 27 14 	jmp	0x284e	; 0x284e <__fp_nan>

00002666 <__divsf3x>:
    2666:	0e 94 49 14 	call	0x2892	; 0x2892 <__fp_split3>
    266a:	68 f3       	brcs	.-38     	; 0x2646 <__divsf3+0x8>

0000266c <__divsf3_pse>:
    266c:	99 23       	and	r25, r25
    266e:	b1 f3       	breq	.-20     	; 0x265c <__divsf3+0x1e>
    2670:	55 23       	and	r21, r21
    2672:	91 f3       	breq	.-28     	; 0x2658 <__divsf3+0x1a>
    2674:	95 1b       	sub	r25, r21
    2676:	55 0b       	sbc	r21, r21
    2678:	bb 27       	eor	r27, r27
    267a:	aa 27       	eor	r26, r26
    267c:	62 17       	cp	r22, r18
    267e:	73 07       	cpc	r23, r19
    2680:	84 07       	cpc	r24, r20
    2682:	38 f0       	brcs	.+14     	; 0x2692 <__divsf3_pse+0x26>
    2684:	9f 5f       	subi	r25, 0xFF	; 255
    2686:	5f 4f       	sbci	r21, 0xFF	; 255
    2688:	22 0f       	add	r18, r18
    268a:	33 1f       	adc	r19, r19
    268c:	44 1f       	adc	r20, r20
    268e:	aa 1f       	adc	r26, r26
    2690:	a9 f3       	breq	.-22     	; 0x267c <__divsf3_pse+0x10>
    2692:	35 d0       	rcall	.+106    	; 0x26fe <__divsf3_pse+0x92>
    2694:	0e 2e       	mov	r0, r30
    2696:	3a f0       	brmi	.+14     	; 0x26a6 <__divsf3_pse+0x3a>
    2698:	e0 e8       	ldi	r30, 0x80	; 128
    269a:	32 d0       	rcall	.+100    	; 0x2700 <__divsf3_pse+0x94>
    269c:	91 50       	subi	r25, 0x01	; 1
    269e:	50 40       	sbci	r21, 0x00	; 0
    26a0:	e6 95       	lsr	r30
    26a2:	00 1c       	adc	r0, r0
    26a4:	ca f7       	brpl	.-14     	; 0x2698 <__divsf3_pse+0x2c>
    26a6:	2b d0       	rcall	.+86     	; 0x26fe <__divsf3_pse+0x92>
    26a8:	fe 2f       	mov	r31, r30
    26aa:	29 d0       	rcall	.+82     	; 0x26fe <__divsf3_pse+0x92>
    26ac:	66 0f       	add	r22, r22
    26ae:	77 1f       	adc	r23, r23
    26b0:	88 1f       	adc	r24, r24
    26b2:	bb 1f       	adc	r27, r27
    26b4:	26 17       	cp	r18, r22
    26b6:	37 07       	cpc	r19, r23
    26b8:	48 07       	cpc	r20, r24
    26ba:	ab 07       	cpc	r26, r27
    26bc:	b0 e8       	ldi	r27, 0x80	; 128
    26be:	09 f0       	breq	.+2      	; 0x26c2 <__divsf3_pse+0x56>
    26c0:	bb 0b       	sbc	r27, r27
    26c2:	80 2d       	mov	r24, r0
    26c4:	bf 01       	movw	r22, r30
    26c6:	ff 27       	eor	r31, r31
    26c8:	93 58       	subi	r25, 0x83	; 131
    26ca:	5f 4f       	sbci	r21, 0xFF	; 255
    26cc:	3a f0       	brmi	.+14     	; 0x26dc <__divsf3_pse+0x70>
    26ce:	9e 3f       	cpi	r25, 0xFE	; 254
    26d0:	51 05       	cpc	r21, r1
    26d2:	78 f0       	brcs	.+30     	; 0x26f2 <__divsf3_pse+0x86>
    26d4:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__fp_inf>
    26d8:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__fp_szero>
    26dc:	5f 3f       	cpi	r21, 0xFF	; 255
    26de:	e4 f3       	brlt	.-8      	; 0x26d8 <__divsf3_pse+0x6c>
    26e0:	98 3e       	cpi	r25, 0xE8	; 232
    26e2:	d4 f3       	brlt	.-12     	; 0x26d8 <__divsf3_pse+0x6c>
    26e4:	86 95       	lsr	r24
    26e6:	77 95       	ror	r23
    26e8:	67 95       	ror	r22
    26ea:	b7 95       	ror	r27
    26ec:	f7 95       	ror	r31
    26ee:	9f 5f       	subi	r25, 0xFF	; 255
    26f0:	c9 f7       	brne	.-14     	; 0x26e4 <__divsf3_pse+0x78>
    26f2:	88 0f       	add	r24, r24
    26f4:	91 1d       	adc	r25, r1
    26f6:	96 95       	lsr	r25
    26f8:	87 95       	ror	r24
    26fa:	97 f9       	bld	r25, 7
    26fc:	08 95       	ret
    26fe:	e1 e0       	ldi	r30, 0x01	; 1
    2700:	66 0f       	add	r22, r22
    2702:	77 1f       	adc	r23, r23
    2704:	88 1f       	adc	r24, r24
    2706:	bb 1f       	adc	r27, r27
    2708:	62 17       	cp	r22, r18
    270a:	73 07       	cpc	r23, r19
    270c:	84 07       	cpc	r24, r20
    270e:	ba 07       	cpc	r27, r26
    2710:	20 f0       	brcs	.+8      	; 0x271a <__divsf3_pse+0xae>
    2712:	62 1b       	sub	r22, r18
    2714:	73 0b       	sbc	r23, r19
    2716:	84 0b       	sbc	r24, r20
    2718:	ba 0b       	sbc	r27, r26
    271a:	ee 1f       	adc	r30, r30
    271c:	88 f7       	brcc	.-30     	; 0x2700 <__divsf3_pse+0x94>
    271e:	e0 95       	com	r30
    2720:	08 95       	ret

00002722 <__fixunssfsi>:
    2722:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__fp_splitA>
    2726:	88 f0       	brcs	.+34     	; 0x274a <__fixunssfsi+0x28>
    2728:	9f 57       	subi	r25, 0x7F	; 127
    272a:	98 f0       	brcs	.+38     	; 0x2752 <__fixunssfsi+0x30>
    272c:	b9 2f       	mov	r27, r25
    272e:	99 27       	eor	r25, r25
    2730:	b7 51       	subi	r27, 0x17	; 23
    2732:	b0 f0       	brcs	.+44     	; 0x2760 <__fixunssfsi+0x3e>
    2734:	e1 f0       	breq	.+56     	; 0x276e <__fixunssfsi+0x4c>
    2736:	66 0f       	add	r22, r22
    2738:	77 1f       	adc	r23, r23
    273a:	88 1f       	adc	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	1a f0       	brmi	.+6      	; 0x2746 <__fixunssfsi+0x24>
    2740:	ba 95       	dec	r27
    2742:	c9 f7       	brne	.-14     	; 0x2736 <__fixunssfsi+0x14>
    2744:	14 c0       	rjmp	.+40     	; 0x276e <__fixunssfsi+0x4c>
    2746:	b1 30       	cpi	r27, 0x01	; 1
    2748:	91 f0       	breq	.+36     	; 0x276e <__fixunssfsi+0x4c>
    274a:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <__fp_zero>
    274e:	b1 e0       	ldi	r27, 0x01	; 1
    2750:	08 95       	ret
    2752:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__fp_zero>
    2756:	67 2f       	mov	r22, r23
    2758:	78 2f       	mov	r23, r24
    275a:	88 27       	eor	r24, r24
    275c:	b8 5f       	subi	r27, 0xF8	; 248
    275e:	39 f0       	breq	.+14     	; 0x276e <__fixunssfsi+0x4c>
    2760:	b9 3f       	cpi	r27, 0xF9	; 249
    2762:	cc f3       	brlt	.-14     	; 0x2756 <__fixunssfsi+0x34>
    2764:	86 95       	lsr	r24
    2766:	77 95       	ror	r23
    2768:	67 95       	ror	r22
    276a:	b3 95       	inc	r27
    276c:	d9 f7       	brne	.-10     	; 0x2764 <__fixunssfsi+0x42>
    276e:	3e f4       	brtc	.+14     	; 0x277e <__fixunssfsi+0x5c>
    2770:	90 95       	com	r25
    2772:	80 95       	com	r24
    2774:	70 95       	com	r23
    2776:	61 95       	neg	r22
    2778:	7f 4f       	sbci	r23, 0xFF	; 255
    277a:	8f 4f       	sbci	r24, 0xFF	; 255
    277c:	9f 4f       	sbci	r25, 0xFF	; 255
    277e:	08 95       	ret

00002780 <__floatunsisf>:
    2780:	e8 94       	clt
    2782:	09 c0       	rjmp	.+18     	; 0x2796 <__floatsisf+0x12>

00002784 <__floatsisf>:
    2784:	97 fb       	bst	r25, 7
    2786:	3e f4       	brtc	.+14     	; 0x2796 <__floatsisf+0x12>
    2788:	90 95       	com	r25
    278a:	80 95       	com	r24
    278c:	70 95       	com	r23
    278e:	61 95       	neg	r22
    2790:	7f 4f       	sbci	r23, 0xFF	; 255
    2792:	8f 4f       	sbci	r24, 0xFF	; 255
    2794:	9f 4f       	sbci	r25, 0xFF	; 255
    2796:	99 23       	and	r25, r25
    2798:	a9 f0       	breq	.+42     	; 0x27c4 <__floatsisf+0x40>
    279a:	f9 2f       	mov	r31, r25
    279c:	96 e9       	ldi	r25, 0x96	; 150
    279e:	bb 27       	eor	r27, r27
    27a0:	93 95       	inc	r25
    27a2:	f6 95       	lsr	r31
    27a4:	87 95       	ror	r24
    27a6:	77 95       	ror	r23
    27a8:	67 95       	ror	r22
    27aa:	b7 95       	ror	r27
    27ac:	f1 11       	cpse	r31, r1
    27ae:	f8 cf       	rjmp	.-16     	; 0x27a0 <__floatsisf+0x1c>
    27b0:	fa f4       	brpl	.+62     	; 0x27f0 <__floatsisf+0x6c>
    27b2:	bb 0f       	add	r27, r27
    27b4:	11 f4       	brne	.+4      	; 0x27ba <__floatsisf+0x36>
    27b6:	60 ff       	sbrs	r22, 0
    27b8:	1b c0       	rjmp	.+54     	; 0x27f0 <__floatsisf+0x6c>
    27ba:	6f 5f       	subi	r22, 0xFF	; 255
    27bc:	7f 4f       	sbci	r23, 0xFF	; 255
    27be:	8f 4f       	sbci	r24, 0xFF	; 255
    27c0:	9f 4f       	sbci	r25, 0xFF	; 255
    27c2:	16 c0       	rjmp	.+44     	; 0x27f0 <__floatsisf+0x6c>
    27c4:	88 23       	and	r24, r24
    27c6:	11 f0       	breq	.+4      	; 0x27cc <__floatsisf+0x48>
    27c8:	96 e9       	ldi	r25, 0x96	; 150
    27ca:	11 c0       	rjmp	.+34     	; 0x27ee <__floatsisf+0x6a>
    27cc:	77 23       	and	r23, r23
    27ce:	21 f0       	breq	.+8      	; 0x27d8 <__floatsisf+0x54>
    27d0:	9e e8       	ldi	r25, 0x8E	; 142
    27d2:	87 2f       	mov	r24, r23
    27d4:	76 2f       	mov	r23, r22
    27d6:	05 c0       	rjmp	.+10     	; 0x27e2 <__floatsisf+0x5e>
    27d8:	66 23       	and	r22, r22
    27da:	71 f0       	breq	.+28     	; 0x27f8 <__floatsisf+0x74>
    27dc:	96 e8       	ldi	r25, 0x86	; 134
    27de:	86 2f       	mov	r24, r22
    27e0:	70 e0       	ldi	r23, 0x00	; 0
    27e2:	60 e0       	ldi	r22, 0x00	; 0
    27e4:	2a f0       	brmi	.+10     	; 0x27f0 <__floatsisf+0x6c>
    27e6:	9a 95       	dec	r25
    27e8:	66 0f       	add	r22, r22
    27ea:	77 1f       	adc	r23, r23
    27ec:	88 1f       	adc	r24, r24
    27ee:	da f7       	brpl	.-10     	; 0x27e6 <__floatsisf+0x62>
    27f0:	88 0f       	add	r24, r24
    27f2:	96 95       	lsr	r25
    27f4:	87 95       	ror	r24
    27f6:	97 f9       	bld	r25, 7
    27f8:	08 95       	ret

000027fa <__fp_cmp>:
    27fa:	99 0f       	add	r25, r25
    27fc:	00 08       	sbc	r0, r0
    27fe:	55 0f       	add	r21, r21
    2800:	aa 0b       	sbc	r26, r26
    2802:	e0 e8       	ldi	r30, 0x80	; 128
    2804:	fe ef       	ldi	r31, 0xFE	; 254
    2806:	16 16       	cp	r1, r22
    2808:	17 06       	cpc	r1, r23
    280a:	e8 07       	cpc	r30, r24
    280c:	f9 07       	cpc	r31, r25
    280e:	c0 f0       	brcs	.+48     	; 0x2840 <__fp_cmp+0x46>
    2810:	12 16       	cp	r1, r18
    2812:	13 06       	cpc	r1, r19
    2814:	e4 07       	cpc	r30, r20
    2816:	f5 07       	cpc	r31, r21
    2818:	98 f0       	brcs	.+38     	; 0x2840 <__fp_cmp+0x46>
    281a:	62 1b       	sub	r22, r18
    281c:	73 0b       	sbc	r23, r19
    281e:	84 0b       	sbc	r24, r20
    2820:	95 0b       	sbc	r25, r21
    2822:	39 f4       	brne	.+14     	; 0x2832 <__fp_cmp+0x38>
    2824:	0a 26       	eor	r0, r26
    2826:	61 f0       	breq	.+24     	; 0x2840 <__fp_cmp+0x46>
    2828:	23 2b       	or	r18, r19
    282a:	24 2b       	or	r18, r20
    282c:	25 2b       	or	r18, r21
    282e:	21 f4       	brne	.+8      	; 0x2838 <__fp_cmp+0x3e>
    2830:	08 95       	ret
    2832:	0a 26       	eor	r0, r26
    2834:	09 f4       	brne	.+2      	; 0x2838 <__fp_cmp+0x3e>
    2836:	a1 40       	sbci	r26, 0x01	; 1
    2838:	a6 95       	lsr	r26
    283a:	8f ef       	ldi	r24, 0xFF	; 255
    283c:	81 1d       	adc	r24, r1
    283e:	81 1d       	adc	r24, r1
    2840:	08 95       	ret

00002842 <__fp_inf>:
    2842:	97 f9       	bld	r25, 7
    2844:	9f 67       	ori	r25, 0x7F	; 127
    2846:	80 e8       	ldi	r24, 0x80	; 128
    2848:	70 e0       	ldi	r23, 0x00	; 0
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	08 95       	ret

0000284e <__fp_nan>:
    284e:	9f ef       	ldi	r25, 0xFF	; 255
    2850:	80 ec       	ldi	r24, 0xC0	; 192
    2852:	08 95       	ret

00002854 <__fp_pscA>:
    2854:	00 24       	eor	r0, r0
    2856:	0a 94       	dec	r0
    2858:	16 16       	cp	r1, r22
    285a:	17 06       	cpc	r1, r23
    285c:	18 06       	cpc	r1, r24
    285e:	09 06       	cpc	r0, r25
    2860:	08 95       	ret

00002862 <__fp_pscB>:
    2862:	00 24       	eor	r0, r0
    2864:	0a 94       	dec	r0
    2866:	12 16       	cp	r1, r18
    2868:	13 06       	cpc	r1, r19
    286a:	14 06       	cpc	r1, r20
    286c:	05 06       	cpc	r0, r21
    286e:	08 95       	ret

00002870 <__fp_round>:
    2870:	09 2e       	mov	r0, r25
    2872:	03 94       	inc	r0
    2874:	00 0c       	add	r0, r0
    2876:	11 f4       	brne	.+4      	; 0x287c <__fp_round+0xc>
    2878:	88 23       	and	r24, r24
    287a:	52 f0       	brmi	.+20     	; 0x2890 <__fp_round+0x20>
    287c:	bb 0f       	add	r27, r27
    287e:	40 f4       	brcc	.+16     	; 0x2890 <__fp_round+0x20>
    2880:	bf 2b       	or	r27, r31
    2882:	11 f4       	brne	.+4      	; 0x2888 <__fp_round+0x18>
    2884:	60 ff       	sbrs	r22, 0
    2886:	04 c0       	rjmp	.+8      	; 0x2890 <__fp_round+0x20>
    2888:	6f 5f       	subi	r22, 0xFF	; 255
    288a:	7f 4f       	sbci	r23, 0xFF	; 255
    288c:	8f 4f       	sbci	r24, 0xFF	; 255
    288e:	9f 4f       	sbci	r25, 0xFF	; 255
    2890:	08 95       	ret

00002892 <__fp_split3>:
    2892:	57 fd       	sbrc	r21, 7
    2894:	90 58       	subi	r25, 0x80	; 128
    2896:	44 0f       	add	r20, r20
    2898:	55 1f       	adc	r21, r21
    289a:	59 f0       	breq	.+22     	; 0x28b2 <__fp_splitA+0x10>
    289c:	5f 3f       	cpi	r21, 0xFF	; 255
    289e:	71 f0       	breq	.+28     	; 0x28bc <__fp_splitA+0x1a>
    28a0:	47 95       	ror	r20

000028a2 <__fp_splitA>:
    28a2:	88 0f       	add	r24, r24
    28a4:	97 fb       	bst	r25, 7
    28a6:	99 1f       	adc	r25, r25
    28a8:	61 f0       	breq	.+24     	; 0x28c2 <__fp_splitA+0x20>
    28aa:	9f 3f       	cpi	r25, 0xFF	; 255
    28ac:	79 f0       	breq	.+30     	; 0x28cc <__fp_splitA+0x2a>
    28ae:	87 95       	ror	r24
    28b0:	08 95       	ret
    28b2:	12 16       	cp	r1, r18
    28b4:	13 06       	cpc	r1, r19
    28b6:	14 06       	cpc	r1, r20
    28b8:	55 1f       	adc	r21, r21
    28ba:	f2 cf       	rjmp	.-28     	; 0x28a0 <__fp_split3+0xe>
    28bc:	46 95       	lsr	r20
    28be:	f1 df       	rcall	.-30     	; 0x28a2 <__fp_splitA>
    28c0:	08 c0       	rjmp	.+16     	; 0x28d2 <__fp_splitA+0x30>
    28c2:	16 16       	cp	r1, r22
    28c4:	17 06       	cpc	r1, r23
    28c6:	18 06       	cpc	r1, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	f1 cf       	rjmp	.-30     	; 0x28ae <__fp_splitA+0xc>
    28cc:	86 95       	lsr	r24
    28ce:	71 05       	cpc	r23, r1
    28d0:	61 05       	cpc	r22, r1
    28d2:	08 94       	sec
    28d4:	08 95       	ret

000028d6 <__fp_zero>:
    28d6:	e8 94       	clt

000028d8 <__fp_szero>:
    28d8:	bb 27       	eor	r27, r27
    28da:	66 27       	eor	r22, r22
    28dc:	77 27       	eor	r23, r23
    28de:	cb 01       	movw	r24, r22
    28e0:	97 f9       	bld	r25, 7
    28e2:	08 95       	ret

000028e4 <__mulsf3>:
    28e4:	0e 94 85 14 	call	0x290a	; 0x290a <__mulsf3x>
    28e8:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__fp_round>
    28ec:	0e 94 2a 14 	call	0x2854	; 0x2854 <__fp_pscA>
    28f0:	38 f0       	brcs	.+14     	; 0x2900 <__mulsf3+0x1c>
    28f2:	0e 94 31 14 	call	0x2862	; 0x2862 <__fp_pscB>
    28f6:	20 f0       	brcs	.+8      	; 0x2900 <__mulsf3+0x1c>
    28f8:	95 23       	and	r25, r21
    28fa:	11 f0       	breq	.+4      	; 0x2900 <__mulsf3+0x1c>
    28fc:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__fp_inf>
    2900:	0c 94 27 14 	jmp	0x284e	; 0x284e <__fp_nan>
    2904:	11 24       	eor	r1, r1
    2906:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__fp_szero>

0000290a <__mulsf3x>:
    290a:	0e 94 49 14 	call	0x2892	; 0x2892 <__fp_split3>
    290e:	70 f3       	brcs	.-36     	; 0x28ec <__mulsf3+0x8>

00002910 <__mulsf3_pse>:
    2910:	95 9f       	mul	r25, r21
    2912:	c1 f3       	breq	.-16     	; 0x2904 <__mulsf3+0x20>
    2914:	95 0f       	add	r25, r21
    2916:	50 e0       	ldi	r21, 0x00	; 0
    2918:	55 1f       	adc	r21, r21
    291a:	62 9f       	mul	r22, r18
    291c:	f0 01       	movw	r30, r0
    291e:	72 9f       	mul	r23, r18
    2920:	bb 27       	eor	r27, r27
    2922:	f0 0d       	add	r31, r0
    2924:	b1 1d       	adc	r27, r1
    2926:	63 9f       	mul	r22, r19
    2928:	aa 27       	eor	r26, r26
    292a:	f0 0d       	add	r31, r0
    292c:	b1 1d       	adc	r27, r1
    292e:	aa 1f       	adc	r26, r26
    2930:	64 9f       	mul	r22, r20
    2932:	66 27       	eor	r22, r22
    2934:	b0 0d       	add	r27, r0
    2936:	a1 1d       	adc	r26, r1
    2938:	66 1f       	adc	r22, r22
    293a:	82 9f       	mul	r24, r18
    293c:	22 27       	eor	r18, r18
    293e:	b0 0d       	add	r27, r0
    2940:	a1 1d       	adc	r26, r1
    2942:	62 1f       	adc	r22, r18
    2944:	73 9f       	mul	r23, r19
    2946:	b0 0d       	add	r27, r0
    2948:	a1 1d       	adc	r26, r1
    294a:	62 1f       	adc	r22, r18
    294c:	83 9f       	mul	r24, r19
    294e:	a0 0d       	add	r26, r0
    2950:	61 1d       	adc	r22, r1
    2952:	22 1f       	adc	r18, r18
    2954:	74 9f       	mul	r23, r20
    2956:	33 27       	eor	r19, r19
    2958:	a0 0d       	add	r26, r0
    295a:	61 1d       	adc	r22, r1
    295c:	23 1f       	adc	r18, r19
    295e:	84 9f       	mul	r24, r20
    2960:	60 0d       	add	r22, r0
    2962:	21 1d       	adc	r18, r1
    2964:	82 2f       	mov	r24, r18
    2966:	76 2f       	mov	r23, r22
    2968:	6a 2f       	mov	r22, r26
    296a:	11 24       	eor	r1, r1
    296c:	9f 57       	subi	r25, 0x7F	; 127
    296e:	50 40       	sbci	r21, 0x00	; 0
    2970:	9a f0       	brmi	.+38     	; 0x2998 <__mulsf3_pse+0x88>
    2972:	f1 f0       	breq	.+60     	; 0x29b0 <__mulsf3_pse+0xa0>
    2974:	88 23       	and	r24, r24
    2976:	4a f0       	brmi	.+18     	; 0x298a <__mulsf3_pse+0x7a>
    2978:	ee 0f       	add	r30, r30
    297a:	ff 1f       	adc	r31, r31
    297c:	bb 1f       	adc	r27, r27
    297e:	66 1f       	adc	r22, r22
    2980:	77 1f       	adc	r23, r23
    2982:	88 1f       	adc	r24, r24
    2984:	91 50       	subi	r25, 0x01	; 1
    2986:	50 40       	sbci	r21, 0x00	; 0
    2988:	a9 f7       	brne	.-22     	; 0x2974 <__mulsf3_pse+0x64>
    298a:	9e 3f       	cpi	r25, 0xFE	; 254
    298c:	51 05       	cpc	r21, r1
    298e:	80 f0       	brcs	.+32     	; 0x29b0 <__mulsf3_pse+0xa0>
    2990:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__fp_inf>
    2994:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__fp_szero>
    2998:	5f 3f       	cpi	r21, 0xFF	; 255
    299a:	e4 f3       	brlt	.-8      	; 0x2994 <__mulsf3_pse+0x84>
    299c:	98 3e       	cpi	r25, 0xE8	; 232
    299e:	d4 f3       	brlt	.-12     	; 0x2994 <__mulsf3_pse+0x84>
    29a0:	86 95       	lsr	r24
    29a2:	77 95       	ror	r23
    29a4:	67 95       	ror	r22
    29a6:	b7 95       	ror	r27
    29a8:	f7 95       	ror	r31
    29aa:	e7 95       	ror	r30
    29ac:	9f 5f       	subi	r25, 0xFF	; 255
    29ae:	c1 f7       	brne	.-16     	; 0x29a0 <__mulsf3_pse+0x90>
    29b0:	fe 2b       	or	r31, r30
    29b2:	88 0f       	add	r24, r24
    29b4:	91 1d       	adc	r25, r1
    29b6:	96 95       	lsr	r25
    29b8:	87 95       	ror	r24
    29ba:	97 f9       	bld	r25, 7
    29bc:	08 95       	ret

000029be <__tablejump2__>:
    29be:	ee 0f       	add	r30, r30
    29c0:	ff 1f       	adc	r31, r31
    29c2:	05 90       	lpm	r0, Z+
    29c4:	f4 91       	lpm	r31, Z
    29c6:	e0 2d       	mov	r30, r0
    29c8:	09 94       	ijmp

000029ca <_exit>:
    29ca:	f8 94       	cli

000029cc <__stop_program>:
    29cc:	ff cf       	rjmp	.-2      	; 0x29cc <__stop_program>
