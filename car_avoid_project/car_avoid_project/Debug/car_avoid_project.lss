
car_avoid_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000367c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000367c  00003710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800076  00800076  00003726  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003726  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00003794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004cc5  00000000  00000000  00003aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010f9  00000000  00000000  000087b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000039f0  00000000  00000000  000098aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b50  00000000  00000000  0000d29c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000194f  00000000  00000000  0000ddec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005aa2  00000000  00000000  0000f73b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  000151dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__vector_1>
       8:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__vector_2>
       c:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__vector_3>
      10:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__vector_4>
      14:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__vector_9>
      28:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__vector_10>
      2c:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	80 0c       	add	r8, r0
      56:	85 0c       	add	r8, r5
      58:	8b 0c       	add	r8, r11
      5a:	3b 0d       	add	r19, r11
      5c:	91 0c       	add	r9, r1
      5e:	3b 0d       	add	r19, r11
      60:	97 0c       	add	r9, r7
      62:	9d 0c       	add	r9, r13
      64:	a3 0c       	add	r10, r3
      66:	a9 0c       	add	r10, r9
      68:	c3 0c       	add	r12, r3
      6a:	c8 0c       	add	r12, r8
      6c:	ce 0c       	add	r12, r14
      6e:	43 0d       	add	r20, r3
      70:	d4 0c       	add	r13, r4
      72:	43 0d       	add	r20, r3
      74:	da 0c       	add	r13, r10
      76:	e0 0c       	add	r14, r0
      78:	e6 0c       	add	r14, r6
      7a:	ec 0c       	add	r14, r12
      7c:	01 0d       	add	r16, r1
      7e:	06 0d       	add	r16, r6
      80:	0c 0d       	add	r16, r12
      82:	12 0d       	add	r17, r2
      84:	18 0d       	add	r17, r8
      86:	1e 0d       	add	r17, r14
      88:	24 0d       	add	r18, r4
      8a:	2a 0d       	add	r18, r10

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	ec e7       	ldi	r30, 0x7C	; 124
      a0:	f6 e3       	ldi	r31, 0x36	; 54
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a6 37       	cpi	r26, 0x76	; 118
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	a6 e7       	ldi	r26, 0x76	; 118
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ae 39       	cpi	r26, 0x9E	; 158
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 23 07 	call	0xe46	; 0xe46 <main>
      c2:	0c 94 3c 1b 	jmp	0x3678	; 0x3678 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <Icu_init>:
 *				ENU_ICU_INVALID_INPUT		: in case of invalid passing argument Ex. timer channel id - null pointer - value out of range
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_init(const str_icu_configtype_t * str_icu_configtype)
{	
      ca:	ef 92       	push	r14
      cc:	ff 92       	push	r15
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	29 97       	sbiw	r28, 0x09	; 9
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	enu_intrrupt_id_t	enu_intrrupt_id		= ENU_MAX_INT_ID;
	enu_trigger_mode_t	enu_trigger_mode	= ENU_MAX_TRIGGER_MODE;
	enu_icu_error_t		enu_icu_error		= ENU_ICU_VALID;
	str_tmr_config_t	str_tmr_config;
	if(str_icu_configtype->enu_icu_clock < ENU_ICU_MAX_CLOCK)
      e6:	fc 01       	movw	r30, r24
      e8:	22 81       	ldd	r18, Z+2	; 0x02
      ea:	28 30       	cpi	r18, 0x08	; 8
      ec:	08 f0       	brcs	.+2      	; 0xf0 <Icu_init+0x26>
      ee:	4a c0       	rjmp	.+148    	; 0x184 <Icu_init+0xba>
	{
		if(str_icu_configtype->enu_icu_edgetype < ENU_ICU_MAX_EDGETYPE)
      f0:	23 81       	ldd	r18, Z+3	; 0x03
      f2:	22 30       	cpi	r18, 0x02	; 2
      f4:	08 f0       	brcs	.+2      	; 0xf8 <Icu_init+0x2e>
      f6:	48 c0       	rjmp	.+144    	; 0x188 <Icu_init+0xbe>
		{
			if (str_icu_configtype->enu_icu_channel_id < ENU_ICU_MAX_CHANNEL)
      f8:	30 81       	ld	r19, Z
      fa:	33 30       	cpi	r19, 0x03	; 3
      fc:	08 f0       	brcs	.+2      	; 0x100 <Icu_init+0x36>
      fe:	46 c0       	rjmp	.+140    	; 0x18c <Icu_init+0xc2>
			{
				if (str_icu_configtype->enu_timer_channel_id < ENU_TIMER_MAX_CHANNEL)
     100:	41 81       	ldd	r20, Z+1	; 0x01
     102:	43 30       	cpi	r20, 0x03	; 3
     104:	08 f0       	brcs	.+2      	; 0x108 <Icu_init+0x3e>
     106:	44 c0       	rjmp	.+136    	; 0x190 <Icu_init+0xc6>
				{
					if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID0)
     108:	31 11       	cpse	r19, r1
     10a:	04 c0       	rjmp	.+8      	; 0x114 <Icu_init+0x4a>
					{
						enu_intrrupt_id = ENU_INT0_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_0;
     10c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <gl_u8_interrupt_id>
			{
				if (str_icu_configtype->enu_timer_channel_id < ENU_TIMER_MAX_CHANNEL)
				{
					if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID0)
					{
						enu_intrrupt_id = ENU_INT0_ID;
     110:	f1 2c       	mov	r15, r1
     112:	0d c0       	rjmp	.+26     	; 0x12e <Icu_init+0x64>
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_0;
					}
					else if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID1)
     114:	31 30       	cpi	r19, 0x01	; 1
     116:	29 f4       	brne	.+10     	; 0x122 <Icu_init+0x58>
					{
						enu_intrrupt_id = ENU_INT1_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_1 ;
     118:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <gl_u8_interrupt_id>
						enu_intrrupt_id = ENU_INT0_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_0;
					}
					else if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID1)
					{
						enu_intrrupt_id = ENU_INT1_ID;
     11c:	ff 24       	eor	r15, r15
     11e:	f3 94       	inc	r15
     120:	06 c0       	rjmp	.+12     	; 0x12e <Icu_init+0x64>
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_1 ;
					} 
					else
					{
						enu_intrrupt_id = ENU_INT2_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_2 ;
     122:	32 e0       	ldi	r19, 0x02	; 2
     124:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <gl_u8_interrupt_id>
						enu_intrrupt_id = ENU_INT1_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_1 ;
					} 
					else
					{
						enu_intrrupt_id = ENU_INT2_ID;
     128:	68 94       	set
     12a:	ff 24       	eor	r15, r15
     12c:	f1 f8       	bld	r15, 1
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_2 ;
					}
					if(str_icu_configtype->enu_icu_edgetype == ENU_ICU_FALLING )
     12e:	21 11       	cpse	r18, r1
     130:	04 c0       	rjmp	.+8      	; 0x13a <Icu_init+0x70>
					{
						enu_trigger_mode = ENU_FALLING;
     132:	68 94       	set
     134:	ee 24       	eor	r14, r14
     136:	e1 f8       	bld	r14, 1
     138:	04 c0       	rjmp	.+8      	; 0x142 <Icu_init+0x78>
					}
					else
					{
						enu_trigger_mode = ENU_RISING;
     13a:	0f 2e       	mov	r0, r31
     13c:	f3 e0       	ldi	r31, 0x03	; 3
     13e:	ef 2e       	mov	r14, r31
     140:	f0 2d       	mov	r31, r0
     142:	8c 01       	movw	r16, r24
					}

					str_tmr_config.enu_tmr_channel_id		= str_icu_configtype->enu_timer_channel_id;
     144:	49 83       	std	Y+1, r20	; 0x01
					str_tmr_config.enu_tmr_mode				= ENU_TMR_NORMAL_MODE;
     146:	1a 82       	std	Y+2, r1	; 0x02
					str_tmr_config.enu_tmr_cmp_mode			= ENU_TMR_CMP_DISCONNECT;
     148:	1c 82       	std	Y+4, r1	; 0x04
					str_tmr_config.enu_tmr_clk				= (enu_tmr_clk_t) str_icu_configtype->enu_icu_clock;
     14a:	fc 01       	movw	r30, r24
     14c:	82 81       	ldd	r24, Z+2	; 0x02
     14e:	8d 83       	std	Y+5, r24	; 0x05
					str_tmr_config.enu_tmr_interrupt_state	= ENU_TMR_INT_DISABLE;
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	8b 83       	std	Y+3, r24	; 0x03
					str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
     154:	19 86       	std	Y+9, r1	; 0x09
     156:	18 86       	std	Y+8, r1	; 0x08
					str_tmr_config.u16_tmr_initial_value	= ZERO_VALUE;
     158:	1f 82       	std	Y+7, r1	; 0x07
     15a:	1e 82       	std	Y+6, r1	; 0x06
					gl_u8_timer_id = str_icu_configtype->enu_timer_channel_id;
     15c:	81 81       	ldd	r24, Z+1	; 0x01
     15e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					timer_init(&str_tmr_config);
     162:	ce 01       	movw	r24, r28
     164:	01 96       	adiw	r24, 0x01	; 1
     166:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <timer_init>
					timer_start(str_icu_configtype->enu_timer_channel_id);
     16a:	f8 01       	movw	r30, r16
     16c:	81 81       	ldd	r24, Z+1	; 0x01
     16e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <timer_start>
					Init_external_interrupt (enu_intrrupt_id,enu_trigger_mode);
     172:	6e 2d       	mov	r22, r14
     174:	8f 2d       	mov	r24, r15
     176:	0e 94 f7 08 	call	0x11ee	; 0x11ee <Init_external_interrupt>
					enable_external_interrupt(enu_intrrupt_id);
     17a:	8f 2d       	mov	r24, r15
     17c:	0e 94 29 09 	call	0x1252	; 0x1252 <enable_external_interrupt>
 */
enu_icu_error_t Icu_init(const str_icu_configtype_t * str_icu_configtype)
{	
	enu_intrrupt_id_t	enu_intrrupt_id		= ENU_MAX_INT_ID;
	enu_trigger_mode_t	enu_trigger_mode	= ENU_MAX_TRIGGER_MODE;
	enu_icu_error_t		enu_icu_error		= ENU_ICU_VALID;
     180:	84 e0       	ldi	r24, 0x04	; 4
     182:	07 c0       	rjmp	.+14     	; 0x192 <Icu_init+0xc8>
			enu_icu_error = ENU_ICU_INVALID_EDGETYP;
		}
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CLOCK;
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	05 c0       	rjmp	.+10     	; 0x192 <Icu_init+0xc8>
				enu_icu_error = ENU_ICU_MAX_CHANNEL;
			}
		}
		else
		{
			enu_icu_error = ENU_ICU_INVALID_EDGETYP;
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	03 c0       	rjmp	.+6      	; 0x192 <Icu_init+0xc8>
					enu_icu_error = ENU_TIMER_MAX_CHANNEL;
				}
			}
			else
			{
				enu_icu_error = ENU_ICU_MAX_CHANNEL;
     18c:	83 e0       	ldi	r24, 0x03	; 3
     18e:	01 c0       	rjmp	.+2      	; 0x192 <Icu_init+0xc8>
					Init_external_interrupt (enu_intrrupt_id,enu_trigger_mode);
					enable_external_interrupt(enu_intrrupt_id);
				}
				else
				{
					enu_icu_error = ENU_TIMER_MAX_CHANNEL;
     190:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CLOCK;
	}
	return enu_icu_error;
}
     192:	29 96       	adiw	r28, 0x09	; 9
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	de bf       	out	0x3e, r29	; 62
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	cd bf       	out	0x3d, r28	; 61
     19e:	df 91       	pop	r29
     1a0:	cf 91       	pop	r28
     1a2:	1f 91       	pop	r17
     1a4:	0f 91       	pop	r16
     1a6:	ff 90       	pop	r15
     1a8:	ef 90       	pop	r14
     1aa:	08 95       	ret

000001ac <Icu_setCallBack>:
 *				ENU_ICU_INVALID_INPUT		: in case of invalid passing argument Ex. timer channel id - null pointer - value out of range
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
     1ac:	9c 01       	movw	r18, r24
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_0)
     1ae:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <gl_u8_interrupt_id>
     1b2:	91 11       	cpse	r25, r1
     1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <Icu_setCallBack+0x14>
	{
		interrupt0_set_callback (a_ptr);
     1b6:	c9 01       	movw	r24, r18
     1b8:	0e 94 44 09 	call	0x1288	; 0x1288 <interrupt0_set_callback>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     1bc:	84 e0       	ldi	r24, 0x04	; 4
     1be:	08 95       	ret
	if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_0)
	{
		interrupt0_set_callback (a_ptr);
	}
	else if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_1)
     1c0:	91 30       	cpi	r25, 0x01	; 1
     1c2:	29 f4       	brne	.+10     	; 0x1ce <Icu_setCallBack+0x22>
	{
		interrupt1_set_callback (a_ptr);
     1c4:	c9 01       	movw	r24, r18
     1c6:	0e 94 4e 09 	call	0x129c	; 0x129c <interrupt1_set_callback>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     1ca:	84 e0       	ldi	r24, 0x04	; 4
     1cc:	08 95       	ret
	}
	else if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_1)
	{
		interrupt1_set_callback (a_ptr);
	}
	else if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_2)
     1ce:	92 30       	cpi	r25, 0x02	; 2
     1d0:	29 f4       	brne	.+10     	; 0x1dc <Icu_setCallBack+0x30>
	{
		interrupt2_set_callback (a_ptr);
     1d2:	c9 01       	movw	r24, r18
     1d4:	0e 94 58 09 	call	0x12b0	; 0x12b0 <interrupt2_set_callback>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     1d8:	84 e0       	ldi	r24, 0x04	; 4
     1da:	08 95       	ret
	{
		interrupt2_set_callback (a_ptr);
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CHANNEL;
     1dc:	83 e0       	ldi	r24, 0x03	; 3
	}
	return enu_icu_error;
	
}
     1de:	08 95       	ret

000001e0 <Icu_setEdgeDetectionType>:
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setEdgeDetectionType(const enu_icu_edgetype_t enu_icu_edgetype)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	if (enu_icu_edgetype < ENU_ICU_MAX_EDGETYPE)
     1e0:	82 30       	cpi	r24, 0x02	; 2
     1e2:	90 f4       	brcc	.+36     	; 0x208 <Icu_setEdgeDetectionType+0x28>
	{
		if((gl_u8_interrupt_id < MAX_INTERRUPT_CHANNEL))
     1e4:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <gl_u8_interrupt_id>
     1e8:	23 30       	cpi	r18, 0x03	; 3
     1ea:	80 f4       	brcc	.+32     	; 0x20c <Icu_setEdgeDetectionType+0x2c>
		{
			if (enu_icu_edgetype == ENU_ICU_FALLING)
     1ec:	81 11       	cpse	r24, r1
     1ee:	06 c0       	rjmp	.+12     	; 0x1fc <Icu_setEdgeDetectionType+0x1c>
			{
				Init_external_interrupt(gl_u8_interrupt_id,ENU_FALLING);
     1f0:	62 e0       	ldi	r22, 0x02	; 2
     1f2:	82 2f       	mov	r24, r18
     1f4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <Init_external_interrupt>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setEdgeDetectionType(const enu_icu_edgetype_t enu_icu_edgetype)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     1f8:	84 e0       	ldi	r24, 0x04	; 4
     1fa:	08 95       	ret
			{
				Init_external_interrupt(gl_u8_interrupt_id,ENU_FALLING);
			}
			else
			{
				Init_external_interrupt(gl_u8_interrupt_id,ENU_RISING);
     1fc:	63 e0       	ldi	r22, 0x03	; 3
     1fe:	82 2f       	mov	r24, r18
     200:	0e 94 f7 08 	call	0x11ee	; 0x11ee <Init_external_interrupt>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setEdgeDetectionType(const enu_icu_edgetype_t enu_icu_edgetype)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     204:	84 e0       	ldi	r24, 0x04	; 4
     206:	08 95       	ret
			enu_icu_error = ENU_ICU_INVALID_INPUT;
		}
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_EDGETYP ;
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	08 95       	ret
				Init_external_interrupt(gl_u8_interrupt_id,ENU_RISING);
			}	
		}
		else
		{
			enu_icu_error = ENU_ICU_INVALID_INPUT;
     20c:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		enu_icu_error = ENU_ICU_INVALID_EDGETYP ;
	}
	return enu_icu_error;
}
     20e:	08 95       	ret

00000210 <Icu_getTimerValue>:
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	//uint16 u16_l_timer_value = 0;
	if(ptr_u16_timer_value != NULL_PTR)
     210:	00 97       	sbiw	r24, 0x00	; 0
     212:	c1 f0       	breq	.+48     	; 0x244 <Icu_getTimerValue+0x34>
	{
		if(gl_u8_timer_id < MAX_TIMER_CHANNEL)
     214:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     218:	23 30       	cpi	r18, 0x03	; 3
     21a:	b0 f4       	brcc	.+44     	; 0x248 <Icu_getTimerValue+0x38>
     21c:	bc 01       	movw	r22, r24
		{
			if(gl_u8_timer_id == TIMER_CHANNEL_0)
     21e:	21 11       	cpse	r18, r1
     220:	05 c0       	rjmp	.+10     	; 0x22c <Icu_getTimerValue+0x1c>
			{
				timer_getValue(ENU_TMR_CHANNEL_0,ptr_u16_timer_value);
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <timer_getValue>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     228:	84 e0       	ldi	r24, 0x04	; 4
     22a:	08 95       	ret
		{
			if(gl_u8_timer_id == TIMER_CHANNEL_0)
			{
				timer_getValue(ENU_TMR_CHANNEL_0,ptr_u16_timer_value);
			}
			else if(gl_u8_timer_id == TIMER_CHANNEL_1)
     22c:	21 30       	cpi	r18, 0x01	; 1
     22e:	29 f4       	brne	.+10     	; 0x23a <Icu_getTimerValue+0x2a>
			{
				timer_getValue(ENU_TMR_CHANNEL_1,ptr_u16_timer_value);
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <timer_getValue>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     236:	84 e0       	ldi	r24, 0x04	; 4
     238:	08 95       	ret
			{
				timer_getValue(ENU_TMR_CHANNEL_1,ptr_u16_timer_value);
			}
			else
			{
				timer_getValue(ENU_TMR_CHANNEL_2,ptr_u16_timer_value);			
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <timer_getValue>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     240:	84 e0       	ldi	r24, 0x04	; 4
     242:	08 95       	ret
			enu_icu_error = ENU_ICU_INVALID_CHANNEL;
		}
	} 
	else
	{
		enu_icu_error = ENU_ICU_INVALID_INPUT;
     244:	82 e0       	ldi	r24, 0x02	; 2
     246:	08 95       	ret
				timer_getValue(ENU_TMR_CHANNEL_2,ptr_u16_timer_value);			
			}
		}
		else
		{
			enu_icu_error = ENU_ICU_INVALID_CHANNEL;
     248:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		enu_icu_error = ENU_ICU_INVALID_INPUT;
	}
	return enu_icu_error;
}
     24a:	08 95       	ret

0000024c <Icu_clearTimerValue>:
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	if(gl_u8_timer_id < MAX_TIMER_CHANNEL)
     24c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     250:	83 30       	cpi	r24, 0x03	; 3
     252:	48 f5       	brcc	.+82     	; 0x2a6 <Icu_clearTimerValue+0x5a>
	{
		if(gl_u8_timer_id == TIMER_CHANNEL_0)
     254:	81 11       	cpse	r24, r1
     256:	0c c0       	rjmp	.+24     	; 0x270 <Icu_clearTimerValue+0x24>
		{
			//to do clear timer0 value
			timer_stop(ENU_TMR_CHANNEL_0);
     258:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <timer_stop>
			timer_setInitialValue(ENU_TMR_CHANNEL_0,ZERO_VALUE);
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	0e 94 a0 0b 	call	0x1740	; 0x1740 <timer_setInitialValue>
			timer_start(ENU_TMR_CHANNEL_0);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <timer_start>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     26c:	84 e0       	ldi	r24, 0x04	; 4
     26e:	08 95       	ret
			//to do clear timer0 value
			timer_stop(ENU_TMR_CHANNEL_0);
			timer_setInitialValue(ENU_TMR_CHANNEL_0,ZERO_VALUE);
			timer_start(ENU_TMR_CHANNEL_0);
		}
		else if(gl_u8_timer_id == TIMER_CHANNEL_1)
     270:	81 30       	cpi	r24, 0x01	; 1
     272:	61 f4       	brne	.+24     	; 0x28c <Icu_clearTimerValue+0x40>
		{
			//to do clear timer1 value
			timer_stop(ENU_TMR_CHANNEL_1);
     274:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <timer_stop>
			timer_setInitialValue(ENU_TMR_CHANNEL_1,ZERO_VALUE);
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	70 e0       	ldi	r23, 0x00	; 0
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	0e 94 a0 0b 	call	0x1740	; 0x1740 <timer_setInitialValue>
			timer_start(ENU_TMR_CHANNEL_1);
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <timer_start>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     288:	84 e0       	ldi	r24, 0x04	; 4
     28a:	08 95       	ret
			timer_start(ENU_TMR_CHANNEL_1);
		}
		else
		{
			//to do clear timer2 value
			timer_stop(ENU_TMR_CHANNEL_2);
     28c:	82 e0       	ldi	r24, 0x02	; 2
     28e:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <timer_stop>
			timer_setInitialValue(ENU_TMR_CHANNEL_2,ZERO_VALUE);
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	82 e0       	ldi	r24, 0x02	; 2
     298:	0e 94 a0 0b 	call	0x1740	; 0x1740 <timer_setInitialValue>
			timer_start(ENU_TMR_CHANNEL_2);
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <timer_start>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     2a2:	84 e0       	ldi	r24, 0x04	; 4
     2a4:	08 95       	ret
			timer_start(ENU_TMR_CHANNEL_2);
		}
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CHANNEL;
     2a6:	83 e0       	ldi	r24, 0x03	; 3
	}
	return enu_icu_error;
}
     2a8:	08 95       	ret

000002aa <LCD_sendCommand>:
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	1f 92       	push	r1
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	18 2f       	mov	r17, r24
     2b8:	19 82       	std	Y+1, r1	; 0x01
     2ba:	40 e0       	ldi	r20, 0x00	; 0
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
     2c4:	40 e0       	ldi	r20, 0x00	; 0
     2c6:	62 e0       	ldi	r22, 0x02	; 2
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
     2ce:	8f ec       	ldi	r24, 0xCF	; 207
     2d0:	97 e0       	ldi	r25, 0x07	; 7
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCD_sendCommand+0x28>
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCD_sendCommand+0x2e>
     2d8:	00 00       	nop
     2da:	41 e0       	ldi	r20, 0x01	; 1
     2dc:	63 e0       	ldi	r22, 0x03	; 3
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
     2e4:	8f ec       	ldi	r24, 0xCF	; 207
     2e6:	97 e0       	ldi	r25, 0x07	; 7
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCD_sendCommand+0x3e>
     2ec:	00 c0       	rjmp	.+0      	; 0x2ee <LCD_sendCommand+0x44>
     2ee:	00 00       	nop
     2f0:	be 01       	movw	r22, r28
     2f2:	6f 5f       	subi	r22, 0xFF	; 255
     2f4:	7f 4f       	sbci	r23, 0xFF	; 255
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <DIO_readPort>
     2fc:	69 81       	ldd	r22, Y+1	; 0x01
     2fe:	6f 70       	andi	r22, 0x0F	; 15
     300:	81 2f       	mov	r24, r17
     302:	80 7f       	andi	r24, 0xF0	; 240
     304:	68 2b       	or	r22, r24
     306:	69 83       	std	Y+1, r22	; 0x01
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	0e 94 b6 08 	call	0x116c	; 0x116c <DIO_writePort>
     30e:	8f ec       	ldi	r24, 0xCF	; 207
     310:	97 e0       	ldi	r25, 0x07	; 7
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <LCD_sendCommand+0x68>
     316:	00 c0       	rjmp	.+0      	; 0x318 <LCD_sendCommand+0x6e>
     318:	00 00       	nop
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	63 e0       	ldi	r22, 0x03	; 3
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
     324:	8f ec       	ldi	r24, 0xCF	; 207
     326:	97 e0       	ldi	r25, 0x07	; 7
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <LCD_sendCommand+0x7e>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <LCD_sendCommand+0x84>
     32e:	00 00       	nop
     330:	41 e0       	ldi	r20, 0x01	; 1
     332:	63 e0       	ldi	r22, 0x03	; 3
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
     33a:	8f ec       	ldi	r24, 0xCF	; 207
     33c:	97 e0       	ldi	r25, 0x07	; 7
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <LCD_sendCommand+0x94>
     342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_sendCommand+0x9a>
     344:	00 00       	nop
     346:	be 01       	movw	r22, r28
     348:	6f 5f       	subi	r22, 0xFF	; 255
     34a:	7f 4f       	sbci	r23, 0xFF	; 255
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <DIO_readPort>
     352:	20 e1       	ldi	r18, 0x10	; 16
     354:	12 9f       	mul	r17, r18
     356:	c0 01       	movw	r24, r0
     358:	11 24       	eor	r1, r1
     35a:	69 81       	ldd	r22, Y+1	; 0x01
     35c:	6f 70       	andi	r22, 0x0F	; 15
     35e:	68 2b       	or	r22, r24
     360:	69 83       	std	Y+1, r22	; 0x01
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	0e 94 b6 08 	call	0x116c	; 0x116c <DIO_writePort>
     368:	8f ec       	ldi	r24, 0xCF	; 207
     36a:	97 e0       	ldi	r25, 0x07	; 7
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <LCD_sendCommand+0xc2>
     370:	00 c0       	rjmp	.+0      	; 0x372 <LCD_sendCommand+0xc8>
     372:	00 00       	nop
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	63 e0       	ldi	r22, 0x03	; 3
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
     37e:	8f ec       	ldi	r24, 0xCF	; 207
     380:	97 e0       	ldi	r25, 0x07	; 7
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	f1 f7       	brne	.-4      	; 0x382 <LCD_sendCommand+0xd8>
     386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_sendCommand+0xde>
     388:	00 00       	nop
     38a:	0f 90       	pop	r0
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	08 95       	ret

00000394 <LCD_init>:
     394:	41 e0       	ldi	r20, 0x01	; 1
     396:	61 e0       	ldi	r22, 0x01	; 1
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_pinMode>
     39e:	41 e0       	ldi	r20, 0x01	; 1
     3a0:	62 e0       	ldi	r22, 0x02	; 2
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_pinMode>
     3a8:	41 e0       	ldi	r20, 0x01	; 1
     3aa:	63 e0       	ldi	r22, 0x03	; 3
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_pinMode>
     3b2:	41 e0       	ldi	r20, 0x01	; 1
     3b4:	64 e0       	ldi	r22, 0x04	; 4
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_pinMode>
     3bc:	41 e0       	ldi	r20, 0x01	; 1
     3be:	65 e0       	ldi	r22, 0x05	; 5
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_pinMode>
     3c6:	41 e0       	ldi	r20, 0x01	; 1
     3c8:	66 e0       	ldi	r22, 0x06	; 6
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_pinMode>
     3d0:	41 e0       	ldi	r20, 0x01	; 1
     3d2:	67 e0       	ldi	r22, 0x07	; 7
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_pinMode>
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_sendCommand>
     3e0:	88 e2       	ldi	r24, 0x28	; 40
     3e2:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_sendCommand>
     3e6:	8c e0       	ldi	r24, 0x0C	; 12
     3e8:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_sendCommand>
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_sendCommand>
     3f2:	08 95       	ret

000003f4 <LCD_displayCharacter>:
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	1f 92       	push	r1
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	18 2f       	mov	r17, r24
     402:	19 82       	std	Y+1, r1	; 0x01
     404:	41 e0       	ldi	r20, 0x01	; 1
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
     40e:	40 e0       	ldi	r20, 0x00	; 0
     410:	62 e0       	ldi	r22, 0x02	; 2
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
     418:	8f ec       	ldi	r24, 0xCF	; 207
     41a:	97 e0       	ldi	r25, 0x07	; 7
     41c:	01 97       	sbiw	r24, 0x01	; 1
     41e:	f1 f7       	brne	.-4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     420:	00 c0       	rjmp	.+0      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     422:	00 00       	nop
     424:	41 e0       	ldi	r20, 0x01	; 1
     426:	63 e0       	ldi	r22, 0x03	; 3
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
     42e:	8f ec       	ldi	r24, 0xCF	; 207
     430:	97 e0       	ldi	r25, 0x07	; 7
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	f1 f7       	brne	.-4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     438:	00 00       	nop
     43a:	be 01       	movw	r22, r28
     43c:	6f 5f       	subi	r22, 0xFF	; 255
     43e:	7f 4f       	sbci	r23, 0xFF	; 255
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <DIO_readPort>
     446:	69 81       	ldd	r22, Y+1	; 0x01
     448:	6f 70       	andi	r22, 0x0F	; 15
     44a:	81 2f       	mov	r24, r17
     44c:	80 7f       	andi	r24, 0xF0	; 240
     44e:	68 2b       	or	r22, r24
     450:	69 83       	std	Y+1, r22	; 0x01
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	0e 94 b6 08 	call	0x116c	; 0x116c <DIO_writePort>
     458:	8f ec       	ldi	r24, 0xCF	; 207
     45a:	97 e0       	ldi	r25, 0x07	; 7
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     460:	00 c0       	rjmp	.+0      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     462:	00 00       	nop
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	63 e0       	ldi	r22, 0x03	; 3
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
     46e:	8f ec       	ldi	r24, 0xCF	; 207
     470:	97 e0       	ldi	r25, 0x07	; 7
     472:	01 97       	sbiw	r24, 0x01	; 1
     474:	f1 f7       	brne	.-4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     476:	00 c0       	rjmp	.+0      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     478:	00 00       	nop
     47a:	41 e0       	ldi	r20, 0x01	; 1
     47c:	63 e0       	ldi	r22, 0x03	; 3
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
     484:	8f ec       	ldi	r24, 0xCF	; 207
     486:	97 e0       	ldi	r25, 0x07	; 7
     488:	01 97       	sbiw	r24, 0x01	; 1
     48a:	f1 f7       	brne	.-4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     48c:	00 c0       	rjmp	.+0      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
     48e:	00 00       	nop
     490:	be 01       	movw	r22, r28
     492:	6f 5f       	subi	r22, 0xFF	; 255
     494:	7f 4f       	sbci	r23, 0xFF	; 255
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <DIO_readPort>
     49c:	20 e1       	ldi	r18, 0x10	; 16
     49e:	12 9f       	mul	r17, r18
     4a0:	c0 01       	movw	r24, r0
     4a2:	11 24       	eor	r1, r1
     4a4:	69 81       	ldd	r22, Y+1	; 0x01
     4a6:	6f 70       	andi	r22, 0x0F	; 15
     4a8:	68 2b       	or	r22, r24
     4aa:	69 83       	std	Y+1, r22	; 0x01
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 b6 08 	call	0x116c	; 0x116c <DIO_writePort>
     4b2:	8f ec       	ldi	r24, 0xCF	; 207
     4b4:	97 e0       	ldi	r25, 0x07	; 7
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     4bc:	00 00       	nop
     4be:	40 e0       	ldi	r20, 0x00	; 0
     4c0:	63 e0       	ldi	r22, 0x03	; 3
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
     4c8:	8f ec       	ldi	r24, 0xCF	; 207
     4ca:	97 e0       	ldi	r25, 0x07	; 7
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
     4d2:	00 00       	nop
     4d4:	0f 90       	pop	r0
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	08 95       	ret

000004de <LCD_displayString>:
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	8c 01       	movw	r16, r24
     4e6:	c0 e0       	ldi	r28, 0x00	; 0
     4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <LCD_displayString+0x12>
     4ea:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCD_displayCharacter>
     4ee:	cf 5f       	subi	r28, 0xFF	; 255
     4f0:	f8 01       	movw	r30, r16
     4f2:	ec 0f       	add	r30, r28
     4f4:	f1 1d       	adc	r31, r1
     4f6:	80 81       	ld	r24, Z
     4f8:	81 11       	cpse	r24, r1
     4fa:	f7 cf       	rjmp	.-18     	; 0x4ea <LCD_displayString+0xc>
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	08 95       	ret

00000504 <LCD_moveCursor>:
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	39 f0       	breq	.+14     	; 0x516 <LCD_moveCursor+0x12>
     508:	58 f0       	brcs	.+22     	; 0x520 <LCD_moveCursor+0x1c>
     50a:	82 30       	cpi	r24, 0x02	; 2
     50c:	31 f0       	breq	.+12     	; 0x51a <LCD_moveCursor+0x16>
     50e:	83 30       	cpi	r24, 0x03	; 3
     510:	31 f0       	breq	.+12     	; 0x51e <LCD_moveCursor+0x1a>
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	05 c0       	rjmp	.+10     	; 0x520 <LCD_moveCursor+0x1c>
     516:	60 5c       	subi	r22, 0xC0	; 192
     518:	03 c0       	rjmp	.+6      	; 0x520 <LCD_moveCursor+0x1c>
     51a:	60 5f       	subi	r22, 0xF0	; 240
     51c:	01 c0       	rjmp	.+2      	; 0x520 <LCD_moveCursor+0x1c>
     51e:	60 5b       	subi	r22, 0xB0	; 176
     520:	86 2f       	mov	r24, r22
     522:	80 68       	ori	r24, 0x80	; 128
     524:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_sendCommand>
     528:	08 95       	ret

0000052a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	60 97       	sbiw	r28, 0x10	; 16
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
     53e:	4a e0       	ldi	r20, 0x0A	; 10
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	be 01       	movw	r22, r28
     544:	6f 5f       	subi	r22, 0xFF	; 255
     546:	7f 4f       	sbci	r23, 0xFF	; 255
     548:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <itoa>
   LCD_displayString(buff); /* Display the string */
     54c:	ce 01       	movw	r24, r28
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_displayString>
}
     554:	60 96       	adiw	r28, 0x10	; 16
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <PWM_callback>:
	}
	return enu_pwm_error;
}

void PWM_callback (void)
{
     566:	cf 93       	push	r28
	if((gs_u8_duty_cycle < MAX_DUTY_CYCLE) && ((gs_u8_duty_cycle > 0)))
     568:	c0 91 7f 00 	lds	r28, 0x007F	; 0x80007f <gs_u8_duty_cycle>
     56c:	6c 2f       	mov	r22, r28
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 c5 19 	call	0x338a	; 0x338a <__floatsisf>
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	48 ec       	ldi	r20, 0xC8	; 200
     57e:	52 e4       	ldi	r21, 0x42	; 66
     580:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
     584:	88 23       	and	r24, r24
     586:	bc f5       	brge	.+110    	; 0x5f6 <PWM_callback+0x90>
     588:	cc 23       	and	r28, r28
     58a:	a9 f1       	breq	.+106    	; 0x5f6 <PWM_callback+0x90>
	{
		DIO_togglePin(gs_u8_gpio_port_id,gs_u8_gpio_pin_id);
     58c:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <gs_u8_gpio_pin_id>
     590:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <gs_u8_gpio_port_id>
     594:	0e 94 74 08 	call	0x10e8	; 0x10e8 <DIO_togglePin>
		timer_stop(gs_u8_timer_id);
     598:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gs_u8_timer_id>
     59c:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <timer_stop>
		if(gs_bo_pwm_flag == FALSE)		
     5a0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <gs_bo_pwm_flag>
     5a4:	81 11       	cpse	r24, r1
     5a6:	12 c0       	rjmp	.+36     	; 0x5cc <PWM_callback+0x66>
		{
			timer_setClock(gs_u8_timer_id,gs_u8_offTime_prescale);
     5a8:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <gs_u8_offTime_prescale>
     5ac:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gs_u8_timer_id>
     5b0:	0e 94 cb 0b 	call	0x1796	; 0x1796 <timer_setClock>
			timer_setInitialValue(gs_u8_timer_id,gs_u16_offTime_initValue);
     5b4:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <gs_u16_offTime_initValue>
     5b8:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <gs_u16_offTime_initValue+0x1>
     5bc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gs_u8_timer_id>
     5c0:	0e 94 a0 0b 	call	0x1740	; 0x1740 <timer_setInitialValue>
			gs_bo_pwm_flag = TRUE;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <gs_bo_pwm_flag>
     5ca:	10 c0       	rjmp	.+32     	; 0x5ec <PWM_callback+0x86>
		}
		else
		{
			timer_setClock(gs_u8_timer_id,gs_u8_onTime_prescale);
     5cc:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <gs_u8_onTime_prescale>
     5d0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gs_u8_timer_id>
     5d4:	0e 94 cb 0b 	call	0x1796	; 0x1796 <timer_setClock>
			timer_setInitialValue(gs_u8_timer_id,gs_u16_onTime_initValue);
     5d8:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <__data_end>
     5dc:	70 91 77 00 	lds	r23, 0x0077	; 0x800077 <__data_end+0x1>
     5e0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gs_u8_timer_id>
     5e4:	0e 94 a0 0b 	call	0x1740	; 0x1740 <timer_setInitialValue>
			gs_bo_pwm_flag = FALSE;
     5e8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <gs_bo_pwm_flag>
		}
		timer_start(gs_u8_timer_id);
     5ec:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gs_u8_timer_id>
     5f0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <timer_start>
     5f4:	11 c0       	rjmp	.+34     	; 0x618 <PWM_callback+0xb2>
	}
	else if (gs_u8_duty_cycle == 100)
     5f6:	c4 36       	cpi	r28, 0x64	; 100
     5f8:	41 f4       	brne	.+16     	; 0x60a <PWM_callback+0xa4>
	{
		DIO_writePin(gs_u8_gpio_port_id,gs_u8_gpio_pin_id,PIN_HIGH);
     5fa:	41 e0       	ldi	r20, 0x01	; 1
     5fc:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <gs_u8_gpio_pin_id>
     600:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <gs_u8_gpio_port_id>
     604:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
     608:	07 c0       	rjmp	.+14     	; 0x618 <PWM_callback+0xb2>
	}
	else
	{
		DIO_writePin(gs_u8_gpio_port_id,gs_u8_gpio_pin_id,PIN_LOW);
     60a:	40 e0       	ldi	r20, 0x00	; 0
     60c:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <gs_u8_gpio_pin_id>
     610:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <gs_u8_gpio_port_id>
     614:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
	}
}
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <PWM_Init>:

/*=========APIs DEFINITIONS=========*/


enu_pwm_error_t PWM_Init(uint8 u8_pwm_port_id,uint8 u8_pwm_pin_id,uint8 u8_pwm_timer_id)
{
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	29 97       	sbiw	r28, 0x09	; 9
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
	enu_pwm_error_t enu_pwm_error = ENU_PWM_VALID_OPERATION;
	str_tmr_config_t str_tmr_config;
	//check the passing parameters
	if((u8_pwm_port_id < MAX_PORT_ID) && (u8_pwm_pin_id < MAX_PIN_ID) && (u8_pwm_timer_id < MAX_ENU_TMR_CHANNEL))
     636:	84 30       	cpi	r24, 0x04	; 4
     638:	60 f5       	brcc	.+88     	; 0x692 <PWM_Init+0x76>
     63a:	68 30       	cpi	r22, 0x08	; 8
     63c:	60 f5       	brcc	.+88     	; 0x696 <PWM_Init+0x7a>
     63e:	43 30       	cpi	r20, 0x03	; 3
     640:	60 f5       	brcc	.+88     	; 0x69a <PWM_Init+0x7e>
     642:	f4 2e       	mov	r15, r20
     644:	06 2f       	mov	r16, r22
     646:	18 2f       	mov	r17, r24
	{
		//set global variables
		gs_u8_gpio_port_id	= u8_pwm_port_id;
     648:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <gs_u8_gpio_port_id>
		gs_u8_gpio_pin_id	= u8_pwm_pin_id;
     64c:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <gs_u8_gpio_pin_id>
		gs_u8_timer_id		= u8_pwm_timer_id;
     650:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <gs_u8_timer_id>
		//initialize TIMER
		str_tmr_config.enu_tmr_channel_id		= u8_pwm_timer_id;
     654:	49 83       	std	Y+1, r20	; 0x01
		str_tmr_config.enu_tmr_clk				= ENU_TMR_NO_CLK;
     656:	1d 82       	std	Y+5, r1	; 0x05
		str_tmr_config.enu_tmr_mode				= ENU_TMR_NORMAL_MODE;
     658:	1a 82       	std	Y+2, r1	; 0x02
		str_tmr_config.enu_tmr_cmp_mode			= ENU_TMR_CMP_DISCONNECT;
     65a:	1c 82       	std	Y+4, r1	; 0x04
		str_tmr_config.enu_tmr_interrupt_state	= ENU_TMR_INT_ENABLE;
     65c:	1b 82       	std	Y+3, r1	; 0x03
		str_tmr_config.u16_tmr_initial_value	= ZERO_VALUE;
     65e:	1f 82       	std	Y+7, r1	; 0x07
     660:	1e 82       	std	Y+6, r1	; 0x06
		str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
     662:	19 86       	std	Y+9, r1	; 0x09
     664:	18 86       	std	Y+8, r1	; 0x08
		timer_init(&str_tmr_config);
     666:	ce 01       	movw	r24, r28
     668:	01 96       	adiw	r24, 0x01	; 1
     66a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <timer_init>
		timer_setCallBack(u8_pwm_timer_id,PWM_callback,ENU_TMR_NORMAL_MODE);
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	63 eb       	ldi	r22, 0xB3	; 179
     672:	72 e0       	ldi	r23, 0x02	; 2
     674:	8f 2d       	mov	r24, r15
     676:	0e 94 0d 0c 	call	0x181a	; 0x181a <timer_setCallBack>
		//initialize GPIO
		DIO_pinMode(u8_pwm_port_id,u8_pwm_pin_id,PIN_OUTPUT);
     67a:	41 e0       	ldi	r20, 0x01	; 1
     67c:	60 2f       	mov	r22, r16
     67e:	81 2f       	mov	r24, r17
     680:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_pinMode>
		DIO_writePin(u8_pwm_port_id,u8_pwm_pin_id,PIN_LOW);
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	60 2f       	mov	r22, r16
     688:	81 2f       	mov	r24, r17
     68a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
/*=========APIs DEFINITIONS=========*/


enu_pwm_error_t PWM_Init(uint8 u8_pwm_port_id,uint8 u8_pwm_pin_id,uint8 u8_pwm_timer_id)
{
	enu_pwm_error_t enu_pwm_error = ENU_PWM_VALID_OPERATION;
     68e:	81 e0       	ldi	r24, 0x01	; 1
		str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
		timer_init(&str_tmr_config);
		timer_setCallBack(u8_pwm_timer_id,PWM_callback,ENU_TMR_NORMAL_MODE);
		//initialize GPIO
		DIO_pinMode(u8_pwm_port_id,u8_pwm_pin_id,PIN_OUTPUT);
		DIO_writePin(u8_pwm_port_id,u8_pwm_pin_id,PIN_LOW);
     690:	05 c0       	rjmp	.+10     	; 0x69c <PWM_Init+0x80>
	}
	else
	{
		enu_pwm_error = ENU_PWM_INVALID_OPERATION;
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	03 c0       	rjmp	.+6      	; 0x69c <PWM_Init+0x80>
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	01 c0       	rjmp	.+2      	; 0x69c <PWM_Init+0x80>
     69a:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enu_pwm_error;
}
     69c:	29 96       	adiw	r28, 0x09	; 9
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	08 95       	ret

000006b4 <PWM_start>:

enu_pwm_error_t PWM_start(uint8 u8_pwm_timer_id,uint32 u32_periodic_time,uint8 u8_duty_cycle)
{
     6b4:	4f 92       	push	r4
     6b6:	5f 92       	push	r5
     6b8:	6f 92       	push	r6
     6ba:	7f 92       	push	r7
     6bc:	8f 92       	push	r8
     6be:	9f 92       	push	r9
     6c0:	af 92       	push	r10
     6c2:	bf 92       	push	r11
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	2a 97       	sbiw	r28, 0x0a	; 10
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	cd bf       	out	0x3d, r28	; 61
	enu_pwm_error_t enu_pwm_error	= ENU_PWM_VALID_OPERATION;
	float32 f32_on_time				= ZERO_VALUE;
	float32 f32_off_time			= ZERO_VALUE;
	uint16  u16_periodic_prescale	= ZERO_VALUE;
     6e2:	1a 82       	std	Y+2, r1	; 0x02
     6e4:	19 82       	std	Y+1, r1	; 0x01
	uint16	u16_offTime_prescale	= ZERO_VALUE;
     6e6:	1c 82       	std	Y+4, r1	; 0x04
     6e8:	1b 82       	std	Y+3, r1	; 0x03
	uint16	u16_onTime_prescale		= ZERO_VALUE;
     6ea:	1e 82       	std	Y+6, r1	; 0x06
     6ec:	1d 82       	std	Y+5, r1	; 0x05
	gs_u8_duty_cycle				= u8_duty_cycle;
     6ee:	20 93 7f 00 	sts	0x007F, r18	; 0x80007f <gs_u8_duty_cycle>
	
	if((u8_pwm_timer_id < MAX_ENU_TMR_CHANNEL) && (u32_periodic_time > ZERO_VALUE))
     6f2:	83 30       	cpi	r24, 0x03	; 3
     6f4:	08 f0       	brcs	.+2      	; 0x6f8 <PWM_start+0x44>
     6f6:	b6 c0       	rjmp	.+364    	; 0x864 <__stack+0x5>
     6f8:	41 15       	cp	r20, r1
     6fa:	51 05       	cpc	r21, r1
     6fc:	61 05       	cpc	r22, r1
     6fe:	71 05       	cpc	r23, r1
     700:	09 f4       	brne	.+2      	; 0x704 <PWM_start+0x50>
     702:	b2 c0       	rjmp	.+356    	; 0x868 <__stack+0x9>
     704:	12 2f       	mov	r17, r18
     706:	4a 01       	movw	r8, r20
     708:	5b 01       	movw	r10, r22
     70a:	d8 2e       	mov	r13, r24
	{
		if((u8_duty_cycle < MAX_DUTY_CYCLE) && (u8_duty_cycle > ZERO_VALUE))
     70c:	62 2f       	mov	r22, r18
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 c5 19 	call	0x338a	; 0x338a <__floatsisf>
     718:	2b 01       	movw	r4, r22
     71a:	3c 01       	movw	r6, r24
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	48 ec       	ldi	r20, 0xC8	; 200
     722:	52 e4       	ldi	r21, 0x42	; 66
     724:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
     728:	88 23       	and	r24, r24
     72a:	0c f0       	brlt	.+2      	; 0x72e <PWM_start+0x7a>
     72c:	69 c0       	rjmp	.+210    	; 0x800 <__DATA_REGION_LENGTH__>
     72e:	11 23       	and	r17, r17
     730:	09 f4       	brne	.+2      	; 0x734 <PWM_start+0x80>
     732:	66 c0       	rjmp	.+204    	; 0x800 <__DATA_REGION_LENGTH__>
		{
			f32_off_time	= ((float32)u32_periodic_time*u8_duty_cycle)/MAX_DUTY_CYCLE;	//calculate on time delay
     734:	c5 01       	movw	r24, r10
     736:	b4 01       	movw	r22, r8
     738:	0e 94 c3 19 	call	0x3386	; 0x3386 <__floatunsisf>
     73c:	6f 83       	std	Y+7, r22	; 0x07
     73e:	78 87       	std	Y+8, r23	; 0x08
     740:	89 87       	std	Y+9, r24	; 0x09
     742:	9a 87       	std	Y+10, r25	; 0x0a
     744:	9b 01       	movw	r18, r22
     746:	ac 01       	movw	r20, r24
     748:	c3 01       	movw	r24, r6
     74a:	b2 01       	movw	r22, r4
     74c:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	48 ec       	ldi	r20, 0xC8	; 200
     756:	52 e4       	ldi	r21, 0x42	; 66
     758:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
     75c:	4b 01       	movw	r8, r22
     75e:	5c 01       	movw	r10, r24
			f32_on_time		= u32_periodic_time - f32_off_time;
     760:	9b 01       	movw	r18, r22
     762:	ac 01       	movw	r20, r24
     764:	6f 81       	ldd	r22, Y+7	; 0x07
     766:	78 85       	ldd	r23, Y+8	; 0x08
     768:	89 85       	ldd	r24, Y+9	; 0x09
     76a:	9a 85       	ldd	r25, Y+10	; 0x0a
     76c:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
     770:	2b 01       	movw	r4, r22
     772:	3c 01       	movw	r6, r24
			gs_f32_on_time	= f32_on_time;
			gs_f32_off_time = f32_off_time;
			calc_prescaler(f32_off_time,u8_pwm_timer_id,ENU_MILLI_SECOND,&u16_offTime_prescale);
     774:	8e 01       	movw	r16, r28
     776:	0d 5f       	subi	r16, 0xFD	; 253
     778:	1f 4f       	sbci	r17, 0xFF	; 255
     77a:	21 e0       	ldi	r18, 0x01	; 1
     77c:	4d 2d       	mov	r20, r13
     77e:	c5 01       	movw	r24, r10
     780:	b4 01       	movw	r22, r8
     782:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <calc_prescaler>
			calc_prescaler(f32_on_time,u8_pwm_timer_id,ENU_MILLI_SECOND,&u16_onTime_prescale);
     786:	0e 5f       	subi	r16, 0xFE	; 254
     788:	1f 4f       	sbci	r17, 0xFF	; 255
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	4d 2d       	mov	r20, r13
     78e:	c3 01       	movw	r24, r6
     790:	b2 01       	movw	r22, r4
     792:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <calc_prescaler>
			calc_initialValue(u8_pwm_timer_id,ENU_MILLI_SECOND,u16_offTime_prescale,f32_off_time,&gs_u16_offTime_initValue);
     796:	4b 81       	ldd	r20, Y+3	; 0x03
     798:	5c 81       	ldd	r21, Y+4	; 0x04
     79a:	0f 2e       	mov	r0, r31
     79c:	f8 e7       	ldi	r31, 0x78	; 120
     79e:	ef 2e       	mov	r14, r31
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	ff 2e       	mov	r15, r31
     7a4:	f0 2d       	mov	r31, r0
     7a6:	95 01       	movw	r18, r10
     7a8:	84 01       	movw	r16, r8
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	8d 2d       	mov	r24, r13
     7ae:	0e 94 5d 13 	call	0x26ba	; 0x26ba <calc_initialValue>
			calc_initialValue(u8_pwm_timer_id,ENU_MILLI_SECOND,u16_onTime_prescale,f32_on_time,&gs_u16_onTime_initValue);
     7b2:	4d 81       	ldd	r20, Y+5	; 0x05
     7b4:	5e 81       	ldd	r21, Y+6	; 0x06
     7b6:	0f 2e       	mov	r0, r31
     7b8:	f6 e7       	ldi	r31, 0x76	; 118
     7ba:	ef 2e       	mov	r14, r31
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	ff 2e       	mov	r15, r31
     7c0:	f0 2d       	mov	r31, r0
     7c2:	93 01       	movw	r18, r6
     7c4:	82 01       	movw	r16, r4
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	8d 2d       	mov	r24, r13
     7ca:	0e 94 5d 13 	call	0x26ba	; 0x26ba <calc_initialValue>
			gs_u8_onTime_prescale	= (uint8) timer_clk_map(u16_onTime_prescale);
     7ce:	8d 81       	ldd	r24, Y+5	; 0x05
     7d0:	9e 81       	ldd	r25, Y+6	; 0x06
     7d2:	0e 94 4b 04 	call	0x896	; 0x896 <timer_clk_map>
     7d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <gs_u8_onTime_prescale>
			gs_u8_offTime_prescale	= (uint8) timer_clk_map(u16_offTime_prescale);
     7da:	8b 81       	ldd	r24, Y+3	; 0x03
     7dc:	9c 81       	ldd	r25, Y+4	; 0x04
     7de:	0e 94 4b 04 	call	0x896	; 0x896 <timer_clk_map>
     7e2:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <gs_u8_offTime_prescale>
			timer_setInitialValue(u8_pwm_timer_id,gs_u16_onTime_initValue);
     7e6:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <__data_end>
     7ea:	70 91 77 00 	lds	r23, 0x0077	; 0x800077 <__data_end+0x1>
     7ee:	8d 2d       	mov	r24, r13
     7f0:	0e 94 a0 0b 	call	0x1740	; 0x1740 <timer_setInitialValue>
			timer_setClock(u8_pwm_timer_id,gs_u8_onTime_prescale);
     7f4:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <gs_u8_onTime_prescale>
     7f8:	8d 2d       	mov	r24, r13
     7fa:	0e 94 cb 0b 	call	0x1796	; 0x1796 <timer_setClock>
	gs_u8_duty_cycle				= u8_duty_cycle;
	
	if((u8_pwm_timer_id < MAX_ENU_TMR_CHANNEL) && (u32_periodic_time > ZERO_VALUE))
	{
		if((u8_duty_cycle < MAX_DUTY_CYCLE) && (u8_duty_cycle > ZERO_VALUE))
		{
     7fe:	2d c0       	rjmp	.+90     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			timer_setClock(u8_pwm_timer_id,gs_u8_onTime_prescale);
		}
		else 
		{
			
			calc_prescaler(u32_periodic_time,u8_pwm_timer_id,ENU_MILLI_SECOND,&u16_periodic_prescale);
     800:	c5 01       	movw	r24, r10
     802:	b4 01       	movw	r22, r8
     804:	0e 94 c3 19 	call	0x3386	; 0x3386 <__floatunsisf>
     808:	4b 01       	movw	r8, r22
     80a:	5c 01       	movw	r10, r24
     80c:	8e 01       	movw	r16, r28
     80e:	0f 5f       	subi	r16, 0xFF	; 255
     810:	1f 4f       	sbci	r17, 0xFF	; 255
     812:	21 e0       	ldi	r18, 0x01	; 1
     814:	4d 2d       	mov	r20, r13
     816:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <calc_prescaler>
			calc_initialValue(u8_pwm_timer_id,ENU_MILLI_SECOND,u16_periodic_prescale,u32_periodic_time,&gs_u16_periodic_initValue);
     81a:	49 81       	ldd	r20, Y+1	; 0x01
     81c:	5a 81       	ldd	r21, Y+2	; 0x02
     81e:	0f 2e       	mov	r0, r31
     820:	fa e7       	ldi	r31, 0x7A	; 122
     822:	ef 2e       	mov	r14, r31
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	ff 2e       	mov	r15, r31
     828:	f0 2d       	mov	r31, r0
     82a:	95 01       	movw	r18, r10
     82c:	84 01       	movw	r16, r8
     82e:	61 e0       	ldi	r22, 0x01	; 1
     830:	8d 2d       	mov	r24, r13
     832:	0e 94 5d 13 	call	0x26ba	; 0x26ba <calc_initialValue>
			gs_u8_periodic_prescale	= (uint8) timer_clk_map(u16_periodic_prescale);
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	9a 81       	ldd	r25, Y+2	; 0x02
     83a:	0e 94 4b 04 	call	0x896	; 0x896 <timer_clk_map>
     83e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <gs_u8_periodic_prescale>
			timer_setInitialValue(u8_pwm_timer_id,gs_u16_periodic_initValue);
     842:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <gs_u16_periodic_initValue>
     846:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <gs_u16_periodic_initValue+0x1>
     84a:	8d 2d       	mov	r24, r13
     84c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <timer_setInitialValue>
			timer_setClock(u8_pwm_timer_id,gs_u8_periodic_prescale);
     850:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <gs_u8_periodic_prescale>
     854:	8d 2d       	mov	r24, r13
     856:	0e 94 cb 0b 	call	0x1796	; 0x1796 <timer_setClock>
		}
		timer_start(u8_pwm_timer_id);
     85a:	8d 2d       	mov	r24, r13
     85c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <timer_start>
	return enu_pwm_error;
}

enu_pwm_error_t PWM_start(uint8 u8_pwm_timer_id,uint32 u32_periodic_time,uint8 u8_duty_cycle)
{
	enu_pwm_error_t enu_pwm_error	= ENU_PWM_VALID_OPERATION;
     860:	81 e0       	ldi	r24, 0x01	; 1
			calc_initialValue(u8_pwm_timer_id,ENU_MILLI_SECOND,u16_periodic_prescale,u32_periodic_time,&gs_u16_periodic_initValue);
			gs_u8_periodic_prescale	= (uint8) timer_clk_map(u16_periodic_prescale);
			timer_setInitialValue(u8_pwm_timer_id,gs_u16_periodic_initValue);
			timer_setClock(u8_pwm_timer_id,gs_u8_periodic_prescale);
		}
		timer_start(u8_pwm_timer_id);
     862:	03 c0       	rjmp	.+6      	; 0x86a <__stack+0xb>
	}
	else
	{
		enu_pwm_error = ENU_PWM_INVALID_OPERATION;
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	01 c0       	rjmp	.+2      	; 0x86a <__stack+0xb>
     868:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enu_pwm_error;
}
     86a:	2a 96       	adiw	r28, 0x0a	; 10
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	bf 90       	pop	r11
     886:	af 90       	pop	r10
     888:	9f 90       	pop	r9
     88a:	8f 90       	pop	r8
     88c:	7f 90       	pop	r7
     88e:	6f 90       	pop	r6
     890:	5f 90       	pop	r5
     892:	4f 90       	pop	r4
     894:	08 95       	ret

00000896 <timer_clk_map>:
}

enu_tmr_clk_t timer_clk_map(uint16 u16_l_prescale)
{
	enu_tmr_clk_t enu_tmr_clk = ENU_TMR_MAX_CLK;
	switch(u16_l_prescale)
     896:	80 32       	cpi	r24, 0x20	; 32
     898:	91 05       	cpc	r25, r1
     89a:	e1 f0       	breq	.+56     	; 0x8d4 <timer_clk_map+0x3e>
     89c:	38 f4       	brcc	.+14     	; 0x8ac <timer_clk_map+0x16>
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	91 05       	cpc	r25, r1
     8a2:	21 f1       	breq	.+72     	; 0x8ec <timer_clk_map+0x56>
     8a4:	98 f0       	brcs	.+38     	; 0x8cc <timer_clk_map+0x36>
     8a6:	08 97       	sbiw	r24, 0x08	; 8
     8a8:	99 f0       	breq	.+38     	; 0x8d0 <timer_clk_map+0x3a>
     8aa:	1e c0       	rjmp	.+60     	; 0x8e8 <timer_clk_map+0x52>
     8ac:	80 38       	cpi	r24, 0x80	; 128
     8ae:	91 05       	cpc	r25, r1
     8b0:	a9 f0       	breq	.+42     	; 0x8dc <timer_clk_map+0x46>
     8b2:	20 f4       	brcc	.+8      	; 0x8bc <timer_clk_map+0x26>
     8b4:	80 34       	cpi	r24, 0x40	; 64
     8b6:	91 05       	cpc	r25, r1
     8b8:	79 f0       	breq	.+30     	; 0x8d8 <timer_clk_map+0x42>
     8ba:	16 c0       	rjmp	.+44     	; 0x8e8 <timer_clk_map+0x52>
     8bc:	81 15       	cp	r24, r1
     8be:	21 e0       	ldi	r18, 0x01	; 1
     8c0:	92 07       	cpc	r25, r18
     8c2:	71 f0       	breq	.+28     	; 0x8e0 <timer_clk_map+0x4a>
     8c4:	81 15       	cp	r24, r1
     8c6:	94 40       	sbci	r25, 0x04	; 4
     8c8:	69 f0       	breq	.+26     	; 0x8e4 <timer_clk_map+0x4e>
     8ca:	0e c0       	rjmp	.+28     	; 0x8e8 <timer_clk_map+0x52>
	{
		case 0:		enu_tmr_clk = ENU_TMR_NO_CLK;	break;
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	08 95       	ret
		case 1:		enu_tmr_clk = ENU_TMR_CLK_1;	break;
		case 8:		enu_tmr_clk = ENU_TMR_CLK_8;	break;
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	08 95       	ret
		case 32:	enu_tmr_clk = ENU_TMR_CLK_32;	break;
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	08 95       	ret
		case 64:	enu_tmr_clk = ENU_TMR_CLK_64;	break;
     8d8:	84 e0       	ldi	r24, 0x04	; 4
     8da:	08 95       	ret
		case 128:	enu_tmr_clk = ENU_TMR_CLK_128;	break;
     8dc:	85 e0       	ldi	r24, 0x05	; 5
     8de:	08 95       	ret
		case 256:	enu_tmr_clk = ENU_TMR_CLK_256;	break;
     8e0:	86 e0       	ldi	r24, 0x06	; 6
     8e2:	08 95       	ret
		case 1024:	enu_tmr_clk = ENU_TMR_CLK_1024; break;
     8e4:	87 e0       	ldi	r24, 0x07	; 7
     8e6:	08 95       	ret
		default:	enu_tmr_clk = ENU_TMR_MAX_CLK;	break;
     8e8:	8a e0       	ldi	r24, 0x0A	; 10
     8ea:	08 95       	ret
{
	enu_tmr_clk_t enu_tmr_clk = ENU_TMR_MAX_CLK;
	switch(u16_l_prescale)
	{
		case 0:		enu_tmr_clk = ENU_TMR_NO_CLK;	break;
		case 1:		enu_tmr_clk = ENU_TMR_CLK_1;	break;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
		case 256:	enu_tmr_clk = ENU_TMR_CLK_256;	break;
		case 1024:	enu_tmr_clk = ENU_TMR_CLK_1024; break;
		default:	enu_tmr_clk = ENU_TMR_MAX_CLK;	break;
	}
	return enu_tmr_clk;
     8ee:	08 95       	ret

000008f0 <delay_us>:
void (*gl_fun_ptr_arr[MAX_TIMER_ID]) (void)			= {NULL_PTR};	

/*============= FUNCTION PROTOTYPE =============*/

enu_time_error_t delay_us	(uint8 u8_timer_id,float32 f32_time_delay)
{
     8f0:	8f 92       	push	r8
     8f2:	9f 92       	push	r9
     8f4:	af 92       	push	r10
     8f6:	bf 92       	push	r11
     8f8:	df 92       	push	r13
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	2e 97       	sbiw	r28, 0x0e	; 14
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	de bf       	out	0x3e, r29	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	cd bf       	out	0x3d, r28	; 61
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
	BOOLEAN bo_l_return_state		= FALSE ;
	uint16 u16_l_prescale			= ZERO_VALUE;
     916:	1a 82       	std	Y+2, r1	; 0x02
     918:	19 82       	std	Y+1, r1	; 0x01
	uint16 u16_l_initialValue		= ZERO_VALUE;
     91a:	1c 82       	std	Y+4, r1	; 0x04
     91c:	1b 82       	std	Y+3, r1	; 0x03
	float32 f32_l_overFlows			= ZERO_VALUE;
	uint8 u8_l_flag_status			= ZERO_VALUE;
     91e:	1d 82       	std	Y+5, r1	; 0x05
	uint16 u16_l_realPart			= ZERO_VALUE;
	float32 f32_l_reminderPart		= ZERO_VALUE;
	str_tmr_config_t str_tmr_config ;
	str_tmr_config.enu_tmr_channel_id		= u8_timer_id;
     920:	8e 83       	std	Y+6, r24	; 0x06
	str_tmr_config.enu_tmr_mode				= ENU_TMR_NORMAL_MODE;
     922:	1f 82       	std	Y+7, r1	; 0x07
	str_tmr_config.enu_tmr_cmp_mode			= ENU_TMR_CMP_DISCONNECT;
     924:	19 86       	std	Y+9, r1	; 0x09
	str_tmr_config.enu_tmr_interrupt_state	= ENU_TMR_INT_DISABLE;
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	98 87       	std	Y+8, r25	; 0x08
	str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
     92a:	1e 86       	std	Y+14, r1	; 0x0e
     92c:	1d 86       	std	Y+13, r1	; 0x0d
	
	if(u8_timer_id < MAX_ENU_TMR_CHANNEL)
     92e:	83 30       	cpi	r24, 0x03	; 3
     930:	08 f0       	brcs	.+2      	; 0x934 <delay_us+0x44>
     932:	d5 c0       	rjmp	.+426    	; 0xade <delay_us+0x1ee>
     934:	4a 01       	movw	r8, r20
     936:	5b 01       	movw	r10, r22
     938:	d8 2e       	mov	r13, r24
	{
		//compare delay with max timer value and if delay < max timer value, find the best prescaler value
		bo_l_return_state = calc_prescaler(f32_time_delay,u8_timer_id,ENU_MICRO_SECOND,&u16_l_prescale);
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5f       	subi	r16, 0xFF	; 255
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	48 2f       	mov	r20, r24
     944:	c5 01       	movw	r24, r10
     946:	b4 01       	movw	r22, r8
     948:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <calc_prescaler>
		if(bo_l_return_state == TRUE)
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	09 f0       	breq	.+2      	; 0x952 <delay_us+0x62>
     950:	c8 c0       	rjmp	.+400    	; 0xae2 <delay_us+0x1f2>
		{
			if (u16_l_prescale != NO_FIT_PRESCALER)
     952:	49 81       	ldd	r20, Y+1	; 0x01
     954:	5a 81       	ldd	r21, Y+2	; 0x02
     956:	4c 3d       	cpi	r20, 0xDC	; 220
     958:	85 e0       	ldi	r24, 0x05	; 5
     95a:	58 07       	cpc	r21, r24
     95c:	29 f1       	breq	.+74     	; 0x9a8 <delay_us+0xb8>
			{
				//use timer without overflows
				calc_initialValue(u8_timer_id,ENU_MICRO_SECOND,u16_l_prescale,f32_time_delay,&u16_l_initialValue);
     95e:	ce 01       	movw	r24, r28
     960:	03 96       	adiw	r24, 0x03	; 3
     962:	7c 01       	movw	r14, r24
     964:	95 01       	movw	r18, r10
     966:	84 01       	movw	r16, r8
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	8d 2d       	mov	r24, r13
     96c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <calc_initialValue>
				str_tmr_config.enu_tmr_clk				= timer_clk_map(u16_l_prescale);
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	0e 94 4b 04 	call	0x896	; 0x896 <timer_clk_map>
     978:	8a 87       	std	Y+10, r24	; 0x0a
				str_tmr_config.u16_tmr_initial_value	= u16_l_initialValue;
     97a:	8b 81       	ldd	r24, Y+3	; 0x03
     97c:	9c 81       	ldd	r25, Y+4	; 0x04
     97e:	9c 87       	std	Y+12, r25	; 0x0c
     980:	8b 87       	std	Y+11, r24	; 0x0b
				timer_init(&str_tmr_config);
     982:	ce 01       	movw	r24, r28
     984:	06 96       	adiw	r24, 0x06	; 6
     986:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <timer_init>
				timer_start(u8_timer_id);
     98a:	8d 2d       	mov	r24, r13
     98c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <timer_start>
				//wait for timer_flag_notification
				do 
				{
					timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
     990:	ae 01       	movw	r20, r28
     992:	4b 5f       	subi	r20, 0xFB	; 251
     994:	5f 4f       	sbci	r21, 0xFF	; 255
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	8d 2d       	mov	r24, r13
     99a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <timer_flag_notification>
				} while (u8_l_flag_status == LOGIC_FALSE);
     99e:	8d 81       	ldd	r24, Y+5	; 0x05
     9a0:	88 23       	and	r24, r24
     9a2:	b1 f3       	breq	.-20     	; 0x990 <delay_us+0xa0>

/*============= FUNCTION PROTOTYPE =============*/

enu_time_error_t delay_us	(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	a0 c0       	rjmp	.+320    	; 0xae8 <delay_us+0x1f8>
				} while (u8_l_flag_status == LOGIC_FALSE);
				
			}
			else
			{
				str_tmr_config.enu_tmr_clk				= timer_clk_map(P_1024);
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	94 e0       	ldi	r25, 0x04	; 4
     9ac:	0e 94 4b 04 	call	0x896	; 0x896 <timer_clk_map>
     9b0:	8a 87       	std	Y+10, r24	; 0x0a
				str_tmr_config.u16_tmr_initial_value	= ZERO_VALUE;
     9b2:	1c 86       	std	Y+12, r1	; 0x0c
     9b4:	1b 86       	std	Y+11, r1	; 0x0b
				//calculate number of overflows
				if(u8_timer_id == ENU_TMR_CHANNEL_0 || u8_timer_id == ENU_TMR_CHANNEL_2)
     9b6:	dd 20       	and	r13, r13
     9b8:	19 f0       	breq	.+6      	; 0x9c0 <delay_us+0xd0>
     9ba:	92 e0       	ldi	r25, 0x02	; 2
     9bc:	d9 12       	cpse	r13, r25
     9be:	20 c0       	rjmp	.+64     	; 0xa00 <delay_us+0x110>
				{
					f32_l_overFlows = f32_time_delay / MAX_8_BIT_DELAY_US(P_1024);
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	58 e3       	ldi	r21, 0x38	; 56
     9c8:	c5 01       	movw	r24, r10
     9ca:	b4 01       	movw	r22, r8
     9cc:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
     9d0:	4b 01       	movw	r8, r22
     9d2:	5c 01       	movw	r10, r24
					u16_l_realPart = (uint16)f32_l_overFlows;
     9d4:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
     9d8:	8b 01       	movw	r16, r22
					f32_l_reminderPart = (f32_l_overFlows - u16_l_realPart) * MAX_8_BIT_DELAY_US(P_1024);
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 c3 19 	call	0x3386	; 0x3386 <__floatunsisf>
     9e2:	9b 01       	movw	r18, r22
     9e4:	ac 01       	movw	r20, r24
     9e6:	c5 01       	movw	r24, r10
     9e8:	b4 01       	movw	r22, r8
     9ea:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	57 e4       	ldi	r21, 0x47	; 71
     9f6:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
     9fa:	4b 01       	movw	r8, r22
     9fc:	5c 01       	movw	r10, r24
     9fe:	33 c0       	rjmp	.+102    	; 0xa66 <delay_us+0x176>
				}
				else
				{
					f32_l_overFlows = f32_time_delay / MAX_16_BIT_DELAY_US(P_1024);
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	54 e3       	ldi	r21, 0x34	; 52
     a08:	c5 01       	movw	r24, r10
     a0a:	b4 01       	movw	r22, r8
     a0c:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
     a10:	4b 01       	movw	r8, r22
     a12:	5c 01       	movw	r10, r24
					u16_l_realPart = (uint16)f32_l_overFlows;
     a14:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
     a18:	8b 01       	movw	r16, r22
					f32_l_reminderPart =((f32_l_overFlows - u16_l_realPart) * MAX_16_BIT_DELAY_US(P_1024));
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 c3 19 	call	0x3386	; 0x3386 <__floatunsisf>
     a22:	9b 01       	movw	r18, r22
     a24:	ac 01       	movw	r20, r24
     a26:	c5 01       	movw	r24, r10
     a28:	b4 01       	movw	r22, r8
     a2a:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	5b e4       	ldi	r21, 0x4B	; 75
     a36:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
     a3a:	4b 01       	movw	r8, r22
     a3c:	5c 01       	movw	r10, r24
     a3e:	13 c0       	rjmp	.+38     	; 0xa66 <delay_us+0x176>
				}
				while (u16_l_realPart != ZERO_VALUE)
				{
					timer_init(&str_tmr_config);
     a40:	ce 01       	movw	r24, r28
     a42:	06 96       	adiw	r24, 0x06	; 6
     a44:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <timer_init>
					timer_start(u8_timer_id);
     a48:	8d 2d       	mov	r24, r13
     a4a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <timer_start>
					do 
					{
						timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
     a4e:	ae 01       	movw	r20, r28
     a50:	4b 5f       	subi	r20, 0xFB	; 251
     a52:	5f 4f       	sbci	r21, 0xFF	; 255
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	8d 2d       	mov	r24, r13
     a58:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <timer_flag_notification>
					}while (u8_l_flag_status == LOGIC_FALSE);
     a5c:	9d 81       	ldd	r25, Y+5	; 0x05
     a5e:	99 23       	and	r25, r25
     a60:	b1 f3       	breq	.-20     	; 0xa4e <delay_us+0x15e>
					u16_l_realPart--;
     a62:	01 50       	subi	r16, 0x01	; 1
     a64:	11 09       	sbc	r17, r1
				{
					f32_l_overFlows = f32_time_delay / MAX_16_BIT_DELAY_US(P_1024);
					u16_l_realPart = (uint16)f32_l_overFlows;
					f32_l_reminderPart =((f32_l_overFlows - u16_l_realPart) * MAX_16_BIT_DELAY_US(P_1024));
				}
				while (u16_l_realPart != ZERO_VALUE)
     a66:	01 15       	cp	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	51 f7       	brne	.-44     	; 0xa40 <delay_us+0x150>
					{
						timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
					}while (u8_l_flag_status == LOGIC_FALSE);
					u16_l_realPart--;
				}
				if(f32_l_reminderPart > ZERO_VALUE)
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	a9 01       	movw	r20, r18
     a72:	c5 01       	movw	r24, r10
     a74:	b4 01       	movw	r22, r8
     a76:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gesf2>
     a7a:	18 16       	cp	r1, r24
     a7c:	a4 f5       	brge	.+104    	; 0xae6 <delay_us+0x1f6>
				{
					calc_prescaler(f32_l_reminderPart,u8_timer_id,ENU_MICRO_SECOND,&u16_l_prescale);
     a7e:	8e 01       	movw	r16, r28
     a80:	0f 5f       	subi	r16, 0xFF	; 255
     a82:	1f 4f       	sbci	r17, 0xFF	; 255
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	4d 2d       	mov	r20, r13
     a88:	c5 01       	movw	r24, r10
     a8a:	b4 01       	movw	r22, r8
     a8c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <calc_prescaler>
					calc_initialValue(u8_timer_id,ENU_MICRO_SECOND,u16_l_prescale,f32_l_reminderPart,&u16_l_initialValue);
     a90:	49 81       	ldd	r20, Y+1	; 0x01
     a92:	5a 81       	ldd	r21, Y+2	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	03 96       	adiw	r24, 0x03	; 3
     a98:	7c 01       	movw	r14, r24
     a9a:	95 01       	movw	r18, r10
     a9c:	84 01       	movw	r16, r8
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	8d 2d       	mov	r24, r13
     aa2:	0e 94 5d 13 	call	0x26ba	; 0x26ba <calc_initialValue>
					str_tmr_config.enu_tmr_clk				= timer_clk_map(u16_l_prescale);
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	9a 81       	ldd	r25, Y+2	; 0x02
     aaa:	0e 94 4b 04 	call	0x896	; 0x896 <timer_clk_map>
     aae:	8a 87       	std	Y+10, r24	; 0x0a
					str_tmr_config.u16_tmr_initial_value	= u16_l_initialValue;
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	9c 81       	ldd	r25, Y+4	; 0x04
     ab4:	9c 87       	std	Y+12, r25	; 0x0c
     ab6:	8b 87       	std	Y+11, r24	; 0x0b
					timer_init(&str_tmr_config);
     ab8:	ce 01       	movw	r24, r28
     aba:	06 96       	adiw	r24, 0x06	; 6
     abc:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <timer_init>
					timer_start(u8_timer_id);
     ac0:	8d 2d       	mov	r24, r13
     ac2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <timer_start>
					//wait for timer_flag_notification
					do 
					{
						timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
     ac6:	ae 01       	movw	r20, r28
     ac8:	4b 5f       	subi	r20, 0xFB	; 251
     aca:	5f 4f       	sbci	r21, 0xFF	; 255
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	8d 2d       	mov	r24, r13
     ad0:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <timer_flag_notification>
					} while (u8_l_flag_status == LOGIC_FALSE);
     ad4:	8d 81       	ldd	r24, Y+5	; 0x05
     ad6:	88 23       	and	r24, r24
     ad8:	b1 f3       	breq	.-20     	; 0xac6 <delay_us+0x1d6>

/*============= FUNCTION PROTOTYPE =============*/

enu_time_error_t delay_us	(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
     ada:	83 e0       	ldi	r24, 0x03	; 3
     adc:	05 c0       	rjmp	.+10     	; 0xae8 <delay_us+0x1f8>
			enu_time_error = ENU_TIMER_INVALID_ID;
		}		
	}
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	03 c0       	rjmp	.+6      	; 0xae8 <delay_us+0x1f8>
				}
			}
		}
		else
		{
			enu_time_error = ENU_TIMER_INVALID_ID;
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <delay_us+0x1f8>

/*============= FUNCTION PROTOTYPE =============*/

enu_time_error_t delay_us	(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
     ae6:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
	}
	return enu_time_error;
}
     ae8:	2e 96       	adiw	r28, 0x0e	; 14
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	bf 90       	pop	r11
     b04:	af 90       	pop	r10
     b06:	9f 90       	pop	r9
     b08:	8f 90       	pop	r8
     b0a:	08 95       	ret

00000b0c <delay_ms>:

enu_time_error_t delay_ms	(uint8 u8_timer_id,float32 f32_time_delay)
{
     b0c:	8f 92       	push	r8
     b0e:	9f 92       	push	r9
     b10:	af 92       	push	r10
     b12:	bf 92       	push	r11
     b14:	df 92       	push	r13
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	2e 97       	sbiw	r28, 0x0e	; 14
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
	BOOLEAN bo_l_return_state		= FALSE ;
	uint16 u16_l_prescale			= ZERO_VALUE;
     b32:	1a 82       	std	Y+2, r1	; 0x02
     b34:	19 82       	std	Y+1, r1	; 0x01
	uint16 u16_l_initialValue		= ZERO_VALUE;
     b36:	1c 82       	std	Y+4, r1	; 0x04
     b38:	1b 82       	std	Y+3, r1	; 0x03
	float32 f32_l_overFlows			= ZERO_VALUE;
	uint8 u8_l_flag_status			= ZERO_VALUE;
     b3a:	1d 82       	std	Y+5, r1	; 0x05
	uint16 u16_l_realPart			= ZERO_VALUE;
	float32 f32_l_reminderPart		= ZERO_VALUE;
	str_tmr_config_t str_tmr_config ;
	str_tmr_config.enu_tmr_channel_id		= u8_timer_id;
     b3c:	8e 83       	std	Y+6, r24	; 0x06
	str_tmr_config.enu_tmr_mode				= ENU_TMR_NORMAL_MODE;
     b3e:	1f 82       	std	Y+7, r1	; 0x07
	str_tmr_config.enu_tmr_cmp_mode			= ENU_TMR_CMP_DISCONNECT;
     b40:	19 86       	std	Y+9, r1	; 0x09
	str_tmr_config.enu_tmr_interrupt_state	= ENU_TMR_INT_DISABLE;
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	98 87       	std	Y+8, r25	; 0x08
	str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
     b46:	1e 86       	std	Y+14, r1	; 0x0e
     b48:	1d 86       	std	Y+13, r1	; 0x0d
	
	if(u8_timer_id < MAX_ENU_TMR_CHANNEL)
     b4a:	83 30       	cpi	r24, 0x03	; 3
     b4c:	08 f0       	brcs	.+2      	; 0xb50 <delay_ms+0x44>
     b4e:	d5 c0       	rjmp	.+426    	; 0xcfa <delay_ms+0x1ee>
     b50:	4a 01       	movw	r8, r20
     b52:	5b 01       	movw	r10, r22
     b54:	d8 2e       	mov	r13, r24
	{
		//compare delay with max timer value and if delay < max timer value, find the best prescaler value
		bo_l_return_state = calc_prescaler(f32_time_delay,u8_timer_id,ENU_MILLI_SECOND,&u16_l_prescale);
     b56:	8e 01       	movw	r16, r28
     b58:	0f 5f       	subi	r16, 0xFF	; 255
     b5a:	1f 4f       	sbci	r17, 0xFF	; 255
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	48 2f       	mov	r20, r24
     b60:	c5 01       	movw	r24, r10
     b62:	b4 01       	movw	r22, r8
     b64:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <calc_prescaler>
		if(bo_l_return_state == TRUE)
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	09 f0       	breq	.+2      	; 0xb6e <delay_ms+0x62>
     b6c:	c8 c0       	rjmp	.+400    	; 0xcfe <delay_ms+0x1f2>
		{
			if (u16_l_prescale != NO_FIT_PRESCALER)
     b6e:	49 81       	ldd	r20, Y+1	; 0x01
     b70:	5a 81       	ldd	r21, Y+2	; 0x02
     b72:	4c 3d       	cpi	r20, 0xDC	; 220
     b74:	85 e0       	ldi	r24, 0x05	; 5
     b76:	58 07       	cpc	r21, r24
     b78:	29 f1       	breq	.+74     	; 0xbc4 <delay_ms+0xb8>
			{
				//use timer without overflows
				calc_initialValue(u8_timer_id,ENU_MILLI_SECOND,u16_l_prescale,f32_time_delay,&u16_l_initialValue);
     b7a:	ce 01       	movw	r24, r28
     b7c:	03 96       	adiw	r24, 0x03	; 3
     b7e:	7c 01       	movw	r14, r24
     b80:	95 01       	movw	r18, r10
     b82:	84 01       	movw	r16, r8
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	8d 2d       	mov	r24, r13
     b88:	0e 94 5d 13 	call	0x26ba	; 0x26ba <calc_initialValue>
				str_tmr_config.enu_tmr_clk				= timer_clk_map(u16_l_prescale);
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	9a 81       	ldd	r25, Y+2	; 0x02
     b90:	0e 94 4b 04 	call	0x896	; 0x896 <timer_clk_map>
     b94:	8a 87       	std	Y+10, r24	; 0x0a
				str_tmr_config.u16_tmr_initial_value	= u16_l_initialValue;
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	9c 81       	ldd	r25, Y+4	; 0x04
     b9a:	9c 87       	std	Y+12, r25	; 0x0c
     b9c:	8b 87       	std	Y+11, r24	; 0x0b
				timer_init(&str_tmr_config);
     b9e:	ce 01       	movw	r24, r28
     ba0:	06 96       	adiw	r24, 0x06	; 6
     ba2:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <timer_init>
				timer_start(u8_timer_id);
     ba6:	8d 2d       	mov	r24, r13
     ba8:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <timer_start>
				//wait for timer_flag_notification
				do 
				{
					timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
     bac:	ae 01       	movw	r20, r28
     bae:	4b 5f       	subi	r20, 0xFB	; 251
     bb0:	5f 4f       	sbci	r21, 0xFF	; 255
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	8d 2d       	mov	r24, r13
     bb6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <timer_flag_notification>
				} while (u8_l_flag_status == LOGIC_FALSE);
     bba:	8d 81       	ldd	r24, Y+5	; 0x05
     bbc:	88 23       	and	r24, r24
     bbe:	b1 f3       	breq	.-20     	; 0xbac <delay_ms+0xa0>
	return enu_time_error;
}

enu_time_error_t delay_ms	(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	a0 c0       	rjmp	.+320    	; 0xd04 <delay_ms+0x1f8>
				} while (u8_l_flag_status == LOGIC_FALSE);
				
			}
			else
			{
				str_tmr_config.enu_tmr_clk				= timer_clk_map(P_1024);
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	94 e0       	ldi	r25, 0x04	; 4
     bc8:	0e 94 4b 04 	call	0x896	; 0x896 <timer_clk_map>
     bcc:	8a 87       	std	Y+10, r24	; 0x0a
				str_tmr_config.u16_tmr_initial_value	= ZERO_VALUE;
     bce:	1c 86       	std	Y+12, r1	; 0x0c
     bd0:	1b 86       	std	Y+11, r1	; 0x0b
				//calculate number of overflows
				if(u8_timer_id == ENU_TMR_CHANNEL_0 || u8_timer_id == ENU_TMR_CHANNEL_2)
     bd2:	dd 20       	and	r13, r13
     bd4:	19 f0       	breq	.+6      	; 0xbdc <delay_ms+0xd0>
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	d9 12       	cpse	r13, r25
     bda:	20 c0       	rjmp	.+64     	; 0xc1c <delay_ms+0x110>
				{
					f32_l_overFlows = f32_time_delay / MAX_8_BIT_DELAY_MS(P_1024);
     bdc:	2f e6       	ldi	r18, 0x6F	; 111
     bde:	32 e1       	ldi	r19, 0x12	; 18
     be0:	43 e0       	ldi	r20, 0x03	; 3
     be2:	52 e4       	ldi	r21, 0x42	; 66
     be4:	c5 01       	movw	r24, r10
     be6:	b4 01       	movw	r22, r8
     be8:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
     bec:	4b 01       	movw	r8, r22
     bee:	5c 01       	movw	r10, r24
					u16_l_realPart = (uint16)f32_l_overFlows;
     bf0:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
     bf4:	8b 01       	movw	r16, r22
					f32_l_reminderPart = (f32_l_overFlows - u16_l_realPart) * MAX_8_BIT_DELAY_MS(P_1024);
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 c3 19 	call	0x3386	; 0x3386 <__floatunsisf>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	c5 01       	movw	r24, r10
     c04:	b4 01       	movw	r22, r8
     c06:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
     c0a:	2f e6       	ldi	r18, 0x6F	; 111
     c0c:	32 e1       	ldi	r19, 0x12	; 18
     c0e:	43 e0       	ldi	r20, 0x03	; 3
     c10:	52 e4       	ldi	r21, 0x42	; 66
     c12:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
     c16:	4b 01       	movw	r8, r22
     c18:	5c 01       	movw	r10, r24
     c1a:	33 c0       	rjmp	.+102    	; 0xc82 <delay_ms+0x176>
				}
				else
				{
					f32_l_overFlows = f32_time_delay / MAX_16_BIT_DELAY_MS(P_1024);
     c1c:	2f e6       	ldi	r18, 0x6F	; 111
     c1e:	32 e1       	ldi	r19, 0x12	; 18
     c20:	43 e0       	ldi	r20, 0x03	; 3
     c22:	56 e4       	ldi	r21, 0x46	; 70
     c24:	c5 01       	movw	r24, r10
     c26:	b4 01       	movw	r22, r8
     c28:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
     c2c:	4b 01       	movw	r8, r22
     c2e:	5c 01       	movw	r10, r24
					u16_l_realPart = (uint16)f32_l_overFlows;
     c30:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
     c34:	8b 01       	movw	r16, r22
					f32_l_reminderPart =((f32_l_overFlows - u16_l_realPart) * MAX_16_BIT_DELAY_MS(P_1024));
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 c3 19 	call	0x3386	; 0x3386 <__floatunsisf>
     c3e:	9b 01       	movw	r18, r22
     c40:	ac 01       	movw	r20, r24
     c42:	c5 01       	movw	r24, r10
     c44:	b4 01       	movw	r22, r8
     c46:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
     c4a:	2f e6       	ldi	r18, 0x6F	; 111
     c4c:	32 e1       	ldi	r19, 0x12	; 18
     c4e:	43 e0       	ldi	r20, 0x03	; 3
     c50:	56 e4       	ldi	r21, 0x46	; 70
     c52:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
     c56:	4b 01       	movw	r8, r22
     c58:	5c 01       	movw	r10, r24
     c5a:	13 c0       	rjmp	.+38     	; 0xc82 <delay_ms+0x176>
				}
				while (u16_l_realPart != ZERO_VALUE)
				{
					timer_init(&str_tmr_config);
     c5c:	ce 01       	movw	r24, r28
     c5e:	06 96       	adiw	r24, 0x06	; 6
     c60:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <timer_init>
					timer_start(u8_timer_id);
     c64:	8d 2d       	mov	r24, r13
     c66:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <timer_start>
					do 
					{
						timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
     c6a:	ae 01       	movw	r20, r28
     c6c:	4b 5f       	subi	r20, 0xFB	; 251
     c6e:	5f 4f       	sbci	r21, 0xFF	; 255
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	8d 2d       	mov	r24, r13
     c74:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <timer_flag_notification>
					}while (u8_l_flag_status == LOGIC_FALSE);
     c78:	9d 81       	ldd	r25, Y+5	; 0x05
     c7a:	99 23       	and	r25, r25
     c7c:	b1 f3       	breq	.-20     	; 0xc6a <delay_ms+0x15e>
					u16_l_realPart--;
     c7e:	01 50       	subi	r16, 0x01	; 1
     c80:	11 09       	sbc	r17, r1
				{
					f32_l_overFlows = f32_time_delay / MAX_16_BIT_DELAY_MS(P_1024);
					u16_l_realPart = (uint16)f32_l_overFlows;
					f32_l_reminderPart =((f32_l_overFlows - u16_l_realPart) * MAX_16_BIT_DELAY_MS(P_1024));
				}
				while (u16_l_realPart != ZERO_VALUE)
     c82:	01 15       	cp	r16, r1
     c84:	11 05       	cpc	r17, r1
     c86:	51 f7       	brne	.-44     	; 0xc5c <delay_ms+0x150>
					{
						timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
					}while (u8_l_flag_status == LOGIC_FALSE);
					u16_l_realPart--;
				}
				if(f32_l_reminderPart > ZERO_VALUE)
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	a9 01       	movw	r20, r18
     c8e:	c5 01       	movw	r24, r10
     c90:	b4 01       	movw	r22, r8
     c92:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__gesf2>
     c96:	18 16       	cp	r1, r24
     c98:	a4 f5       	brge	.+104    	; 0xd02 <delay_ms+0x1f6>
				{
					calc_prescaler(f32_l_reminderPart,u8_timer_id,ENU_MILLI_SECOND,&u16_l_prescale);
     c9a:	8e 01       	movw	r16, r28
     c9c:	0f 5f       	subi	r16, 0xFF	; 255
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	4d 2d       	mov	r20, r13
     ca4:	c5 01       	movw	r24, r10
     ca6:	b4 01       	movw	r22, r8
     ca8:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <calc_prescaler>
					calc_initialValue(u8_timer_id,ENU_MILLI_SECOND,u16_l_prescale,f32_l_reminderPart,&u16_l_initialValue);
     cac:	49 81       	ldd	r20, Y+1	; 0x01
     cae:	5a 81       	ldd	r21, Y+2	; 0x02
     cb0:	ce 01       	movw	r24, r28
     cb2:	03 96       	adiw	r24, 0x03	; 3
     cb4:	7c 01       	movw	r14, r24
     cb6:	95 01       	movw	r18, r10
     cb8:	84 01       	movw	r16, r8
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	8d 2d       	mov	r24, r13
     cbe:	0e 94 5d 13 	call	0x26ba	; 0x26ba <calc_initialValue>
					str_tmr_config.enu_tmr_clk				= timer_clk_map(u16_l_prescale);
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	0e 94 4b 04 	call	0x896	; 0x896 <timer_clk_map>
     cca:	8a 87       	std	Y+10, r24	; 0x0a
					str_tmr_config.u16_tmr_initial_value	= u16_l_initialValue;
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	9c 87       	std	Y+12, r25	; 0x0c
     cd2:	8b 87       	std	Y+11, r24	; 0x0b
					timer_init(&str_tmr_config);
     cd4:	ce 01       	movw	r24, r28
     cd6:	06 96       	adiw	r24, 0x06	; 6
     cd8:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <timer_init>
					timer_start(u8_timer_id);
     cdc:	8d 2d       	mov	r24, r13
     cde:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <timer_start>
					//wait for timer_flag_notification
					do 
					{
						timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
     ce2:	ae 01       	movw	r20, r28
     ce4:	4b 5f       	subi	r20, 0xFB	; 251
     ce6:	5f 4f       	sbci	r21, 0xFF	; 255
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	8d 2d       	mov	r24, r13
     cec:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <timer_flag_notification>
					} while (u8_l_flag_status == LOGIC_FALSE);
     cf0:	8d 81       	ldd	r24, Y+5	; 0x05
     cf2:	88 23       	and	r24, r24
     cf4:	b1 f3       	breq	.-20     	; 0xce2 <delay_ms+0x1d6>
	return enu_time_error;
}

enu_time_error_t delay_ms	(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
     cf6:	83 e0       	ldi	r24, 0x03	; 3
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <delay_ms+0x1f8>
			enu_time_error = ENU_TIMER_INVALID_ID;
		}		
	}
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <delay_ms+0x1f8>
				}
			}
		}
		else
		{
			enu_time_error = ENU_TIMER_INVALID_ID;
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	01 c0       	rjmp	.+2      	; 0xd04 <delay_ms+0x1f8>
	return enu_time_error;
}

enu_time_error_t delay_ms	(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
     d02:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
	}
	return enu_time_error;
}
     d04:	2e 96       	adiw	r28, 0x0e	; 14
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	df 90       	pop	r13
     d1e:	bf 90       	pop	r11
     d20:	af 90       	pop	r10
     d22:	9f 90       	pop	r9
     d24:	8f 90       	pop	r8
     d26:	08 95       	ret

00000d28 <Ultrasonic_edgeProcessing>:
/**
 * @brief       Ultrasonic_edgeProcessing		: callback function used to process the detection of echo signal 
 */
void Ultrasonic_edgeProcessing(void)
{
	gl_u8_edgeCount++;
     d28:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <gl_u8_edgeCount>
     d2c:	8f 5f       	subi	r24, 0xFF	; 255
     d2e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <gl_u8_edgeCount>
	if(gl_u8_edgeCount == FIREST_EDGE)
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	31 f4       	brne	.+12     	; 0xd42 <Ultrasonic_edgeProcessing+0x1a>
	{
		Icu_clearTimerValue();
     d36:	0e 94 26 01 	call	0x24c	; 0x24c <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(ENU_ICU_FALLING);
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Icu_setEdgeDetectionType>
     d40:	08 95       	ret
	}
	else if(gl_u8_edgeCount == SECOND_EDGE)
     d42:	82 30       	cpi	r24, 0x02	; 2
     d44:	49 f4       	brne	.+18     	; 0xd58 <Ultrasonic_edgeProcessing+0x30>
	{
		Icu_getTimerValue(&gl_u16_timeHigh);
     d46:	86 e8       	ldi	r24, 0x86	; 134
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 08 01 	call	0x210	; 0x210 <Icu_getTimerValue>
		Icu_clearTimerValue();
     d4e:	0e 94 26 01 	call	0x24c	; 0x24c <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(ENU_ICU_RISING);
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Icu_setEdgeDetectionType>
     d58:	08 95       	ret

00000d5a <Ultrasonic_init>:
 * @brief       Ultrasonic_init				: Function to initialize the ultrasonic driver
 *											  initialize ICU driver,set callback function,setup trigger pin direction as output
 *											  setup External interrupt source
 */
enu_usonic_state_t Ultrasonic_init(uint8 u8_triggerPort,uint8 u8_triggerPin,enu_echo_pin_id_t enu_echo_pin_id)
{
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	00 d0       	rcall	.+0      	; 0xd64 <Ultrasonic_init+0xa>
     d64:	00 d0       	rcall	.+0      	; 0xd66 <Ultrasonic_init+0xc>
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
	str_icu_configtype_t str_icu_configtype;
	if((u8_triggerPort < MAX_PORT_ID) && (u8_triggerPin < MAX_PIN_ID) && (enu_echo_pin_id < ENU_MAX_ECHO))
     d6a:	84 30       	cpi	r24, 0x04	; 4
     d6c:	20 f5       	brcc	.+72     	; 0xdb6 <Ultrasonic_init+0x5c>
     d6e:	68 30       	cpi	r22, 0x08	; 8
     d70:	20 f5       	brcc	.+72     	; 0xdba <Ultrasonic_init+0x60>
     d72:	43 30       	cpi	r20, 0x03	; 3
     d74:	20 f5       	brcc	.+72     	; 0xdbe <Ultrasonic_init+0x64>
     d76:	06 2f       	mov	r16, r22
     d78:	18 2f       	mov	r17, r24
	{
		str_icu_configtype.enu_icu_channel_id	= enu_echo_pin_id;
     d7a:	49 83       	std	Y+1, r20	; 0x01
		str_icu_configtype.enu_timer_channel_id = ULTRASONIC_TIMER_ID;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	8a 83       	std	Y+2, r24	; 0x02
		str_icu_configtype.enu_icu_clock		= ENU_ICU_F_CPU_8;
     d80:	92 e0       	ldi	r25, 0x02	; 2
     d82:	9b 83       	std	Y+3, r25	; 0x03
		str_icu_configtype.enu_icu_edgetype		= ENU_ICU_RISING;
     d84:	8c 83       	std	Y+4, r24	; 0x04
		gl_u8_triggerPort						= u8_triggerPort;
     d86:	10 93 85 00 	sts	0x0085, r17	; 0x800085 <gl_u8_triggerPort>
		gl_u8_triggerPin						= u8_triggerPin;
     d8a:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <gl_u8_triggerPin>
		Icu_init(&str_icu_configtype);
     d8e:	ce 01       	movw	r24, r28
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	0e 94 65 00 	call	0xca	; 0xca <Icu_init>
		Icu_setCallBack(Ultrasonic_edgeProcessing);
     d96:	84 e9       	ldi	r24, 0x94	; 148
     d98:	96 e0       	ldi	r25, 0x06	; 6
     d9a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Icu_setCallBack>
		DIO_pinMode(u8_triggerPort,u8_triggerPin,PIN_OUTPUT);		 //setup trigger pin direction as output
     d9e:	41 e0       	ldi	r20, 0x01	; 1
     da0:	60 2f       	mov	r22, r16
     da2:	81 2f       	mov	r24, r17
     da4:	0e 94 68 07 	call	0xed0	; 0xed0 <DIO_pinMode>
		DIO_writePin(u8_triggerPort,u8_triggerPin,PIN_LOW);
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	60 2f       	mov	r22, r16
     dac:	81 2f       	mov	r24, r17
     dae:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
 *											  initialize ICU driver,set callback function,setup trigger pin direction as output
 *											  setup External interrupt source
 */
enu_usonic_state_t Ultrasonic_init(uint8 u8_triggerPort,uint8 u8_triggerPin,enu_echo_pin_id_t enu_echo_pin_id)
{
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
     db2:	80 e0       	ldi	r24, 0x00	; 0
		gl_u8_triggerPort						= u8_triggerPort;
		gl_u8_triggerPin						= u8_triggerPin;
		Icu_init(&str_icu_configtype);
		Icu_setCallBack(Ultrasonic_edgeProcessing);
		DIO_pinMode(u8_triggerPort,u8_triggerPin,PIN_OUTPUT);		 //setup trigger pin direction as output
		DIO_writePin(u8_triggerPort,u8_triggerPin,PIN_LOW);
     db4:	05 c0       	rjmp	.+10     	; 0xdc0 <Ultrasonic_init+0x66>
	}
	else
	{
		enu_usonic_state = ENU_USONIC_STATE_INVALID;
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	03 c0       	rjmp	.+6      	; 0xdc0 <Ultrasonic_init+0x66>
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	01 c0       	rjmp	.+2      	; 0xdc0 <Ultrasonic_init+0x66>
     dbe:	81 e0       	ldi	r24, 0x01	; 1
	}
	return enu_usonic_state;
}
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	08 95       	ret

00000dd2 <Ultrasonic_Trigger>:
/**
 * @brief       Ultrasonic_Trigger		: function used to send trigger pulse 10 microSEC
 */
void Ultrasonic_Trigger(void)
{
	DIO_writePin(gl_u8_triggerPort, gl_u8_triggerPin,PIN_HIGH);
     dd2:	41 e0       	ldi	r20, 0x01	; 1
     dd4:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <gl_u8_triggerPin>
     dd8:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <gl_u8_triggerPort>
     ddc:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
	delay_us(DELAY_ID,TRIGGER_TIME);
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	60 e2       	ldi	r22, 0x20	; 32
     de6:	71 e4       	ldi	r23, 0x41	; 65
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	0e 94 78 04 	call	0x8f0	; 0x8f0 <delay_us>
	DIO_writePin(gl_u8_triggerPort, gl_u8_triggerPin,PIN_LOW);
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <gl_u8_triggerPin>
     df4:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <gl_u8_triggerPort>
     df8:	0e 94 ee 07 	call	0xfdc	; 0xfdc <DIO_writePin>
     dfc:	08 95       	ret

00000dfe <Ultrasonic_readDistance>:

/**
 * @brief       Ultrasonic_readDistance		: function to read distance of from the sensor
 */
enu_usonic_state_t Ultrasonic_readDistance(uint16* ptr_u16_distanceValue)
{
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
	if(ptr_u16_distanceValue != NULL_PTR)
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	e1 f0       	breq	.+56     	; 0xe3e <Ultrasonic_readDistance+0x40>
     e06:	ec 01       	movw	r28, r24
	{
		Ultrasonic_Trigger();
     e08:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Ultrasonic_Trigger>
		while(gl_u8_edgeCount != NUM_OF_EDGES);			//wait until ultrasonic sound to travel towards the object and return.
     e0c:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <gl_u8_edgeCount>
     e10:	92 30       	cpi	r25, 0x02	; 2
     e12:	e1 f7       	brne	.-8      	; 0xe0c <Ultrasonic_readDistance+0xe>
		*ptr_u16_distanceValue = CALC_DISTANCE(gl_u16_timeHigh);
     e14:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <gl_u16_timeHigh>
     e18:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <gl_u16_timeHigh+0x1>
     e1c:	af e9       	ldi	r26, 0x9F	; 159
     e1e:	b6 e4       	ldi	r27, 0x46	; 70
     e20:	0e 94 ed 1a 	call	0x35da	; 0x35da <__umulhisi3>
     e24:	92 95       	swap	r25
     e26:	82 95       	swap	r24
     e28:	8f 70       	andi	r24, 0x0F	; 15
     e2a:	89 27       	eor	r24, r25
     e2c:	9f 70       	andi	r25, 0x0F	; 15
     e2e:	89 27       	eor	r24, r25
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	99 83       	std	Y+1, r25	; 0x01
     e34:	88 83       	st	Y, r24
		gl_u8_edgeCount=ZERO;							//clear edge count to be ready for new read
     e36:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <gl_u8_edgeCount>
/**
 * @brief       Ultrasonic_readDistance		: function to read distance of from the sensor
 */
enu_usonic_state_t Ultrasonic_readDistance(uint16* ptr_u16_distanceValue)
{
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <Ultrasonic_readDistance+0x42>
		*ptr_u16_distanceValue = CALC_DISTANCE(gl_u16_timeHigh);
		gl_u8_edgeCount=ZERO;							//clear edge count to be ready for new read
	}
	else
	{
		enu_usonic_state = ENU_USONIC_STATE_INVALID;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return enu_usonic_state;
}
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <main>:
{
	
}

int main(void)
{
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <main+0x6>
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
	uint16 value=0;
     e50:	1a 82       	std	Y+2, r1	; 0x02
     e52:	19 82       	std	Y+1, r1	; 0x01
	uint8 x = 0;
	LCD_init();
     e54:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_init>
	Ultrasonic_init(PORTB_ID,5,ENU_ECHO_ID_0);
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	65 e0       	ldi	r22, 0x05	; 5
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <Ultrasonic_init>
	LCD_displayString("Distance = ");
     e62:	85 e6       	ldi	r24, 0x65	; 101
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_displayString>
	PWM_Init(3,6,0);
     e6a:	40 e0       	ldi	r20, 0x00	; 0
     e6c:	66 e0       	ldi	r22, 0x06	; 6
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	0e 94 0e 03 	call	0x61c	; 0x61c <PWM_Init>
	enable_global_interrupt();
     e74:	0e 94 dd 09 	call	0x13ba	; 0x13ba <enable_global_interrupt>
	
	while(1)
	{
		for(x = 0;x<100;x++)
     e78:	10 e0       	ldi	r17, 0x00	; 0
     e7a:	10 c0       	rjmp	.+32     	; 0xe9c <main+0x56>
		{
			PWM_start(0,20,x);
     e7c:	21 2f       	mov	r18, r17
     e7e:	44 e1       	ldi	r20, 0x14	; 20
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <PWM_start>
			delay_ms(2,5);	
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	60 ea       	ldi	r22, 0xA0	; 160
     e92:	70 e4       	ldi	r23, 0x40	; 64
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	0e 94 86 05 	call	0xb0c	; 0xb0c <delay_ms>
	PWM_Init(3,6,0);
	enable_global_interrupt();
	
	while(1)
	{
		for(x = 0;x<100;x++)
     e9a:	1f 5f       	subi	r17, 0xFF	; 255
     e9c:	14 36       	cpi	r17, 0x64	; 100
     e9e:	70 f3       	brcs	.-36     	; 0xe7c <main+0x36>
		{
			PWM_start(0,20,x);
			delay_ms(2,5);	
		}
		Ultrasonic_readDistance(&value);
     ea0:	ce 01       	movw	r24, r28
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <Ultrasonic_readDistance>
		LCD_moveCursor(0,10);
     ea8:	6a e0       	ldi	r22, 0x0A	; 10
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	0e 94 82 02 	call	0x504	; 0x504 <LCD_moveCursor>
		LCD_intgerToString(value);
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_intgerToString>
		LCD_displayString(" CM ");
     eb8:	81 e7       	ldi	r24, 0x71	; 113
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_displayString>
		delay_ms(2,50);
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	68 e4       	ldi	r22, 0x48	; 72
     ec6:	72 e4       	ldi	r23, 0x42	; 66
     ec8:	82 e0       	ldi	r24, 0x02	; 2
     eca:	0e 94 86 05 	call	0xb0c	; 0xb0c <delay_ms>
	}
     ece:	d4 cf       	rjmp	.-88     	; 0xe78 <main+0x32>

00000ed0 <DIO_pinMode>:
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
     ed0:	84 30       	cpi	r24, 0x04	; 4
     ed2:	08 f0       	brcs	.+2      	; 0xed6 <DIO_pinMode+0x6>
     ed4:	7b c0       	rjmp	.+246    	; 0xfcc <DIO_pinMode+0xfc>
     ed6:	68 30       	cpi	r22, 0x08	; 8
     ed8:	08 f0       	brcs	.+2      	; 0xedc <DIO_pinMode+0xc>
     eda:	7a c0       	rjmp	.+244    	; 0xfd0 <DIO_pinMode+0x100>
     edc:	42 30       	cpi	r20, 0x02	; 2
     ede:	08 f0       	brcs	.+2      	; 0xee2 <DIO_pinMode+0x12>
     ee0:	79 c0       	rjmp	.+242    	; 0xfd4 <DIO_pinMode+0x104>
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	11 f1       	breq	.+68     	; 0xf2a <DIO_pinMode+0x5a>
     ee6:	30 f0       	brcs	.+12     	; 0xef4 <DIO_pinMode+0x24>
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	d1 f1       	breq	.+116    	; 0xf60 <DIO_pinMode+0x90>
     eec:	83 30       	cpi	r24, 0x03	; 3
     eee:	09 f4       	brne	.+2      	; 0xef2 <DIO_pinMode+0x22>
     ef0:	52 c0       	rjmp	.+164    	; 0xf96 <DIO_pinMode+0xc6>
     ef2:	72 c0       	rjmp	.+228    	; 0xfd8 <DIO_pinMode+0x108>
     ef4:	41 30       	cpi	r20, 0x01	; 1
     ef6:	61 f4       	brne	.+24     	; 0xf10 <DIO_pinMode+0x40>
     ef8:	2a b3       	in	r18, 0x1a	; 26
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_pinMode+0x34>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	6a 95       	dec	r22
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_pinMode+0x30>
     f08:	82 2b       	or	r24, r18
     f0a:	8a bb       	out	0x1a, r24	; 26
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	08 95       	ret
     f10:	2a b3       	in	r18, 0x1a	; 26
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_pinMode+0x4c>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	6a 95       	dec	r22
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_pinMode+0x48>
     f20:	80 95       	com	r24
     f22:	82 23       	and	r24, r18
     f24:	8a bb       	out	0x1a, r24	; 26
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	08 95       	ret
     f2a:	41 30       	cpi	r20, 0x01	; 1
     f2c:	61 f4       	brne	.+24     	; 0xf46 <DIO_pinMode+0x76>
     f2e:	27 b3       	in	r18, 0x17	; 23
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_pinMode+0x6a>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	6a 95       	dec	r22
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_pinMode+0x66>
     f3e:	82 2b       	or	r24, r18
     f40:	87 bb       	out	0x17, r24	; 23
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	08 95       	ret
     f46:	27 b3       	in	r18, 0x17	; 23
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <DIO_pinMode+0x82>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	6a 95       	dec	r22
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <DIO_pinMode+0x7e>
     f56:	80 95       	com	r24
     f58:	82 23       	and	r24, r18
     f5a:	87 bb       	out	0x17, r24	; 23
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	08 95       	ret
     f60:	41 30       	cpi	r20, 0x01	; 1
     f62:	61 f4       	brne	.+24     	; 0xf7c <DIO_pinMode+0xac>
     f64:	24 b3       	in	r18, 0x14	; 20
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_pinMode+0xa0>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	6a 95       	dec	r22
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_pinMode+0x9c>
     f74:	82 2b       	or	r24, r18
     f76:	84 bb       	out	0x14, r24	; 20
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	08 95       	ret
     f7c:	24 b3       	in	r18, 0x14	; 20
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_pinMode+0xb8>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	6a 95       	dec	r22
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_pinMode+0xb4>
     f8c:	80 95       	com	r24
     f8e:	82 23       	and	r24, r18
     f90:	84 bb       	out	0x14, r24	; 20
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	08 95       	ret
     f96:	41 30       	cpi	r20, 0x01	; 1
     f98:	61 f4       	brne	.+24     	; 0xfb2 <DIO_pinMode+0xe2>
     f9a:	21 b3       	in	r18, 0x11	; 17
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <DIO_pinMode+0xd6>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	6a 95       	dec	r22
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <DIO_pinMode+0xd2>
     faa:	82 2b       	or	r24, r18
     fac:	81 bb       	out	0x11, r24	; 17
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	08 95       	ret
     fb2:	21 b3       	in	r18, 0x11	; 17
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_pinMode+0xee>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	6a 95       	dec	r22
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_pinMode+0xea>
     fc2:	80 95       	com	r24
     fc4:	82 23       	and	r24, r18
     fc6:	81 bb       	out	0x11, r24	; 17
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	08 95       	ret
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	08 95       	ret
     fd0:	83 e0       	ldi	r24, 0x03	; 3
     fd2:	08 95       	ret
     fd4:	84 e0       	ldi	r24, 0x04	; 4
     fd6:	08 95       	ret
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	08 95       	ret

00000fdc <DIO_writePin>:
     fdc:	84 30       	cpi	r24, 0x04	; 4
     fde:	08 f0       	brcs	.+2      	; 0xfe2 <DIO_writePin+0x6>
     fe0:	7b c0       	rjmp	.+246    	; 0x10d8 <DIO_writePin+0xfc>
     fe2:	68 30       	cpi	r22, 0x08	; 8
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <DIO_writePin+0xc>
     fe6:	7a c0       	rjmp	.+244    	; 0x10dc <DIO_writePin+0x100>
     fe8:	42 30       	cpi	r20, 0x02	; 2
     fea:	08 f0       	brcs	.+2      	; 0xfee <DIO_writePin+0x12>
     fec:	79 c0       	rjmp	.+242    	; 0x10e0 <DIO_writePin+0x104>
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	11 f1       	breq	.+68     	; 0x1036 <DIO_writePin+0x5a>
     ff2:	30 f0       	brcs	.+12     	; 0x1000 <DIO_writePin+0x24>
     ff4:	82 30       	cpi	r24, 0x02	; 2
     ff6:	d1 f1       	breq	.+116    	; 0x106c <DIO_writePin+0x90>
     ff8:	83 30       	cpi	r24, 0x03	; 3
     ffa:	09 f4       	brne	.+2      	; 0xffe <DIO_writePin+0x22>
     ffc:	52 c0       	rjmp	.+164    	; 0x10a2 <DIO_writePin+0xc6>
     ffe:	72 c0       	rjmp	.+228    	; 0x10e4 <DIO_writePin+0x108>
    1000:	41 30       	cpi	r20, 0x01	; 1
    1002:	61 f4       	brne	.+24     	; 0x101c <DIO_writePin+0x40>
    1004:	2b b3       	in	r18, 0x1b	; 27
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_writePin+0x34>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	6a 95       	dec	r22
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_writePin+0x30>
    1014:	82 2b       	or	r24, r18
    1016:	8b bb       	out	0x1b, r24	; 27
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	08 95       	ret
    101c:	2b b3       	in	r18, 0x1b	; 27
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_writePin+0x4c>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	6a 95       	dec	r22
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_writePin+0x48>
    102c:	80 95       	com	r24
    102e:	82 23       	and	r24, r18
    1030:	8b bb       	out	0x1b, r24	; 27
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	08 95       	ret
    1036:	41 30       	cpi	r20, 0x01	; 1
    1038:	61 f4       	brne	.+24     	; 0x1052 <DIO_writePin+0x76>
    103a:	28 b3       	in	r18, 0x18	; 24
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_writePin+0x6a>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	6a 95       	dec	r22
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_writePin+0x66>
    104a:	82 2b       	or	r24, r18
    104c:	88 bb       	out	0x18, r24	; 24
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	08 95       	ret
    1052:	28 b3       	in	r18, 0x18	; 24
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_writePin+0x82>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	6a 95       	dec	r22
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_writePin+0x7e>
    1062:	80 95       	com	r24
    1064:	82 23       	and	r24, r18
    1066:	88 bb       	out	0x18, r24	; 24
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	08 95       	ret
    106c:	41 30       	cpi	r20, 0x01	; 1
    106e:	61 f4       	brne	.+24     	; 0x1088 <DIO_writePin+0xac>
    1070:	25 b3       	in	r18, 0x15	; 21
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_writePin+0xa0>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	6a 95       	dec	r22
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <DIO_writePin+0x9c>
    1080:	82 2b       	or	r24, r18
    1082:	85 bb       	out	0x15, r24	; 21
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	08 95       	ret
    1088:	25 b3       	in	r18, 0x15	; 21
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <DIO_writePin+0xb8>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	6a 95       	dec	r22
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <DIO_writePin+0xb4>
    1098:	80 95       	com	r24
    109a:	82 23       	and	r24, r18
    109c:	85 bb       	out	0x15, r24	; 21
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	08 95       	ret
    10a2:	41 30       	cpi	r20, 0x01	; 1
    10a4:	61 f4       	brne	.+24     	; 0x10be <DIO_writePin+0xe2>
    10a6:	22 b3       	in	r18, 0x12	; 18
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_writePin+0xd6>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	6a 95       	dec	r22
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_writePin+0xd2>
    10b6:	82 2b       	or	r24, r18
    10b8:	82 bb       	out	0x12, r24	; 18
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	08 95       	ret
    10be:	22 b3       	in	r18, 0x12	; 18
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_writePin+0xee>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	6a 95       	dec	r22
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_writePin+0xea>
    10ce:	80 95       	com	r24
    10d0:	82 23       	and	r24, r18
    10d2:	82 bb       	out	0x12, r24	; 18
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	08 95       	ret
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	08 95       	ret
    10dc:	83 e0       	ldi	r24, 0x03	; 3
    10de:	08 95       	ret
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	08 95       	ret
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	08 95       	ret

000010e8 <DIO_togglePin>:
    10e8:	84 30       	cpi	r24, 0x04	; 4
    10ea:	d0 f5       	brcc	.+116    	; 0x1160 <DIO_togglePin+0x78>
    10ec:	68 30       	cpi	r22, 0x08	; 8
    10ee:	d0 f5       	brcc	.+116    	; 0x1164 <DIO_togglePin+0x7c>
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	91 f0       	breq	.+36     	; 0x1118 <DIO_togglePin+0x30>
    10f4:	28 f0       	brcs	.+10     	; 0x1100 <DIO_togglePin+0x18>
    10f6:	82 30       	cpi	r24, 0x02	; 2
    10f8:	d9 f0       	breq	.+54     	; 0x1130 <DIO_togglePin+0x48>
    10fa:	83 30       	cpi	r24, 0x03	; 3
    10fc:	29 f1       	breq	.+74     	; 0x1148 <DIO_togglePin+0x60>
    10fe:	34 c0       	rjmp	.+104    	; 0x1168 <DIO_togglePin+0x80>
    1100:	2b b3       	in	r18, 0x1b	; 27
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_togglePin+0x24>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	6a 95       	dec	r22
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_togglePin+0x20>
    1110:	82 27       	eor	r24, r18
    1112:	8b bb       	out	0x1b, r24	; 27
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	08 95       	ret
    1118:	28 b3       	in	r18, 0x18	; 24
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_togglePin+0x3c>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	6a 95       	dec	r22
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_togglePin+0x38>
    1128:	82 27       	eor	r24, r18
    112a:	88 bb       	out	0x18, r24	; 24
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	08 95       	ret
    1130:	25 b3       	in	r18, 0x15	; 21
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_togglePin+0x54>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	6a 95       	dec	r22
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_togglePin+0x50>
    1140:	82 27       	eor	r24, r18
    1142:	85 bb       	out	0x15, r24	; 21
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	08 95       	ret
    1148:	22 b3       	in	r18, 0x12	; 18
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_togglePin+0x6c>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	6a 95       	dec	r22
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_togglePin+0x68>
    1158:	82 27       	eor	r24, r18
    115a:	82 bb       	out	0x12, r24	; 18
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	08 95       	ret
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	08 95       	ret
    1164:	83 e0       	ldi	r24, 0x03	; 3
    1166:	08 95       	ret
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	08 95       	ret

0000116c <DIO_writePort>:
/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
    116c:	84 30       	cpi	r24, 0x04	; 4
    116e:	a0 f4       	brcc	.+40     	; 0x1198 <DIO_writePort+0x2c>
	{
			switch(port)
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	49 f0       	breq	.+18     	; 0x1186 <DIO_writePort+0x1a>
    1174:	28 f0       	brcs	.+10     	; 0x1180 <DIO_writePort+0x14>
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	49 f0       	breq	.+18     	; 0x118c <DIO_writePort+0x20>
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	51 f0       	breq	.+20     	; 0x1192 <DIO_writePort+0x26>
    117e:	0e c0       	rjmp	.+28     	; 0x119c <DIO_writePort+0x30>
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
    1180:	6b bb       	out	0x1b, r22	; 27

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1182:	81 e0       	ldi	r24, 0x01	; 1
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
	{
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
    1184:	08 95       	ret
				case PORTB_ID:	PORTB = enu_port_value;		break;
    1186:	68 bb       	out	0x18, r22	; 24

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1188:	81 e0       	ldi	r24, 0x01	; 1
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
	{
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
				case PORTB_ID:	PORTB = enu_port_value;		break;
    118a:	08 95       	ret
				case PORTC_ID:	PORTC = enu_port_value;		break;
    118c:	65 bb       	out	0x15, r22	; 21

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    118e:	81 e0       	ldi	r24, 0x01	; 1
	{
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
				case PORTB_ID:	PORTB = enu_port_value;		break;
				case PORTC_ID:	PORTC = enu_port_value;		break;
    1190:	08 95       	ret
				case PORTD_ID:	PORTD = enu_port_value;		break;
    1192:	62 bb       	out	0x12, r22	; 18

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1194:	81 e0       	ldi	r24, 0x01	; 1
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
				case PORTB_ID:	PORTB = enu_port_value;		break;
				case PORTC_ID:	PORTC = enu_port_value;		break;
				case PORTD_ID:	PORTD = enu_port_value;		break;
    1196:	08 95       	ret
					break;
			}
	}
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	08 95       	ret

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    119c:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
    119e:	08 95       	ret

000011a0 <DIO_readPort>:
/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
    11a0:	84 30       	cpi	r24, 0x04	; 4
    11a2:	f8 f4       	brcc	.+62     	; 0x11e2 <DIO_readPort+0x42>
	{
		if(pptr_value != NULL_PTR)
    11a4:	61 15       	cp	r22, r1
    11a6:	71 05       	cpc	r23, r1
    11a8:	f1 f0       	breq	.+60     	; 0x11e6 <DIO_readPort+0x46>
		{
			switch(port)
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	59 f0       	breq	.+22     	; 0x11c4 <DIO_readPort+0x24>
    11ae:	28 f0       	brcs	.+10     	; 0x11ba <DIO_readPort+0x1a>
    11b0:	82 30       	cpi	r24, 0x02	; 2
    11b2:	69 f0       	breq	.+26     	; 0x11ce <DIO_readPort+0x2e>
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	81 f0       	breq	.+32     	; 0x11d8 <DIO_readPort+0x38>
    11b8:	18 c0       	rjmp	.+48     	; 0x11ea <DIO_readPort+0x4a>
			{
				case PORTA_ID:	*pptr_value = PINA;	break;
    11ba:	89 b3       	in	r24, 0x19	; 25
    11bc:	fb 01       	movw	r30, r22
    11be:	80 83       	st	Z, r24

/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
	{
		if(pptr_value != NULL_PTR)
		{
			switch(port)
			{
				case PORTA_ID:	*pptr_value = PINA;	break;
    11c2:	08 95       	ret
				case PORTB_ID:	*pptr_value = PINB;	break;
    11c4:	86 b3       	in	r24, 0x16	; 22
    11c6:	fb 01       	movw	r30, r22
    11c8:	80 83       	st	Z, r24

/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
		if(pptr_value != NULL_PTR)
		{
			switch(port)
			{
				case PORTA_ID:	*pptr_value = PINA;	break;
				case PORTB_ID:	*pptr_value = PINB;	break;
    11cc:	08 95       	ret
				case PORTC_ID:	*pptr_value = PINC;	break;
    11ce:	83 b3       	in	r24, 0x13	; 19
    11d0:	fb 01       	movw	r30, r22
    11d2:	80 83       	st	Z, r24

/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(port)
			{
				case PORTA_ID:	*pptr_value = PINA;	break;
				case PORTB_ID:	*pptr_value = PINB;	break;
				case PORTC_ID:	*pptr_value = PINC;	break;
    11d6:	08 95       	ret
				case PORTD_ID:	*pptr_value = PIND;	break;
    11d8:	80 b3       	in	r24, 0x10	; 16
    11da:	fb 01       	movw	r30, r22
    11dc:	80 83       	st	Z, r24

/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    11de:	81 e0       	ldi	r24, 0x01	; 1
			switch(port)
			{
				case PORTA_ID:	*pptr_value = PINA;	break;
				case PORTB_ID:	*pptr_value = PINB;	break;
				case PORTC_ID:	*pptr_value = PINC;	break;
				case PORTD_ID:	*pptr_value = PIND;	break;
    11e0:	08 95       	ret
			enu_dio_error = DIO_INVALID_OPERATION;
		}
	}
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	08 95       	ret
			}

		}
		else
		{
			enu_dio_error = DIO_INVALID_OPERATION;
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	08 95       	ret

/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
    11ec:	08 95       	ret

000011ee <Init_external_interrupt>:
	 else
	 {
		 enu_interrupt_error = ENU_INT_INVALID_ID;
	 }
	 return enu_interrupt_error;
 }
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	40 f5       	brcc	.+80     	; 0x1242 <Init_external_interrupt+0x54>
    11f2:	64 30       	cpi	r22, 0x04	; 4
    11f4:	40 f5       	brcc	.+80     	; 0x1246 <Init_external_interrupt+0x58>
    11f6:	81 11       	cpse	r24, r1
    11f8:	06 c0       	rjmp	.+12     	; 0x1206 <Init_external_interrupt+0x18>
    11fa:	85 b7       	in	r24, 0x35	; 53
    11fc:	8c 7f       	andi	r24, 0xFC	; 252
    11fe:	68 2b       	or	r22, r24
    1200:	65 bf       	out	0x35, r22	; 53
    1202:	83 e0       	ldi	r24, 0x03	; 3
    1204:	08 95       	ret
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	59 f4       	brne	.+22     	; 0x1220 <Init_external_interrupt+0x32>
    120a:	85 b7       	in	r24, 0x35	; 53
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	66 0f       	add	r22, r22
    1210:	77 1f       	adc	r23, r23
    1212:	66 0f       	add	r22, r22
    1214:	77 1f       	adc	r23, r23
    1216:	83 7f       	andi	r24, 0xF3	; 243
    1218:	68 2b       	or	r22, r24
    121a:	65 bf       	out	0x35, r22	; 53
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	08 95       	ret
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	99 f4       	brne	.+38     	; 0x124a <Init_external_interrupt+0x5c>
    1224:	8e ef       	ldi	r24, 0xFE	; 254
    1226:	86 0f       	add	r24, r22
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	88 f4       	brcc	.+34     	; 0x124e <Init_external_interrupt+0x60>
    122c:	24 b7       	in	r18, 0x34	; 52
    122e:	30 e4       	ldi	r19, 0x40	; 64
    1230:	63 9f       	mul	r22, r19
    1232:	c0 01       	movw	r24, r0
    1234:	11 24       	eor	r1, r1
    1236:	92 2f       	mov	r25, r18
    1238:	9f 7b       	andi	r25, 0xBF	; 191
    123a:	89 2b       	or	r24, r25
    123c:	84 bf       	out	0x34, r24	; 52
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	08 95       	ret
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	08 95       	ret
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	08 95       	ret
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	08 95       	ret
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	08 95       	ret

00001252 <enable_external_interrupt>:
    1252:	83 30       	cpi	r24, 0x03	; 3
    1254:	a8 f4       	brcc	.+42     	; 0x1280 <enable_external_interrupt+0x2e>
    1256:	81 11       	cpse	r24, r1
    1258:	05 c0       	rjmp	.+10     	; 0x1264 <enable_external_interrupt+0x12>
    125a:	8b b7       	in	r24, 0x3b	; 59
    125c:	80 64       	ori	r24, 0x40	; 64
    125e:	8b bf       	out	0x3b, r24	; 59
    1260:	83 e0       	ldi	r24, 0x03	; 3
    1262:	08 95       	ret
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	29 f4       	brne	.+10     	; 0x1272 <enable_external_interrupt+0x20>
    1268:	8b b7       	in	r24, 0x3b	; 59
    126a:	80 68       	ori	r24, 0x80	; 128
    126c:	8b bf       	out	0x3b, r24	; 59
    126e:	83 e0       	ldi	r24, 0x03	; 3
    1270:	08 95       	ret
    1272:	82 30       	cpi	r24, 0x02	; 2
    1274:	39 f4       	brne	.+14     	; 0x1284 <enable_external_interrupt+0x32>
    1276:	8b b7       	in	r24, 0x3b	; 59
    1278:	80 62       	ori	r24, 0x20	; 32
    127a:	8b bf       	out	0x3b, r24	; 59
    127c:	83 e0       	ldi	r24, 0x03	; 3
    127e:	08 95       	ret
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	08 95       	ret
    1284:	83 e0       	ldi	r24, 0x03	; 3
    1286:	08 95       	ret

00001288 <interrupt0_set_callback>:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt0_set_callback (void(*f_ptr)(void))
{
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
	if (f_ptr != NULL_PTR)
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	31 f0       	breq	.+12     	; 0x1298 <interrupt0_set_callback+0x10>
	{
		gl_callbackptr_0 = f_ptr;
    128c:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <gl_callbackptr_0+0x1>
    1290:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <gl_callbackptr_0>
 *				INVALID_PIN_ID				:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt0_set_callback (void(*f_ptr)(void))
{
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
    1294:	83 e0       	ldi	r24, 0x03	; 3
    1296:	08 95       	ret
		gl_callbackptr_0 = f_ptr;
		
	}
	else
	{
		enu_interrupt_error = ENU_INT_INVALID_INPUT ;
    1298:	82 e0       	ldi	r24, 0x02	; 2
	}
	return enu_interrupt_error ;
}
    129a:	08 95       	ret

0000129c <interrupt1_set_callback>:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt1_set_callback (void(*f_ptr)(void))
{
		enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
		if (f_ptr != NULL_PTR)
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	31 f0       	breq	.+12     	; 0x12ac <interrupt1_set_callback+0x10>
		{
			gl_callbackptr_1 = f_ptr;
    12a0:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <gl_callbackptr_1+0x1>
    12a4:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <gl_callbackptr_1>
 *				INVALID_PIN_ID				:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt1_set_callback (void(*f_ptr)(void))
{
		enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
    12a8:	83 e0       	ldi	r24, 0x03	; 3
    12aa:	08 95       	ret
			gl_callbackptr_1 = f_ptr;
			
		}
		else
		{
			enu_interrupt_error = ENU_INT_INVALID_INPUT ;
    12ac:	82 e0       	ldi	r24, 0x02	; 2
		}
		return enu_interrupt_error ;
}
    12ae:	08 95       	ret

000012b0 <interrupt2_set_callback>:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt2_set_callback (void(*f_ptr)(void))
{	
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
	if (f_ptr != NULL_PTR)
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	31 f0       	breq	.+12     	; 0x12c0 <interrupt2_set_callback+0x10>
	{
		gl_callbackptr_2 = f_ptr;
    12b4:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <gl_callbackptr_2+0x1>
    12b8:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <gl_callbackptr_2>
 *				INVALID_PIN_ID				:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt2_set_callback (void(*f_ptr)(void))
{	
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
    12bc:	83 e0       	ldi	r24, 0x03	; 3
    12be:	08 95       	ret
		gl_callbackptr_2 = f_ptr;
		
	}
	else
	{
		enu_interrupt_error = ENU_INT_INVALID_INPUT ;
    12c0:	82 e0       	ldi	r24, 0x02	; 2
	}
	return enu_interrupt_error ;
}
    12c2:	08 95       	ret

000012c4 <__vector_1>:

ISR_HANDLER(EXT_INT0)
{
    12c4:	1f 92       	push	r1
    12c6:	0f 92       	push	r0
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	0f 92       	push	r0
    12cc:	11 24       	eor	r1, r1
    12ce:	2f 93       	push	r18
    12d0:	3f 93       	push	r19
    12d2:	4f 93       	push	r20
    12d4:	5f 93       	push	r21
    12d6:	6f 93       	push	r22
    12d8:	7f 93       	push	r23
    12da:	8f 93       	push	r24
    12dc:	9f 93       	push	r25
    12de:	af 93       	push	r26
    12e0:	bf 93       	push	r27
    12e2:	ef 93       	push	r30
    12e4:	ff 93       	push	r31
	if(gl_callbackptr_0 != NULL_PTR)
    12e6:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <gl_callbackptr_0>
    12ea:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <gl_callbackptr_0+0x1>
    12ee:	30 97       	sbiw	r30, 0x00	; 0
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <__vector_1+0x30>
	{
		gl_callbackptr_0();
    12f2:	09 95       	icall
	}
}
    12f4:	ff 91       	pop	r31
    12f6:	ef 91       	pop	r30
    12f8:	bf 91       	pop	r27
    12fa:	af 91       	pop	r26
    12fc:	9f 91       	pop	r25
    12fe:	8f 91       	pop	r24
    1300:	7f 91       	pop	r23
    1302:	6f 91       	pop	r22
    1304:	5f 91       	pop	r21
    1306:	4f 91       	pop	r20
    1308:	3f 91       	pop	r19
    130a:	2f 91       	pop	r18
    130c:	0f 90       	pop	r0
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	0f 90       	pop	r0
    1312:	1f 90       	pop	r1
    1314:	18 95       	reti

00001316 <__vector_2>:

ISR_HANDLER(EXT_INT1)
{
    1316:	1f 92       	push	r1
    1318:	0f 92       	push	r0
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	0f 92       	push	r0
    131e:	11 24       	eor	r1, r1
    1320:	2f 93       	push	r18
    1322:	3f 93       	push	r19
    1324:	4f 93       	push	r20
    1326:	5f 93       	push	r21
    1328:	6f 93       	push	r22
    132a:	7f 93       	push	r23
    132c:	8f 93       	push	r24
    132e:	9f 93       	push	r25
    1330:	af 93       	push	r26
    1332:	bf 93       	push	r27
    1334:	ef 93       	push	r30
    1336:	ff 93       	push	r31
	if(gl_callbackptr_1 != NULL_PTR)
    1338:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <gl_callbackptr_1>
    133c:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <gl_callbackptr_1+0x1>
    1340:	30 97       	sbiw	r30, 0x00	; 0
    1342:	09 f0       	breq	.+2      	; 0x1346 <__vector_2+0x30>
	{
		gl_callbackptr_1();
    1344:	09 95       	icall
	}
}
    1346:	ff 91       	pop	r31
    1348:	ef 91       	pop	r30
    134a:	bf 91       	pop	r27
    134c:	af 91       	pop	r26
    134e:	9f 91       	pop	r25
    1350:	8f 91       	pop	r24
    1352:	7f 91       	pop	r23
    1354:	6f 91       	pop	r22
    1356:	5f 91       	pop	r21
    1358:	4f 91       	pop	r20
    135a:	3f 91       	pop	r19
    135c:	2f 91       	pop	r18
    135e:	0f 90       	pop	r0
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	0f 90       	pop	r0
    1364:	1f 90       	pop	r1
    1366:	18 95       	reti

00001368 <__vector_3>:

ISR_HANDLER(EXT_INT2)
{
    1368:	1f 92       	push	r1
    136a:	0f 92       	push	r0
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	0f 92       	push	r0
    1370:	11 24       	eor	r1, r1
    1372:	2f 93       	push	r18
    1374:	3f 93       	push	r19
    1376:	4f 93       	push	r20
    1378:	5f 93       	push	r21
    137a:	6f 93       	push	r22
    137c:	7f 93       	push	r23
    137e:	8f 93       	push	r24
    1380:	9f 93       	push	r25
    1382:	af 93       	push	r26
    1384:	bf 93       	push	r27
    1386:	ef 93       	push	r30
    1388:	ff 93       	push	r31
	if(gl_callbackptr_2 != NULL_PTR)
    138a:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <gl_callbackptr_2>
    138e:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <gl_callbackptr_2+0x1>
    1392:	30 97       	sbiw	r30, 0x00	; 0
    1394:	09 f0       	breq	.+2      	; 0x1398 <__vector_3+0x30>
	{
		gl_callbackptr_2();
    1396:	09 95       	icall
	}
}
    1398:	ff 91       	pop	r31
    139a:	ef 91       	pop	r30
    139c:	bf 91       	pop	r27
    139e:	af 91       	pop	r26
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	7f 91       	pop	r23
    13a6:	6f 91       	pop	r22
    13a8:	5f 91       	pop	r21
    13aa:	4f 91       	pop	r20
    13ac:	3f 91       	pop	r19
    13ae:	2f 91       	pop	r18
    13b0:	0f 90       	pop	r0
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	0f 90       	pop	r0
    13b6:	1f 90       	pop	r1
    13b8:	18 95       	reti

000013ba <enable_global_interrupt>:


/*================ APIS ================*/
void enable_global_interrupt (void)
{
	SET_BIT(SREG,PIN7);
    13ba:	8f b7       	in	r24, 0x3f	; 63
    13bc:	80 68       	ori	r24, 0x80	; 128
    13be:	8f bf       	out	0x3f, r24	; 63
    13c0:	08 95       	ret

000013c2 <timer_init>:
	else
	{
		enu_tmr_error = ENU_TMR_INVALID_ID;
	}
	return ENU_TMR_INVALID_ID;
}
    13c2:	fc 01       	movw	r30, r24
    13c4:	89 2b       	or	r24, r25
    13c6:	09 f4       	brne	.+2      	; 0x13ca <timer_init+0x8>
    13c8:	95 c1       	rjmp	.+810    	; 0x16f4 <timer_init+0x332>
    13ca:	80 81       	ld	r24, Z
    13cc:	83 30       	cpi	r24, 0x03	; 3
    13ce:	08 f0       	brcs	.+2      	; 0x13d2 <timer_init+0x10>
    13d0:	93 c1       	rjmp	.+806    	; 0x16f8 <timer_init+0x336>
    13d2:	91 81       	ldd	r25, Z+1	; 0x01
    13d4:	92 30       	cpi	r25, 0x02	; 2
    13d6:	08 f0       	brcs	.+2      	; 0x13da <timer_init+0x18>
    13d8:	91 c1       	rjmp	.+802    	; 0x16fc <timer_init+0x33a>
    13da:	92 81       	ldd	r25, Z+2	; 0x02
    13dc:	92 30       	cpi	r25, 0x02	; 2
    13de:	08 f0       	brcs	.+2      	; 0x13e2 <timer_init+0x20>
    13e0:	8f c1       	rjmp	.+798    	; 0x1700 <timer_init+0x33e>
    13e2:	93 81       	ldd	r25, Z+3	; 0x03
    13e4:	94 30       	cpi	r25, 0x04	; 4
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <timer_init+0x28>
    13e8:	8d c1       	rjmp	.+794    	; 0x1704 <timer_init+0x342>
    13ea:	94 81       	ldd	r25, Z+4	; 0x04
    13ec:	9a 30       	cpi	r25, 0x0A	; 10
    13ee:	08 f0       	brcs	.+2      	; 0x13f2 <timer_init+0x30>
    13f0:	8b c1       	rjmp	.+790    	; 0x1708 <timer_init+0x346>
    13f2:	81 11       	cpse	r24, r1
    13f4:	7d c0       	rjmp	.+250    	; 0x14f0 <timer_init+0x12e>
    13f6:	83 b7       	in	r24, 0x33	; 51
    13f8:	80 68       	ori	r24, 0x80	; 128
    13fa:	83 bf       	out	0x33, r24	; 51
    13fc:	81 81       	ldd	r24, Z+1	; 0x01
    13fe:	88 23       	and	r24, r24
    1400:	19 f0       	breq	.+6      	; 0x1408 <timer_init+0x46>
    1402:	81 30       	cpi	r24, 0x01	; 1
    1404:	41 f0       	breq	.+16     	; 0x1416 <timer_init+0x54>
    1406:	0d c0       	rjmp	.+26     	; 0x1422 <timer_init+0x60>
    1408:	83 b7       	in	r24, 0x33	; 51
    140a:	8f 7b       	andi	r24, 0xBF	; 191
    140c:	83 bf       	out	0x33, r24	; 51
    140e:	83 b7       	in	r24, 0x33	; 51
    1410:	87 7f       	andi	r24, 0xF7	; 247
    1412:	83 bf       	out	0x33, r24	; 51
    1414:	06 c0       	rjmp	.+12     	; 0x1422 <timer_init+0x60>
    1416:	83 b7       	in	r24, 0x33	; 51
    1418:	8f 7b       	andi	r24, 0xBF	; 191
    141a:	83 bf       	out	0x33, r24	; 51
    141c:	83 b7       	in	r24, 0x33	; 51
    141e:	88 60       	ori	r24, 0x08	; 8
    1420:	83 bf       	out	0x33, r24	; 51
    1422:	83 81       	ldd	r24, Z+3	; 0x03
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	69 f0       	breq	.+26     	; 0x1442 <timer_init+0x80>
    1428:	28 f0       	brcs	.+10     	; 0x1434 <timer_init+0x72>
    142a:	82 30       	cpi	r24, 0x02	; 2
    142c:	a1 f0       	breq	.+40     	; 0x1456 <timer_init+0x94>
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	e1 f0       	breq	.+56     	; 0x146a <timer_init+0xa8>
    1432:	24 c0       	rjmp	.+72     	; 0x147c <timer_init+0xba>
    1434:	83 b7       	in	r24, 0x33	; 51
    1436:	8f 7e       	andi	r24, 0xEF	; 239
    1438:	83 bf       	out	0x33, r24	; 51
    143a:	83 b7       	in	r24, 0x33	; 51
    143c:	8f 7d       	andi	r24, 0xDF	; 223
    143e:	83 bf       	out	0x33, r24	; 51
    1440:	1d c0       	rjmp	.+58     	; 0x147c <timer_init+0xba>
    1442:	87 b3       	in	r24, 0x17	; 23
    1444:	88 60       	ori	r24, 0x08	; 8
    1446:	87 bb       	out	0x17, r24	; 23
    1448:	83 b7       	in	r24, 0x33	; 51
    144a:	80 61       	ori	r24, 0x10	; 16
    144c:	83 bf       	out	0x33, r24	; 51
    144e:	83 b7       	in	r24, 0x33	; 51
    1450:	8f 7d       	andi	r24, 0xDF	; 223
    1452:	83 bf       	out	0x33, r24	; 51
    1454:	13 c0       	rjmp	.+38     	; 0x147c <timer_init+0xba>
    1456:	87 b3       	in	r24, 0x17	; 23
    1458:	88 60       	ori	r24, 0x08	; 8
    145a:	87 bb       	out	0x17, r24	; 23
    145c:	83 b7       	in	r24, 0x33	; 51
    145e:	8f 7e       	andi	r24, 0xEF	; 239
    1460:	83 bf       	out	0x33, r24	; 51
    1462:	83 b7       	in	r24, 0x33	; 51
    1464:	80 62       	ori	r24, 0x20	; 32
    1466:	83 bf       	out	0x33, r24	; 51
    1468:	09 c0       	rjmp	.+18     	; 0x147c <timer_init+0xba>
    146a:	87 b3       	in	r24, 0x17	; 23
    146c:	88 60       	ori	r24, 0x08	; 8
    146e:	87 bb       	out	0x17, r24	; 23
    1470:	83 b7       	in	r24, 0x33	; 51
    1472:	80 61       	ori	r24, 0x10	; 16
    1474:	83 bf       	out	0x33, r24	; 51
    1476:	83 b7       	in	r24, 0x33	; 51
    1478:	80 62       	ori	r24, 0x20	; 32
    147a:	83 bf       	out	0x33, r24	; 51
    147c:	84 81       	ldd	r24, Z+4	; 0x04
    147e:	83 30       	cpi	r24, 0x03	; 3
    1480:	09 f4       	brne	.+2      	; 0x1484 <timer_init+0xc2>
    1482:	44 c1       	rjmp	.+648    	; 0x170c <timer_init+0x34a>
    1484:	85 30       	cpi	r24, 0x05	; 5
    1486:	09 f4       	brne	.+2      	; 0x148a <timer_init+0xc8>
    1488:	43 c1       	rjmp	.+646    	; 0x1710 <timer_init+0x34e>
    148a:	a0 81       	ld	r26, Z
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	ae 59       	subi	r26, 0x9E	; 158
    1490:	bf 4f       	sbci	r27, 0xFF	; 255
    1492:	8c 93       	st	X, r24
    1494:	82 81       	ldd	r24, Z+2	; 0x02
    1496:	81 11       	cpse	r24, r1
    1498:	0b c0       	rjmp	.+22     	; 0x14b0 <timer_init+0xee>
    149a:	81 81       	ldd	r24, Z+1	; 0x01
    149c:	81 11       	cpse	r24, r1
    149e:	04 c0       	rjmp	.+8      	; 0x14a8 <timer_init+0xe6>
    14a0:	89 b7       	in	r24, 0x39	; 57
    14a2:	81 60       	ori	r24, 0x01	; 1
    14a4:	89 bf       	out	0x39, r24	; 57
    14a6:	0a c0       	rjmp	.+20     	; 0x14bc <timer_init+0xfa>
    14a8:	89 b7       	in	r24, 0x39	; 57
    14aa:	82 60       	ori	r24, 0x02	; 2
    14ac:	89 bf       	out	0x39, r24	; 57
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <timer_init+0xfa>
    14b0:	89 b7       	in	r24, 0x39	; 57
    14b2:	8e 7f       	andi	r24, 0xFE	; 254
    14b4:	89 bf       	out	0x39, r24	; 57
    14b6:	89 b7       	in	r24, 0x39	; 57
    14b8:	8d 7f       	andi	r24, 0xFD	; 253
    14ba:	89 bf       	out	0x39, r24	; 57
    14bc:	85 81       	ldd	r24, Z+5	; 0x05
    14be:	96 81       	ldd	r25, Z+6	; 0x06
    14c0:	8f 3f       	cpi	r24, 0xFF	; 255
    14c2:	91 05       	cpc	r25, r1
    14c4:	11 f0       	breq	.+4      	; 0x14ca <timer_init+0x108>
    14c6:	08 f0       	brcs	.+2      	; 0x14ca <timer_init+0x108>
    14c8:	25 c1       	rjmp	.+586    	; 0x1714 <timer_init+0x352>
    14ca:	27 81       	ldd	r18, Z+7	; 0x07
    14cc:	30 85       	ldd	r19, Z+8	; 0x08
    14ce:	2f 3f       	cpi	r18, 0xFF	; 255
    14d0:	31 05       	cpc	r19, r1
    14d2:	11 f0       	breq	.+4      	; 0x14d8 <timer_init+0x116>
    14d4:	08 f0       	brcs	.+2      	; 0x14d8 <timer_init+0x116>
    14d6:	20 c1       	rjmp	.+576    	; 0x1718 <timer_init+0x356>
    14d8:	21 81       	ldd	r18, Z+1	; 0x01
    14da:	21 11       	cpse	r18, r1
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <timer_init+0x124>
    14de:	82 bf       	out	0x32, r24	; 50
    14e0:	1c be       	out	0x3c, r1	; 60
    14e2:	86 e0       	ldi	r24, 0x06	; 6
    14e4:	24 c1       	rjmp	.+584    	; 0x172e <timer_init+0x36c>
    14e6:	12 be       	out	0x32, r1	; 50
    14e8:	87 81       	ldd	r24, Z+7	; 0x07
    14ea:	8c bf       	out	0x3c, r24	; 60
    14ec:	86 e0       	ldi	r24, 0x06	; 6
    14ee:	1f c1       	rjmp	.+574    	; 0x172e <timer_init+0x36c>
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <timer_init+0x134>
    14f4:	85 c0       	rjmp	.+266    	; 0x1600 <timer_init+0x23e>
    14f6:	8f b5       	in	r24, 0x2f	; 47
    14f8:	88 60       	ori	r24, 0x08	; 8
    14fa:	8f bd       	out	0x2f, r24	; 47
    14fc:	8f b5       	in	r24, 0x2f	; 47
    14fe:	84 60       	ori	r24, 0x04	; 4
    1500:	8f bd       	out	0x2f, r24	; 47
    1502:	81 81       	ldd	r24, Z+1	; 0x01
    1504:	88 23       	and	r24, r24
    1506:	19 f0       	breq	.+6      	; 0x150e <timer_init+0x14c>
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	71 f0       	breq	.+28     	; 0x1528 <timer_init+0x166>
    150c:	19 c0       	rjmp	.+50     	; 0x1540 <timer_init+0x17e>
    150e:	8f b5       	in	r24, 0x2f	; 47
    1510:	8e 7f       	andi	r24, 0xFE	; 254
    1512:	8f bd       	out	0x2f, r24	; 47
    1514:	8f b5       	in	r24, 0x2f	; 47
    1516:	8d 7f       	andi	r24, 0xFD	; 253
    1518:	8f bd       	out	0x2f, r24	; 47
    151a:	8e b5       	in	r24, 0x2e	; 46
    151c:	87 7f       	andi	r24, 0xF7	; 247
    151e:	8e bd       	out	0x2e, r24	; 46
    1520:	8e b5       	in	r24, 0x2e	; 46
    1522:	8f 7e       	andi	r24, 0xEF	; 239
    1524:	8e bd       	out	0x2e, r24	; 46
    1526:	0c c0       	rjmp	.+24     	; 0x1540 <timer_init+0x17e>
    1528:	8f b5       	in	r24, 0x2f	; 47
    152a:	8e 7f       	andi	r24, 0xFE	; 254
    152c:	8f bd       	out	0x2f, r24	; 47
    152e:	8f b5       	in	r24, 0x2f	; 47
    1530:	8d 7f       	andi	r24, 0xFD	; 253
    1532:	8f bd       	out	0x2f, r24	; 47
    1534:	8e b5       	in	r24, 0x2e	; 46
    1536:	88 60       	ori	r24, 0x08	; 8
    1538:	8e bd       	out	0x2e, r24	; 46
    153a:	8e b5       	in	r24, 0x2e	; 46
    153c:	8f 7e       	andi	r24, 0xEF	; 239
    153e:	8e bd       	out	0x2e, r24	; 46
    1540:	83 81       	ldd	r24, Z+3	; 0x03
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	69 f0       	breq	.+26     	; 0x1560 <timer_init+0x19e>
    1546:	28 f0       	brcs	.+10     	; 0x1552 <timer_init+0x190>
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	a1 f0       	breq	.+40     	; 0x1574 <timer_init+0x1b2>
    154c:	83 30       	cpi	r24, 0x03	; 3
    154e:	e1 f0       	breq	.+56     	; 0x1588 <timer_init+0x1c6>
    1550:	24 c0       	rjmp	.+72     	; 0x159a <timer_init+0x1d8>
    1552:	8f b5       	in	r24, 0x2f	; 47
    1554:	8f 7b       	andi	r24, 0xBF	; 191
    1556:	8f bd       	out	0x2f, r24	; 47
    1558:	8f b5       	in	r24, 0x2f	; 47
    155a:	8f 77       	andi	r24, 0x7F	; 127
    155c:	8f bd       	out	0x2f, r24	; 47
    155e:	1d c0       	rjmp	.+58     	; 0x159a <timer_init+0x1d8>
    1560:	81 b3       	in	r24, 0x11	; 17
    1562:	80 62       	ori	r24, 0x20	; 32
    1564:	81 bb       	out	0x11, r24	; 17
    1566:	8f b5       	in	r24, 0x2f	; 47
    1568:	80 64       	ori	r24, 0x40	; 64
    156a:	8f bd       	out	0x2f, r24	; 47
    156c:	8f b5       	in	r24, 0x2f	; 47
    156e:	8f 77       	andi	r24, 0x7F	; 127
    1570:	8f bd       	out	0x2f, r24	; 47
    1572:	13 c0       	rjmp	.+38     	; 0x159a <timer_init+0x1d8>
    1574:	81 b3       	in	r24, 0x11	; 17
    1576:	80 62       	ori	r24, 0x20	; 32
    1578:	81 bb       	out	0x11, r24	; 17
    157a:	8f b5       	in	r24, 0x2f	; 47
    157c:	8f 7b       	andi	r24, 0xBF	; 191
    157e:	8f bd       	out	0x2f, r24	; 47
    1580:	8f b5       	in	r24, 0x2f	; 47
    1582:	80 68       	ori	r24, 0x80	; 128
    1584:	8f bd       	out	0x2f, r24	; 47
    1586:	09 c0       	rjmp	.+18     	; 0x159a <timer_init+0x1d8>
    1588:	81 b3       	in	r24, 0x11	; 17
    158a:	80 62       	ori	r24, 0x20	; 32
    158c:	81 bb       	out	0x11, r24	; 17
    158e:	8f b5       	in	r24, 0x2f	; 47
    1590:	80 64       	ori	r24, 0x40	; 64
    1592:	8f bd       	out	0x2f, r24	; 47
    1594:	8f b5       	in	r24, 0x2f	; 47
    1596:	80 68       	ori	r24, 0x80	; 128
    1598:	8f bd       	out	0x2f, r24	; 47
    159a:	84 81       	ldd	r24, Z+4	; 0x04
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	09 f4       	brne	.+2      	; 0x15a2 <timer_init+0x1e0>
    15a0:	bd c0       	rjmp	.+378    	; 0x171c <timer_init+0x35a>
    15a2:	85 30       	cpi	r24, 0x05	; 5
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <timer_init+0x1e6>
    15a6:	bc c0       	rjmp	.+376    	; 0x1720 <timer_init+0x35e>
    15a8:	a0 81       	ld	r26, Z
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	ae 59       	subi	r26, 0x9E	; 158
    15ae:	bf 4f       	sbci	r27, 0xFF	; 255
    15b0:	8c 93       	st	X, r24
    15b2:	82 81       	ldd	r24, Z+2	; 0x02
    15b4:	81 11       	cpse	r24, r1
    15b6:	0b c0       	rjmp	.+22     	; 0x15ce <timer_init+0x20c>
    15b8:	81 81       	ldd	r24, Z+1	; 0x01
    15ba:	81 11       	cpse	r24, r1
    15bc:	04 c0       	rjmp	.+8      	; 0x15c6 <timer_init+0x204>
    15be:	89 b7       	in	r24, 0x39	; 57
    15c0:	84 60       	ori	r24, 0x04	; 4
    15c2:	89 bf       	out	0x39, r24	; 57
    15c4:	0a c0       	rjmp	.+20     	; 0x15da <timer_init+0x218>
    15c6:	89 b7       	in	r24, 0x39	; 57
    15c8:	80 61       	ori	r24, 0x10	; 16
    15ca:	89 bf       	out	0x39, r24	; 57
    15cc:	06 c0       	rjmp	.+12     	; 0x15da <timer_init+0x218>
    15ce:	89 b7       	in	r24, 0x39	; 57
    15d0:	8b 7f       	andi	r24, 0xFB	; 251
    15d2:	89 bf       	out	0x39, r24	; 57
    15d4:	89 b7       	in	r24, 0x39	; 57
    15d6:	8f 7e       	andi	r24, 0xEF	; 239
    15d8:	89 bf       	out	0x39, r24	; 57
    15da:	81 81       	ldd	r24, Z+1	; 0x01
    15dc:	81 11       	cpse	r24, r1
    15de:	08 c0       	rjmp	.+16     	; 0x15f0 <timer_init+0x22e>
    15e0:	85 81       	ldd	r24, Z+5	; 0x05
    15e2:	96 81       	ldd	r25, Z+6	; 0x06
    15e4:	9d bd       	out	0x2d, r25	; 45
    15e6:	8c bd       	out	0x2c, r24	; 44
    15e8:	1b bc       	out	0x2b, r1	; 43
    15ea:	1a bc       	out	0x2a, r1	; 42
    15ec:	86 e0       	ldi	r24, 0x06	; 6
    15ee:	9f c0       	rjmp	.+318    	; 0x172e <timer_init+0x36c>
    15f0:	1d bc       	out	0x2d, r1	; 45
    15f2:	1c bc       	out	0x2c, r1	; 44
    15f4:	87 81       	ldd	r24, Z+7	; 0x07
    15f6:	90 85       	ldd	r25, Z+8	; 0x08
    15f8:	9b bd       	out	0x2b, r25	; 43
    15fa:	8a bd       	out	0x2a, r24	; 42
    15fc:	86 e0       	ldi	r24, 0x06	; 6
    15fe:	97 c0       	rjmp	.+302    	; 0x172e <timer_init+0x36c>
    1600:	85 b5       	in	r24, 0x25	; 37
    1602:	80 68       	ori	r24, 0x80	; 128
    1604:	85 bd       	out	0x25, r24	; 37
    1606:	81 81       	ldd	r24, Z+1	; 0x01
    1608:	88 23       	and	r24, r24
    160a:	19 f0       	breq	.+6      	; 0x1612 <timer_init+0x250>
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	41 f0       	breq	.+16     	; 0x1620 <timer_init+0x25e>
    1610:	0d c0       	rjmp	.+26     	; 0x162c <timer_init+0x26a>
    1612:	85 b5       	in	r24, 0x25	; 37
    1614:	8f 7b       	andi	r24, 0xBF	; 191
    1616:	85 bd       	out	0x25, r24	; 37
    1618:	85 b5       	in	r24, 0x25	; 37
    161a:	87 7f       	andi	r24, 0xF7	; 247
    161c:	85 bd       	out	0x25, r24	; 37
    161e:	06 c0       	rjmp	.+12     	; 0x162c <timer_init+0x26a>
    1620:	85 b5       	in	r24, 0x25	; 37
    1622:	8f 7b       	andi	r24, 0xBF	; 191
    1624:	85 bd       	out	0x25, r24	; 37
    1626:	85 b5       	in	r24, 0x25	; 37
    1628:	88 60       	ori	r24, 0x08	; 8
    162a:	85 bd       	out	0x25, r24	; 37
    162c:	83 81       	ldd	r24, Z+3	; 0x03
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	69 f0       	breq	.+26     	; 0x164c <timer_init+0x28a>
    1632:	28 f0       	brcs	.+10     	; 0x163e <timer_init+0x27c>
    1634:	82 30       	cpi	r24, 0x02	; 2
    1636:	a1 f0       	breq	.+40     	; 0x1660 <timer_init+0x29e>
    1638:	83 30       	cpi	r24, 0x03	; 3
    163a:	e1 f0       	breq	.+56     	; 0x1674 <timer_init+0x2b2>
    163c:	24 c0       	rjmp	.+72     	; 0x1686 <timer_init+0x2c4>
    163e:	85 b5       	in	r24, 0x25	; 37
    1640:	8f 7e       	andi	r24, 0xEF	; 239
    1642:	85 bd       	out	0x25, r24	; 37
    1644:	85 b5       	in	r24, 0x25	; 37
    1646:	8f 7d       	andi	r24, 0xDF	; 223
    1648:	85 bd       	out	0x25, r24	; 37
    164a:	1d c0       	rjmp	.+58     	; 0x1686 <timer_init+0x2c4>
    164c:	81 b3       	in	r24, 0x11	; 17
    164e:	80 68       	ori	r24, 0x80	; 128
    1650:	81 bb       	out	0x11, r24	; 17
    1652:	85 b5       	in	r24, 0x25	; 37
    1654:	80 61       	ori	r24, 0x10	; 16
    1656:	85 bd       	out	0x25, r24	; 37
    1658:	85 b5       	in	r24, 0x25	; 37
    165a:	8f 7d       	andi	r24, 0xDF	; 223
    165c:	85 bd       	out	0x25, r24	; 37
    165e:	13 c0       	rjmp	.+38     	; 0x1686 <timer_init+0x2c4>
    1660:	81 b3       	in	r24, 0x11	; 17
    1662:	80 68       	ori	r24, 0x80	; 128
    1664:	81 bb       	out	0x11, r24	; 17
    1666:	85 b5       	in	r24, 0x25	; 37
    1668:	8f 7e       	andi	r24, 0xEF	; 239
    166a:	85 bd       	out	0x25, r24	; 37
    166c:	85 b5       	in	r24, 0x25	; 37
    166e:	80 62       	ori	r24, 0x20	; 32
    1670:	85 bd       	out	0x25, r24	; 37
    1672:	09 c0       	rjmp	.+18     	; 0x1686 <timer_init+0x2c4>
    1674:	81 b3       	in	r24, 0x11	; 17
    1676:	80 68       	ori	r24, 0x80	; 128
    1678:	81 bb       	out	0x11, r24	; 17
    167a:	85 b5       	in	r24, 0x25	; 37
    167c:	80 61       	ori	r24, 0x10	; 16
    167e:	85 bd       	out	0x25, r24	; 37
    1680:	85 b5       	in	r24, 0x25	; 37
    1682:	80 62       	ori	r24, 0x20	; 32
    1684:	85 bd       	out	0x25, r24	; 37
    1686:	84 81       	ldd	r24, Z+4	; 0x04
    1688:	98 ef       	ldi	r25, 0xF8	; 248
    168a:	98 0f       	add	r25, r24
    168c:	92 30       	cpi	r25, 0x02	; 2
    168e:	08 f4       	brcc	.+2      	; 0x1692 <timer_init+0x2d0>
    1690:	49 c0       	rjmp	.+146    	; 0x1724 <timer_init+0x362>
    1692:	a0 81       	ld	r26, Z
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ae 59       	subi	r26, 0x9E	; 158
    1698:	bf 4f       	sbci	r27, 0xFF	; 255
    169a:	8c 93       	st	X, r24
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	81 11       	cpse	r24, r1
    16a0:	0b c0       	rjmp	.+22     	; 0x16b8 <timer_init+0x2f6>
    16a2:	81 81       	ldd	r24, Z+1	; 0x01
    16a4:	81 11       	cpse	r24, r1
    16a6:	04 c0       	rjmp	.+8      	; 0x16b0 <timer_init+0x2ee>
    16a8:	89 b7       	in	r24, 0x39	; 57
    16aa:	80 64       	ori	r24, 0x40	; 64
    16ac:	89 bf       	out	0x39, r24	; 57
    16ae:	0a c0       	rjmp	.+20     	; 0x16c4 <timer_init+0x302>
    16b0:	89 b7       	in	r24, 0x39	; 57
    16b2:	80 68       	ori	r24, 0x80	; 128
    16b4:	89 bf       	out	0x39, r24	; 57
    16b6:	06 c0       	rjmp	.+12     	; 0x16c4 <timer_init+0x302>
    16b8:	89 b7       	in	r24, 0x39	; 57
    16ba:	8f 7b       	andi	r24, 0xBF	; 191
    16bc:	89 bf       	out	0x39, r24	; 57
    16be:	89 b7       	in	r24, 0x39	; 57
    16c0:	8f 77       	andi	r24, 0x7F	; 127
    16c2:	89 bf       	out	0x39, r24	; 57
    16c4:	85 81       	ldd	r24, Z+5	; 0x05
    16c6:	96 81       	ldd	r25, Z+6	; 0x06
    16c8:	8f 3f       	cpi	r24, 0xFF	; 255
    16ca:	91 05       	cpc	r25, r1
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <timer_init+0x30e>
    16ce:	60 f5       	brcc	.+88     	; 0x1728 <timer_init+0x366>
    16d0:	27 81       	ldd	r18, Z+7	; 0x07
    16d2:	30 85       	ldd	r19, Z+8	; 0x08
    16d4:	2f 3f       	cpi	r18, 0xFF	; 255
    16d6:	31 05       	cpc	r19, r1
    16d8:	09 f0       	breq	.+2      	; 0x16dc <timer_init+0x31a>
    16da:	40 f5       	brcc	.+80     	; 0x172c <timer_init+0x36a>
    16dc:	21 81       	ldd	r18, Z+1	; 0x01
    16de:	21 11       	cpse	r18, r1
    16e0:	04 c0       	rjmp	.+8      	; 0x16ea <timer_init+0x328>
    16e2:	84 bd       	out	0x24, r24	; 36
    16e4:	13 bc       	out	0x23, r1	; 35
    16e6:	86 e0       	ldi	r24, 0x06	; 6
    16e8:	22 c0       	rjmp	.+68     	; 0x172e <timer_init+0x36c>
    16ea:	14 bc       	out	0x24, r1	; 36
    16ec:	87 81       	ldd	r24, Z+7	; 0x07
    16ee:	83 bd       	out	0x23, r24	; 35
    16f0:	86 e0       	ldi	r24, 0x06	; 6
    16f2:	1d c0       	rjmp	.+58     	; 0x172e <timer_init+0x36c>
    16f4:	85 e0       	ldi	r24, 0x05	; 5
    16f6:	1b c0       	rjmp	.+54     	; 0x172e <timer_init+0x36c>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	19 c0       	rjmp	.+50     	; 0x172e <timer_init+0x36c>
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	17 c0       	rjmp	.+46     	; 0x172e <timer_init+0x36c>
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	15 c0       	rjmp	.+42     	; 0x172e <timer_init+0x36c>
    1704:	83 e0       	ldi	r24, 0x03	; 3
    1706:	13 c0       	rjmp	.+38     	; 0x172e <timer_init+0x36c>
    1708:	84 e0       	ldi	r24, 0x04	; 4
    170a:	11 c0       	rjmp	.+34     	; 0x172e <timer_init+0x36c>
    170c:	84 e0       	ldi	r24, 0x04	; 4
    170e:	0f c0       	rjmp	.+30     	; 0x172e <timer_init+0x36c>
    1710:	84 e0       	ldi	r24, 0x04	; 4
    1712:	0d c0       	rjmp	.+26     	; 0x172e <timer_init+0x36c>
    1714:	85 e0       	ldi	r24, 0x05	; 5
    1716:	0b c0       	rjmp	.+22     	; 0x172e <timer_init+0x36c>
    1718:	85 e0       	ldi	r24, 0x05	; 5
    171a:	09 c0       	rjmp	.+18     	; 0x172e <timer_init+0x36c>
    171c:	84 e0       	ldi	r24, 0x04	; 4
    171e:	07 c0       	rjmp	.+14     	; 0x172e <timer_init+0x36c>
    1720:	84 e0       	ldi	r24, 0x04	; 4
    1722:	05 c0       	rjmp	.+10     	; 0x172e <timer_init+0x36c>
    1724:	84 e0       	ldi	r24, 0x04	; 4
    1726:	03 c0       	rjmp	.+6      	; 0x172e <timer_init+0x36c>
    1728:	85 e0       	ldi	r24, 0x05	; 5
    172a:	01 c0       	rjmp	.+2      	; 0x172e <timer_init+0x36c>
    172c:	85 e0       	ldi	r24, 0x05	; 5
    172e:	86 30       	cpi	r24, 0x06	; 6
    1730:	31 f4       	brne	.+12     	; 0x173e <timer_init+0x37c>
    1732:	e0 81       	ld	r30, Z
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	e5 56       	subi	r30, 0x65	; 101
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	91 e0       	ldi	r25, 0x01	; 1
    173c:	90 83       	st	Z, r25
    173e:	08 95       	ret

00001740 <timer_setInitialValue>:
    1740:	83 30       	cpi	r24, 0x03	; 3
    1742:	f8 f4       	brcc	.+62     	; 0x1782 <timer_setInitialValue+0x42>
    1744:	e8 2f       	mov	r30, r24
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	e5 56       	subi	r30, 0x65	; 101
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	90 81       	ld	r25, Z
    174e:	91 30       	cpi	r25, 0x01	; 1
    1750:	d1 f4       	brne	.+52     	; 0x1786 <timer_setInitialValue+0x46>
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	59 f0       	breq	.+22     	; 0x176c <timer_setInitialValue+0x2c>
    1756:	18 f0       	brcs	.+6      	; 0x175e <timer_setInitialValue+0x1e>
    1758:	82 30       	cpi	r24, 0x02	; 2
    175a:	61 f0       	breq	.+24     	; 0x1774 <timer_setInitialValue+0x34>
    175c:	16 c0       	rjmp	.+44     	; 0x178a <timer_setInitialValue+0x4a>
    175e:	6f 3f       	cpi	r22, 0xFF	; 255
    1760:	71 05       	cpc	r23, r1
    1762:	09 f0       	breq	.+2      	; 0x1766 <timer_setInitialValue+0x26>
    1764:	a0 f4       	brcc	.+40     	; 0x178e <timer_setInitialValue+0x4e>
    1766:	62 bf       	out	0x32, r22	; 50
    1768:	86 e0       	ldi	r24, 0x06	; 6
    176a:	08 95       	ret
    176c:	7d bd       	out	0x2d, r23	; 45
    176e:	6c bd       	out	0x2c, r22	; 44
    1770:	86 e0       	ldi	r24, 0x06	; 6
    1772:	08 95       	ret
    1774:	6f 3f       	cpi	r22, 0xFF	; 255
    1776:	71 05       	cpc	r23, r1
    1778:	09 f0       	breq	.+2      	; 0x177c <timer_setInitialValue+0x3c>
    177a:	58 f4       	brcc	.+22     	; 0x1792 <timer_setInitialValue+0x52>
    177c:	64 bd       	out	0x24, r22	; 36
    177e:	86 e0       	ldi	r24, 0x06	; 6
    1780:	08 95       	ret
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	08 95       	ret
    1786:	88 e0       	ldi	r24, 0x08	; 8
    1788:	08 95       	ret
    178a:	86 e0       	ldi	r24, 0x06	; 6
    178c:	08 95       	ret
    178e:	85 e0       	ldi	r24, 0x05	; 5
    1790:	08 95       	ret
    1792:	85 e0       	ldi	r24, 0x05	; 5
    1794:	08 95       	ret

00001796 <timer_setClock>:
    1796:	83 30       	cpi	r24, 0x03	; 3
    1798:	70 f5       	brcc	.+92     	; 0x17f6 <timer_setClock+0x60>
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	f9 01       	movw	r30, r18
    17a0:	e5 56       	subi	r30, 0x65	; 101
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	90 81       	ld	r25, Z
    17a6:	91 30       	cpi	r25, 0x01	; 1
    17a8:	41 f5       	brne	.+80     	; 0x17fa <timer_setClock+0x64>
    17aa:	6a 30       	cpi	r22, 0x0A	; 10
    17ac:	40 f5       	brcc	.+80     	; 0x17fe <timer_setClock+0x68>
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	71 f0       	breq	.+28     	; 0x17ce <timer_setClock+0x38>
    17b2:	18 f0       	brcs	.+6      	; 0x17ba <timer_setClock+0x24>
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	a9 f0       	breq	.+42     	; 0x17e2 <timer_setClock+0x4c>
    17b8:	24 c0       	rjmp	.+72     	; 0x1802 <timer_setClock+0x6c>
    17ba:	63 30       	cpi	r22, 0x03	; 3
    17bc:	21 f1       	breq	.+72     	; 0x1806 <timer_setClock+0x70>
    17be:	65 30       	cpi	r22, 0x05	; 5
    17c0:	21 f1       	breq	.+72     	; 0x180a <timer_setClock+0x74>
    17c2:	f9 01       	movw	r30, r18
    17c4:	ee 59       	subi	r30, 0x9E	; 158
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	60 83       	st	Z, r22
    17ca:	86 e0       	ldi	r24, 0x06	; 6
    17cc:	08 95       	ret
    17ce:	63 30       	cpi	r22, 0x03	; 3
    17d0:	f1 f0       	breq	.+60     	; 0x180e <timer_setClock+0x78>
    17d2:	65 30       	cpi	r22, 0x05	; 5
    17d4:	f1 f0       	breq	.+60     	; 0x1812 <timer_setClock+0x7c>
    17d6:	f9 01       	movw	r30, r18
    17d8:	ee 59       	subi	r30, 0x9E	; 158
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	60 83       	st	Z, r22
    17de:	86 e0       	ldi	r24, 0x06	; 6
    17e0:	08 95       	ret
    17e2:	88 ef       	ldi	r24, 0xF8	; 248
    17e4:	86 0f       	add	r24, r22
    17e6:	82 30       	cpi	r24, 0x02	; 2
    17e8:	b0 f0       	brcs	.+44     	; 0x1816 <timer_setClock+0x80>
    17ea:	f9 01       	movw	r30, r18
    17ec:	ee 59       	subi	r30, 0x9E	; 158
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	60 83       	st	Z, r22
    17f2:	86 e0       	ldi	r24, 0x06	; 6
    17f4:	08 95       	ret
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	08 95       	ret
    17fa:	88 e0       	ldi	r24, 0x08	; 8
    17fc:	08 95       	ret
    17fe:	84 e0       	ldi	r24, 0x04	; 4
    1800:	08 95       	ret
    1802:	86 e0       	ldi	r24, 0x06	; 6
    1804:	08 95       	ret
    1806:	84 e0       	ldi	r24, 0x04	; 4
    1808:	08 95       	ret
    180a:	84 e0       	ldi	r24, 0x04	; 4
    180c:	08 95       	ret
    180e:	84 e0       	ldi	r24, 0x04	; 4
    1810:	08 95       	ret
    1812:	84 e0       	ldi	r24, 0x04	; 4
    1814:	08 95       	ret
    1816:	84 e0       	ldi	r24, 0x04	; 4
    1818:	08 95       	ret

0000181a <timer_setCallBack>:
    181a:	83 30       	cpi	r24, 0x03	; 3
    181c:	d8 f5       	brcc	.+118    	; 0x1894 <timer_setCallBack+0x7a>
    181e:	42 30       	cpi	r20, 0x02	; 2
    1820:	d8 f5       	brcc	.+118    	; 0x1898 <timer_setCallBack+0x7e>
    1822:	61 15       	cp	r22, r1
    1824:	71 05       	cpc	r23, r1
    1826:	d1 f1       	breq	.+116    	; 0x189c <timer_setCallBack+0x82>
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	a1 f0       	breq	.+40     	; 0x1854 <timer_setCallBack+0x3a>
    182c:	18 f0       	brcs	.+6      	; 0x1834 <timer_setCallBack+0x1a>
    182e:	82 30       	cpi	r24, 0x02	; 2
    1830:	09 f1       	breq	.+66     	; 0x1874 <timer_setCallBack+0x5a>
    1832:	36 c0       	rjmp	.+108    	; 0x18a0 <timer_setCallBack+0x86>
    1834:	41 11       	cpse	r20, r1
    1836:	06 c0       	rjmp	.+12     	; 0x1844 <timer_setCallBack+0x2a>
    1838:	70 93 9a 00 	sts	0x009A, r23	; 0x80009a <gl_callBackPtr_timer0_OVF+0x1>
    183c:	60 93 99 00 	sts	0x0099, r22	; 0x800099 <gl_callBackPtr_timer0_OVF>
    1840:	86 e0       	ldi	r24, 0x06	; 6
    1842:	08 95       	ret
    1844:	41 30       	cpi	r20, 0x01	; 1
    1846:	71 f5       	brne	.+92     	; 0x18a4 <timer_setCallBack+0x8a>
    1848:	70 93 94 00 	sts	0x0094, r23	; 0x800094 <gl_callBackPtr_timer0_COMP+0x1>
    184c:	60 93 93 00 	sts	0x0093, r22	; 0x800093 <gl_callBackPtr_timer0_COMP>
    1850:	86 e0       	ldi	r24, 0x06	; 6
    1852:	08 95       	ret
    1854:	41 11       	cpse	r20, r1
    1856:	06 c0       	rjmp	.+12     	; 0x1864 <timer_setCallBack+0x4a>
    1858:	70 93 98 00 	sts	0x0098, r23	; 0x800098 <gl_callBackPtr_timer1_OVF+0x1>
    185c:	60 93 97 00 	sts	0x0097, r22	; 0x800097 <gl_callBackPtr_timer1_OVF>
    1860:	86 e0       	ldi	r24, 0x06	; 6
    1862:	08 95       	ret
    1864:	41 30       	cpi	r20, 0x01	; 1
    1866:	01 f5       	brne	.+64     	; 0x18a8 <timer_setCallBack+0x8e>
    1868:	70 93 92 00 	sts	0x0092, r23	; 0x800092 <gl_callBackPtr_timer1_COMP+0x1>
    186c:	60 93 91 00 	sts	0x0091, r22	; 0x800091 <gl_callBackPtr_timer1_COMP>
    1870:	86 e0       	ldi	r24, 0x06	; 6
    1872:	08 95       	ret
    1874:	41 11       	cpse	r20, r1
    1876:	06 c0       	rjmp	.+12     	; 0x1884 <timer_setCallBack+0x6a>
    1878:	70 93 96 00 	sts	0x0096, r23	; 0x800096 <gl_callBackPtr_timer2_OVF+0x1>
    187c:	60 93 95 00 	sts	0x0095, r22	; 0x800095 <gl_callBackPtr_timer2_OVF>
    1880:	86 e0       	ldi	r24, 0x06	; 6
    1882:	08 95       	ret
    1884:	41 30       	cpi	r20, 0x01	; 1
    1886:	91 f4       	brne	.+36     	; 0x18ac <timer_setCallBack+0x92>
    1888:	70 93 90 00 	sts	0x0090, r23	; 0x800090 <gl_callBackPtr_timer2_COMP+0x1>
    188c:	60 93 8f 00 	sts	0x008F, r22	; 0x80008f <gl_callBackPtr_timer2_COMP>
    1890:	86 e0       	ldi	r24, 0x06	; 6
    1892:	08 95       	ret
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	08 95       	ret
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	08 95       	ret
    189c:	85 e0       	ldi	r24, 0x05	; 5
    189e:	08 95       	ret
    18a0:	86 e0       	ldi	r24, 0x06	; 6
    18a2:	08 95       	ret
    18a4:	86 e0       	ldi	r24, 0x06	; 6
    18a6:	08 95       	ret
    18a8:	86 e0       	ldi	r24, 0x06	; 6
    18aa:	08 95       	ret
    18ac:	86 e0       	ldi	r24, 0x06	; 6
    18ae:	08 95       	ret

000018b0 <timer_start>:
    18b0:	83 30       	cpi	r24, 0x03	; 3
    18b2:	08 f0       	brcs	.+2      	; 0x18b6 <timer_start+0x6>
    18b4:	d4 c0       	rjmp	.+424    	; 0x1a5e <timer_start+0x1ae>
    18b6:	e8 2f       	mov	r30, r24
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	e5 56       	subi	r30, 0x65	; 101
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	90 81       	ld	r25, Z
    18c0:	91 30       	cpi	r25, 0x01	; 1
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <timer_start+0x16>
    18c4:	ce c0       	rjmp	.+412    	; 0x1a62 <timer_start+0x1b2>
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	09 f4       	brne	.+2      	; 0x18cc <timer_start+0x1c>
    18ca:	48 c0       	rjmp	.+144    	; 0x195c <timer_start+0xac>
    18cc:	20 f0       	brcs	.+8      	; 0x18d6 <timer_start+0x26>
    18ce:	82 30       	cpi	r24, 0x02	; 2
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <timer_start+0x24>
    18d2:	87 c0       	rjmp	.+270    	; 0x19e2 <timer_start+0x132>
    18d4:	c8 c0       	rjmp	.+400    	; 0x1a66 <timer_start+0x1b6>
    18d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gl_enu_tmr_clk>
    18da:	8a 30       	cpi	r24, 0x0A	; 10
    18dc:	08 f0       	brcs	.+2      	; 0x18e0 <timer_start+0x30>
    18de:	c5 c0       	rjmp	.+394    	; 0x1a6a <timer_start+0x1ba>
    18e0:	83 30       	cpi	r24, 0x03	; 3
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <timer_start+0x36>
    18e4:	c4 c0       	rjmp	.+392    	; 0x1a6e <timer_start+0x1be>
    18e6:	85 30       	cpi	r24, 0x05	; 5
    18e8:	09 f4       	brne	.+2      	; 0x18ec <timer_start+0x3c>
    18ea:	c3 c0       	rjmp	.+390    	; 0x1a72 <timer_start+0x1c2>
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	8a 30       	cpi	r24, 0x0A	; 10
    18f0:	91 05       	cpc	r25, r1
    18f2:	08 f0       	brcs	.+2      	; 0x18f6 <timer_start+0x46>
    18f4:	c0 c0       	rjmp	.+384    	; 0x1a76 <timer_start+0x1c6>
    18f6:	fc 01       	movw	r30, r24
    18f8:	e6 5d       	subi	r30, 0xD6	; 214
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__tablejump2__>
    1900:	83 b7       	in	r24, 0x33	; 51
    1902:	88 7f       	andi	r24, 0xF8	; 248
    1904:	83 bf       	out	0x33, r24	; 51
    1906:	86 e0       	ldi	r24, 0x06	; 6
    1908:	08 95       	ret
    190a:	83 b7       	in	r24, 0x33	; 51
    190c:	88 7f       	andi	r24, 0xF8	; 248
    190e:	81 60       	ori	r24, 0x01	; 1
    1910:	83 bf       	out	0x33, r24	; 51
    1912:	86 e0       	ldi	r24, 0x06	; 6
    1914:	08 95       	ret
    1916:	83 b7       	in	r24, 0x33	; 51
    1918:	88 7f       	andi	r24, 0xF8	; 248
    191a:	82 60       	ori	r24, 0x02	; 2
    191c:	83 bf       	out	0x33, r24	; 51
    191e:	86 e0       	ldi	r24, 0x06	; 6
    1920:	08 95       	ret
    1922:	83 b7       	in	r24, 0x33	; 51
    1924:	88 7f       	andi	r24, 0xF8	; 248
    1926:	83 60       	ori	r24, 0x03	; 3
    1928:	83 bf       	out	0x33, r24	; 51
    192a:	86 e0       	ldi	r24, 0x06	; 6
    192c:	08 95       	ret
    192e:	83 b7       	in	r24, 0x33	; 51
    1930:	88 7f       	andi	r24, 0xF8	; 248
    1932:	84 60       	ori	r24, 0x04	; 4
    1934:	83 bf       	out	0x33, r24	; 51
    1936:	86 e0       	ldi	r24, 0x06	; 6
    1938:	08 95       	ret
    193a:	83 b7       	in	r24, 0x33	; 51
    193c:	88 7f       	andi	r24, 0xF8	; 248
    193e:	85 60       	ori	r24, 0x05	; 5
    1940:	83 bf       	out	0x33, r24	; 51
    1942:	86 e0       	ldi	r24, 0x06	; 6
    1944:	08 95       	ret
    1946:	83 b7       	in	r24, 0x33	; 51
    1948:	88 7f       	andi	r24, 0xF8	; 248
    194a:	86 60       	ori	r24, 0x06	; 6
    194c:	83 bf       	out	0x33, r24	; 51
    194e:	86 e0       	ldi	r24, 0x06	; 6
    1950:	08 95       	ret
    1952:	83 b7       	in	r24, 0x33	; 51
    1954:	87 60       	ori	r24, 0x07	; 7
    1956:	83 bf       	out	0x33, r24	; 51
    1958:	86 e0       	ldi	r24, 0x06	; 6
    195a:	08 95       	ret
    195c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <gl_enu_tmr_clk+0x1>
    1960:	8a 30       	cpi	r24, 0x0A	; 10
    1962:	08 f0       	brcs	.+2      	; 0x1966 <timer_start+0xb6>
    1964:	8a c0       	rjmp	.+276    	; 0x1a7a <timer_start+0x1ca>
    1966:	83 30       	cpi	r24, 0x03	; 3
    1968:	09 f4       	brne	.+2      	; 0x196c <timer_start+0xbc>
    196a:	89 c0       	rjmp	.+274    	; 0x1a7e <timer_start+0x1ce>
    196c:	85 30       	cpi	r24, 0x05	; 5
    196e:	09 f4       	brne	.+2      	; 0x1972 <timer_start+0xc2>
    1970:	88 c0       	rjmp	.+272    	; 0x1a82 <timer_start+0x1d2>
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	8a 30       	cpi	r24, 0x0A	; 10
    1976:	91 05       	cpc	r25, r1
    1978:	08 f0       	brcs	.+2      	; 0x197c <timer_start+0xcc>
    197a:	85 c0       	rjmp	.+266    	; 0x1a86 <timer_start+0x1d6>
    197c:	fc 01       	movw	r30, r24
    197e:	ec 5c       	subi	r30, 0xCC	; 204
    1980:	ff 4f       	sbci	r31, 0xFF	; 255
    1982:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__tablejump2__>
    1986:	8e b5       	in	r24, 0x2e	; 46
    1988:	88 7f       	andi	r24, 0xF8	; 248
    198a:	8e bd       	out	0x2e, r24	; 46
    198c:	86 e0       	ldi	r24, 0x06	; 6
    198e:	08 95       	ret
    1990:	8e b5       	in	r24, 0x2e	; 46
    1992:	88 7f       	andi	r24, 0xF8	; 248
    1994:	81 60       	ori	r24, 0x01	; 1
    1996:	8e bd       	out	0x2e, r24	; 46
    1998:	86 e0       	ldi	r24, 0x06	; 6
    199a:	08 95       	ret
    199c:	8e b5       	in	r24, 0x2e	; 46
    199e:	88 7f       	andi	r24, 0xF8	; 248
    19a0:	82 60       	ori	r24, 0x02	; 2
    19a2:	8e bd       	out	0x2e, r24	; 46
    19a4:	86 e0       	ldi	r24, 0x06	; 6
    19a6:	08 95       	ret
    19a8:	8e b5       	in	r24, 0x2e	; 46
    19aa:	88 7f       	andi	r24, 0xF8	; 248
    19ac:	83 60       	ori	r24, 0x03	; 3
    19ae:	8e bd       	out	0x2e, r24	; 46
    19b0:	86 e0       	ldi	r24, 0x06	; 6
    19b2:	08 95       	ret
    19b4:	8e b5       	in	r24, 0x2e	; 46
    19b6:	88 7f       	andi	r24, 0xF8	; 248
    19b8:	84 60       	ori	r24, 0x04	; 4
    19ba:	8e bd       	out	0x2e, r24	; 46
    19bc:	86 e0       	ldi	r24, 0x06	; 6
    19be:	08 95       	ret
    19c0:	8e b5       	in	r24, 0x2e	; 46
    19c2:	88 7f       	andi	r24, 0xF8	; 248
    19c4:	85 60       	ori	r24, 0x05	; 5
    19c6:	8e bd       	out	0x2e, r24	; 46
    19c8:	86 e0       	ldi	r24, 0x06	; 6
    19ca:	08 95       	ret
    19cc:	8e b5       	in	r24, 0x2e	; 46
    19ce:	88 7f       	andi	r24, 0xF8	; 248
    19d0:	86 60       	ori	r24, 0x06	; 6
    19d2:	8e bd       	out	0x2e, r24	; 46
    19d4:	86 e0       	ldi	r24, 0x06	; 6
    19d6:	08 95       	ret
    19d8:	8e b5       	in	r24, 0x2e	; 46
    19da:	87 60       	ori	r24, 0x07	; 7
    19dc:	8e bd       	out	0x2e, r24	; 46
    19de:	86 e0       	ldi	r24, 0x06	; 6
    19e0:	08 95       	ret
    19e2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <gl_enu_tmr_clk+0x2>
    19e6:	e8 30       	cpi	r30, 0x08	; 8
    19e8:	08 f0       	brcs	.+2      	; 0x19ec <timer_start+0x13c>
    19ea:	4f c0       	rjmp	.+158    	; 0x1a8a <timer_start+0x1da>
    19ec:	8e 2f       	mov	r24, r30
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	88 30       	cpi	r24, 0x08	; 8
    19f2:	91 05       	cpc	r25, r1
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <timer_start+0x148>
    19f6:	4b c0       	rjmp	.+150    	; 0x1a8e <timer_start+0x1de>
    19f8:	fc 01       	movw	r30, r24
    19fa:	e2 5c       	subi	r30, 0xC2	; 194
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__tablejump2__>
    1a02:	85 b5       	in	r24, 0x25	; 37
    1a04:	88 7f       	andi	r24, 0xF8	; 248
    1a06:	85 bd       	out	0x25, r24	; 37
    1a08:	86 e0       	ldi	r24, 0x06	; 6
    1a0a:	08 95       	ret
    1a0c:	85 b5       	in	r24, 0x25	; 37
    1a0e:	88 7f       	andi	r24, 0xF8	; 248
    1a10:	81 60       	ori	r24, 0x01	; 1
    1a12:	85 bd       	out	0x25, r24	; 37
    1a14:	86 e0       	ldi	r24, 0x06	; 6
    1a16:	08 95       	ret
    1a18:	85 b5       	in	r24, 0x25	; 37
    1a1a:	88 7f       	andi	r24, 0xF8	; 248
    1a1c:	82 60       	ori	r24, 0x02	; 2
    1a1e:	85 bd       	out	0x25, r24	; 37
    1a20:	86 e0       	ldi	r24, 0x06	; 6
    1a22:	08 95       	ret
    1a24:	85 b5       	in	r24, 0x25	; 37
    1a26:	88 7f       	andi	r24, 0xF8	; 248
    1a28:	83 60       	ori	r24, 0x03	; 3
    1a2a:	85 bd       	out	0x25, r24	; 37
    1a2c:	86 e0       	ldi	r24, 0x06	; 6
    1a2e:	08 95       	ret
    1a30:	85 b5       	in	r24, 0x25	; 37
    1a32:	88 7f       	andi	r24, 0xF8	; 248
    1a34:	84 60       	ori	r24, 0x04	; 4
    1a36:	85 bd       	out	0x25, r24	; 37
    1a38:	86 e0       	ldi	r24, 0x06	; 6
    1a3a:	08 95       	ret
    1a3c:	85 b5       	in	r24, 0x25	; 37
    1a3e:	88 7f       	andi	r24, 0xF8	; 248
    1a40:	85 60       	ori	r24, 0x05	; 5
    1a42:	85 bd       	out	0x25, r24	; 37
    1a44:	86 e0       	ldi	r24, 0x06	; 6
    1a46:	08 95       	ret
    1a48:	85 b5       	in	r24, 0x25	; 37
    1a4a:	88 7f       	andi	r24, 0xF8	; 248
    1a4c:	86 60       	ori	r24, 0x06	; 6
    1a4e:	85 bd       	out	0x25, r24	; 37
    1a50:	86 e0       	ldi	r24, 0x06	; 6
    1a52:	08 95       	ret
    1a54:	85 b5       	in	r24, 0x25	; 37
    1a56:	87 60       	ori	r24, 0x07	; 7
    1a58:	85 bd       	out	0x25, r24	; 37
    1a5a:	86 e0       	ldi	r24, 0x06	; 6
    1a5c:	08 95       	ret
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	08 95       	ret
    1a62:	88 e0       	ldi	r24, 0x08	; 8
    1a64:	08 95       	ret
    1a66:	86 e0       	ldi	r24, 0x06	; 6
    1a68:	08 95       	ret
    1a6a:	84 e0       	ldi	r24, 0x04	; 4
    1a6c:	08 95       	ret
    1a6e:	84 e0       	ldi	r24, 0x04	; 4
    1a70:	08 95       	ret
    1a72:	84 e0       	ldi	r24, 0x04	; 4
    1a74:	08 95       	ret
    1a76:	86 e0       	ldi	r24, 0x06	; 6
    1a78:	08 95       	ret
    1a7a:	84 e0       	ldi	r24, 0x04	; 4
    1a7c:	08 95       	ret
    1a7e:	84 e0       	ldi	r24, 0x04	; 4
    1a80:	08 95       	ret
    1a82:	84 e0       	ldi	r24, 0x04	; 4
    1a84:	08 95       	ret
    1a86:	86 e0       	ldi	r24, 0x06	; 6
    1a88:	08 95       	ret
    1a8a:	84 e0       	ldi	r24, 0x04	; 4
    1a8c:	08 95       	ret
    1a8e:	86 e0       	ldi	r24, 0x06	; 6
    1a90:	08 95       	ret

00001a92 <timer_stop>:
    1a92:	83 30       	cpi	r24, 0x03	; 3
    1a94:	e0 f4       	brcc	.+56     	; 0x1ace <timer_stop+0x3c>
    1a96:	e8 2f       	mov	r30, r24
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	e5 56       	subi	r30, 0x65	; 101
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	90 81       	ld	r25, Z
    1aa0:	91 30       	cpi	r25, 0x01	; 1
    1aa2:	b9 f4       	brne	.+46     	; 0x1ad2 <timer_stop+0x40>
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	49 f0       	breq	.+18     	; 0x1aba <timer_stop+0x28>
    1aa8:	18 f0       	brcs	.+6      	; 0x1ab0 <timer_stop+0x1e>
    1aaa:	82 30       	cpi	r24, 0x02	; 2
    1aac:	59 f0       	breq	.+22     	; 0x1ac4 <timer_stop+0x32>
    1aae:	13 c0       	rjmp	.+38     	; 0x1ad6 <timer_stop+0x44>
    1ab0:	83 b7       	in	r24, 0x33	; 51
    1ab2:	88 7f       	andi	r24, 0xF8	; 248
    1ab4:	83 bf       	out	0x33, r24	; 51
    1ab6:	86 e0       	ldi	r24, 0x06	; 6
    1ab8:	08 95       	ret
    1aba:	8e b5       	in	r24, 0x2e	; 46
    1abc:	88 7f       	andi	r24, 0xF8	; 248
    1abe:	8e bd       	out	0x2e, r24	; 46
    1ac0:	86 e0       	ldi	r24, 0x06	; 6
    1ac2:	08 95       	ret
    1ac4:	85 b5       	in	r24, 0x25	; 37
    1ac6:	88 7f       	andi	r24, 0xF8	; 248
    1ac8:	85 bd       	out	0x25, r24	; 37
    1aca:	86 e0       	ldi	r24, 0x06	; 6
    1acc:	08 95       	ret
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	08 95       	ret
    1ad2:	88 e0       	ldi	r24, 0x08	; 8
    1ad4:	08 95       	ret
    1ad6:	86 e0       	ldi	r24, 0x06	; 6
    1ad8:	08 95       	ret

00001ada <timer_getValue>:
    1ada:	83 30       	cpi	r24, 0x03	; 3
    1adc:	10 f5       	brcc	.+68     	; 0x1b22 <timer_getValue+0x48>
    1ade:	e8 2f       	mov	r30, r24
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	e5 56       	subi	r30, 0x65	; 101
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	90 81       	ld	r25, Z
    1ae8:	91 30       	cpi	r25, 0x01	; 1
    1aea:	e9 f4       	brne	.+58     	; 0x1b26 <timer_getValue+0x4c>
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	59 f0       	breq	.+22     	; 0x1b06 <timer_getValue+0x2c>
    1af0:	18 f0       	brcs	.+6      	; 0x1af8 <timer_getValue+0x1e>
    1af2:	82 30       	cpi	r24, 0x02	; 2
    1af4:	79 f0       	breq	.+30     	; 0x1b14 <timer_getValue+0x3a>
    1af6:	19 c0       	rjmp	.+50     	; 0x1b2a <timer_getValue+0x50>
    1af8:	82 b7       	in	r24, 0x32	; 50
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	fb 01       	movw	r30, r22
    1afe:	91 83       	std	Z+1, r25	; 0x01
    1b00:	80 83       	st	Z, r24
    1b02:	86 e0       	ldi	r24, 0x06	; 6
    1b04:	08 95       	ret
    1b06:	8c b5       	in	r24, 0x2c	; 44
    1b08:	9d b5       	in	r25, 0x2d	; 45
    1b0a:	fb 01       	movw	r30, r22
    1b0c:	91 83       	std	Z+1, r25	; 0x01
    1b0e:	80 83       	st	Z, r24
    1b10:	86 e0       	ldi	r24, 0x06	; 6
    1b12:	08 95       	ret
    1b14:	84 b5       	in	r24, 0x24	; 36
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	fb 01       	movw	r30, r22
    1b1a:	91 83       	std	Z+1, r25	; 0x01
    1b1c:	80 83       	st	Z, r24
    1b1e:	86 e0       	ldi	r24, 0x06	; 6
    1b20:	08 95       	ret
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	08 95       	ret
    1b26:	88 e0       	ldi	r24, 0x08	; 8
    1b28:	08 95       	ret
    1b2a:	86 e0       	ldi	r24, 0x06	; 6
    1b2c:	08 95       	ret

00001b2e <timer_flag_notification>:
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
	if(enu_tmr_channel_id < MAX_ENU_TMR_CHANNEL)
    1b2e:	83 30       	cpi	r24, 0x03	; 3
    1b30:	08 f0       	brcs	.+2      	; 0x1b34 <timer_flag_notification+0x6>
    1b32:	76 c0       	rjmp	.+236    	; 0x1c20 <timer_flag_notification+0xf2>
	{
		if(enu_tmr_mode < ENU_MAX_TMR_MODE)
    1b34:	62 30       	cpi	r22, 0x02	; 2
    1b36:	08 f0       	brcs	.+2      	; 0x1b3a <timer_flag_notification+0xc>
    1b38:	75 c0       	rjmp	.+234    	; 0x1c24 <timer_flag_notification+0xf6>
		{
			if(ptr_u8_flag_status != NULL_PTR)
    1b3a:	41 15       	cp	r20, r1
    1b3c:	51 05       	cpc	r21, r1
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <timer_flag_notification+0x14>
    1b40:	73 c0       	rjmp	.+230    	; 0x1c28 <timer_flag_notification+0xfa>
			{
				if(gl_bo_timer_init_flag[enu_tmr_channel_id] == TRUE)
    1b42:	e8 2f       	mov	r30, r24
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	e5 56       	subi	r30, 0x65	; 101
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	90 81       	ld	r25, Z
    1b4c:	91 30       	cpi	r25, 0x01	; 1
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <timer_flag_notification+0x24>
    1b50:	6d c0       	rjmp	.+218    	; 0x1c2c <timer_flag_notification+0xfe>
				{
					switch (enu_tmr_channel_id)
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	29 f1       	breq	.+74     	; 0x1ba0 <timer_flag_notification+0x72>
    1b56:	20 f0       	brcs	.+8      	; 0x1b60 <timer_flag_notification+0x32>
    1b58:	82 30       	cpi	r24, 0x02	; 2
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <timer_flag_notification+0x30>
    1b5c:	41 c0       	rjmp	.+130    	; 0x1be0 <timer_flag_notification+0xb2>
    1b5e:	68 c0       	rjmp	.+208    	; 0x1c30 <timer_flag_notification+0x102>
					{
						case ENU_TMR_CHANNEL_0:
						{
							if(enu_tmr_mode == ENU_TMR_NORMAL_MODE)
    1b60:	61 11       	cpse	r22, r1
    1b62:	0f c0       	rjmp	.+30     	; 0x1b82 <timer_flag_notification+0x54>
							{
								if(BIT_IS_SET(TIFR,TOV0))
    1b64:	08 b6       	in	r0, 0x38	; 56
    1b66:	00 fe       	sbrs	r0, 0
    1b68:	08 c0       	rjmp	.+16     	; 0x1b7a <timer_flag_notification+0x4c>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	fa 01       	movw	r30, r20
    1b6e:	80 83       	st	Z, r24
									SET_BIT(TIFR,TOV0);	//TOV0 is cleared by writing a logic one to the flag
    1b70:	88 b7       	in	r24, 0x38	; 56
    1b72:	81 60       	ori	r24, 0x01	; 1
    1b74:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1b76:	86 e0       	ldi	r24, 0x06	; 6
    1b78:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,TOV0);	//TOV0 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    1b7a:	fa 01       	movw	r30, r20
    1b7c:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1b7e:	86 e0       	ldi	r24, 0x06	; 6
    1b80:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_FALSE;
								}
							}
							else
							{
								if(BIT_IS_SET(TIFR,OCF0))	// in case compare flag
    1b82:	08 b6       	in	r0, 0x38	; 56
    1b84:	01 fe       	sbrs	r0, 1
    1b86:	08 c0       	rjmp	.+16     	; 0x1b98 <timer_flag_notification+0x6a>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	fa 01       	movw	r30, r20
    1b8c:	80 83       	st	Z, r24
									SET_BIT(TIFR,OCF0);	//OCF0 is cleared by writing a logic one to the flag
    1b8e:	88 b7       	in	r24, 0x38	; 56
    1b90:	82 60       	ori	r24, 0x02	; 2
    1b92:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1b94:	86 e0       	ldi	r24, 0x06	; 6
    1b96:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,OCF0);	//OCF0 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    1b98:	fa 01       	movw	r30, r20
    1b9a:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1b9c:	86 e0       	ldi	r24, 0x06	; 6
    1b9e:	08 95       	ret
							}
						}
						break;
						case ENU_TMR_CHANNEL_1:
						{
							if(enu_tmr_mode == ENU_TMR_NORMAL_MODE)
    1ba0:	61 11       	cpse	r22, r1
    1ba2:	0f c0       	rjmp	.+30     	; 0x1bc2 <timer_flag_notification+0x94>
							{
								if(BIT_IS_SET(TIFR,TOV1))
    1ba4:	08 b6       	in	r0, 0x38	; 56
    1ba6:	02 fe       	sbrs	r0, 2
    1ba8:	08 c0       	rjmp	.+16     	; 0x1bba <timer_flag_notification+0x8c>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	fa 01       	movw	r30, r20
    1bae:	80 83       	st	Z, r24
									SET_BIT(TIFR,TOV1);	//TOV1 is cleared by writing a logic one to the flag
    1bb0:	88 b7       	in	r24, 0x38	; 56
    1bb2:	84 60       	ori	r24, 0x04	; 4
    1bb4:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1bb6:	86 e0       	ldi	r24, 0x06	; 6
    1bb8:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,TOV1);	//TOV1 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    1bba:	fa 01       	movw	r30, r20
    1bbc:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1bbe:	86 e0       	ldi	r24, 0x06	; 6
    1bc0:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_FALSE;
								}
							}
							else
							{
								if(BIT_IS_SET(TIFR,OCF1A))
    1bc2:	08 b6       	in	r0, 0x38	; 56
    1bc4:	04 fe       	sbrs	r0, 4
    1bc6:	08 c0       	rjmp	.+16     	; 0x1bd8 <timer_flag_notification+0xaa>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	fa 01       	movw	r30, r20
    1bcc:	80 83       	st	Z, r24
									SET_BIT(TIFR,OCF1A);	//OCF1A is cleared by writing a logic one to the flag
    1bce:	88 b7       	in	r24, 0x38	; 56
    1bd0:	80 61       	ori	r24, 0x10	; 16
    1bd2:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1bd4:	86 e0       	ldi	r24, 0x06	; 6
    1bd6:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,OCF1A);	//OCF1A is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    1bd8:	fa 01       	movw	r30, r20
    1bda:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1bdc:	86 e0       	ldi	r24, 0x06	; 6
    1bde:	08 95       	ret
							}
						}
						break;
						case ENU_TMR_CHANNEL_2:
						{
							if(enu_tmr_mode == ENU_TMR_NORMAL_MODE)
    1be0:	61 11       	cpse	r22, r1
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <timer_flag_notification+0xd4>
							{
								if(BIT_IS_SET(TIFR,TOV2))
    1be4:	08 b6       	in	r0, 0x38	; 56
    1be6:	06 fe       	sbrs	r0, 6
    1be8:	08 c0       	rjmp	.+16     	; 0x1bfa <timer_flag_notification+0xcc>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	fa 01       	movw	r30, r20
    1bee:	80 83       	st	Z, r24
									SET_BIT(TIFR,TOV2);	//TOV2 is cleared by writing a logic one to the flag
    1bf0:	88 b7       	in	r24, 0x38	; 56
    1bf2:	80 64       	ori	r24, 0x40	; 64
    1bf4:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1bf6:	86 e0       	ldi	r24, 0x06	; 6
    1bf8:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,TOV2);	//TOV2 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    1bfa:	fa 01       	movw	r30, r20
    1bfc:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1bfe:	86 e0       	ldi	r24, 0x06	; 6
    1c00:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_FALSE;
								}
							}
							else
							{
								if(BIT_IS_SET(TIFR,OCF2))
    1c02:	08 b6       	in	r0, 0x38	; 56
    1c04:	07 fe       	sbrs	r0, 7
    1c06:	08 c0       	rjmp	.+16     	; 0x1c18 <timer_flag_notification+0xea>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	fa 01       	movw	r30, r20
    1c0c:	80 83       	st	Z, r24
									SET_BIT(TIFR,OCF2);	//OCF2 is cleared by writing a logic one to the flag
    1c0e:	88 b7       	in	r24, 0x38	; 56
    1c10:	80 68       	ori	r24, 0x80	; 128
    1c12:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1c14:	86 e0       	ldi	r24, 0x06	; 6
    1c16:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,OCF2);	//OCF2 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    1c18:	fa 01       	movw	r30, r20
    1c1a:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1c1c:	86 e0       	ldi	r24, 0x06	; 6
    1c1e:	08 95       	ret
			enu_tmr_error = ENU_TMR_INVALID_MODE;
		}
	}
	else
	{
		enu_tmr_error = ENU_TMR_INVALID_ID;
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	08 95       	ret
				enu_tmr_error = ENU_TMR_INVALID_INPUT;
			}
		}
		else
		{
			enu_tmr_error = ENU_TMR_INVALID_MODE;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	08 95       	ret
					enu_tmr_error = ENU_TMR_NOT_INITIALIZED;
				}
			}
			else
			{
				enu_tmr_error = ENU_TMR_INVALID_INPUT;
    1c28:	85 e0       	ldi	r24, 0x05	; 5
    1c2a:	08 95       	ret
						}
					}
				}
				else
				{
					enu_tmr_error = ENU_TMR_NOT_INITIALIZED;
    1c2c:	88 e0       	ldi	r24, 0x08	; 8
    1c2e:	08 95       	ret
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1c30:	86 e0       	ldi	r24, 0x06	; 6
	else
	{
		enu_tmr_error = ENU_TMR_INVALID_ID;
	}
	return enu_tmr_error;
}
    1c32:	08 95       	ret

00001c34 <__vector_11>:

/*===============ISR HANDLERS================*/
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR_HANDLER(TMR0_OVF)
{
    1c34:	1f 92       	push	r1
    1c36:	0f 92       	push	r0
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	0f 92       	push	r0
    1c3c:	11 24       	eor	r1, r1
    1c3e:	2f 93       	push	r18
    1c40:	3f 93       	push	r19
    1c42:	4f 93       	push	r20
    1c44:	5f 93       	push	r21
    1c46:	6f 93       	push	r22
    1c48:	7f 93       	push	r23
    1c4a:	8f 93       	push	r24
    1c4c:	9f 93       	push	r25
    1c4e:	af 93       	push	r26
    1c50:	bf 93       	push	r27
    1c52:	ef 93       	push	r30
    1c54:	ff 93       	push	r31
	if(gl_callBackPtr_timer0_OVF != NULL_PTR)
    1c56:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <gl_callBackPtr_timer0_OVF>
    1c5a:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <gl_callBackPtr_timer0_OVF+0x1>
    1c5e:	30 97       	sbiw	r30, 0x00	; 0
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <__vector_11+0x30>
	{
		gl_callBackPtr_timer0_OVF();
    1c62:	09 95       	icall
	}
}
    1c64:	ff 91       	pop	r31
    1c66:	ef 91       	pop	r30
    1c68:	bf 91       	pop	r27
    1c6a:	af 91       	pop	r26
    1c6c:	9f 91       	pop	r25
    1c6e:	8f 91       	pop	r24
    1c70:	7f 91       	pop	r23
    1c72:	6f 91       	pop	r22
    1c74:	5f 91       	pop	r21
    1c76:	4f 91       	pop	r20
    1c78:	3f 91       	pop	r19
    1c7a:	2f 91       	pop	r18
    1c7c:	0f 90       	pop	r0
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	0f 90       	pop	r0
    1c82:	1f 90       	pop	r1
    1c84:	18 95       	reti

00001c86 <__vector_9>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR_HANDLER(TMR1_OVF)
{
    1c86:	1f 92       	push	r1
    1c88:	0f 92       	push	r0
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	0f 92       	push	r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	2f 93       	push	r18
    1c92:	3f 93       	push	r19
    1c94:	4f 93       	push	r20
    1c96:	5f 93       	push	r21
    1c98:	6f 93       	push	r22
    1c9a:	7f 93       	push	r23
    1c9c:	8f 93       	push	r24
    1c9e:	9f 93       	push	r25
    1ca0:	af 93       	push	r26
    1ca2:	bf 93       	push	r27
    1ca4:	ef 93       	push	r30
    1ca6:	ff 93       	push	r31
	if(gl_callBackPtr_timer1_OVF != NULL_PTR)
    1ca8:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <gl_callBackPtr_timer1_OVF>
    1cac:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <gl_callBackPtr_timer1_OVF+0x1>
    1cb0:	30 97       	sbiw	r30, 0x00	; 0
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <__vector_9+0x30>
	{
		gl_callBackPtr_timer1_OVF();
    1cb4:	09 95       	icall
	}
}
    1cb6:	ff 91       	pop	r31
    1cb8:	ef 91       	pop	r30
    1cba:	bf 91       	pop	r27
    1cbc:	af 91       	pop	r26
    1cbe:	9f 91       	pop	r25
    1cc0:	8f 91       	pop	r24
    1cc2:	7f 91       	pop	r23
    1cc4:	6f 91       	pop	r22
    1cc6:	5f 91       	pop	r21
    1cc8:	4f 91       	pop	r20
    1cca:	3f 91       	pop	r19
    1ccc:	2f 91       	pop	r18
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	0f 90       	pop	r0
    1cd4:	1f 90       	pop	r1
    1cd6:	18 95       	reti

00001cd8 <__vector_5>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR_HANDLER(TMR2_OVF)
{
    1cd8:	1f 92       	push	r1
    1cda:	0f 92       	push	r0
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	0f 92       	push	r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	2f 93       	push	r18
    1ce4:	3f 93       	push	r19
    1ce6:	4f 93       	push	r20
    1ce8:	5f 93       	push	r21
    1cea:	6f 93       	push	r22
    1cec:	7f 93       	push	r23
    1cee:	8f 93       	push	r24
    1cf0:	9f 93       	push	r25
    1cf2:	af 93       	push	r26
    1cf4:	bf 93       	push	r27
    1cf6:	ef 93       	push	r30
    1cf8:	ff 93       	push	r31
	if(gl_callBackPtr_timer2_OVF != NULL_PTR)
    1cfa:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <gl_callBackPtr_timer2_OVF>
    1cfe:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <gl_callBackPtr_timer2_OVF+0x1>
    1d02:	30 97       	sbiw	r30, 0x00	; 0
    1d04:	09 f0       	breq	.+2      	; 0x1d08 <__vector_5+0x30>
	{
		gl_callBackPtr_timer2_OVF();
    1d06:	09 95       	icall
	}
}
    1d08:	ff 91       	pop	r31
    1d0a:	ef 91       	pop	r30
    1d0c:	bf 91       	pop	r27
    1d0e:	af 91       	pop	r26
    1d10:	9f 91       	pop	r25
    1d12:	8f 91       	pop	r24
    1d14:	7f 91       	pop	r23
    1d16:	6f 91       	pop	r22
    1d18:	5f 91       	pop	r21
    1d1a:	4f 91       	pop	r20
    1d1c:	3f 91       	pop	r19
    1d1e:	2f 91       	pop	r18
    1d20:	0f 90       	pop	r0
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	0f 90       	pop	r0
    1d26:	1f 90       	pop	r1
    1d28:	18 95       	reti

00001d2a <__vector_10>:
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR_HANDLER(TMR0_CMP)
{
    1d2a:	1f 92       	push	r1
    1d2c:	0f 92       	push	r0
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	0f 92       	push	r0
    1d32:	11 24       	eor	r1, r1
    1d34:	2f 93       	push	r18
    1d36:	3f 93       	push	r19
    1d38:	4f 93       	push	r20
    1d3a:	5f 93       	push	r21
    1d3c:	6f 93       	push	r22
    1d3e:	7f 93       	push	r23
    1d40:	8f 93       	push	r24
    1d42:	9f 93       	push	r25
    1d44:	af 93       	push	r26
    1d46:	bf 93       	push	r27
    1d48:	ef 93       	push	r30
    1d4a:	ff 93       	push	r31
	if(gl_callBackPtr_timer0_COMP != NULL_PTR)
    1d4c:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <gl_callBackPtr_timer0_COMP>
    1d50:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <gl_callBackPtr_timer0_COMP+0x1>
    1d54:	30 97       	sbiw	r30, 0x00	; 0
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <__vector_10+0x30>
	{
		gl_callBackPtr_timer0_COMP();
    1d58:	09 95       	icall
	}
}
    1d5a:	ff 91       	pop	r31
    1d5c:	ef 91       	pop	r30
    1d5e:	bf 91       	pop	r27
    1d60:	af 91       	pop	r26
    1d62:	9f 91       	pop	r25
    1d64:	8f 91       	pop	r24
    1d66:	7f 91       	pop	r23
    1d68:	6f 91       	pop	r22
    1d6a:	5f 91       	pop	r21
    1d6c:	4f 91       	pop	r20
    1d6e:	3f 91       	pop	r19
    1d70:	2f 91       	pop	r18
    1d72:	0f 90       	pop	r0
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	0f 90       	pop	r0
    1d78:	1f 90       	pop	r1
    1d7a:	18 95       	reti

00001d7c <__vector_7>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR_HANDLER(TMR1_CMP_A)
{
    1d7c:	1f 92       	push	r1
    1d7e:	0f 92       	push	r0
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	0f 92       	push	r0
    1d84:	11 24       	eor	r1, r1
    1d86:	2f 93       	push	r18
    1d88:	3f 93       	push	r19
    1d8a:	4f 93       	push	r20
    1d8c:	5f 93       	push	r21
    1d8e:	6f 93       	push	r22
    1d90:	7f 93       	push	r23
    1d92:	8f 93       	push	r24
    1d94:	9f 93       	push	r25
    1d96:	af 93       	push	r26
    1d98:	bf 93       	push	r27
    1d9a:	ef 93       	push	r30
    1d9c:	ff 93       	push	r31
	if(gl_callBackPtr_timer1_COMP != NULL_PTR)
    1d9e:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <gl_callBackPtr_timer1_COMP>
    1da2:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <gl_callBackPtr_timer1_COMP+0x1>
    1da6:	30 97       	sbiw	r30, 0x00	; 0
    1da8:	09 f0       	breq	.+2      	; 0x1dac <__vector_7+0x30>
	{
		gl_callBackPtr_timer1_COMP();
    1daa:	09 95       	icall
	}
}
    1dac:	ff 91       	pop	r31
    1dae:	ef 91       	pop	r30
    1db0:	bf 91       	pop	r27
    1db2:	af 91       	pop	r26
    1db4:	9f 91       	pop	r25
    1db6:	8f 91       	pop	r24
    1db8:	7f 91       	pop	r23
    1dba:	6f 91       	pop	r22
    1dbc:	5f 91       	pop	r21
    1dbe:	4f 91       	pop	r20
    1dc0:	3f 91       	pop	r19
    1dc2:	2f 91       	pop	r18
    1dc4:	0f 90       	pop	r0
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	0f 90       	pop	r0
    1dca:	1f 90       	pop	r1
    1dcc:	18 95       	reti

00001dce <__vector_4>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR_HANDLER(TMR2_CMP)
{
    1dce:	1f 92       	push	r1
    1dd0:	0f 92       	push	r0
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	0f 92       	push	r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	2f 93       	push	r18
    1dda:	3f 93       	push	r19
    1ddc:	4f 93       	push	r20
    1dde:	5f 93       	push	r21
    1de0:	6f 93       	push	r22
    1de2:	7f 93       	push	r23
    1de4:	8f 93       	push	r24
    1de6:	9f 93       	push	r25
    1de8:	af 93       	push	r26
    1dea:	bf 93       	push	r27
    1dec:	ef 93       	push	r30
    1dee:	ff 93       	push	r31
	if(gl_callBackPtr_timer2_COMP != NULL_PTR)
    1df0:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <gl_callBackPtr_timer2_COMP>
    1df4:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <gl_callBackPtr_timer2_COMP+0x1>
    1df8:	30 97       	sbiw	r30, 0x00	; 0
    1dfa:	09 f0       	breq	.+2      	; 0x1dfe <__vector_4+0x30>
	{
		gl_callBackPtr_timer2_COMP(); 
    1dfc:	09 95       	icall
	}
    1dfe:	ff 91       	pop	r31
    1e00:	ef 91       	pop	r30
    1e02:	bf 91       	pop	r27
    1e04:	af 91       	pop	r26
    1e06:	9f 91       	pop	r25
    1e08:	8f 91       	pop	r24
    1e0a:	7f 91       	pop	r23
    1e0c:	6f 91       	pop	r22
    1e0e:	5f 91       	pop	r21
    1e10:	4f 91       	pop	r20
    1e12:	3f 91       	pop	r19
    1e14:	2f 91       	pop	r18
    1e16:	0f 90       	pop	r0
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	0f 90       	pop	r0
    1e1c:	1f 90       	pop	r1
    1e1e:	18 95       	reti

00001e20 <calc_prescaler>:

/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
    1e20:	cf 92       	push	r12
    1e22:	df 92       	push	r13
    1e24:	ef 92       	push	r14
    1e26:	ff 92       	push	r15
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	6b 01       	movw	r12, r22
    1e2e:	7c 01       	movw	r14, r24
	BOOLEAN bo_return_value = TRUE;
	if(enu_time_unit == ENU_MICRO_SECOND)
    1e30:	21 11       	cpse	r18, r1
    1e32:	65 c1       	rjmp	.+714    	; 0x20fe <calc_prescaler+0x2de>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    1e34:	41 11       	cpse	r20, r1
    1e36:	69 c0       	rjmp	.+210    	; 0x1f0a <calc_prescaler+0xea>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	57 e4       	ldi	r21, 0x47	; 71
    1e40:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    1e44:	18 16       	cp	r1, r24
    1e46:	0c f4       	brge	.+2      	; 0x1e4a <calc_prescaler+0x2a>
    1e48:	59 c0       	rjmp	.+178    	; 0x1efc <calc_prescaler+0xdc>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e0       	ldi	r20, 0x00	; 0
    1e50:	52 e4       	ldi	r21, 0x42	; 66
    1e52:	c7 01       	movw	r24, r14
    1e54:	b6 01       	movw	r22, r12
    1e56:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    1e5a:	18 16       	cp	r1, r24
    1e5c:	34 f0       	brlt	.+12     	; 0x1e6a <calc_prescaler+0x4a>
				*ptr_u16_prescale=P_1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	f8 01       	movw	r30, r16
    1e64:	91 83       	std	Z+1, r25	; 0x01
    1e66:	80 83       	st	Z, r24
    1e68:	21 c4       	rjmp	.+2114   	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e8       	ldi	r20, 0x80	; 128
    1e70:	53 e4       	ldi	r21, 0x43	; 67
    1e72:	c7 01       	movw	r24, r14
    1e74:	b6 01       	movw	r22, r12
    1e76:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	3c f0       	brlt	.+14     	; 0x1e8c <calc_prescaler+0x6c>
				*ptr_u16_prescale=P_8;
    1e7e:	88 e0       	ldi	r24, 0x08	; 8
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	f8 01       	movw	r30, r16
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	10 c4       	rjmp	.+2080   	; 0x26ac <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e0       	ldi	r20, 0x00	; 0
    1e92:	55 e4       	ldi	r21, 0x45	; 69
    1e94:	c7 01       	movw	r24, r14
    1e96:	b6 01       	movw	r22, r12
    1e98:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    1e9c:	18 16       	cp	r1, r24
    1e9e:	3c f0       	brlt	.+14     	; 0x1eae <calc_prescaler+0x8e>
				*ptr_u16_prescale=P_64;
    1ea0:	80 e4       	ldi	r24, 0x40	; 64
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	f8 01       	movw	r30, r16
    1ea6:	91 83       	std	Z+1, r25	; 0x01
    1ea8:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	ff c3       	rjmp	.+2046   	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	56 e4       	ldi	r21, 0x46	; 70
    1eb6:	c7 01       	movw	r24, r14
    1eb8:	b6 01       	movw	r22, r12
    1eba:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    1ebe:	18 16       	cp	r1, r24
    1ec0:	3c f0       	brlt	.+14     	; 0x1ed0 <calc_prescaler+0xb0>
				*ptr_u16_prescale=P_256;
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	91 e0       	ldi	r25, 0x01	; 1
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	ee c3       	rjmp	.+2012   	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024))
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	57 e4       	ldi	r21, 0x47	; 71
    1ed8:	c7 01       	movw	r24, r14
    1eda:	b6 01       	movw	r22, r12
    1edc:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	3c f0       	brlt	.+14     	; 0x1ef2 <calc_prescaler+0xd2>
				*ptr_u16_prescale=P_1024;
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	94 e0       	ldi	r25, 0x04	; 4
    1ee8:	f8 01       	movw	r30, r16
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	dd c3       	rjmp	.+1978   	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	11 82       	std	Z+1, r1	; 0x01
    1ef6:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	d8 c3       	rjmp	.+1968   	; 0x26ac <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1efc:	8c ed       	ldi	r24, 0xDC	; 220
    1efe:	95 e0       	ldi	r25, 0x05	; 5
    1f00:	f8 01       	movw	r30, r16
    1f02:	91 83       	std	Z+1, r25	; 0x01
    1f04:	80 83       	st	Z, r24
				bo_return_value = TRUE;	
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	d1 c3       	rjmp	.+1954   	; 0x26ac <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    1f0a:	41 30       	cpi	r20, 0x01	; 1
    1f0c:	09 f0       	breq	.+2      	; 0x1f10 <calc_prescaler+0xf0>
    1f0e:	69 c0       	rjmp	.+210    	; 0x1fe2 <calc_prescaler+0x1c2>
		{
			if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024) )
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	5b e4       	ldi	r21, 0x4B	; 75
    1f18:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    1f1c:	18 16       	cp	r1, r24
    1f1e:	0c f4       	brge	.+2      	; 0x1f22 <calc_prescaler+0x102>
    1f20:	59 c0       	rjmp	.+178    	; 0x1fd4 <calc_prescaler+0x1b4>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_US(P_1))
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	56 e4       	ldi	r21, 0x46	; 70
    1f2a:	c7 01       	movw	r24, r14
    1f2c:	b6 01       	movw	r22, r12
    1f2e:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    1f32:	18 16       	cp	r1, r24
    1f34:	34 f0       	brlt	.+12     	; 0x1f42 <calc_prescaler+0x122>
				*ptr_u16_prescale=P_1;
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	91 83       	std	Z+1, r25	; 0x01
    1f3e:	80 83       	st	Z, r24
    1f40:	b5 c3       	rjmp	.+1898   	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e8       	ldi	r20, 0x80	; 128
    1f48:	57 e4       	ldi	r21, 0x47	; 71
    1f4a:	c7 01       	movw	r24, r14
    1f4c:	b6 01       	movw	r22, r12
    1f4e:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    1f52:	18 16       	cp	r1, r24
    1f54:	3c f0       	brlt	.+14     	; 0x1f64 <calc_prescaler+0x144>
				*ptr_u16_prescale=P_8;
    1f56:	88 e0       	ldi	r24, 0x08	; 8
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	f8 01       	movw	r30, r16
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	a4 c3       	rjmp	.+1864   	; 0x26ac <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	59 e4       	ldi	r21, 0x49	; 73
    1f6c:	c7 01       	movw	r24, r14
    1f6e:	b6 01       	movw	r22, r12
    1f70:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    1f74:	18 16       	cp	r1, r24
    1f76:	3c f0       	brlt	.+14     	; 0x1f86 <calc_prescaler+0x166>
				*ptr_u16_prescale=P_64;
    1f78:	80 e4       	ldi	r24, 0x40	; 64
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	f8 01       	movw	r30, r16
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	93 c3       	rjmp	.+1830   	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	5a e4       	ldi	r21, 0x4A	; 74
    1f8e:	c7 01       	movw	r24, r14
    1f90:	b6 01       	movw	r22, r12
    1f92:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    1f96:	18 16       	cp	r1, r24
    1f98:	3c f0       	brlt	.+14     	; 0x1fa8 <calc_prescaler+0x188>
				*ptr_u16_prescale=P_256;
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	91 e0       	ldi	r25, 0x01	; 1
    1f9e:	f8 01       	movw	r30, r16
    1fa0:	91 83       	std	Z+1, r25	; 0x01
    1fa2:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	82 c3       	rjmp	.+1796   	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024))
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e0       	ldi	r20, 0x00	; 0
    1fae:	5b e4       	ldi	r21, 0x4B	; 75
    1fb0:	c7 01       	movw	r24, r14
    1fb2:	b6 01       	movw	r22, r12
    1fb4:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    1fb8:	18 16       	cp	r1, r24
    1fba:	3c f0       	brlt	.+14     	; 0x1fca <calc_prescaler+0x1aa>
				*ptr_u16_prescale=P_1024;
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	94 e0       	ldi	r25, 0x04	; 4
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	91 83       	std	Z+1, r25	; 0x01
    1fc4:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	71 c3       	rjmp	.+1762   	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1fca:	f8 01       	movw	r30, r16
    1fcc:	11 82       	std	Z+1, r1	; 0x01
    1fce:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	6c c3       	rjmp	.+1752   	; 0x26ac <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1fd4:	8c ed       	ldi	r24, 0xDC	; 220
    1fd6:	95 e0       	ldi	r25, 0x05	; 5
    1fd8:	f8 01       	movw	r30, r16
    1fda:	91 83       	std	Z+1, r25	; 0x01
    1fdc:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	65 c3       	rjmp	.+1738   	; 0x26ac <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    1fe2:	42 30       	cpi	r20, 0x02	; 2
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <calc_prescaler+0x1c8>
    1fe6:	5b c3       	rjmp	.+1718   	; 0x269e <calc_prescaler+0x87e>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	57 e4       	ldi	r21, 0x47	; 71
    1ff0:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    1ff4:	18 16       	cp	r1, r24
    1ff6:	0c f4       	brge	.+2      	; 0x1ffa <calc_prescaler+0x1da>
    1ff8:	7b c0       	rjmp	.+246    	; 0x20f0 <calc_prescaler+0x2d0>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e0       	ldi	r20, 0x00	; 0
    2000:	52 e4       	ldi	r21, 0x42	; 66
    2002:	c7 01       	movw	r24, r14
    2004:	b6 01       	movw	r22, r12
    2006:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    200a:	18 16       	cp	r1, r24
    200c:	34 f0       	brlt	.+12     	; 0x201a <calc_prescaler+0x1fa>
				*ptr_u16_prescale=P_1;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	f8 01       	movw	r30, r16
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	80 83       	st	Z, r24
    2018:	49 c3       	rjmp	.+1682   	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e8       	ldi	r20, 0x80	; 128
    2020:	53 e4       	ldi	r21, 0x43	; 67
    2022:	c7 01       	movw	r24, r14
    2024:	b6 01       	movw	r22, r12
    2026:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    202a:	18 16       	cp	r1, r24
    202c:	3c f0       	brlt	.+14     	; 0x203c <calc_prescaler+0x21c>
				*ptr_u16_prescale=P_8;
    202e:	88 e0       	ldi	r24, 0x08	; 8
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	f8 01       	movw	r30, r16
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	38 c3       	rjmp	.+1648   	; 0x26ac <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e8       	ldi	r20, 0x80	; 128
    2042:	54 e4       	ldi	r21, 0x44	; 68
    2044:	c7 01       	movw	r24, r14
    2046:	b6 01       	movw	r22, r12
    2048:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    204c:	18 16       	cp	r1, r24
    204e:	3c f0       	brlt	.+14     	; 0x205e <calc_prescaler+0x23e>
				*ptr_u16_prescale=P_32;
    2050:	80 e2       	ldi	r24, 0x20	; 32
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	f8 01       	movw	r30, r16
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	27 c3       	rjmp	.+1614   	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	55 e4       	ldi	r21, 0x45	; 69
    2066:	c7 01       	movw	r24, r14
    2068:	b6 01       	movw	r22, r12
    206a:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    206e:	18 16       	cp	r1, r24
    2070:	3c f0       	brlt	.+14     	; 0x2080 <calc_prescaler+0x260>
				*ptr_u16_prescale=P_64;
    2072:	80 e4       	ldi	r24, 0x40	; 64
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	f8 01       	movw	r30, r16
    2078:	91 83       	std	Z+1, r25	; 0x01
    207a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	16 c3       	rjmp	.+1580   	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e8       	ldi	r20, 0x80	; 128
    2086:	55 e4       	ldi	r21, 0x45	; 69
    2088:	c7 01       	movw	r24, r14
    208a:	b6 01       	movw	r22, r12
    208c:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2090:	18 16       	cp	r1, r24
    2092:	3c f0       	brlt	.+14     	; 0x20a2 <calc_prescaler+0x282>
				*ptr_u16_prescale=P_128;
    2094:	80 e8       	ldi	r24, 0x80	; 128
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	f8 01       	movw	r30, r16
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	05 c3       	rjmp	.+1546   	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	56 e4       	ldi	r21, 0x46	; 70
    20aa:	c7 01       	movw	r24, r14
    20ac:	b6 01       	movw	r22, r12
    20ae:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    20b2:	18 16       	cp	r1, r24
    20b4:	3c f0       	brlt	.+14     	; 0x20c4 <calc_prescaler+0x2a4>
				*ptr_u16_prescale=P_256;
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	f8 01       	movw	r30, r16
    20bc:	91 83       	std	Z+1, r25	; 0x01
    20be:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	f4 c2       	rjmp	.+1512   	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_US(P_1024))
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	57 e4       	ldi	r21, 0x47	; 71
    20cc:	c7 01       	movw	r24, r14
    20ce:	b6 01       	movw	r22, r12
    20d0:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    20d4:	18 16       	cp	r1, r24
    20d6:	3c f0       	brlt	.+14     	; 0x20e6 <calc_prescaler+0x2c6>
				*ptr_u16_prescale=P_1024;
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	94 e0       	ldi	r25, 0x04	; 4
    20dc:	f8 01       	movw	r30, r16
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	e3 c2       	rjmp	.+1478   	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    20e6:	f8 01       	movw	r30, r16
    20e8:	11 82       	std	Z+1, r1	; 0x01
    20ea:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	de c2       	rjmp	.+1468   	; 0x26ac <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    20f0:	8c ed       	ldi	r24, 0xDC	; 220
    20f2:	95 e0       	ldi	r25, 0x05	; 5
    20f4:	f8 01       	movw	r30, r16
    20f6:	91 83       	std	Z+1, r25	; 0x01
    20f8:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	d7 c2       	rjmp	.+1454   	; 0x26ac <calc_prescaler+0x88c>
		else
		{
			bo_return_value = FALSE;
		}
	}
	else if (enu_time_unit == ENU_MILLI_SECOND)
    20fe:	21 30       	cpi	r18, 0x01	; 1
    2100:	09 f0       	breq	.+2      	; 0x2104 <calc_prescaler+0x2e4>
    2102:	65 c1       	rjmp	.+714    	; 0x23ce <calc_prescaler+0x5ae>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    2104:	41 11       	cpse	r20, r1
    2106:	69 c0       	rjmp	.+210    	; 0x21da <calc_prescaler+0x3ba>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024) )
    2108:	2f e6       	ldi	r18, 0x6F	; 111
    210a:	32 e1       	ldi	r19, 0x12	; 18
    210c:	43 e0       	ldi	r20, 0x03	; 3
    210e:	52 e4       	ldi	r21, 0x42	; 66
    2110:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2114:	18 16       	cp	r1, r24
    2116:	0c f4       	brge	.+2      	; 0x211a <calc_prescaler+0x2fa>
    2118:	59 c0       	rjmp	.+178    	; 0x21cc <calc_prescaler+0x3ac>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
    211a:	2f e6       	ldi	r18, 0x6F	; 111
    211c:	32 e1       	ldi	r19, 0x12	; 18
    211e:	43 e0       	ldi	r20, 0x03	; 3
    2120:	5d e3       	ldi	r21, 0x3D	; 61
    2122:	c7 01       	movw	r24, r14
    2124:	b6 01       	movw	r22, r12
    2126:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    212a:	18 16       	cp	r1, r24
    212c:	34 f0       	brlt	.+12     	; 0x213a <calc_prescaler+0x31a>
				*ptr_u16_prescale=P_1;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	f8 01       	movw	r30, r16
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	80 83       	st	Z, r24
    2138:	b9 c2       	rjmp	.+1394   	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
    213a:	2f e6       	ldi	r18, 0x6F	; 111
    213c:	32 e1       	ldi	r19, 0x12	; 18
    213e:	43 e8       	ldi	r20, 0x83	; 131
    2140:	5e e3       	ldi	r21, 0x3E	; 62
    2142:	c7 01       	movw	r24, r14
    2144:	b6 01       	movw	r22, r12
    2146:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    214a:	18 16       	cp	r1, r24
    214c:	3c f0       	brlt	.+14     	; 0x215c <calc_prescaler+0x33c>
				*ptr_u16_prescale=P_8;
    214e:	88 e0       	ldi	r24, 0x08	; 8
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	f8 01       	movw	r30, r16
    2154:	91 83       	std	Z+1, r25	; 0x01
    2156:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	a8 c2       	rjmp	.+1360   	; 0x26ac <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
    215c:	2f e6       	ldi	r18, 0x6F	; 111
    215e:	32 e1       	ldi	r19, 0x12	; 18
    2160:	43 e0       	ldi	r20, 0x03	; 3
    2162:	50 e4       	ldi	r21, 0x40	; 64
    2164:	c7 01       	movw	r24, r14
    2166:	b6 01       	movw	r22, r12
    2168:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    216c:	18 16       	cp	r1, r24
    216e:	3c f0       	brlt	.+14     	; 0x217e <calc_prescaler+0x35e>
				*ptr_u16_prescale=P_64;
    2170:	80 e4       	ldi	r24, 0x40	; 64
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	f8 01       	movw	r30, r16
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	97 c2       	rjmp	.+1326   	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
    217e:	2f e6       	ldi	r18, 0x6F	; 111
    2180:	32 e1       	ldi	r19, 0x12	; 18
    2182:	43 e0       	ldi	r20, 0x03	; 3
    2184:	51 e4       	ldi	r21, 0x41	; 65
    2186:	c7 01       	movw	r24, r14
    2188:	b6 01       	movw	r22, r12
    218a:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    218e:	18 16       	cp	r1, r24
    2190:	3c f0       	brlt	.+14     	; 0x21a0 <calc_prescaler+0x380>
				*ptr_u16_prescale=P_256;
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	91 e0       	ldi	r25, 0x01	; 1
    2196:	f8 01       	movw	r30, r16
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	86 c2       	rjmp	.+1292   	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024))
    21a0:	2f e6       	ldi	r18, 0x6F	; 111
    21a2:	32 e1       	ldi	r19, 0x12	; 18
    21a4:	43 e0       	ldi	r20, 0x03	; 3
    21a6:	52 e4       	ldi	r21, 0x42	; 66
    21a8:	c7 01       	movw	r24, r14
    21aa:	b6 01       	movw	r22, r12
    21ac:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	3c f0       	brlt	.+14     	; 0x21c2 <calc_prescaler+0x3a2>
				*ptr_u16_prescale=P_1024;
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	94 e0       	ldi	r25, 0x04	; 4
    21b8:	f8 01       	movw	r30, r16
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	75 c2       	rjmp	.+1258   	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    21c2:	f8 01       	movw	r30, r16
    21c4:	11 82       	std	Z+1, r1	; 0x01
    21c6:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	70 c2       	rjmp	.+1248   	; 0x26ac <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    21cc:	8c ed       	ldi	r24, 0xDC	; 220
    21ce:	95 e0       	ldi	r25, 0x05	; 5
    21d0:	f8 01       	movw	r30, r16
    21d2:	91 83       	std	Z+1, r25	; 0x01
    21d4:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	69 c2       	rjmp	.+1234   	; 0x26ac <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    21da:	41 30       	cpi	r20, 0x01	; 1
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <calc_prescaler+0x3c0>
    21de:	69 c0       	rjmp	.+210    	; 0x22b2 <calc_prescaler+0x492>
		{

			if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024) )
    21e0:	2f e6       	ldi	r18, 0x6F	; 111
    21e2:	32 e1       	ldi	r19, 0x12	; 18
    21e4:	43 e0       	ldi	r20, 0x03	; 3
    21e6:	56 e4       	ldi	r21, 0x46	; 70
    21e8:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	0c f4       	brge	.+2      	; 0x21f2 <calc_prescaler+0x3d2>
    21f0:	59 c0       	rjmp	.+178    	; 0x22a4 <calc_prescaler+0x484>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1))
    21f2:	2f e6       	ldi	r18, 0x6F	; 111
    21f4:	32 e1       	ldi	r19, 0x12	; 18
    21f6:	43 e0       	ldi	r20, 0x03	; 3
    21f8:	51 e4       	ldi	r21, 0x41	; 65
    21fa:	c7 01       	movw	r24, r14
    21fc:	b6 01       	movw	r22, r12
    21fe:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2202:	18 16       	cp	r1, r24
    2204:	34 f0       	brlt	.+12     	; 0x2212 <calc_prescaler+0x3f2>
				*ptr_u16_prescale=P_1;
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	f8 01       	movw	r30, r16
    220c:	91 83       	std	Z+1, r25	; 0x01
    220e:	80 83       	st	Z, r24
    2210:	4d c2       	rjmp	.+1178   	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
    2212:	2f e6       	ldi	r18, 0x6F	; 111
    2214:	32 e1       	ldi	r19, 0x12	; 18
    2216:	43 e8       	ldi	r20, 0x83	; 131
    2218:	52 e4       	ldi	r21, 0x42	; 66
    221a:	c7 01       	movw	r24, r14
    221c:	b6 01       	movw	r22, r12
    221e:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2222:	18 16       	cp	r1, r24
    2224:	3c f0       	brlt	.+14     	; 0x2234 <calc_prescaler+0x414>
				*ptr_u16_prescale=P_8;
    2226:	88 e0       	ldi	r24, 0x08	; 8
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	f8 01       	movw	r30, r16
    222c:	91 83       	std	Z+1, r25	; 0x01
    222e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	3c c2       	rjmp	.+1144   	; 0x26ac <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
    2234:	2f e6       	ldi	r18, 0x6F	; 111
    2236:	32 e1       	ldi	r19, 0x12	; 18
    2238:	43 e0       	ldi	r20, 0x03	; 3
    223a:	54 e4       	ldi	r21, 0x44	; 68
    223c:	c7 01       	movw	r24, r14
    223e:	b6 01       	movw	r22, r12
    2240:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2244:	18 16       	cp	r1, r24
    2246:	3c f0       	brlt	.+14     	; 0x2256 <calc_prescaler+0x436>
				*ptr_u16_prescale=P_64;
    2248:	80 e4       	ldi	r24, 0x40	; 64
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	f8 01       	movw	r30, r16
    224e:	91 83       	std	Z+1, r25	; 0x01
    2250:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	2b c2       	rjmp	.+1110   	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
    2256:	2f e6       	ldi	r18, 0x6F	; 111
    2258:	32 e1       	ldi	r19, 0x12	; 18
    225a:	43 e0       	ldi	r20, 0x03	; 3
    225c:	55 e4       	ldi	r21, 0x45	; 69
    225e:	c7 01       	movw	r24, r14
    2260:	b6 01       	movw	r22, r12
    2262:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2266:	18 16       	cp	r1, r24
    2268:	3c f0       	brlt	.+14     	; 0x2278 <calc_prescaler+0x458>
				*ptr_u16_prescale=P_256;
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	91 e0       	ldi	r25, 0x01	; 1
    226e:	f8 01       	movw	r30, r16
    2270:	91 83       	std	Z+1, r25	; 0x01
    2272:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	1a c2       	rjmp	.+1076   	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024))
    2278:	2f e6       	ldi	r18, 0x6F	; 111
    227a:	32 e1       	ldi	r19, 0x12	; 18
    227c:	43 e0       	ldi	r20, 0x03	; 3
    227e:	56 e4       	ldi	r21, 0x46	; 70
    2280:	c7 01       	movw	r24, r14
    2282:	b6 01       	movw	r22, r12
    2284:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2288:	18 16       	cp	r1, r24
    228a:	3c f0       	brlt	.+14     	; 0x229a <calc_prescaler+0x47a>
				*ptr_u16_prescale=P_1024;
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	94 e0       	ldi	r25, 0x04	; 4
    2290:	f8 01       	movw	r30, r16
    2292:	91 83       	std	Z+1, r25	; 0x01
    2294:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	09 c2       	rjmp	.+1042   	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale= P_0;
    229a:	f8 01       	movw	r30, r16
    229c:	11 82       	std	Z+1, r1	; 0x01
    229e:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	04 c2       	rjmp	.+1032   	; 0x26ac <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale= P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    22a4:	8c ed       	ldi	r24, 0xDC	; 220
    22a6:	95 e0       	ldi	r25, 0x05	; 5
    22a8:	f8 01       	movw	r30, r16
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	fd c1       	rjmp	.+1018   	; 0x26ac <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    22b2:	42 30       	cpi	r20, 0x02	; 2
    22b4:	09 f0       	breq	.+2      	; 0x22b8 <calc_prescaler+0x498>
    22b6:	f5 c1       	rjmp	.+1002   	; 0x26a2 <calc_prescaler+0x882>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e0       	ldi	r20, 0x00	; 0
    22be:	57 e4       	ldi	r21, 0x47	; 71
    22c0:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    22c4:	18 16       	cp	r1, r24
    22c6:	0c f4       	brge	.+2      	; 0x22ca <calc_prescaler+0x4aa>
    22c8:	7b c0       	rjmp	.+246    	; 0x23c0 <calc_prescaler+0x5a0>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
    22ca:	2f e6       	ldi	r18, 0x6F	; 111
    22cc:	32 e1       	ldi	r19, 0x12	; 18
    22ce:	43 e0       	ldi	r20, 0x03	; 3
    22d0:	5d e3       	ldi	r21, 0x3D	; 61
    22d2:	c7 01       	movw	r24, r14
    22d4:	b6 01       	movw	r22, r12
    22d6:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    22da:	18 16       	cp	r1, r24
    22dc:	34 f0       	brlt	.+12     	; 0x22ea <calc_prescaler+0x4ca>
				*ptr_u16_prescale=P_1;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	f8 01       	movw	r30, r16
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
    22e8:	e1 c1       	rjmp	.+962    	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
    22ea:	2f e6       	ldi	r18, 0x6F	; 111
    22ec:	32 e1       	ldi	r19, 0x12	; 18
    22ee:	43 e8       	ldi	r20, 0x83	; 131
    22f0:	5e e3       	ldi	r21, 0x3E	; 62
    22f2:	c7 01       	movw	r24, r14
    22f4:	b6 01       	movw	r22, r12
    22f6:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    22fa:	18 16       	cp	r1, r24
    22fc:	3c f0       	brlt	.+14     	; 0x230c <calc_prescaler+0x4ec>
				*ptr_u16_prescale=P_8;
    22fe:	88 e0       	ldi	r24, 0x08	; 8
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	f8 01       	movw	r30, r16
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	d0 c1       	rjmp	.+928    	; 0x26ac <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
    230c:	2f e6       	ldi	r18, 0x6F	; 111
    230e:	32 e1       	ldi	r19, 0x12	; 18
    2310:	43 e8       	ldi	r20, 0x83	; 131
    2312:	5f e3       	ldi	r21, 0x3F	; 63
    2314:	c7 01       	movw	r24, r14
    2316:	b6 01       	movw	r22, r12
    2318:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    231c:	18 16       	cp	r1, r24
    231e:	3c f0       	brlt	.+14     	; 0x232e <calc_prescaler+0x50e>
				*ptr_u16_prescale=P_32;
    2320:	80 e2       	ldi	r24, 0x20	; 32
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	f8 01       	movw	r30, r16
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	bf c1       	rjmp	.+894    	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
    232e:	2f e6       	ldi	r18, 0x6F	; 111
    2330:	32 e1       	ldi	r19, 0x12	; 18
    2332:	43 e0       	ldi	r20, 0x03	; 3
    2334:	50 e4       	ldi	r21, 0x40	; 64
    2336:	c7 01       	movw	r24, r14
    2338:	b6 01       	movw	r22, r12
    233a:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    233e:	18 16       	cp	r1, r24
    2340:	3c f0       	brlt	.+14     	; 0x2350 <calc_prescaler+0x530>
				*ptr_u16_prescale=P_64;
    2342:	80 e4       	ldi	r24, 0x40	; 64
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	f8 01       	movw	r30, r16
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	ae c1       	rjmp	.+860    	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
    2350:	2f e6       	ldi	r18, 0x6F	; 111
    2352:	32 e1       	ldi	r19, 0x12	; 18
    2354:	43 e8       	ldi	r20, 0x83	; 131
    2356:	50 e4       	ldi	r21, 0x40	; 64
    2358:	c7 01       	movw	r24, r14
    235a:	b6 01       	movw	r22, r12
    235c:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2360:	18 16       	cp	r1, r24
    2362:	3c f0       	brlt	.+14     	; 0x2372 <calc_prescaler+0x552>
				*ptr_u16_prescale=P_128;
    2364:	80 e8       	ldi	r24, 0x80	; 128
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	f8 01       	movw	r30, r16
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	9d c1       	rjmp	.+826    	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
    2372:	2f e6       	ldi	r18, 0x6F	; 111
    2374:	32 e1       	ldi	r19, 0x12	; 18
    2376:	43 e0       	ldi	r20, 0x03	; 3
    2378:	51 e4       	ldi	r21, 0x41	; 65
    237a:	c7 01       	movw	r24, r14
    237c:	b6 01       	movw	r22, r12
    237e:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2382:	18 16       	cp	r1, r24
    2384:	3c f0       	brlt	.+14     	; 0x2394 <calc_prescaler+0x574>
				*ptr_u16_prescale=P_256;
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	91 e0       	ldi	r25, 0x01	; 1
    238a:	f8 01       	movw	r30, r16
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	8c c1       	rjmp	.+792    	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_MS(P_1024))
    2394:	2f e6       	ldi	r18, 0x6F	; 111
    2396:	32 e1       	ldi	r19, 0x12	; 18
    2398:	43 e0       	ldi	r20, 0x03	; 3
    239a:	52 e4       	ldi	r21, 0x42	; 66
    239c:	c7 01       	movw	r24, r14
    239e:	b6 01       	movw	r22, r12
    23a0:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    23a4:	18 16       	cp	r1, r24
    23a6:	3c f0       	brlt	.+14     	; 0x23b6 <calc_prescaler+0x596>
				*ptr_u16_prescale=P_1024;
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	94 e0       	ldi	r25, 0x04	; 4
    23ac:	f8 01       	movw	r30, r16
    23ae:	91 83       	std	Z+1, r25	; 0x01
    23b0:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	7b c1       	rjmp	.+758    	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    23b6:	f8 01       	movw	r30, r16
    23b8:	11 82       	std	Z+1, r1	; 0x01
    23ba:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	76 c1       	rjmp	.+748    	; 0x26ac <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    23c0:	8c ed       	ldi	r24, 0xDC	; 220
    23c2:	95 e0       	ldi	r25, 0x05	; 5
    23c4:	f8 01       	movw	r30, r16
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	6f c1       	rjmp	.+734    	; 0x26ac <calc_prescaler+0x88c>
		{
			bo_return_value = FALSE;
			// do nothing
		}
	}
	else if (enu_time_unit == ENU_SECOND)
    23ce:	22 30       	cpi	r18, 0x02	; 2
    23d0:	09 f0       	breq	.+2      	; 0x23d4 <calc_prescaler+0x5b4>
    23d2:	69 c1       	rjmp	.+722    	; 0x26a6 <calc_prescaler+0x886>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    23d4:	41 11       	cpse	r20, r1
    23d6:	69 c0       	rjmp	.+210    	; 0x24aa <calc_prescaler+0x68a>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024) )
    23d8:	2d eb       	ldi	r18, 0xBD	; 189
    23da:	37 e3       	ldi	r19, 0x37	; 55
    23dc:	46 e0       	ldi	r20, 0x06	; 6
    23de:	5d e3       	ldi	r21, 0x3D	; 61
    23e0:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    23e4:	18 16       	cp	r1, r24
    23e6:	0c f4       	brge	.+2      	; 0x23ea <calc_prescaler+0x5ca>
    23e8:	59 c0       	rjmp	.+178    	; 0x249c <calc_prescaler+0x67c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
    23ea:	2d eb       	ldi	r18, 0xBD	; 189
    23ec:	37 e3       	ldi	r19, 0x37	; 55
    23ee:	46 e0       	ldi	r20, 0x06	; 6
    23f0:	58 e3       	ldi	r21, 0x38	; 56
    23f2:	c7 01       	movw	r24, r14
    23f4:	b6 01       	movw	r22, r12
    23f6:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    23fa:	18 16       	cp	r1, r24
    23fc:	34 f0       	brlt	.+12     	; 0x240a <calc_prescaler+0x5ea>
				*ptr_u16_prescale=P_1;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	f8 01       	movw	r30, r16
    2404:	91 83       	std	Z+1, r25	; 0x01
    2406:	80 83       	st	Z, r24
    2408:	51 c1       	rjmp	.+674    	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
    240a:	2d eb       	ldi	r18, 0xBD	; 189
    240c:	37 e3       	ldi	r19, 0x37	; 55
    240e:	46 e8       	ldi	r20, 0x86	; 134
    2410:	59 e3       	ldi	r21, 0x39	; 57
    2412:	c7 01       	movw	r24, r14
    2414:	b6 01       	movw	r22, r12
    2416:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    241a:	18 16       	cp	r1, r24
    241c:	3c f0       	brlt	.+14     	; 0x242c <calc_prescaler+0x60c>
				*ptr_u16_prescale=P_8;
    241e:	88 e0       	ldi	r24, 0x08	; 8
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	f8 01       	movw	r30, r16
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	40 c1       	rjmp	.+640    	; 0x26ac <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
    242c:	2d eb       	ldi	r18, 0xBD	; 189
    242e:	37 e3       	ldi	r19, 0x37	; 55
    2430:	46 e0       	ldi	r20, 0x06	; 6
    2432:	5b e3       	ldi	r21, 0x3B	; 59
    2434:	c7 01       	movw	r24, r14
    2436:	b6 01       	movw	r22, r12
    2438:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    243c:	18 16       	cp	r1, r24
    243e:	3c f0       	brlt	.+14     	; 0x244e <calc_prescaler+0x62e>
				*ptr_u16_prescale=P_64;
    2440:	80 e4       	ldi	r24, 0x40	; 64
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	f8 01       	movw	r30, r16
    2446:	91 83       	std	Z+1, r25	; 0x01
    2448:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	2f c1       	rjmp	.+606    	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
    244e:	2d eb       	ldi	r18, 0xBD	; 189
    2450:	37 e3       	ldi	r19, 0x37	; 55
    2452:	46 e0       	ldi	r20, 0x06	; 6
    2454:	5c e3       	ldi	r21, 0x3C	; 60
    2456:	c7 01       	movw	r24, r14
    2458:	b6 01       	movw	r22, r12
    245a:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    245e:	18 16       	cp	r1, r24
    2460:	3c f0       	brlt	.+14     	; 0x2470 <calc_prescaler+0x650>
				*ptr_u16_prescale=P_256;
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	91 e0       	ldi	r25, 0x01	; 1
    2466:	f8 01       	movw	r30, r16
    2468:	91 83       	std	Z+1, r25	; 0x01
    246a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	1e c1       	rjmp	.+572    	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024))
    2470:	2d eb       	ldi	r18, 0xBD	; 189
    2472:	37 e3       	ldi	r19, 0x37	; 55
    2474:	46 e0       	ldi	r20, 0x06	; 6
    2476:	5d e3       	ldi	r21, 0x3D	; 61
    2478:	c7 01       	movw	r24, r14
    247a:	b6 01       	movw	r22, r12
    247c:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2480:	18 16       	cp	r1, r24
    2482:	3c f0       	brlt	.+14     	; 0x2492 <calc_prescaler+0x672>
				*ptr_u16_prescale=P_1024;
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	94 e0       	ldi	r25, 0x04	; 4
    2488:	f8 01       	movw	r30, r16
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	0d c1       	rjmp	.+538    	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    2492:	f8 01       	movw	r30, r16
    2494:	11 82       	std	Z+1, r1	; 0x01
    2496:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	08 c1       	rjmp	.+528    	; 0x26ac <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    249c:	8c ed       	ldi	r24, 0xDC	; 220
    249e:	95 e0       	ldi	r25, 0x05	; 5
    24a0:	f8 01       	movw	r30, r16
    24a2:	91 83       	std	Z+1, r25	; 0x01
    24a4:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	01 c1       	rjmp	.+514    	; 0x26ac <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    24aa:	41 30       	cpi	r20, 0x01	; 1
    24ac:	09 f0       	breq	.+2      	; 0x24b0 <calc_prescaler+0x690>
    24ae:	69 c0       	rjmp	.+210    	; 0x2582 <calc_prescaler+0x762>
		{
			if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024) )
    24b0:	2d eb       	ldi	r18, 0xBD	; 189
    24b2:	37 e3       	ldi	r19, 0x37	; 55
    24b4:	46 e0       	ldi	r20, 0x06	; 6
    24b6:	51 e4       	ldi	r21, 0x41	; 65
    24b8:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    24bc:	18 16       	cp	r1, r24
    24be:	0c f4       	brge	.+2      	; 0x24c2 <calc_prescaler+0x6a2>
    24c0:	59 c0       	rjmp	.+178    	; 0x2574 <calc_prescaler+0x754>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1))
    24c2:	2d eb       	ldi	r18, 0xBD	; 189
    24c4:	37 e3       	ldi	r19, 0x37	; 55
    24c6:	46 e0       	ldi	r20, 0x06	; 6
    24c8:	5c e3       	ldi	r21, 0x3C	; 60
    24ca:	c7 01       	movw	r24, r14
    24cc:	b6 01       	movw	r22, r12
    24ce:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    24d2:	18 16       	cp	r1, r24
    24d4:	34 f0       	brlt	.+12     	; 0x24e2 <calc_prescaler+0x6c2>
				*ptr_u16_prescale=P_1;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	f8 01       	movw	r30, r16
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	80 83       	st	Z, r24
    24e0:	e5 c0       	rjmp	.+458    	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
    24e2:	2d eb       	ldi	r18, 0xBD	; 189
    24e4:	37 e3       	ldi	r19, 0x37	; 55
    24e6:	46 e8       	ldi	r20, 0x86	; 134
    24e8:	5d e3       	ldi	r21, 0x3D	; 61
    24ea:	c7 01       	movw	r24, r14
    24ec:	b6 01       	movw	r22, r12
    24ee:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    24f2:	18 16       	cp	r1, r24
    24f4:	3c f0       	brlt	.+14     	; 0x2504 <calc_prescaler+0x6e4>
				*ptr_u16_prescale=P_8;
    24f6:	88 e0       	ldi	r24, 0x08	; 8
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	f8 01       	movw	r30, r16
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	d4 c0       	rjmp	.+424    	; 0x26ac <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
    2504:	2d eb       	ldi	r18, 0xBD	; 189
    2506:	37 e3       	ldi	r19, 0x37	; 55
    2508:	46 e0       	ldi	r20, 0x06	; 6
    250a:	5f e3       	ldi	r21, 0x3F	; 63
    250c:	c7 01       	movw	r24, r14
    250e:	b6 01       	movw	r22, r12
    2510:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2514:	18 16       	cp	r1, r24
    2516:	3c f0       	brlt	.+14     	; 0x2526 <calc_prescaler+0x706>
				*ptr_u16_prescale=P_64;
    2518:	80 e4       	ldi	r24, 0x40	; 64
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	f8 01       	movw	r30, r16
    251e:	91 83       	std	Z+1, r25	; 0x01
    2520:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	c3 c0       	rjmp	.+390    	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
    2526:	2d eb       	ldi	r18, 0xBD	; 189
    2528:	37 e3       	ldi	r19, 0x37	; 55
    252a:	46 e0       	ldi	r20, 0x06	; 6
    252c:	50 e4       	ldi	r21, 0x40	; 64
    252e:	c7 01       	movw	r24, r14
    2530:	b6 01       	movw	r22, r12
    2532:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2536:	18 16       	cp	r1, r24
    2538:	3c f0       	brlt	.+14     	; 0x2548 <calc_prescaler+0x728>
				*ptr_u16_prescale=P_256;
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	91 e0       	ldi	r25, 0x01	; 1
    253e:	f8 01       	movw	r30, r16
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	b2 c0       	rjmp	.+356    	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024))
    2548:	2d eb       	ldi	r18, 0xBD	; 189
    254a:	37 e3       	ldi	r19, 0x37	; 55
    254c:	46 e0       	ldi	r20, 0x06	; 6
    254e:	51 e4       	ldi	r21, 0x41	; 65
    2550:	c7 01       	movw	r24, r14
    2552:	b6 01       	movw	r22, r12
    2554:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2558:	18 16       	cp	r1, r24
    255a:	3c f0       	brlt	.+14     	; 0x256a <calc_prescaler+0x74a>
				*ptr_u16_prescale=P_1024;
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	94 e0       	ldi	r25, 0x04	; 4
    2560:	f8 01       	movw	r30, r16
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	a1 c0       	rjmp	.+322    	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    256a:	f8 01       	movw	r30, r16
    256c:	11 82       	std	Z+1, r1	; 0x01
    256e:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	9c c0       	rjmp	.+312    	; 0x26ac <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    2574:	8c ed       	ldi	r24, 0xDC	; 220
    2576:	95 e0       	ldi	r25, 0x05	; 5
    2578:	f8 01       	movw	r30, r16
    257a:	91 83       	std	Z+1, r25	; 0x01
    257c:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	95 c0       	rjmp	.+298    	; 0x26ac <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    2582:	42 30       	cpi	r20, 0x02	; 2
    2584:	09 f0       	breq	.+2      	; 0x2588 <calc_prescaler+0x768>
    2586:	91 c0       	rjmp	.+290    	; 0x26aa <calc_prescaler+0x88a>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024) )
    2588:	2d eb       	ldi	r18, 0xBD	; 189
    258a:	37 e3       	ldi	r19, 0x37	; 55
    258c:	46 e0       	ldi	r20, 0x06	; 6
    258e:	5d e3       	ldi	r21, 0x3D	; 61
    2590:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2594:	18 16       	cp	r1, r24
    2596:	0c f4       	brge	.+2      	; 0x259a <calc_prescaler+0x77a>
    2598:	7b c0       	rjmp	.+246    	; 0x2690 <calc_prescaler+0x870>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
    259a:	2d eb       	ldi	r18, 0xBD	; 189
    259c:	37 e3       	ldi	r19, 0x37	; 55
    259e:	46 e0       	ldi	r20, 0x06	; 6
    25a0:	58 e3       	ldi	r21, 0x38	; 56
    25a2:	c7 01       	movw	r24, r14
    25a4:	b6 01       	movw	r22, r12
    25a6:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    25aa:	18 16       	cp	r1, r24
    25ac:	34 f0       	brlt	.+12     	; 0x25ba <calc_prescaler+0x79a>
				*ptr_u16_prescale=P_1;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	f8 01       	movw	r30, r16
    25b4:	91 83       	std	Z+1, r25	; 0x01
    25b6:	80 83       	st	Z, r24
    25b8:	79 c0       	rjmp	.+242    	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
    25ba:	2d eb       	ldi	r18, 0xBD	; 189
    25bc:	37 e3       	ldi	r19, 0x37	; 55
    25be:	46 e8       	ldi	r20, 0x86	; 134
    25c0:	59 e3       	ldi	r21, 0x39	; 57
    25c2:	c7 01       	movw	r24, r14
    25c4:	b6 01       	movw	r22, r12
    25c6:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    25ca:	18 16       	cp	r1, r24
    25cc:	3c f0       	brlt	.+14     	; 0x25dc <calc_prescaler+0x7bc>
				*ptr_u16_prescale=P_8;
    25ce:	88 e0       	ldi	r24, 0x08	; 8
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	f8 01       	movw	r30, r16
    25d4:	91 83       	std	Z+1, r25	; 0x01
    25d6:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	68 c0       	rjmp	.+208    	; 0x26ac <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
    25dc:	2d eb       	ldi	r18, 0xBD	; 189
    25de:	37 e3       	ldi	r19, 0x37	; 55
    25e0:	46 e8       	ldi	r20, 0x86	; 134
    25e2:	5a e3       	ldi	r21, 0x3A	; 58
    25e4:	c7 01       	movw	r24, r14
    25e6:	b6 01       	movw	r22, r12
    25e8:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    25ec:	18 16       	cp	r1, r24
    25ee:	3c f0       	brlt	.+14     	; 0x25fe <calc_prescaler+0x7de>
				*ptr_u16_prescale=P_32;
    25f0:	80 e2       	ldi	r24, 0x20	; 32
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	f8 01       	movw	r30, r16
    25f6:	91 83       	std	Z+1, r25	; 0x01
    25f8:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	57 c0       	rjmp	.+174    	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
    25fe:	2d eb       	ldi	r18, 0xBD	; 189
    2600:	37 e3       	ldi	r19, 0x37	; 55
    2602:	46 e0       	ldi	r20, 0x06	; 6
    2604:	5b e3       	ldi	r21, 0x3B	; 59
    2606:	c7 01       	movw	r24, r14
    2608:	b6 01       	movw	r22, r12
    260a:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    260e:	18 16       	cp	r1, r24
    2610:	3c f0       	brlt	.+14     	; 0x2620 <calc_prescaler+0x800>
				*ptr_u16_prescale=P_64;
    2612:	80 e4       	ldi	r24, 0x40	; 64
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	f8 01       	movw	r30, r16
    2618:	91 83       	std	Z+1, r25	; 0x01
    261a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	46 c0       	rjmp	.+140    	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
    2620:	2d eb       	ldi	r18, 0xBD	; 189
    2622:	37 e3       	ldi	r19, 0x37	; 55
    2624:	46 e8       	ldi	r20, 0x86	; 134
    2626:	5b e3       	ldi	r21, 0x3B	; 59
    2628:	c7 01       	movw	r24, r14
    262a:	b6 01       	movw	r22, r12
    262c:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2630:	18 16       	cp	r1, r24
    2632:	3c f0       	brlt	.+14     	; 0x2642 <calc_prescaler+0x822>
				*ptr_u16_prescale=P_128;
    2634:	80 e8       	ldi	r24, 0x80	; 128
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	f8 01       	movw	r30, r16
    263a:	91 83       	std	Z+1, r25	; 0x01
    263c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	35 c0       	rjmp	.+106    	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
    2642:	2d eb       	ldi	r18, 0xBD	; 189
    2644:	37 e3       	ldi	r19, 0x37	; 55
    2646:	46 e0       	ldi	r20, 0x06	; 6
    2648:	5c e3       	ldi	r21, 0x3C	; 60
    264a:	c7 01       	movw	r24, r14
    264c:	b6 01       	movw	r22, r12
    264e:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2652:	18 16       	cp	r1, r24
    2654:	3c f0       	brlt	.+14     	; 0x2664 <calc_prescaler+0x844>
				*ptr_u16_prescale=P_256;
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	91 e0       	ldi	r25, 0x01	; 1
    265a:	f8 01       	movw	r30, r16
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	24 c0       	rjmp	.+72     	; 0x26ac <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_SEC(P_1024))
    2664:	2d eb       	ldi	r18, 0xBD	; 189
    2666:	37 e3       	ldi	r19, 0x37	; 55
    2668:	46 e0       	ldi	r20, 0x06	; 6
    266a:	5d e3       	ldi	r21, 0x3D	; 61
    266c:	c7 01       	movw	r24, r14
    266e:	b6 01       	movw	r22, r12
    2670:	0e 94 1d 19 	call	0x323a	; 0x323a <__cmpsf2>
    2674:	18 16       	cp	r1, r24
    2676:	3c f0       	brlt	.+14     	; 0x2686 <calc_prescaler+0x866>
				*ptr_u16_prescale=P_1024;
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	94 e0       	ldi	r25, 0x04	; 4
    267c:	f8 01       	movw	r30, r16
    267e:	91 83       	std	Z+1, r25	; 0x01
    2680:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	13 c0       	rjmp	.+38     	; 0x26ac <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    2686:	f8 01       	movw	r30, r16
    2688:	11 82       	std	Z+1, r1	; 0x01
    268a:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	0e c0       	rjmp	.+28     	; 0x26ac <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    2690:	8c ed       	ldi	r24, 0xDC	; 220
    2692:	95 e0       	ldi	r25, 0x05	; 5
    2694:	f8 01       	movw	r30, r16
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	07 c0       	rjmp	.+14     	; 0x26ac <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	05 c0       	rjmp	.+10     	; 0x26ac <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	03 c0       	rjmp	.+6      	; 0x26ac <calc_prescaler+0x88c>
			// do nothing
		}
	}
	else
	{
		bo_return_value = FALSE;
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	01 c0       	rjmp	.+2      	; 0x26ac <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    26aa:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		bo_return_value = FALSE;
	}
	return bo_return_value;
}
    26ac:	1f 91       	pop	r17
    26ae:	0f 91       	pop	r16
    26b0:	ff 90       	pop	r15
    26b2:	ef 90       	pop	r14
    26b4:	df 90       	pop	r13
    26b6:	cf 90       	pop	r12
    26b8:	08 95       	ret

000026ba <calc_initialValue>:

/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
    26ba:	ef 92       	push	r14
    26bc:	ff 92       	push	r15
    26be:	0f 93       	push	r16
    26c0:	1f 93       	push	r17
	BOOLEAN bo_return_value = TRUE;
	if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    26c2:	81 11       	cpse	r24, r1
    26c4:	8a c1       	rjmp	.+788    	; 0x29da <calc_initialValue+0x320>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    26c6:	61 11       	cpse	r22, r1
    26c8:	7c c0       	rjmp	.+248    	; 0x27c2 <calc_initialValue+0x108>
		{
			switch(prescaler)
    26ca:	40 34       	cpi	r20, 0x40	; 64
    26cc:	51 05       	cpc	r21, r1
    26ce:	a9 f1       	breq	.+106    	; 0x273a <calc_initialValue+0x80>
    26d0:	38 f4       	brcc	.+14     	; 0x26e0 <calc_initialValue+0x26>
    26d2:	41 30       	cpi	r20, 0x01	; 1
    26d4:	51 05       	cpc	r21, r1
    26d6:	69 f0       	breq	.+26     	; 0x26f2 <calc_initialValue+0x38>
    26d8:	48 30       	cpi	r20, 0x08	; 8
    26da:	51 05       	cpc	r21, r1
    26dc:	f9 f0       	breq	.+62     	; 0x271c <calc_initialValue+0x62>
    26de:	6c c0       	rjmp	.+216    	; 0x27b8 <calc_initialValue+0xfe>
    26e0:	41 15       	cp	r20, r1
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	58 07       	cpc	r21, r24
    26e6:	f1 f1       	breq	.+124    	; 0x2764 <calc_initialValue+0xaa>
    26e8:	41 15       	cp	r20, r1
    26ea:	54 40       	sbci	r21, 0x04	; 4
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <calc_initialValue+0x36>
    26ee:	4f c0       	rjmp	.+158    	; 0x278e <calc_initialValue+0xd4>
    26f0:	63 c0       	rjmp	.+198    	; 0x27b8 <calc_initialValue+0xfe>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    26f2:	a9 01       	movw	r20, r18
    26f4:	98 01       	movw	r18, r16
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	70 e0       	ldi	r23, 0x00	; 0
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	92 e4       	ldi	r25, 0x42	; 66
    26fe:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e0       	ldi	r20, 0x00	; 0
    2708:	51 e4       	ldi	r21, 0x41	; 65
    270a:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
    270e:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2712:	f7 01       	movw	r30, r14
    2714:	71 83       	std	Z+1, r23	; 0x01
    2716:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2718:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    271a:	1d c5       	rjmp	.+2618   	; 0x3156 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    271c:	a9 01       	movw	r20, r18
    271e:	98 01       	movw	r18, r16
    2720:	60 e0       	ldi	r22, 0x00	; 0
    2722:	70 e0       	ldi	r23, 0x00	; 0
    2724:	80 e8       	ldi	r24, 0x80	; 128
    2726:	93 e4       	ldi	r25, 0x43	; 67
    2728:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    272c:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2730:	f7 01       	movw	r30, r14
    2732:	71 83       	std	Z+1, r23	; 0x01
    2734:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2736:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    2738:	0e c5       	rjmp	.+2588   	; 0x3156 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    273a:	a9 01       	movw	r20, r18
    273c:	98 01       	movw	r18, r16
    273e:	60 e0       	ldi	r22, 0x00	; 0
    2740:	70 e0       	ldi	r23, 0x00	; 0
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	95 e4       	ldi	r25, 0x45	; 69
    2746:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	5e e3       	ldi	r21, 0x3E	; 62
    2752:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
    2756:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    275a:	f7 01       	movw	r30, r14
    275c:	71 83       	std	Z+1, r23	; 0x01
    275e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2760:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    2762:	f9 c4       	rjmp	.+2546   	; 0x3156 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    2764:	a9 01       	movw	r20, r18
    2766:	98 01       	movw	r18, r16
    2768:	60 e0       	ldi	r22, 0x00	; 0
    276a:	70 e0       	ldi	r23, 0x00	; 0
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	96 e4       	ldi	r25, 0x46	; 70
    2770:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e0       	ldi	r20, 0x00	; 0
    277a:	5d e3       	ldi	r21, 0x3D	; 61
    277c:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
    2780:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2784:	f7 01       	movw	r30, r14
    2786:	71 83       	std	Z+1, r23	; 0x01
    2788:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    278a:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    278c:	e4 c4       	rjmp	.+2504   	; 0x3156 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    278e:	a9 01       	movw	r20, r18
    2790:	98 01       	movw	r18, r16
    2792:	60 e0       	ldi	r22, 0x00	; 0
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	97 e4       	ldi	r25, 0x47	; 71
    279a:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e0       	ldi	r20, 0x00	; 0
    27a4:	5c e3       	ldi	r21, 0x3C	; 60
    27a6:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
    27aa:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    27ae:	f7 01       	movw	r30, r14
    27b0:	71 83       	std	Z+1, r23	; 0x01
    27b2:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    27b4:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    27b6:	cf c4       	rjmp	.+2462   	; 0x3156 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    27b8:	f7 01       	movw	r30, r14
    27ba:	11 82       	std	Z+1, r1	; 0x01
    27bc:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    27be:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    27c0:	ca c4       	rjmp	.+2452   	; 0x3156 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    27c2:	61 30       	cpi	r22, 0x01	; 1
    27c4:	09 f0       	breq	.+2      	; 0x27c8 <calc_initialValue+0x10e>
    27c6:	83 c0       	rjmp	.+262    	; 0x28ce <calc_initialValue+0x214>
		{
			switch(prescaler)
    27c8:	40 34       	cpi	r20, 0x40	; 64
    27ca:	51 05       	cpc	r21, r1
    27cc:	e1 f1       	breq	.+120    	; 0x2846 <calc_initialValue+0x18c>
    27ce:	38 f4       	brcc	.+14     	; 0x27de <calc_initialValue+0x124>
    27d0:	41 30       	cpi	r20, 0x01	; 1
    27d2:	51 05       	cpc	r21, r1
    27d4:	71 f0       	breq	.+28     	; 0x27f2 <calc_initialValue+0x138>
    27d6:	48 30       	cpi	r20, 0x08	; 8
    27d8:	51 05       	cpc	r21, r1
    27da:	01 f1       	breq	.+64     	; 0x281c <calc_initialValue+0x162>
    27dc:	73 c0       	rjmp	.+230    	; 0x28c4 <calc_initialValue+0x20a>
    27de:	41 15       	cp	r20, r1
    27e0:	f1 e0       	ldi	r31, 0x01	; 1
    27e2:	5f 07       	cpc	r21, r31
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <calc_initialValue+0x12e>
    27e6:	44 c0       	rjmp	.+136    	; 0x2870 <calc_initialValue+0x1b6>
    27e8:	41 15       	cp	r20, r1
    27ea:	54 40       	sbci	r21, 0x04	; 4
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <calc_initialValue+0x136>
    27ee:	55 c0       	rjmp	.+170    	; 0x289a <calc_initialValue+0x1e0>
    27f0:	69 c0       	rjmp	.+210    	; 0x28c4 <calc_initialValue+0x20a>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    27f2:	a9 01       	movw	r20, r18
    27f4:	98 01       	movw	r18, r16
    27f6:	6f e6       	ldi	r22, 0x6F	; 111
    27f8:	72 e1       	ldi	r23, 0x12	; 18
    27fa:	83 e0       	ldi	r24, 0x03	; 3
    27fc:	9d e3       	ldi	r25, 0x3D	; 61
    27fe:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2802:	2f e6       	ldi	r18, 0x6F	; 111
    2804:	32 e1       	ldi	r19, 0x12	; 18
    2806:	43 e0       	ldi	r20, 0x03	; 3
    2808:	59 e3       	ldi	r21, 0x39	; 57
    280a:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    280e:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2812:	f7 01       	movw	r30, r14
    2814:	71 83       	std	Z+1, r23	; 0x01
    2816:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2818:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    281a:	9d c4       	rjmp	.+2362   	; 0x3156 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    281c:	a9 01       	movw	r20, r18
    281e:	98 01       	movw	r18, r16
    2820:	6f e6       	ldi	r22, 0x6F	; 111
    2822:	72 e1       	ldi	r23, 0x12	; 18
    2824:	83 e8       	ldi	r24, 0x83	; 131
    2826:	9e e3       	ldi	r25, 0x3E	; 62
    2828:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    282c:	2f e6       	ldi	r18, 0x6F	; 111
    282e:	32 e1       	ldi	r19, 0x12	; 18
    2830:	43 e8       	ldi	r20, 0x83	; 131
    2832:	5a e3       	ldi	r21, 0x3A	; 58
    2834:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2838:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    283c:	f7 01       	movw	r30, r14
    283e:	71 83       	std	Z+1, r23	; 0x01
    2840:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2842:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    2844:	88 c4       	rjmp	.+2320   	; 0x3156 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    2846:	a9 01       	movw	r20, r18
    2848:	98 01       	movw	r18, r16
    284a:	6f e6       	ldi	r22, 0x6F	; 111
    284c:	72 e1       	ldi	r23, 0x12	; 18
    284e:	83 e0       	ldi	r24, 0x03	; 3
    2850:	90 e4       	ldi	r25, 0x40	; 64
    2852:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2856:	2f e6       	ldi	r18, 0x6F	; 111
    2858:	32 e1       	ldi	r19, 0x12	; 18
    285a:	43 e0       	ldi	r20, 0x03	; 3
    285c:	5c e3       	ldi	r21, 0x3C	; 60
    285e:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2862:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2866:	f7 01       	movw	r30, r14
    2868:	71 83       	std	Z+1, r23	; 0x01
    286a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    286c:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    286e:	73 c4       	rjmp	.+2278   	; 0x3156 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    2870:	a9 01       	movw	r20, r18
    2872:	98 01       	movw	r18, r16
    2874:	6f e6       	ldi	r22, 0x6F	; 111
    2876:	72 e1       	ldi	r23, 0x12	; 18
    2878:	83 e0       	ldi	r24, 0x03	; 3
    287a:	91 e4       	ldi	r25, 0x41	; 65
    287c:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2880:	2f e6       	ldi	r18, 0x6F	; 111
    2882:	32 e1       	ldi	r19, 0x12	; 18
    2884:	43 e0       	ldi	r20, 0x03	; 3
    2886:	5d e3       	ldi	r21, 0x3D	; 61
    2888:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    288c:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2890:	f7 01       	movw	r30, r14
    2892:	71 83       	std	Z+1, r23	; 0x01
    2894:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2896:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    2898:	5e c4       	rjmp	.+2236   	; 0x3156 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    289a:	a9 01       	movw	r20, r18
    289c:	98 01       	movw	r18, r16
    289e:	6f e6       	ldi	r22, 0x6F	; 111
    28a0:	72 e1       	ldi	r23, 0x12	; 18
    28a2:	83 e0       	ldi	r24, 0x03	; 3
    28a4:	92 e4       	ldi	r25, 0x42	; 66
    28a6:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    28aa:	2f e6       	ldi	r18, 0x6F	; 111
    28ac:	32 e1       	ldi	r19, 0x12	; 18
    28ae:	43 e0       	ldi	r20, 0x03	; 3
    28b0:	5e e3       	ldi	r21, 0x3E	; 62
    28b2:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    28b6:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    28ba:	f7 01       	movw	r30, r14
    28bc:	71 83       	std	Z+1, r23	; 0x01
    28be:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    28c2:	49 c4       	rjmp	.+2194   	; 0x3156 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    28c4:	f7 01       	movw	r30, r14
    28c6:	11 82       	std	Z+1, r1	; 0x01
    28c8:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    28ca:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    28cc:	44 c4       	rjmp	.+2184   	; 0x3156 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    28ce:	62 30       	cpi	r22, 0x02	; 2
    28d0:	09 f0       	breq	.+2      	; 0x28d4 <calc_initialValue+0x21a>
    28d2:	3a c4       	rjmp	.+2164   	; 0x3148 <calc_initialValue+0xa8e>
		{
			switch(prescaler)
    28d4:	40 34       	cpi	r20, 0x40	; 64
    28d6:	51 05       	cpc	r21, r1
    28d8:	e1 f1       	breq	.+120    	; 0x2952 <calc_initialValue+0x298>
    28da:	38 f4       	brcc	.+14     	; 0x28ea <calc_initialValue+0x230>
    28dc:	41 30       	cpi	r20, 0x01	; 1
    28de:	51 05       	cpc	r21, r1
    28e0:	71 f0       	breq	.+28     	; 0x28fe <calc_initialValue+0x244>
    28e2:	48 30       	cpi	r20, 0x08	; 8
    28e4:	51 05       	cpc	r21, r1
    28e6:	01 f1       	breq	.+64     	; 0x2928 <calc_initialValue+0x26e>
    28e8:	73 c0       	rjmp	.+230    	; 0x29d0 <calc_initialValue+0x316>
    28ea:	41 15       	cp	r20, r1
    28ec:	f1 e0       	ldi	r31, 0x01	; 1
    28ee:	5f 07       	cpc	r21, r31
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <calc_initialValue+0x23a>
    28f2:	44 c0       	rjmp	.+136    	; 0x297c <calc_initialValue+0x2c2>
    28f4:	41 15       	cp	r20, r1
    28f6:	54 40       	sbci	r21, 0x04	; 4
    28f8:	09 f4       	brne	.+2      	; 0x28fc <calc_initialValue+0x242>
    28fa:	55 c0       	rjmp	.+170    	; 0x29a6 <calc_initialValue+0x2ec>
    28fc:	69 c0       	rjmp	.+210    	; 0x29d0 <calc_initialValue+0x316>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    28fe:	a9 01       	movw	r20, r18
    2900:	98 01       	movw	r18, r16
    2902:	6d eb       	ldi	r22, 0xBD	; 189
    2904:	77 e3       	ldi	r23, 0x37	; 55
    2906:	86 e0       	ldi	r24, 0x06	; 6
    2908:	98 e3       	ldi	r25, 0x38	; 56
    290a:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    290e:	2d eb       	ldi	r18, 0xBD	; 189
    2910:	37 e3       	ldi	r19, 0x37	; 55
    2912:	46 e0       	ldi	r20, 0x06	; 6
    2914:	54 e3       	ldi	r21, 0x34	; 52
    2916:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    291a:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    291e:	f7 01       	movw	r30, r14
    2920:	71 83       	std	Z+1, r23	; 0x01
    2922:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2924:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    2926:	17 c4       	rjmp	.+2094   	; 0x3156 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    2928:	a9 01       	movw	r20, r18
    292a:	98 01       	movw	r18, r16
    292c:	6d eb       	ldi	r22, 0xBD	; 189
    292e:	77 e3       	ldi	r23, 0x37	; 55
    2930:	86 e8       	ldi	r24, 0x86	; 134
    2932:	99 e3       	ldi	r25, 0x39	; 57
    2934:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2938:	2d eb       	ldi	r18, 0xBD	; 189
    293a:	37 e3       	ldi	r19, 0x37	; 55
    293c:	46 e8       	ldi	r20, 0x86	; 134
    293e:	55 e3       	ldi	r21, 0x35	; 53
    2940:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2944:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2948:	f7 01       	movw	r30, r14
    294a:	71 83       	std	Z+1, r23	; 0x01
    294c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    294e:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    2950:	02 c4       	rjmp	.+2052   	; 0x3156 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    2952:	a9 01       	movw	r20, r18
    2954:	98 01       	movw	r18, r16
    2956:	6d eb       	ldi	r22, 0xBD	; 189
    2958:	77 e3       	ldi	r23, 0x37	; 55
    295a:	86 e0       	ldi	r24, 0x06	; 6
    295c:	9b e3       	ldi	r25, 0x3B	; 59
    295e:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2962:	2d eb       	ldi	r18, 0xBD	; 189
    2964:	37 e3       	ldi	r19, 0x37	; 55
    2966:	46 e0       	ldi	r20, 0x06	; 6
    2968:	57 e3       	ldi	r21, 0x37	; 55
    296a:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    296e:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2972:	f7 01       	movw	r30, r14
    2974:	71 83       	std	Z+1, r23	; 0x01
    2976:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2978:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    297a:	ed c3       	rjmp	.+2010   	; 0x3156 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    297c:	a9 01       	movw	r20, r18
    297e:	98 01       	movw	r18, r16
    2980:	6d eb       	ldi	r22, 0xBD	; 189
    2982:	77 e3       	ldi	r23, 0x37	; 55
    2984:	86 e0       	ldi	r24, 0x06	; 6
    2986:	9c e3       	ldi	r25, 0x3C	; 60
    2988:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    298c:	2d eb       	ldi	r18, 0xBD	; 189
    298e:	37 e3       	ldi	r19, 0x37	; 55
    2990:	46 e0       	ldi	r20, 0x06	; 6
    2992:	58 e3       	ldi	r21, 0x38	; 56
    2994:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2998:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    299c:	f7 01       	movw	r30, r14
    299e:	71 83       	std	Z+1, r23	; 0x01
    29a0:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    29a2:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    29a4:	d8 c3       	rjmp	.+1968   	; 0x3156 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    29a6:	a9 01       	movw	r20, r18
    29a8:	98 01       	movw	r18, r16
    29aa:	6d eb       	ldi	r22, 0xBD	; 189
    29ac:	77 e3       	ldi	r23, 0x37	; 55
    29ae:	86 e0       	ldi	r24, 0x06	; 6
    29b0:	9d e3       	ldi	r25, 0x3D	; 61
    29b2:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    29b6:	2d eb       	ldi	r18, 0xBD	; 189
    29b8:	37 e3       	ldi	r19, 0x37	; 55
    29ba:	46 e0       	ldi	r20, 0x06	; 6
    29bc:	59 e3       	ldi	r21, 0x39	; 57
    29be:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    29c2:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    29c6:	f7 01       	movw	r30, r14
    29c8:	71 83       	std	Z+1, r23	; 0x01
    29ca:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    29cc:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    29ce:	c3 c3       	rjmp	.+1926   	; 0x3156 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    29d0:	f7 01       	movw	r30, r14
    29d2:	11 82       	std	Z+1, r1	; 0x01
    29d4:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    29d6:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    29d8:	be c3       	rjmp	.+1916   	; 0x3156 <calc_initialValue+0xa9c>
		else
		{
			// do nothing
		}
	}
	else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    29da:	81 30       	cpi	r24, 0x01	; 1
    29dc:	09 f0       	breq	.+2      	; 0x29e0 <calc_initialValue+0x326>
    29de:	8a c1       	rjmp	.+788    	; 0x2cf4 <calc_initialValue+0x63a>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    29e0:	61 11       	cpse	r22, r1
    29e2:	7c c0       	rjmp	.+248    	; 0x2adc <calc_initialValue+0x422>
		{
			switch(prescaler)
    29e4:	40 34       	cpi	r20, 0x40	; 64
    29e6:	51 05       	cpc	r21, r1
    29e8:	a9 f1       	breq	.+106    	; 0x2a54 <calc_initialValue+0x39a>
    29ea:	38 f4       	brcc	.+14     	; 0x29fa <calc_initialValue+0x340>
    29ec:	41 30       	cpi	r20, 0x01	; 1
    29ee:	51 05       	cpc	r21, r1
    29f0:	69 f0       	breq	.+26     	; 0x2a0c <calc_initialValue+0x352>
    29f2:	48 30       	cpi	r20, 0x08	; 8
    29f4:	51 05       	cpc	r21, r1
    29f6:	f9 f0       	breq	.+62     	; 0x2a36 <calc_initialValue+0x37c>
    29f8:	6c c0       	rjmp	.+216    	; 0x2ad2 <calc_initialValue+0x418>
    29fa:	41 15       	cp	r20, r1
    29fc:	f1 e0       	ldi	r31, 0x01	; 1
    29fe:	5f 07       	cpc	r21, r31
    2a00:	f1 f1       	breq	.+124    	; 0x2a7e <calc_initialValue+0x3c4>
    2a02:	41 15       	cp	r20, r1
    2a04:	54 40       	sbci	r21, 0x04	; 4
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <calc_initialValue+0x350>
    2a08:	4f c0       	rjmp	.+158    	; 0x2aa8 <calc_initialValue+0x3ee>
    2a0a:	63 c0       	rjmp	.+198    	; 0x2ad2 <calc_initialValue+0x418>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    2a0c:	a9 01       	movw	r20, r18
    2a0e:	98 01       	movw	r18, r16
    2a10:	60 e0       	ldi	r22, 0x00	; 0
    2a12:	70 e0       	ldi	r23, 0x00	; 0
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	96 e4       	ldi	r25, 0x46	; 70
    2a18:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	51 e4       	ldi	r21, 0x41	; 65
    2a24:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
    2a28:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2a2c:	f7 01       	movw	r30, r14
    2a2e:	71 83       	std	Z+1, r23	; 0x01
    2a30:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2a32:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    2a34:	90 c3       	rjmp	.+1824   	; 0x3156 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    2a36:	a9 01       	movw	r20, r18
    2a38:	98 01       	movw	r18, r16
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	80 e8       	ldi	r24, 0x80	; 128
    2a40:	97 e4       	ldi	r25, 0x47	; 71
    2a42:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2a46:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2a4a:	f7 01       	movw	r30, r14
    2a4c:	71 83       	std	Z+1, r23	; 0x01
    2a4e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2a50:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    2a52:	81 c3       	rjmp	.+1794   	; 0x3156 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    2a54:	a9 01       	movw	r20, r18
    2a56:	98 01       	movw	r18, r16
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	70 e0       	ldi	r23, 0x00	; 0
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	99 e4       	ldi	r25, 0x49	; 73
    2a60:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e0       	ldi	r20, 0x00	; 0
    2a6a:	5e e3       	ldi	r21, 0x3E	; 62
    2a6c:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
    2a70:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2a74:	f7 01       	movw	r30, r14
    2a76:	71 83       	std	Z+1, r23	; 0x01
    2a78:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    2a7c:	6c c3       	rjmp	.+1752   	; 0x3156 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    2a7e:	a9 01       	movw	r20, r18
    2a80:	98 01       	movw	r18, r16
    2a82:	60 e0       	ldi	r22, 0x00	; 0
    2a84:	70 e0       	ldi	r23, 0x00	; 0
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	9a e4       	ldi	r25, 0x4A	; 74
    2a8a:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e0       	ldi	r20, 0x00	; 0
    2a94:	5d e3       	ldi	r21, 0x3D	; 61
    2a96:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
    2a9a:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2a9e:	f7 01       	movw	r30, r14
    2aa0:	71 83       	std	Z+1, r23	; 0x01
    2aa2:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    2aa6:	57 c3       	rjmp	.+1710   	; 0x3156 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    2aa8:	a9 01       	movw	r20, r18
    2aaa:	98 01       	movw	r18, r16
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	9b e4       	ldi	r25, 0x4B	; 75
    2ab4:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	40 e0       	ldi	r20, 0x00	; 0
    2abe:	5c e3       	ldi	r21, 0x3C	; 60
    2ac0:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
    2ac4:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2ac8:	f7 01       	movw	r30, r14
    2aca:	71 83       	std	Z+1, r23	; 0x01
    2acc:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2ace:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    2ad0:	42 c3       	rjmp	.+1668   	; 0x3156 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2ad2:	f7 01       	movw	r30, r14
    2ad4:	11 82       	std	Z+1, r1	; 0x01
    2ad6:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2ada:	3d c3       	rjmp	.+1658   	; 0x3156 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    2adc:	61 30       	cpi	r22, 0x01	; 1
    2ade:	09 f0       	breq	.+2      	; 0x2ae2 <calc_initialValue+0x428>
    2ae0:	83 c0       	rjmp	.+262    	; 0x2be8 <calc_initialValue+0x52e>
		{
			switch(prescaler)
    2ae2:	40 34       	cpi	r20, 0x40	; 64
    2ae4:	51 05       	cpc	r21, r1
    2ae6:	e1 f1       	breq	.+120    	; 0x2b60 <calc_initialValue+0x4a6>
    2ae8:	38 f4       	brcc	.+14     	; 0x2af8 <calc_initialValue+0x43e>
    2aea:	41 30       	cpi	r20, 0x01	; 1
    2aec:	51 05       	cpc	r21, r1
    2aee:	71 f0       	breq	.+28     	; 0x2b0c <calc_initialValue+0x452>
    2af0:	48 30       	cpi	r20, 0x08	; 8
    2af2:	51 05       	cpc	r21, r1
    2af4:	01 f1       	breq	.+64     	; 0x2b36 <calc_initialValue+0x47c>
    2af6:	73 c0       	rjmp	.+230    	; 0x2bde <calc_initialValue+0x524>
    2af8:	41 15       	cp	r20, r1
    2afa:	f1 e0       	ldi	r31, 0x01	; 1
    2afc:	5f 07       	cpc	r21, r31
    2afe:	09 f4       	brne	.+2      	; 0x2b02 <calc_initialValue+0x448>
    2b00:	44 c0       	rjmp	.+136    	; 0x2b8a <calc_initialValue+0x4d0>
    2b02:	41 15       	cp	r20, r1
    2b04:	54 40       	sbci	r21, 0x04	; 4
    2b06:	09 f4       	brne	.+2      	; 0x2b0a <calc_initialValue+0x450>
    2b08:	55 c0       	rjmp	.+170    	; 0x2bb4 <calc_initialValue+0x4fa>
    2b0a:	69 c0       	rjmp	.+210    	; 0x2bde <calc_initialValue+0x524>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    2b0c:	a9 01       	movw	r20, r18
    2b0e:	98 01       	movw	r18, r16
    2b10:	6f e6       	ldi	r22, 0x6F	; 111
    2b12:	72 e1       	ldi	r23, 0x12	; 18
    2b14:	83 e0       	ldi	r24, 0x03	; 3
    2b16:	91 e4       	ldi	r25, 0x41	; 65
    2b18:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2b1c:	2f e6       	ldi	r18, 0x6F	; 111
    2b1e:	32 e1       	ldi	r19, 0x12	; 18
    2b20:	43 e0       	ldi	r20, 0x03	; 3
    2b22:	59 e3       	ldi	r21, 0x39	; 57
    2b24:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2b28:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2b2c:	f7 01       	movw	r30, r14
    2b2e:	71 83       	std	Z+1, r23	; 0x01
    2b30:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2b32:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    2b34:	10 c3       	rjmp	.+1568   	; 0x3156 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    2b36:	a9 01       	movw	r20, r18
    2b38:	98 01       	movw	r18, r16
    2b3a:	6f e6       	ldi	r22, 0x6F	; 111
    2b3c:	72 e1       	ldi	r23, 0x12	; 18
    2b3e:	83 e8       	ldi	r24, 0x83	; 131
    2b40:	92 e4       	ldi	r25, 0x42	; 66
    2b42:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2b46:	2f e6       	ldi	r18, 0x6F	; 111
    2b48:	32 e1       	ldi	r19, 0x12	; 18
    2b4a:	43 e8       	ldi	r20, 0x83	; 131
    2b4c:	5a e3       	ldi	r21, 0x3A	; 58
    2b4e:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2b52:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2b56:	f7 01       	movw	r30, r14
    2b58:	71 83       	std	Z+1, r23	; 0x01
    2b5a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    2b5e:	fb c2       	rjmp	.+1526   	; 0x3156 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    2b60:	a9 01       	movw	r20, r18
    2b62:	98 01       	movw	r18, r16
    2b64:	6f e6       	ldi	r22, 0x6F	; 111
    2b66:	72 e1       	ldi	r23, 0x12	; 18
    2b68:	83 e0       	ldi	r24, 0x03	; 3
    2b6a:	94 e4       	ldi	r25, 0x44	; 68
    2b6c:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2b70:	2f e6       	ldi	r18, 0x6F	; 111
    2b72:	32 e1       	ldi	r19, 0x12	; 18
    2b74:	43 e0       	ldi	r20, 0x03	; 3
    2b76:	5c e3       	ldi	r21, 0x3C	; 60
    2b78:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2b7c:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2b80:	f7 01       	movw	r30, r14
    2b82:	71 83       	std	Z+1, r23	; 0x01
    2b84:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2b86:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    2b88:	e6 c2       	rjmp	.+1484   	; 0x3156 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    2b8a:	a9 01       	movw	r20, r18
    2b8c:	98 01       	movw	r18, r16
    2b8e:	6f e6       	ldi	r22, 0x6F	; 111
    2b90:	72 e1       	ldi	r23, 0x12	; 18
    2b92:	83 e0       	ldi	r24, 0x03	; 3
    2b94:	95 e4       	ldi	r25, 0x45	; 69
    2b96:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2b9a:	2f e6       	ldi	r18, 0x6F	; 111
    2b9c:	32 e1       	ldi	r19, 0x12	; 18
    2b9e:	43 e0       	ldi	r20, 0x03	; 3
    2ba0:	5d e3       	ldi	r21, 0x3D	; 61
    2ba2:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2ba6:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2baa:	f7 01       	movw	r30, r14
    2bac:	71 83       	std	Z+1, r23	; 0x01
    2bae:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    2bb2:	d1 c2       	rjmp	.+1442   	; 0x3156 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    2bb4:	a9 01       	movw	r20, r18
    2bb6:	98 01       	movw	r18, r16
    2bb8:	6f e6       	ldi	r22, 0x6F	; 111
    2bba:	72 e1       	ldi	r23, 0x12	; 18
    2bbc:	83 e0       	ldi	r24, 0x03	; 3
    2bbe:	96 e4       	ldi	r25, 0x46	; 70
    2bc0:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2bc4:	2f e6       	ldi	r18, 0x6F	; 111
    2bc6:	32 e1       	ldi	r19, 0x12	; 18
    2bc8:	43 e0       	ldi	r20, 0x03	; 3
    2bca:	5e e3       	ldi	r21, 0x3E	; 62
    2bcc:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2bd0:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2bd4:	f7 01       	movw	r30, r14
    2bd6:	71 83       	std	Z+1, r23	; 0x01
    2bd8:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    2bdc:	bc c2       	rjmp	.+1400   	; 0x3156 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2bde:	f7 01       	movw	r30, r14
    2be0:	11 82       	std	Z+1, r1	; 0x01
    2be2:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2be4:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2be6:	b7 c2       	rjmp	.+1390   	; 0x3156 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    2be8:	62 30       	cpi	r22, 0x02	; 2
    2bea:	09 f0       	breq	.+2      	; 0x2bee <calc_initialValue+0x534>
    2bec:	af c2       	rjmp	.+1374   	; 0x314c <calc_initialValue+0xa92>
		{
			switch(prescaler)
    2bee:	40 34       	cpi	r20, 0x40	; 64
    2bf0:	51 05       	cpc	r21, r1
    2bf2:	e1 f1       	breq	.+120    	; 0x2c6c <calc_initialValue+0x5b2>
    2bf4:	38 f4       	brcc	.+14     	; 0x2c04 <calc_initialValue+0x54a>
    2bf6:	41 30       	cpi	r20, 0x01	; 1
    2bf8:	51 05       	cpc	r21, r1
    2bfa:	71 f0       	breq	.+28     	; 0x2c18 <calc_initialValue+0x55e>
    2bfc:	48 30       	cpi	r20, 0x08	; 8
    2bfe:	51 05       	cpc	r21, r1
    2c00:	01 f1       	breq	.+64     	; 0x2c42 <calc_initialValue+0x588>
    2c02:	73 c0       	rjmp	.+230    	; 0x2cea <calc_initialValue+0x630>
    2c04:	41 15       	cp	r20, r1
    2c06:	f1 e0       	ldi	r31, 0x01	; 1
    2c08:	5f 07       	cpc	r21, r31
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <calc_initialValue+0x554>
    2c0c:	44 c0       	rjmp	.+136    	; 0x2c96 <calc_initialValue+0x5dc>
    2c0e:	41 15       	cp	r20, r1
    2c10:	54 40       	sbci	r21, 0x04	; 4
    2c12:	09 f4       	brne	.+2      	; 0x2c16 <calc_initialValue+0x55c>
    2c14:	55 c0       	rjmp	.+170    	; 0x2cc0 <calc_initialValue+0x606>
    2c16:	69 c0       	rjmp	.+210    	; 0x2cea <calc_initialValue+0x630>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    2c18:	a9 01       	movw	r20, r18
    2c1a:	98 01       	movw	r18, r16
    2c1c:	6d eb       	ldi	r22, 0xBD	; 189
    2c1e:	77 e3       	ldi	r23, 0x37	; 55
    2c20:	86 e0       	ldi	r24, 0x06	; 6
    2c22:	9c e3       	ldi	r25, 0x3C	; 60
    2c24:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2c28:	2d eb       	ldi	r18, 0xBD	; 189
    2c2a:	37 e3       	ldi	r19, 0x37	; 55
    2c2c:	46 e0       	ldi	r20, 0x06	; 6
    2c2e:	54 e3       	ldi	r21, 0x34	; 52
    2c30:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2c34:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2c38:	f7 01       	movw	r30, r14
    2c3a:	71 83       	std	Z+1, r23	; 0x01
    2c3c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    2c40:	8a c2       	rjmp	.+1300   	; 0x3156 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    2c42:	a9 01       	movw	r20, r18
    2c44:	98 01       	movw	r18, r16
    2c46:	6d eb       	ldi	r22, 0xBD	; 189
    2c48:	77 e3       	ldi	r23, 0x37	; 55
    2c4a:	86 e8       	ldi	r24, 0x86	; 134
    2c4c:	9d e3       	ldi	r25, 0x3D	; 61
    2c4e:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2c52:	2d eb       	ldi	r18, 0xBD	; 189
    2c54:	37 e3       	ldi	r19, 0x37	; 55
    2c56:	46 e8       	ldi	r20, 0x86	; 134
    2c58:	55 e3       	ldi	r21, 0x35	; 53
    2c5a:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2c5e:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2c62:	f7 01       	movw	r30, r14
    2c64:	71 83       	std	Z+1, r23	; 0x01
    2c66:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2c68:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    2c6a:	75 c2       	rjmp	.+1258   	; 0x3156 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    2c6c:	a9 01       	movw	r20, r18
    2c6e:	98 01       	movw	r18, r16
    2c70:	6d eb       	ldi	r22, 0xBD	; 189
    2c72:	77 e3       	ldi	r23, 0x37	; 55
    2c74:	86 e0       	ldi	r24, 0x06	; 6
    2c76:	9f e3       	ldi	r25, 0x3F	; 63
    2c78:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2c7c:	2d eb       	ldi	r18, 0xBD	; 189
    2c7e:	37 e3       	ldi	r19, 0x37	; 55
    2c80:	46 e0       	ldi	r20, 0x06	; 6
    2c82:	57 e3       	ldi	r21, 0x37	; 55
    2c84:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2c88:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2c8c:	f7 01       	movw	r30, r14
    2c8e:	71 83       	std	Z+1, r23	; 0x01
    2c90:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    2c94:	60 c2       	rjmp	.+1216   	; 0x3156 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    2c96:	a9 01       	movw	r20, r18
    2c98:	98 01       	movw	r18, r16
    2c9a:	6d eb       	ldi	r22, 0xBD	; 189
    2c9c:	77 e3       	ldi	r23, 0x37	; 55
    2c9e:	86 e0       	ldi	r24, 0x06	; 6
    2ca0:	90 e4       	ldi	r25, 0x40	; 64
    2ca2:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2ca6:	2d eb       	ldi	r18, 0xBD	; 189
    2ca8:	37 e3       	ldi	r19, 0x37	; 55
    2caa:	46 e0       	ldi	r20, 0x06	; 6
    2cac:	58 e3       	ldi	r21, 0x38	; 56
    2cae:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2cb2:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2cb6:	f7 01       	movw	r30, r14
    2cb8:	71 83       	std	Z+1, r23	; 0x01
    2cba:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    2cbe:	4b c2       	rjmp	.+1174   	; 0x3156 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    2cc0:	a9 01       	movw	r20, r18
    2cc2:	98 01       	movw	r18, r16
    2cc4:	6d eb       	ldi	r22, 0xBD	; 189
    2cc6:	77 e3       	ldi	r23, 0x37	; 55
    2cc8:	86 e0       	ldi	r24, 0x06	; 6
    2cca:	91 e4       	ldi	r25, 0x41	; 65
    2ccc:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2cd0:	2d eb       	ldi	r18, 0xBD	; 189
    2cd2:	37 e3       	ldi	r19, 0x37	; 55
    2cd4:	46 e0       	ldi	r20, 0x06	; 6
    2cd6:	59 e3       	ldi	r21, 0x39	; 57
    2cd8:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2cdc:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2ce0:	f7 01       	movw	r30, r14
    2ce2:	71 83       	std	Z+1, r23	; 0x01
    2ce4:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    2ce8:	36 c2       	rjmp	.+1132   	; 0x3156 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2cea:	f7 01       	movw	r30, r14
    2cec:	11 82       	std	Z+1, r1	; 0x01
    2cee:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2cf2:	31 c2       	rjmp	.+1122   	; 0x3156 <calc_initialValue+0xa9c>
		else
		{
			// do nothing
		}
	}
	else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    2cf4:	82 30       	cpi	r24, 0x02	; 2
    2cf6:	09 f0       	breq	.+2      	; 0x2cfa <calc_initialValue+0x640>
    2cf8:	2b c2       	rjmp	.+1110   	; 0x3150 <calc_initialValue+0xa96>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    2cfa:	61 11       	cpse	r22, r1
    2cfc:	b1 c0       	rjmp	.+354    	; 0x2e60 <calc_initialValue+0x7a6>
		{
			switch(prescaler)
    2cfe:	40 34       	cpi	r20, 0x40	; 64
    2d00:	51 05       	cpc	r21, r1
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <calc_initialValue+0x64c>
    2d04:	54 c0       	rjmp	.+168    	; 0x2dae <calc_initialValue+0x6f4>
    2d06:	58 f4       	brcc	.+22     	; 0x2d1e <calc_initialValue+0x664>
    2d08:	48 30       	cpi	r20, 0x08	; 8
    2d0a:	51 05       	cpc	r21, r1
    2d0c:	61 f1       	breq	.+88     	; 0x2d66 <calc_initialValue+0x6ac>
    2d0e:	40 32       	cpi	r20, 0x20	; 32
    2d10:	51 05       	cpc	r21, r1
    2d12:	c1 f1       	breq	.+112    	; 0x2d84 <calc_initialValue+0x6ca>
    2d14:	41 30       	cpi	r20, 0x01	; 1
    2d16:	51 05       	cpc	r21, r1
    2d18:	09 f0       	breq	.+2      	; 0x2d1c <calc_initialValue+0x662>
    2d1a:	9d c0       	rjmp	.+314    	; 0x2e56 <calc_initialValue+0x79c>
    2d1c:	0f c0       	rjmp	.+30     	; 0x2d3c <calc_initialValue+0x682>
    2d1e:	41 15       	cp	r20, r1
    2d20:	f1 e0       	ldi	r31, 0x01	; 1
    2d22:	5f 07       	cpc	r21, r31
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <calc_initialValue+0x66e>
    2d26:	6d c0       	rjmp	.+218    	; 0x2e02 <calc_initialValue+0x748>
    2d28:	41 15       	cp	r20, r1
    2d2a:	84 e0       	ldi	r24, 0x04	; 4
    2d2c:	58 07       	cpc	r21, r24
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <calc_initialValue+0x678>
    2d30:	7d c0       	rjmp	.+250    	; 0x2e2c <calc_initialValue+0x772>
    2d32:	40 38       	cpi	r20, 0x80	; 128
    2d34:	51 05       	cpc	r21, r1
    2d36:	09 f0       	breq	.+2      	; 0x2d3a <calc_initialValue+0x680>
    2d38:	8e c0       	rjmp	.+284    	; 0x2e56 <calc_initialValue+0x79c>
    2d3a:	4e c0       	rjmp	.+156    	; 0x2dd8 <calc_initialValue+0x71e>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    2d3c:	a9 01       	movw	r20, r18
    2d3e:	98 01       	movw	r18, r16
    2d40:	60 e0       	ldi	r22, 0x00	; 0
    2d42:	70 e0       	ldi	r23, 0x00	; 0
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	92 e4       	ldi	r25, 0x42	; 66
    2d48:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e0       	ldi	r20, 0x00	; 0
    2d52:	51 e4       	ldi	r21, 0x41	; 65
    2d54:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
    2d58:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2d5c:	f7 01       	movw	r30, r14
    2d5e:	71 83       	std	Z+1, r23	; 0x01
    2d60:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2d62:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    2d64:	f8 c1       	rjmp	.+1008   	; 0x3156 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    2d66:	a9 01       	movw	r20, r18
    2d68:	98 01       	movw	r18, r16
    2d6a:	60 e0       	ldi	r22, 0x00	; 0
    2d6c:	70 e0       	ldi	r23, 0x00	; 0
    2d6e:	80 e8       	ldi	r24, 0x80	; 128
    2d70:	93 e4       	ldi	r25, 0x43	; 67
    2d72:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2d76:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2d7a:	f7 01       	movw	r30, r14
    2d7c:	71 83       	std	Z+1, r23	; 0x01
    2d7e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    2d82:	e9 c1       	rjmp	.+978    	; 0x3156 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
    2d84:	a9 01       	movw	r20, r18
    2d86:	98 01       	movw	r18, r16
    2d88:	60 e0       	ldi	r22, 0x00	; 0
    2d8a:	70 e0       	ldi	r23, 0x00	; 0
    2d8c:	80 e8       	ldi	r24, 0x80	; 128
    2d8e:	94 e4       	ldi	r25, 0x44	; 68
    2d90:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 e8       	ldi	r20, 0x80	; 128
    2d9a:	5e e3       	ldi	r21, 0x3E	; 62
    2d9c:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
    2da0:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2da4:	f7 01       	movw	r30, r14
    2da6:	71 83       	std	Z+1, r23	; 0x01
    2da8:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2daa:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
				break;
    2dac:	d4 c1       	rjmp	.+936    	; 0x3156 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    2dae:	a9 01       	movw	r20, r18
    2db0:	98 01       	movw	r18, r16
    2db2:	60 e0       	ldi	r22, 0x00	; 0
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	95 e4       	ldi	r25, 0x45	; 69
    2dba:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	40 e0       	ldi	r20, 0x00	; 0
    2dc4:	5e e3       	ldi	r21, 0x3E	; 62
    2dc6:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
    2dca:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2dce:	f7 01       	movw	r30, r14
    2dd0:	71 83       	std	Z+1, r23	; 0x01
    2dd2:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    2dd6:	bf c1       	rjmp	.+894    	; 0x3156 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
    2dd8:	a9 01       	movw	r20, r18
    2dda:	98 01       	movw	r18, r16
    2ddc:	60 e0       	ldi	r22, 0x00	; 0
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	80 e8       	ldi	r24, 0x80	; 128
    2de2:	95 e4       	ldi	r25, 0x45	; 69
    2de4:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e8       	ldi	r20, 0x80	; 128
    2dee:	5d e3       	ldi	r21, 0x3D	; 61
    2df0:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
    2df4:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2df8:	f7 01       	movw	r30, r14
    2dfa:	71 83       	std	Z+1, r23	; 0x01
    2dfc:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
				break;
    2e00:	aa c1       	rjmp	.+852    	; 0x3156 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    2e02:	a9 01       	movw	r20, r18
    2e04:	98 01       	movw	r18, r16
    2e06:	60 e0       	ldi	r22, 0x00	; 0
    2e08:	70 e0       	ldi	r23, 0x00	; 0
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	96 e4       	ldi	r25, 0x46	; 70
    2e0e:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	5d e3       	ldi	r21, 0x3D	; 61
    2e1a:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
    2e1e:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2e22:	f7 01       	movw	r30, r14
    2e24:	71 83       	std	Z+1, r23	; 0x01
    2e26:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    2e2a:	95 c1       	rjmp	.+810    	; 0x3156 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    2e2c:	a9 01       	movw	r20, r18
    2e2e:	98 01       	movw	r18, r16
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	70 e0       	ldi	r23, 0x00	; 0
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	97 e4       	ldi	r25, 0x47	; 71
    2e38:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	5c e3       	ldi	r21, 0x3C	; 60
    2e44:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__mulsf3>
    2e48:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2e4c:	f7 01       	movw	r30, r14
    2e4e:	71 83       	std	Z+1, r23	; 0x01
    2e50:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2e52:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    2e54:	80 c1       	rjmp	.+768    	; 0x3156 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2e56:	f7 01       	movw	r30, r14
    2e58:	11 82       	std	Z+1, r1	; 0x01
    2e5a:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2e5e:	7b c1       	rjmp	.+758    	; 0x3156 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    2e60:	61 30       	cpi	r22, 0x01	; 1
    2e62:	09 f0       	breq	.+2      	; 0x2e66 <calc_initialValue+0x7ac>
    2e64:	b7 c0       	rjmp	.+366    	; 0x2fd4 <calc_initialValue+0x91a>
		{
			switch(prescaler)
    2e66:	40 34       	cpi	r20, 0x40	; 64
    2e68:	51 05       	cpc	r21, r1
    2e6a:	09 f4       	brne	.+2      	; 0x2e6e <calc_initialValue+0x7b4>
    2e6c:	5a c0       	rjmp	.+180    	; 0x2f22 <calc_initialValue+0x868>
    2e6e:	58 f4       	brcc	.+22     	; 0x2e86 <calc_initialValue+0x7cc>
    2e70:	48 30       	cpi	r20, 0x08	; 8
    2e72:	51 05       	cpc	r21, r1
    2e74:	61 f1       	breq	.+88     	; 0x2ece <calc_initialValue+0x814>
    2e76:	40 32       	cpi	r20, 0x20	; 32
    2e78:	51 05       	cpc	r21, r1
    2e7a:	f1 f1       	breq	.+124    	; 0x2ef8 <calc_initialValue+0x83e>
    2e7c:	41 30       	cpi	r20, 0x01	; 1
    2e7e:	51 05       	cpc	r21, r1
    2e80:	09 f0       	breq	.+2      	; 0x2e84 <calc_initialValue+0x7ca>
    2e82:	a3 c0       	rjmp	.+326    	; 0x2fca <calc_initialValue+0x910>
    2e84:	0f c0       	rjmp	.+30     	; 0x2ea4 <calc_initialValue+0x7ea>
    2e86:	41 15       	cp	r20, r1
    2e88:	f1 e0       	ldi	r31, 0x01	; 1
    2e8a:	5f 07       	cpc	r21, r31
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <calc_initialValue+0x7d6>
    2e8e:	73 c0       	rjmp	.+230    	; 0x2f76 <calc_initialValue+0x8bc>
    2e90:	41 15       	cp	r20, r1
    2e92:	84 e0       	ldi	r24, 0x04	; 4
    2e94:	58 07       	cpc	r21, r24
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <calc_initialValue+0x7e0>
    2e98:	83 c0       	rjmp	.+262    	; 0x2fa0 <calc_initialValue+0x8e6>
    2e9a:	40 38       	cpi	r20, 0x80	; 128
    2e9c:	51 05       	cpc	r21, r1
    2e9e:	09 f0       	breq	.+2      	; 0x2ea2 <calc_initialValue+0x7e8>
    2ea0:	94 c0       	rjmp	.+296    	; 0x2fca <calc_initialValue+0x910>
    2ea2:	54 c0       	rjmp	.+168    	; 0x2f4c <calc_initialValue+0x892>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    2ea4:	a9 01       	movw	r20, r18
    2ea6:	98 01       	movw	r18, r16
    2ea8:	6f e6       	ldi	r22, 0x6F	; 111
    2eaa:	72 e1       	ldi	r23, 0x12	; 18
    2eac:	83 e0       	ldi	r24, 0x03	; 3
    2eae:	9d e3       	ldi	r25, 0x3D	; 61
    2eb0:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2eb4:	2f e6       	ldi	r18, 0x6F	; 111
    2eb6:	32 e1       	ldi	r19, 0x12	; 18
    2eb8:	43 e0       	ldi	r20, 0x03	; 3
    2eba:	59 e3       	ldi	r21, 0x39	; 57
    2ebc:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2ec0:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2ec4:	f7 01       	movw	r30, r14
    2ec6:	71 83       	std	Z+1, r23	; 0x01
    2ec8:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    2ecc:	44 c1       	rjmp	.+648    	; 0x3156 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    2ece:	a9 01       	movw	r20, r18
    2ed0:	98 01       	movw	r18, r16
    2ed2:	6f e6       	ldi	r22, 0x6F	; 111
    2ed4:	72 e1       	ldi	r23, 0x12	; 18
    2ed6:	83 e8       	ldi	r24, 0x83	; 131
    2ed8:	9e e3       	ldi	r25, 0x3E	; 62
    2eda:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2ede:	2f e6       	ldi	r18, 0x6F	; 111
    2ee0:	32 e1       	ldi	r19, 0x12	; 18
    2ee2:	43 e8       	ldi	r20, 0x83	; 131
    2ee4:	5a e3       	ldi	r21, 0x3A	; 58
    2ee6:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2eea:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2eee:	f7 01       	movw	r30, r14
    2ef0:	71 83       	std	Z+1, r23	; 0x01
    2ef2:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    2ef6:	2f c1       	rjmp	.+606    	; 0x3156 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
    2ef8:	a9 01       	movw	r20, r18
    2efa:	98 01       	movw	r18, r16
    2efc:	6f e6       	ldi	r22, 0x6F	; 111
    2efe:	72 e1       	ldi	r23, 0x12	; 18
    2f00:	83 e8       	ldi	r24, 0x83	; 131
    2f02:	9f e3       	ldi	r25, 0x3F	; 63
    2f04:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2f08:	2f e6       	ldi	r18, 0x6F	; 111
    2f0a:	32 e1       	ldi	r19, 0x12	; 18
    2f0c:	43 e8       	ldi	r20, 0x83	; 131
    2f0e:	5b e3       	ldi	r21, 0x3B	; 59
    2f10:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2f14:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2f18:	f7 01       	movw	r30, r14
    2f1a:	71 83       	std	Z+1, r23	; 0x01
    2f1c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
				break;
    2f20:	1a c1       	rjmp	.+564    	; 0x3156 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    2f22:	a9 01       	movw	r20, r18
    2f24:	98 01       	movw	r18, r16
    2f26:	6f e6       	ldi	r22, 0x6F	; 111
    2f28:	72 e1       	ldi	r23, 0x12	; 18
    2f2a:	83 e0       	ldi	r24, 0x03	; 3
    2f2c:	90 e4       	ldi	r25, 0x40	; 64
    2f2e:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2f32:	2f e6       	ldi	r18, 0x6F	; 111
    2f34:	32 e1       	ldi	r19, 0x12	; 18
    2f36:	43 e0       	ldi	r20, 0x03	; 3
    2f38:	5c e3       	ldi	r21, 0x3C	; 60
    2f3a:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2f3e:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2f42:	f7 01       	movw	r30, r14
    2f44:	71 83       	std	Z+1, r23	; 0x01
    2f46:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2f48:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    2f4a:	05 c1       	rjmp	.+522    	; 0x3156 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
    2f4c:	a9 01       	movw	r20, r18
    2f4e:	98 01       	movw	r18, r16
    2f50:	6f e6       	ldi	r22, 0x6F	; 111
    2f52:	72 e1       	ldi	r23, 0x12	; 18
    2f54:	83 e8       	ldi	r24, 0x83	; 131
    2f56:	90 e4       	ldi	r25, 0x40	; 64
    2f58:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2f5c:	2f e6       	ldi	r18, 0x6F	; 111
    2f5e:	32 e1       	ldi	r19, 0x12	; 18
    2f60:	43 e8       	ldi	r20, 0x83	; 131
    2f62:	5c e3       	ldi	r21, 0x3C	; 60
    2f64:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2f68:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2f6c:	f7 01       	movw	r30, r14
    2f6e:	71 83       	std	Z+1, r23	; 0x01
    2f70:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
				break;
    2f74:	f0 c0       	rjmp	.+480    	; 0x3156 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    2f76:	a9 01       	movw	r20, r18
    2f78:	98 01       	movw	r18, r16
    2f7a:	6f e6       	ldi	r22, 0x6F	; 111
    2f7c:	72 e1       	ldi	r23, 0x12	; 18
    2f7e:	83 e0       	ldi	r24, 0x03	; 3
    2f80:	91 e4       	ldi	r25, 0x41	; 65
    2f82:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2f86:	2f e6       	ldi	r18, 0x6F	; 111
    2f88:	32 e1       	ldi	r19, 0x12	; 18
    2f8a:	43 e0       	ldi	r20, 0x03	; 3
    2f8c:	5d e3       	ldi	r21, 0x3D	; 61
    2f8e:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2f92:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2f96:	f7 01       	movw	r30, r14
    2f98:	71 83       	std	Z+1, r23	; 0x01
    2f9a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    2f9e:	db c0       	rjmp	.+438    	; 0x3156 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    2fa0:	a9 01       	movw	r20, r18
    2fa2:	98 01       	movw	r18, r16
    2fa4:	6f e6       	ldi	r22, 0x6F	; 111
    2fa6:	72 e1       	ldi	r23, 0x12	; 18
    2fa8:	83 e0       	ldi	r24, 0x03	; 3
    2faa:	92 e4       	ldi	r25, 0x42	; 66
    2fac:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    2fb0:	2f e6       	ldi	r18, 0x6F	; 111
    2fb2:	32 e1       	ldi	r19, 0x12	; 18
    2fb4:	43 e0       	ldi	r20, 0x03	; 3
    2fb6:	5e e3       	ldi	r21, 0x3E	; 62
    2fb8:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    2fbc:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    2fc0:	f7 01       	movw	r30, r14
    2fc2:	71 83       	std	Z+1, r23	; 0x01
    2fc4:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    2fc8:	c6 c0       	rjmp	.+396    	; 0x3156 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2fca:	f7 01       	movw	r30, r14
    2fcc:	11 82       	std	Z+1, r1	; 0x01
    2fce:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2fd2:	c1 c0       	rjmp	.+386    	; 0x3156 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    2fd4:	62 30       	cpi	r22, 0x02	; 2
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <calc_initialValue+0x920>
    2fd8:	bd c0       	rjmp	.+378    	; 0x3154 <calc_initialValue+0xa9a>
		{
			switch(prescaler)
    2fda:	40 34       	cpi	r20, 0x40	; 64
    2fdc:	51 05       	cpc	r21, r1
    2fde:	09 f4       	brne	.+2      	; 0x2fe2 <calc_initialValue+0x928>
    2fe0:	5a c0       	rjmp	.+180    	; 0x3096 <calc_initialValue+0x9dc>
    2fe2:	58 f4       	brcc	.+22     	; 0x2ffa <calc_initialValue+0x940>
    2fe4:	48 30       	cpi	r20, 0x08	; 8
    2fe6:	51 05       	cpc	r21, r1
    2fe8:	61 f1       	breq	.+88     	; 0x3042 <calc_initialValue+0x988>
    2fea:	40 32       	cpi	r20, 0x20	; 32
    2fec:	51 05       	cpc	r21, r1
    2fee:	f1 f1       	breq	.+124    	; 0x306c <calc_initialValue+0x9b2>
    2ff0:	41 30       	cpi	r20, 0x01	; 1
    2ff2:	51 05       	cpc	r21, r1
    2ff4:	09 f0       	breq	.+2      	; 0x2ff8 <calc_initialValue+0x93e>
    2ff6:	a3 c0       	rjmp	.+326    	; 0x313e <calc_initialValue+0xa84>
    2ff8:	0f c0       	rjmp	.+30     	; 0x3018 <calc_initialValue+0x95e>
    2ffa:	41 15       	cp	r20, r1
    2ffc:	f1 e0       	ldi	r31, 0x01	; 1
    2ffe:	5f 07       	cpc	r21, r31
    3000:	09 f4       	brne	.+2      	; 0x3004 <calc_initialValue+0x94a>
    3002:	73 c0       	rjmp	.+230    	; 0x30ea <calc_initialValue+0xa30>
    3004:	41 15       	cp	r20, r1
    3006:	84 e0       	ldi	r24, 0x04	; 4
    3008:	58 07       	cpc	r21, r24
    300a:	09 f4       	brne	.+2      	; 0x300e <calc_initialValue+0x954>
    300c:	83 c0       	rjmp	.+262    	; 0x3114 <calc_initialValue+0xa5a>
    300e:	40 38       	cpi	r20, 0x80	; 128
    3010:	51 05       	cpc	r21, r1
    3012:	09 f0       	breq	.+2      	; 0x3016 <calc_initialValue+0x95c>
    3014:	94 c0       	rjmp	.+296    	; 0x313e <calc_initialValue+0xa84>
    3016:	54 c0       	rjmp	.+168    	; 0x30c0 <calc_initialValue+0xa06>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    3018:	a9 01       	movw	r20, r18
    301a:	98 01       	movw	r18, r16
    301c:	6d eb       	ldi	r22, 0xBD	; 189
    301e:	77 e3       	ldi	r23, 0x37	; 55
    3020:	86 e0       	ldi	r24, 0x06	; 6
    3022:	98 e3       	ldi	r25, 0x38	; 56
    3024:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    3028:	2d eb       	ldi	r18, 0xBD	; 189
    302a:	37 e3       	ldi	r19, 0x37	; 55
    302c:	46 e0       	ldi	r20, 0x06	; 6
    302e:	54 e3       	ldi	r21, 0x34	; 52
    3030:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    3034:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    3038:	f7 01       	movw	r30, r14
    303a:	71 83       	std	Z+1, r23	; 0x01
    303c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    303e:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    3040:	8a c0       	rjmp	.+276    	; 0x3156 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    3042:	a9 01       	movw	r20, r18
    3044:	98 01       	movw	r18, r16
    3046:	6d eb       	ldi	r22, 0xBD	; 189
    3048:	77 e3       	ldi	r23, 0x37	; 55
    304a:	86 e8       	ldi	r24, 0x86	; 134
    304c:	99 e3       	ldi	r25, 0x39	; 57
    304e:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    3052:	2d eb       	ldi	r18, 0xBD	; 189
    3054:	37 e3       	ldi	r19, 0x37	; 55
    3056:	46 e8       	ldi	r20, 0x86	; 134
    3058:	55 e3       	ldi	r21, 0x35	; 53
    305a:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    305e:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    3062:	f7 01       	movw	r30, r14
    3064:	71 83       	std	Z+1, r23	; 0x01
    3066:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3068:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    306a:	75 c0       	rjmp	.+234    	; 0x3156 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
    306c:	a9 01       	movw	r20, r18
    306e:	98 01       	movw	r18, r16
    3070:	6d eb       	ldi	r22, 0xBD	; 189
    3072:	77 e3       	ldi	r23, 0x37	; 55
    3074:	86 e8       	ldi	r24, 0x86	; 134
    3076:	9a e3       	ldi	r25, 0x3A	; 58
    3078:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    307c:	2d eb       	ldi	r18, 0xBD	; 189
    307e:	37 e3       	ldi	r19, 0x37	; 55
    3080:	46 e8       	ldi	r20, 0x86	; 134
    3082:	56 e3       	ldi	r21, 0x36	; 54
    3084:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    3088:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    308c:	f7 01       	movw	r30, r14
    308e:	71 83       	std	Z+1, r23	; 0x01
    3090:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3092:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
				break;
    3094:	60 c0       	rjmp	.+192    	; 0x3156 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    3096:	a9 01       	movw	r20, r18
    3098:	98 01       	movw	r18, r16
    309a:	6d eb       	ldi	r22, 0xBD	; 189
    309c:	77 e3       	ldi	r23, 0x37	; 55
    309e:	86 e0       	ldi	r24, 0x06	; 6
    30a0:	9b e3       	ldi	r25, 0x3B	; 59
    30a2:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    30a6:	2d eb       	ldi	r18, 0xBD	; 189
    30a8:	37 e3       	ldi	r19, 0x37	; 55
    30aa:	46 e0       	ldi	r20, 0x06	; 6
    30ac:	57 e3       	ldi	r21, 0x37	; 55
    30ae:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    30b2:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    30b6:	f7 01       	movw	r30, r14
    30b8:	71 83       	std	Z+1, r23	; 0x01
    30ba:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    30bc:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    30be:	4b c0       	rjmp	.+150    	; 0x3156 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
    30c0:	a9 01       	movw	r20, r18
    30c2:	98 01       	movw	r18, r16
    30c4:	6d eb       	ldi	r22, 0xBD	; 189
    30c6:	77 e3       	ldi	r23, 0x37	; 55
    30c8:	86 e8       	ldi	r24, 0x86	; 134
    30ca:	9b e3       	ldi	r25, 0x3B	; 59
    30cc:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    30d0:	2d eb       	ldi	r18, 0xBD	; 189
    30d2:	37 e3       	ldi	r19, 0x37	; 55
    30d4:	46 e8       	ldi	r20, 0x86	; 134
    30d6:	57 e3       	ldi	r21, 0x37	; 55
    30d8:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    30dc:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    30e0:	f7 01       	movw	r30, r14
    30e2:	71 83       	std	Z+1, r23	; 0x01
    30e4:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    30e6:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
				break;
    30e8:	36 c0       	rjmp	.+108    	; 0x3156 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    30ea:	a9 01       	movw	r20, r18
    30ec:	98 01       	movw	r18, r16
    30ee:	6d eb       	ldi	r22, 0xBD	; 189
    30f0:	77 e3       	ldi	r23, 0x37	; 55
    30f2:	86 e0       	ldi	r24, 0x06	; 6
    30f4:	9c e3       	ldi	r25, 0x3C	; 60
    30f6:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    30fa:	2d eb       	ldi	r18, 0xBD	; 189
    30fc:	37 e3       	ldi	r19, 0x37	; 55
    30fe:	46 e0       	ldi	r20, 0x06	; 6
    3100:	58 e3       	ldi	r21, 0x38	; 56
    3102:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    3106:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    310a:	f7 01       	movw	r30, r14
    310c:	71 83       	std	Z+1, r23	; 0x01
    310e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3110:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    3112:	21 c0       	rjmp	.+66     	; 0x3156 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    3114:	a9 01       	movw	r20, r18
    3116:	98 01       	movw	r18, r16
    3118:	6d eb       	ldi	r22, 0xBD	; 189
    311a:	77 e3       	ldi	r23, 0x37	; 55
    311c:	86 e0       	ldi	r24, 0x06	; 6
    311e:	9d e3       	ldi	r25, 0x3D	; 61
    3120:	0e 94 b0 18 	call	0x3160	; 0x3160 <__subsf3>
    3124:	2d eb       	ldi	r18, 0xBD	; 189
    3126:	37 e3       	ldi	r19, 0x37	; 55
    3128:	46 e0       	ldi	r20, 0x06	; 6
    312a:	59 e3       	ldi	r21, 0x39	; 57
    312c:	0e 94 22 19 	call	0x3244	; 0x3244 <__divsf3>
    3130:	0e 94 94 19 	call	0x3328	; 0x3328 <__fixunssfsi>
    3134:	f7 01       	movw	r30, r14
    3136:	71 83       	std	Z+1, r23	; 0x01
    3138:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    313a:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    313c:	0c c0       	rjmp	.+24     	; 0x3156 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    313e:	f7 01       	movw	r30, r14
    3140:	11 82       	std	Z+1, r1	; 0x01
    3142:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    3144:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    3146:	07 c0       	rjmp	.+14     	; 0x3156 <calc_initialValue+0xa9c>
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	05 c0       	rjmp	.+10     	; 0x3156 <calc_initialValue+0xa9c>
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	03 c0       	rjmp	.+6      	; 0x3156 <calc_initialValue+0xa9c>
		}
		
	}
	else
	{
		bo_return_value = FALSE;
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	01 c0       	rjmp	.+2      	; 0x3156 <calc_initialValue+0xa9c>
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3154:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		bo_return_value = FALSE;
	}
	return bo_return_value;
    3156:	1f 91       	pop	r17
    3158:	0f 91       	pop	r16
    315a:	ff 90       	pop	r15
    315c:	ef 90       	pop	r14
    315e:	08 95       	ret

00003160 <__subsf3>:
    3160:	50 58       	subi	r21, 0x80	; 128

00003162 <__addsf3>:
    3162:	bb 27       	eor	r27, r27
    3164:	aa 27       	eor	r26, r26
    3166:	0e 94 c8 18 	call	0x3190	; 0x3190 <__addsf3x>
    316a:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__fp_round>
    316e:	0e 94 2d 1a 	call	0x345a	; 0x345a <__fp_pscA>
    3172:	38 f0       	brcs	.+14     	; 0x3182 <__addsf3+0x20>
    3174:	0e 94 34 1a 	call	0x3468	; 0x3468 <__fp_pscB>
    3178:	20 f0       	brcs	.+8      	; 0x3182 <__addsf3+0x20>
    317a:	39 f4       	brne	.+14     	; 0x318a <__addsf3+0x28>
    317c:	9f 3f       	cpi	r25, 0xFF	; 255
    317e:	19 f4       	brne	.+6      	; 0x3186 <__addsf3+0x24>
    3180:	26 f4       	brtc	.+8      	; 0x318a <__addsf3+0x28>
    3182:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__fp_nan>
    3186:	0e f4       	brtc	.+2      	; 0x318a <__addsf3+0x28>
    3188:	e0 95       	com	r30
    318a:	e7 fb       	bst	r30, 7
    318c:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__fp_inf>

00003190 <__addsf3x>:
    3190:	e9 2f       	mov	r30, r25
    3192:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__fp_split3>
    3196:	58 f3       	brcs	.-42     	; 0x316e <__addsf3+0xc>
    3198:	ba 17       	cp	r27, r26
    319a:	62 07       	cpc	r22, r18
    319c:	73 07       	cpc	r23, r19
    319e:	84 07       	cpc	r24, r20
    31a0:	95 07       	cpc	r25, r21
    31a2:	20 f0       	brcs	.+8      	; 0x31ac <__addsf3x+0x1c>
    31a4:	79 f4       	brne	.+30     	; 0x31c4 <__addsf3x+0x34>
    31a6:	a6 f5       	brtc	.+104    	; 0x3210 <__addsf3x+0x80>
    31a8:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__fp_zero>
    31ac:	0e f4       	brtc	.+2      	; 0x31b0 <__addsf3x+0x20>
    31ae:	e0 95       	com	r30
    31b0:	0b 2e       	mov	r0, r27
    31b2:	ba 2f       	mov	r27, r26
    31b4:	a0 2d       	mov	r26, r0
    31b6:	0b 01       	movw	r0, r22
    31b8:	b9 01       	movw	r22, r18
    31ba:	90 01       	movw	r18, r0
    31bc:	0c 01       	movw	r0, r24
    31be:	ca 01       	movw	r24, r20
    31c0:	a0 01       	movw	r20, r0
    31c2:	11 24       	eor	r1, r1
    31c4:	ff 27       	eor	r31, r31
    31c6:	59 1b       	sub	r21, r25
    31c8:	99 f0       	breq	.+38     	; 0x31f0 <__addsf3x+0x60>
    31ca:	59 3f       	cpi	r21, 0xF9	; 249
    31cc:	50 f4       	brcc	.+20     	; 0x31e2 <__addsf3x+0x52>
    31ce:	50 3e       	cpi	r21, 0xE0	; 224
    31d0:	68 f1       	brcs	.+90     	; 0x322c <__addsf3x+0x9c>
    31d2:	1a 16       	cp	r1, r26
    31d4:	f0 40       	sbci	r31, 0x00	; 0
    31d6:	a2 2f       	mov	r26, r18
    31d8:	23 2f       	mov	r18, r19
    31da:	34 2f       	mov	r19, r20
    31dc:	44 27       	eor	r20, r20
    31de:	58 5f       	subi	r21, 0xF8	; 248
    31e0:	f3 cf       	rjmp	.-26     	; 0x31c8 <__addsf3x+0x38>
    31e2:	46 95       	lsr	r20
    31e4:	37 95       	ror	r19
    31e6:	27 95       	ror	r18
    31e8:	a7 95       	ror	r26
    31ea:	f0 40       	sbci	r31, 0x00	; 0
    31ec:	53 95       	inc	r21
    31ee:	c9 f7       	brne	.-14     	; 0x31e2 <__addsf3x+0x52>
    31f0:	7e f4       	brtc	.+30     	; 0x3210 <__addsf3x+0x80>
    31f2:	1f 16       	cp	r1, r31
    31f4:	ba 0b       	sbc	r27, r26
    31f6:	62 0b       	sbc	r22, r18
    31f8:	73 0b       	sbc	r23, r19
    31fa:	84 0b       	sbc	r24, r20
    31fc:	ba f0       	brmi	.+46     	; 0x322c <__addsf3x+0x9c>
    31fe:	91 50       	subi	r25, 0x01	; 1
    3200:	a1 f0       	breq	.+40     	; 0x322a <__addsf3x+0x9a>
    3202:	ff 0f       	add	r31, r31
    3204:	bb 1f       	adc	r27, r27
    3206:	66 1f       	adc	r22, r22
    3208:	77 1f       	adc	r23, r23
    320a:	88 1f       	adc	r24, r24
    320c:	c2 f7       	brpl	.-16     	; 0x31fe <__addsf3x+0x6e>
    320e:	0e c0       	rjmp	.+28     	; 0x322c <__addsf3x+0x9c>
    3210:	ba 0f       	add	r27, r26
    3212:	62 1f       	adc	r22, r18
    3214:	73 1f       	adc	r23, r19
    3216:	84 1f       	adc	r24, r20
    3218:	48 f4       	brcc	.+18     	; 0x322c <__addsf3x+0x9c>
    321a:	87 95       	ror	r24
    321c:	77 95       	ror	r23
    321e:	67 95       	ror	r22
    3220:	b7 95       	ror	r27
    3222:	f7 95       	ror	r31
    3224:	9e 3f       	cpi	r25, 0xFE	; 254
    3226:	08 f0       	brcs	.+2      	; 0x322a <__addsf3x+0x9a>
    3228:	b0 cf       	rjmp	.-160    	; 0x318a <__addsf3+0x28>
    322a:	93 95       	inc	r25
    322c:	88 0f       	add	r24, r24
    322e:	08 f0       	brcs	.+2      	; 0x3232 <__addsf3x+0xa2>
    3230:	99 27       	eor	r25, r25
    3232:	ee 0f       	add	r30, r30
    3234:	97 95       	ror	r25
    3236:	87 95       	ror	r24
    3238:	08 95       	ret

0000323a <__cmpsf2>:
    323a:	0e 94 00 1a 	call	0x3400	; 0x3400 <__fp_cmp>
    323e:	08 f4       	brcc	.+2      	; 0x3242 <__cmpsf2+0x8>
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	08 95       	ret

00003244 <__divsf3>:
    3244:	0e 94 36 19 	call	0x326c	; 0x326c <__divsf3x>
    3248:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__fp_round>
    324c:	0e 94 34 1a 	call	0x3468	; 0x3468 <__fp_pscB>
    3250:	58 f0       	brcs	.+22     	; 0x3268 <__divsf3+0x24>
    3252:	0e 94 2d 1a 	call	0x345a	; 0x345a <__fp_pscA>
    3256:	40 f0       	brcs	.+16     	; 0x3268 <__divsf3+0x24>
    3258:	29 f4       	brne	.+10     	; 0x3264 <__divsf3+0x20>
    325a:	5f 3f       	cpi	r21, 0xFF	; 255
    325c:	29 f0       	breq	.+10     	; 0x3268 <__divsf3+0x24>
    325e:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__fp_inf>
    3262:	51 11       	cpse	r21, r1
    3264:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__fp_szero>
    3268:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__fp_nan>

0000326c <__divsf3x>:
    326c:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__fp_split3>
    3270:	68 f3       	brcs	.-38     	; 0x324c <__divsf3+0x8>

00003272 <__divsf3_pse>:
    3272:	99 23       	and	r25, r25
    3274:	b1 f3       	breq	.-20     	; 0x3262 <__divsf3+0x1e>
    3276:	55 23       	and	r21, r21
    3278:	91 f3       	breq	.-28     	; 0x325e <__divsf3+0x1a>
    327a:	95 1b       	sub	r25, r21
    327c:	55 0b       	sbc	r21, r21
    327e:	bb 27       	eor	r27, r27
    3280:	aa 27       	eor	r26, r26
    3282:	62 17       	cp	r22, r18
    3284:	73 07       	cpc	r23, r19
    3286:	84 07       	cpc	r24, r20
    3288:	38 f0       	brcs	.+14     	; 0x3298 <__divsf3_pse+0x26>
    328a:	9f 5f       	subi	r25, 0xFF	; 255
    328c:	5f 4f       	sbci	r21, 0xFF	; 255
    328e:	22 0f       	add	r18, r18
    3290:	33 1f       	adc	r19, r19
    3292:	44 1f       	adc	r20, r20
    3294:	aa 1f       	adc	r26, r26
    3296:	a9 f3       	breq	.-22     	; 0x3282 <__divsf3_pse+0x10>
    3298:	35 d0       	rcall	.+106    	; 0x3304 <__divsf3_pse+0x92>
    329a:	0e 2e       	mov	r0, r30
    329c:	3a f0       	brmi	.+14     	; 0x32ac <__divsf3_pse+0x3a>
    329e:	e0 e8       	ldi	r30, 0x80	; 128
    32a0:	32 d0       	rcall	.+100    	; 0x3306 <__divsf3_pse+0x94>
    32a2:	91 50       	subi	r25, 0x01	; 1
    32a4:	50 40       	sbci	r21, 0x00	; 0
    32a6:	e6 95       	lsr	r30
    32a8:	00 1c       	adc	r0, r0
    32aa:	ca f7       	brpl	.-14     	; 0x329e <__divsf3_pse+0x2c>
    32ac:	2b d0       	rcall	.+86     	; 0x3304 <__divsf3_pse+0x92>
    32ae:	fe 2f       	mov	r31, r30
    32b0:	29 d0       	rcall	.+82     	; 0x3304 <__divsf3_pse+0x92>
    32b2:	66 0f       	add	r22, r22
    32b4:	77 1f       	adc	r23, r23
    32b6:	88 1f       	adc	r24, r24
    32b8:	bb 1f       	adc	r27, r27
    32ba:	26 17       	cp	r18, r22
    32bc:	37 07       	cpc	r19, r23
    32be:	48 07       	cpc	r20, r24
    32c0:	ab 07       	cpc	r26, r27
    32c2:	b0 e8       	ldi	r27, 0x80	; 128
    32c4:	09 f0       	breq	.+2      	; 0x32c8 <__divsf3_pse+0x56>
    32c6:	bb 0b       	sbc	r27, r27
    32c8:	80 2d       	mov	r24, r0
    32ca:	bf 01       	movw	r22, r30
    32cc:	ff 27       	eor	r31, r31
    32ce:	93 58       	subi	r25, 0x83	; 131
    32d0:	5f 4f       	sbci	r21, 0xFF	; 255
    32d2:	3a f0       	brmi	.+14     	; 0x32e2 <__divsf3_pse+0x70>
    32d4:	9e 3f       	cpi	r25, 0xFE	; 254
    32d6:	51 05       	cpc	r21, r1
    32d8:	78 f0       	brcs	.+30     	; 0x32f8 <__divsf3_pse+0x86>
    32da:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__fp_inf>
    32de:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__fp_szero>
    32e2:	5f 3f       	cpi	r21, 0xFF	; 255
    32e4:	e4 f3       	brlt	.-8      	; 0x32de <__divsf3_pse+0x6c>
    32e6:	98 3e       	cpi	r25, 0xE8	; 232
    32e8:	d4 f3       	brlt	.-12     	; 0x32de <__divsf3_pse+0x6c>
    32ea:	86 95       	lsr	r24
    32ec:	77 95       	ror	r23
    32ee:	67 95       	ror	r22
    32f0:	b7 95       	ror	r27
    32f2:	f7 95       	ror	r31
    32f4:	9f 5f       	subi	r25, 0xFF	; 255
    32f6:	c9 f7       	brne	.-14     	; 0x32ea <__divsf3_pse+0x78>
    32f8:	88 0f       	add	r24, r24
    32fa:	91 1d       	adc	r25, r1
    32fc:	96 95       	lsr	r25
    32fe:	87 95       	ror	r24
    3300:	97 f9       	bld	r25, 7
    3302:	08 95       	ret
    3304:	e1 e0       	ldi	r30, 0x01	; 1
    3306:	66 0f       	add	r22, r22
    3308:	77 1f       	adc	r23, r23
    330a:	88 1f       	adc	r24, r24
    330c:	bb 1f       	adc	r27, r27
    330e:	62 17       	cp	r22, r18
    3310:	73 07       	cpc	r23, r19
    3312:	84 07       	cpc	r24, r20
    3314:	ba 07       	cpc	r27, r26
    3316:	20 f0       	brcs	.+8      	; 0x3320 <__divsf3_pse+0xae>
    3318:	62 1b       	sub	r22, r18
    331a:	73 0b       	sbc	r23, r19
    331c:	84 0b       	sbc	r24, r20
    331e:	ba 0b       	sbc	r27, r26
    3320:	ee 1f       	adc	r30, r30
    3322:	88 f7       	brcc	.-30     	; 0x3306 <__divsf3_pse+0x94>
    3324:	e0 95       	com	r30
    3326:	08 95       	ret

00003328 <__fixunssfsi>:
    3328:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__fp_splitA>
    332c:	88 f0       	brcs	.+34     	; 0x3350 <__fixunssfsi+0x28>
    332e:	9f 57       	subi	r25, 0x7F	; 127
    3330:	98 f0       	brcs	.+38     	; 0x3358 <__fixunssfsi+0x30>
    3332:	b9 2f       	mov	r27, r25
    3334:	99 27       	eor	r25, r25
    3336:	b7 51       	subi	r27, 0x17	; 23
    3338:	b0 f0       	brcs	.+44     	; 0x3366 <__fixunssfsi+0x3e>
    333a:	e1 f0       	breq	.+56     	; 0x3374 <__fixunssfsi+0x4c>
    333c:	66 0f       	add	r22, r22
    333e:	77 1f       	adc	r23, r23
    3340:	88 1f       	adc	r24, r24
    3342:	99 1f       	adc	r25, r25
    3344:	1a f0       	brmi	.+6      	; 0x334c <__fixunssfsi+0x24>
    3346:	ba 95       	dec	r27
    3348:	c9 f7       	brne	.-14     	; 0x333c <__fixunssfsi+0x14>
    334a:	14 c0       	rjmp	.+40     	; 0x3374 <__fixunssfsi+0x4c>
    334c:	b1 30       	cpi	r27, 0x01	; 1
    334e:	91 f0       	breq	.+36     	; 0x3374 <__fixunssfsi+0x4c>
    3350:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <__fp_zero>
    3354:	b1 e0       	ldi	r27, 0x01	; 1
    3356:	08 95       	ret
    3358:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__fp_zero>
    335c:	67 2f       	mov	r22, r23
    335e:	78 2f       	mov	r23, r24
    3360:	88 27       	eor	r24, r24
    3362:	b8 5f       	subi	r27, 0xF8	; 248
    3364:	39 f0       	breq	.+14     	; 0x3374 <__fixunssfsi+0x4c>
    3366:	b9 3f       	cpi	r27, 0xF9	; 249
    3368:	cc f3       	brlt	.-14     	; 0x335c <__fixunssfsi+0x34>
    336a:	86 95       	lsr	r24
    336c:	77 95       	ror	r23
    336e:	67 95       	ror	r22
    3370:	b3 95       	inc	r27
    3372:	d9 f7       	brne	.-10     	; 0x336a <__fixunssfsi+0x42>
    3374:	3e f4       	brtc	.+14     	; 0x3384 <__fixunssfsi+0x5c>
    3376:	90 95       	com	r25
    3378:	80 95       	com	r24
    337a:	70 95       	com	r23
    337c:	61 95       	neg	r22
    337e:	7f 4f       	sbci	r23, 0xFF	; 255
    3380:	8f 4f       	sbci	r24, 0xFF	; 255
    3382:	9f 4f       	sbci	r25, 0xFF	; 255
    3384:	08 95       	ret

00003386 <__floatunsisf>:
    3386:	e8 94       	clt
    3388:	09 c0       	rjmp	.+18     	; 0x339c <__floatsisf+0x12>

0000338a <__floatsisf>:
    338a:	97 fb       	bst	r25, 7
    338c:	3e f4       	brtc	.+14     	; 0x339c <__floatsisf+0x12>
    338e:	90 95       	com	r25
    3390:	80 95       	com	r24
    3392:	70 95       	com	r23
    3394:	61 95       	neg	r22
    3396:	7f 4f       	sbci	r23, 0xFF	; 255
    3398:	8f 4f       	sbci	r24, 0xFF	; 255
    339a:	9f 4f       	sbci	r25, 0xFF	; 255
    339c:	99 23       	and	r25, r25
    339e:	a9 f0       	breq	.+42     	; 0x33ca <__floatsisf+0x40>
    33a0:	f9 2f       	mov	r31, r25
    33a2:	96 e9       	ldi	r25, 0x96	; 150
    33a4:	bb 27       	eor	r27, r27
    33a6:	93 95       	inc	r25
    33a8:	f6 95       	lsr	r31
    33aa:	87 95       	ror	r24
    33ac:	77 95       	ror	r23
    33ae:	67 95       	ror	r22
    33b0:	b7 95       	ror	r27
    33b2:	f1 11       	cpse	r31, r1
    33b4:	f8 cf       	rjmp	.-16     	; 0x33a6 <__floatsisf+0x1c>
    33b6:	fa f4       	brpl	.+62     	; 0x33f6 <__floatsisf+0x6c>
    33b8:	bb 0f       	add	r27, r27
    33ba:	11 f4       	brne	.+4      	; 0x33c0 <__floatsisf+0x36>
    33bc:	60 ff       	sbrs	r22, 0
    33be:	1b c0       	rjmp	.+54     	; 0x33f6 <__floatsisf+0x6c>
    33c0:	6f 5f       	subi	r22, 0xFF	; 255
    33c2:	7f 4f       	sbci	r23, 0xFF	; 255
    33c4:	8f 4f       	sbci	r24, 0xFF	; 255
    33c6:	9f 4f       	sbci	r25, 0xFF	; 255
    33c8:	16 c0       	rjmp	.+44     	; 0x33f6 <__floatsisf+0x6c>
    33ca:	88 23       	and	r24, r24
    33cc:	11 f0       	breq	.+4      	; 0x33d2 <__floatsisf+0x48>
    33ce:	96 e9       	ldi	r25, 0x96	; 150
    33d0:	11 c0       	rjmp	.+34     	; 0x33f4 <__floatsisf+0x6a>
    33d2:	77 23       	and	r23, r23
    33d4:	21 f0       	breq	.+8      	; 0x33de <__floatsisf+0x54>
    33d6:	9e e8       	ldi	r25, 0x8E	; 142
    33d8:	87 2f       	mov	r24, r23
    33da:	76 2f       	mov	r23, r22
    33dc:	05 c0       	rjmp	.+10     	; 0x33e8 <__floatsisf+0x5e>
    33de:	66 23       	and	r22, r22
    33e0:	71 f0       	breq	.+28     	; 0x33fe <__floatsisf+0x74>
    33e2:	96 e8       	ldi	r25, 0x86	; 134
    33e4:	86 2f       	mov	r24, r22
    33e6:	70 e0       	ldi	r23, 0x00	; 0
    33e8:	60 e0       	ldi	r22, 0x00	; 0
    33ea:	2a f0       	brmi	.+10     	; 0x33f6 <__floatsisf+0x6c>
    33ec:	9a 95       	dec	r25
    33ee:	66 0f       	add	r22, r22
    33f0:	77 1f       	adc	r23, r23
    33f2:	88 1f       	adc	r24, r24
    33f4:	da f7       	brpl	.-10     	; 0x33ec <__floatsisf+0x62>
    33f6:	88 0f       	add	r24, r24
    33f8:	96 95       	lsr	r25
    33fa:	87 95       	ror	r24
    33fc:	97 f9       	bld	r25, 7
    33fe:	08 95       	ret

00003400 <__fp_cmp>:
    3400:	99 0f       	add	r25, r25
    3402:	00 08       	sbc	r0, r0
    3404:	55 0f       	add	r21, r21
    3406:	aa 0b       	sbc	r26, r26
    3408:	e0 e8       	ldi	r30, 0x80	; 128
    340a:	fe ef       	ldi	r31, 0xFE	; 254
    340c:	16 16       	cp	r1, r22
    340e:	17 06       	cpc	r1, r23
    3410:	e8 07       	cpc	r30, r24
    3412:	f9 07       	cpc	r31, r25
    3414:	c0 f0       	brcs	.+48     	; 0x3446 <__fp_cmp+0x46>
    3416:	12 16       	cp	r1, r18
    3418:	13 06       	cpc	r1, r19
    341a:	e4 07       	cpc	r30, r20
    341c:	f5 07       	cpc	r31, r21
    341e:	98 f0       	brcs	.+38     	; 0x3446 <__fp_cmp+0x46>
    3420:	62 1b       	sub	r22, r18
    3422:	73 0b       	sbc	r23, r19
    3424:	84 0b       	sbc	r24, r20
    3426:	95 0b       	sbc	r25, r21
    3428:	39 f4       	brne	.+14     	; 0x3438 <__fp_cmp+0x38>
    342a:	0a 26       	eor	r0, r26
    342c:	61 f0       	breq	.+24     	; 0x3446 <__fp_cmp+0x46>
    342e:	23 2b       	or	r18, r19
    3430:	24 2b       	or	r18, r20
    3432:	25 2b       	or	r18, r21
    3434:	21 f4       	brne	.+8      	; 0x343e <__fp_cmp+0x3e>
    3436:	08 95       	ret
    3438:	0a 26       	eor	r0, r26
    343a:	09 f4       	brne	.+2      	; 0x343e <__fp_cmp+0x3e>
    343c:	a1 40       	sbci	r26, 0x01	; 1
    343e:	a6 95       	lsr	r26
    3440:	8f ef       	ldi	r24, 0xFF	; 255
    3442:	81 1d       	adc	r24, r1
    3444:	81 1d       	adc	r24, r1
    3446:	08 95       	ret

00003448 <__fp_inf>:
    3448:	97 f9       	bld	r25, 7
    344a:	9f 67       	ori	r25, 0x7F	; 127
    344c:	80 e8       	ldi	r24, 0x80	; 128
    344e:	70 e0       	ldi	r23, 0x00	; 0
    3450:	60 e0       	ldi	r22, 0x00	; 0
    3452:	08 95       	ret

00003454 <__fp_nan>:
    3454:	9f ef       	ldi	r25, 0xFF	; 255
    3456:	80 ec       	ldi	r24, 0xC0	; 192
    3458:	08 95       	ret

0000345a <__fp_pscA>:
    345a:	00 24       	eor	r0, r0
    345c:	0a 94       	dec	r0
    345e:	16 16       	cp	r1, r22
    3460:	17 06       	cpc	r1, r23
    3462:	18 06       	cpc	r1, r24
    3464:	09 06       	cpc	r0, r25
    3466:	08 95       	ret

00003468 <__fp_pscB>:
    3468:	00 24       	eor	r0, r0
    346a:	0a 94       	dec	r0
    346c:	12 16       	cp	r1, r18
    346e:	13 06       	cpc	r1, r19
    3470:	14 06       	cpc	r1, r20
    3472:	05 06       	cpc	r0, r21
    3474:	08 95       	ret

00003476 <__fp_round>:
    3476:	09 2e       	mov	r0, r25
    3478:	03 94       	inc	r0
    347a:	00 0c       	add	r0, r0
    347c:	11 f4       	brne	.+4      	; 0x3482 <__fp_round+0xc>
    347e:	88 23       	and	r24, r24
    3480:	52 f0       	brmi	.+20     	; 0x3496 <__fp_round+0x20>
    3482:	bb 0f       	add	r27, r27
    3484:	40 f4       	brcc	.+16     	; 0x3496 <__fp_round+0x20>
    3486:	bf 2b       	or	r27, r31
    3488:	11 f4       	brne	.+4      	; 0x348e <__fp_round+0x18>
    348a:	60 ff       	sbrs	r22, 0
    348c:	04 c0       	rjmp	.+8      	; 0x3496 <__fp_round+0x20>
    348e:	6f 5f       	subi	r22, 0xFF	; 255
    3490:	7f 4f       	sbci	r23, 0xFF	; 255
    3492:	8f 4f       	sbci	r24, 0xFF	; 255
    3494:	9f 4f       	sbci	r25, 0xFF	; 255
    3496:	08 95       	ret

00003498 <__fp_split3>:
    3498:	57 fd       	sbrc	r21, 7
    349a:	90 58       	subi	r25, 0x80	; 128
    349c:	44 0f       	add	r20, r20
    349e:	55 1f       	adc	r21, r21
    34a0:	59 f0       	breq	.+22     	; 0x34b8 <__fp_splitA+0x10>
    34a2:	5f 3f       	cpi	r21, 0xFF	; 255
    34a4:	71 f0       	breq	.+28     	; 0x34c2 <__fp_splitA+0x1a>
    34a6:	47 95       	ror	r20

000034a8 <__fp_splitA>:
    34a8:	88 0f       	add	r24, r24
    34aa:	97 fb       	bst	r25, 7
    34ac:	99 1f       	adc	r25, r25
    34ae:	61 f0       	breq	.+24     	; 0x34c8 <__fp_splitA+0x20>
    34b0:	9f 3f       	cpi	r25, 0xFF	; 255
    34b2:	79 f0       	breq	.+30     	; 0x34d2 <__fp_splitA+0x2a>
    34b4:	87 95       	ror	r24
    34b6:	08 95       	ret
    34b8:	12 16       	cp	r1, r18
    34ba:	13 06       	cpc	r1, r19
    34bc:	14 06       	cpc	r1, r20
    34be:	55 1f       	adc	r21, r21
    34c0:	f2 cf       	rjmp	.-28     	; 0x34a6 <__fp_split3+0xe>
    34c2:	46 95       	lsr	r20
    34c4:	f1 df       	rcall	.-30     	; 0x34a8 <__fp_splitA>
    34c6:	08 c0       	rjmp	.+16     	; 0x34d8 <__fp_splitA+0x30>
    34c8:	16 16       	cp	r1, r22
    34ca:	17 06       	cpc	r1, r23
    34cc:	18 06       	cpc	r1, r24
    34ce:	99 1f       	adc	r25, r25
    34d0:	f1 cf       	rjmp	.-30     	; 0x34b4 <__fp_splitA+0xc>
    34d2:	86 95       	lsr	r24
    34d4:	71 05       	cpc	r23, r1
    34d6:	61 05       	cpc	r22, r1
    34d8:	08 94       	sec
    34da:	08 95       	ret

000034dc <__fp_zero>:
    34dc:	e8 94       	clt

000034de <__fp_szero>:
    34de:	bb 27       	eor	r27, r27
    34e0:	66 27       	eor	r22, r22
    34e2:	77 27       	eor	r23, r23
    34e4:	cb 01       	movw	r24, r22
    34e6:	97 f9       	bld	r25, 7
    34e8:	08 95       	ret

000034ea <__gesf2>:
    34ea:	0e 94 00 1a 	call	0x3400	; 0x3400 <__fp_cmp>
    34ee:	08 f4       	brcc	.+2      	; 0x34f2 <__gesf2+0x8>
    34f0:	8f ef       	ldi	r24, 0xFF	; 255
    34f2:	08 95       	ret

000034f4 <__mulsf3>:
    34f4:	0e 94 8d 1a 	call	0x351a	; 0x351a <__mulsf3x>
    34f8:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__fp_round>
    34fc:	0e 94 2d 1a 	call	0x345a	; 0x345a <__fp_pscA>
    3500:	38 f0       	brcs	.+14     	; 0x3510 <__mulsf3+0x1c>
    3502:	0e 94 34 1a 	call	0x3468	; 0x3468 <__fp_pscB>
    3506:	20 f0       	brcs	.+8      	; 0x3510 <__mulsf3+0x1c>
    3508:	95 23       	and	r25, r21
    350a:	11 f0       	breq	.+4      	; 0x3510 <__mulsf3+0x1c>
    350c:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__fp_inf>
    3510:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__fp_nan>
    3514:	11 24       	eor	r1, r1
    3516:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__fp_szero>

0000351a <__mulsf3x>:
    351a:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__fp_split3>
    351e:	70 f3       	brcs	.-36     	; 0x34fc <__mulsf3+0x8>

00003520 <__mulsf3_pse>:
    3520:	95 9f       	mul	r25, r21
    3522:	c1 f3       	breq	.-16     	; 0x3514 <__mulsf3+0x20>
    3524:	95 0f       	add	r25, r21
    3526:	50 e0       	ldi	r21, 0x00	; 0
    3528:	55 1f       	adc	r21, r21
    352a:	62 9f       	mul	r22, r18
    352c:	f0 01       	movw	r30, r0
    352e:	72 9f       	mul	r23, r18
    3530:	bb 27       	eor	r27, r27
    3532:	f0 0d       	add	r31, r0
    3534:	b1 1d       	adc	r27, r1
    3536:	63 9f       	mul	r22, r19
    3538:	aa 27       	eor	r26, r26
    353a:	f0 0d       	add	r31, r0
    353c:	b1 1d       	adc	r27, r1
    353e:	aa 1f       	adc	r26, r26
    3540:	64 9f       	mul	r22, r20
    3542:	66 27       	eor	r22, r22
    3544:	b0 0d       	add	r27, r0
    3546:	a1 1d       	adc	r26, r1
    3548:	66 1f       	adc	r22, r22
    354a:	82 9f       	mul	r24, r18
    354c:	22 27       	eor	r18, r18
    354e:	b0 0d       	add	r27, r0
    3550:	a1 1d       	adc	r26, r1
    3552:	62 1f       	adc	r22, r18
    3554:	73 9f       	mul	r23, r19
    3556:	b0 0d       	add	r27, r0
    3558:	a1 1d       	adc	r26, r1
    355a:	62 1f       	adc	r22, r18
    355c:	83 9f       	mul	r24, r19
    355e:	a0 0d       	add	r26, r0
    3560:	61 1d       	adc	r22, r1
    3562:	22 1f       	adc	r18, r18
    3564:	74 9f       	mul	r23, r20
    3566:	33 27       	eor	r19, r19
    3568:	a0 0d       	add	r26, r0
    356a:	61 1d       	adc	r22, r1
    356c:	23 1f       	adc	r18, r19
    356e:	84 9f       	mul	r24, r20
    3570:	60 0d       	add	r22, r0
    3572:	21 1d       	adc	r18, r1
    3574:	82 2f       	mov	r24, r18
    3576:	76 2f       	mov	r23, r22
    3578:	6a 2f       	mov	r22, r26
    357a:	11 24       	eor	r1, r1
    357c:	9f 57       	subi	r25, 0x7F	; 127
    357e:	50 40       	sbci	r21, 0x00	; 0
    3580:	9a f0       	brmi	.+38     	; 0x35a8 <__mulsf3_pse+0x88>
    3582:	f1 f0       	breq	.+60     	; 0x35c0 <__mulsf3_pse+0xa0>
    3584:	88 23       	and	r24, r24
    3586:	4a f0       	brmi	.+18     	; 0x359a <__mulsf3_pse+0x7a>
    3588:	ee 0f       	add	r30, r30
    358a:	ff 1f       	adc	r31, r31
    358c:	bb 1f       	adc	r27, r27
    358e:	66 1f       	adc	r22, r22
    3590:	77 1f       	adc	r23, r23
    3592:	88 1f       	adc	r24, r24
    3594:	91 50       	subi	r25, 0x01	; 1
    3596:	50 40       	sbci	r21, 0x00	; 0
    3598:	a9 f7       	brne	.-22     	; 0x3584 <__mulsf3_pse+0x64>
    359a:	9e 3f       	cpi	r25, 0xFE	; 254
    359c:	51 05       	cpc	r21, r1
    359e:	80 f0       	brcs	.+32     	; 0x35c0 <__mulsf3_pse+0xa0>
    35a0:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__fp_inf>
    35a4:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__fp_szero>
    35a8:	5f 3f       	cpi	r21, 0xFF	; 255
    35aa:	e4 f3       	brlt	.-8      	; 0x35a4 <__mulsf3_pse+0x84>
    35ac:	98 3e       	cpi	r25, 0xE8	; 232
    35ae:	d4 f3       	brlt	.-12     	; 0x35a4 <__mulsf3_pse+0x84>
    35b0:	86 95       	lsr	r24
    35b2:	77 95       	ror	r23
    35b4:	67 95       	ror	r22
    35b6:	b7 95       	ror	r27
    35b8:	f7 95       	ror	r31
    35ba:	e7 95       	ror	r30
    35bc:	9f 5f       	subi	r25, 0xFF	; 255
    35be:	c1 f7       	brne	.-16     	; 0x35b0 <__mulsf3_pse+0x90>
    35c0:	fe 2b       	or	r31, r30
    35c2:	88 0f       	add	r24, r24
    35c4:	91 1d       	adc	r25, r1
    35c6:	96 95       	lsr	r25
    35c8:	87 95       	ror	r24
    35ca:	97 f9       	bld	r25, 7
    35cc:	08 95       	ret

000035ce <__tablejump2__>:
    35ce:	ee 0f       	add	r30, r30
    35d0:	ff 1f       	adc	r31, r31
    35d2:	05 90       	lpm	r0, Z+
    35d4:	f4 91       	lpm	r31, Z
    35d6:	e0 2d       	mov	r30, r0
    35d8:	09 94       	ijmp

000035da <__umulhisi3>:
    35da:	a2 9f       	mul	r26, r18
    35dc:	b0 01       	movw	r22, r0
    35de:	b3 9f       	mul	r27, r19
    35e0:	c0 01       	movw	r24, r0
    35e2:	a3 9f       	mul	r26, r19
    35e4:	70 0d       	add	r23, r0
    35e6:	81 1d       	adc	r24, r1
    35e8:	11 24       	eor	r1, r1
    35ea:	91 1d       	adc	r25, r1
    35ec:	b2 9f       	mul	r27, r18
    35ee:	70 0d       	add	r23, r0
    35f0:	81 1d       	adc	r24, r1
    35f2:	11 24       	eor	r1, r1
    35f4:	91 1d       	adc	r25, r1
    35f6:	08 95       	ret

000035f8 <itoa>:
    35f8:	45 32       	cpi	r20, 0x25	; 37
    35fa:	51 05       	cpc	r21, r1
    35fc:	20 f4       	brcc	.+8      	; 0x3606 <itoa+0xe>
    35fe:	42 30       	cpi	r20, 0x02	; 2
    3600:	10 f0       	brcs	.+4      	; 0x3606 <itoa+0xe>
    3602:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__itoa_ncheck>
    3606:	fb 01       	movw	r30, r22
    3608:	10 82       	st	Z, r1
    360a:	cb 01       	movw	r24, r22
    360c:	08 95       	ret

0000360e <__itoa_ncheck>:
    360e:	bb 27       	eor	r27, r27
    3610:	4a 30       	cpi	r20, 0x0A	; 10
    3612:	31 f4       	brne	.+12     	; 0x3620 <__itoa_ncheck+0x12>
    3614:	99 23       	and	r25, r25
    3616:	22 f4       	brpl	.+8      	; 0x3620 <__itoa_ncheck+0x12>
    3618:	bd e2       	ldi	r27, 0x2D	; 45
    361a:	90 95       	com	r25
    361c:	81 95       	neg	r24
    361e:	9f 4f       	sbci	r25, 0xFF	; 255
    3620:	0c 94 13 1b 	jmp	0x3626	; 0x3626 <__utoa_common>

00003624 <__utoa_ncheck>:
    3624:	bb 27       	eor	r27, r27

00003626 <__utoa_common>:
    3626:	fb 01       	movw	r30, r22
    3628:	55 27       	eor	r21, r21
    362a:	aa 27       	eor	r26, r26
    362c:	88 0f       	add	r24, r24
    362e:	99 1f       	adc	r25, r25
    3630:	aa 1f       	adc	r26, r26
    3632:	a4 17       	cp	r26, r20
    3634:	10 f0       	brcs	.+4      	; 0x363a <__utoa_common+0x14>
    3636:	a4 1b       	sub	r26, r20
    3638:	83 95       	inc	r24
    363a:	50 51       	subi	r21, 0x10	; 16
    363c:	b9 f7       	brne	.-18     	; 0x362c <__utoa_common+0x6>
    363e:	a0 5d       	subi	r26, 0xD0	; 208
    3640:	aa 33       	cpi	r26, 0x3A	; 58
    3642:	08 f0       	brcs	.+2      	; 0x3646 <__utoa_common+0x20>
    3644:	a9 5d       	subi	r26, 0xD9	; 217
    3646:	a1 93       	st	Z+, r26
    3648:	00 97       	sbiw	r24, 0x00	; 0
    364a:	79 f7       	brne	.-34     	; 0x362a <__utoa_common+0x4>
    364c:	b1 11       	cpse	r27, r1
    364e:	b1 93       	st	Z+, r27
    3650:	11 92       	st	Z+, r1
    3652:	cb 01       	movw	r24, r22
    3654:	0c 94 2c 1b 	jmp	0x3658	; 0x3658 <strrev>

00003658 <strrev>:
    3658:	dc 01       	movw	r26, r24
    365a:	fc 01       	movw	r30, r24
    365c:	67 2f       	mov	r22, r23
    365e:	71 91       	ld	r23, Z+
    3660:	77 23       	and	r23, r23
    3662:	e1 f7       	brne	.-8      	; 0x365c <strrev+0x4>
    3664:	32 97       	sbiw	r30, 0x02	; 2
    3666:	04 c0       	rjmp	.+8      	; 0x3670 <strrev+0x18>
    3668:	7c 91       	ld	r23, X
    366a:	6d 93       	st	X+, r22
    366c:	70 83       	st	Z, r23
    366e:	62 91       	ld	r22, -Z
    3670:	ae 17       	cp	r26, r30
    3672:	bf 07       	cpc	r27, r31
    3674:	c8 f3       	brcs	.-14     	; 0x3668 <strrev+0x10>
    3676:	08 95       	ret

00003678 <_exit>:
    3678:	f8 94       	cli

0000367a <__stop_program>:
    367a:	ff cf       	rjmp	.-2      	; 0x367a <__stop_program>
