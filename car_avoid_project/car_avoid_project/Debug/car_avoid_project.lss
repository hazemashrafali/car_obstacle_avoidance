
car_avoid_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000438  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df5  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000733  00000000  00000000  00001379  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b2  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00002460  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000767  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d92  00000000  00000000  00002e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003b9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_1>
   8:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_2>
   c:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 43 00 	call	0x86	; 0x86 <main>
  74:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <fun>:
#include "MCAL/EXT_INT/ext_interrupt.h"
#include "MCAL/DIO/gpio.h"

void fun (void)
{
	DIO_togglePin(PORTA_ID,PIN0_ID);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_togglePin>
  84:	08 95       	ret

00000086 <main>:
}

int main(void)
{
	enu_interrupt_error_t enu_interrupt_error = ENU_MAX_INT_ERROR;
	DIO_pinMode(PORTA_ID,PIN0_ID,PIN_OUTPUT);
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_pinMode>
	SET_BIT(SREG,PIN7);
  90:	8f b7       	in	r24, 0x3f	; 63
  92:	80 68       	ori	r24, 0x80	; 128
  94:	8f bf       	out	0x3f, r24	; 63
	enu_interrupt_error = Init_external_interrupt( ENU_INT0_ID, ENU_LOW_LEVEL);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 29 01 	call	0x252	; 0x252 <Init_external_interrupt>
	if(enu_interrupt_error == 1)
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	29 f4       	brne	.+10     	; 0xac <main+0x26>
	{
		DIO_togglePin(PORTA_ID,PIN0_ID);
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_togglePin>
  aa:	06 c0       	rjmp	.+12     	; 0xb8 <main+0x32>
	}
	else if(enu_interrupt_error == 3)
  ac:	83 30       	cpi	r24, 0x03	; 3
  ae:	21 f4       	brne	.+8      	; 0xb8 <main+0x32>
	{
		DIO_togglePin(PORTA_ID,PIN0_ID);
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_togglePin>
	}
	interrupt0_set_callback(fun);
  b8:	8e e3       	ldi	r24, 0x3E	; 62
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <interrupt0_set_callback>
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0x3a>

000000c2 <DIO_pinMode>:
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	08 f0       	brcs	.+2      	; 0xc8 <DIO_pinMode+0x6>
  c6:	7b c0       	rjmp	.+246    	; 0x1be <DIO_pinMode+0xfc>
  c8:	68 30       	cpi	r22, 0x08	; 8
  ca:	08 f0       	brcs	.+2      	; 0xce <DIO_pinMode+0xc>
  cc:	7a c0       	rjmp	.+244    	; 0x1c2 <DIO_pinMode+0x100>
  ce:	42 30       	cpi	r20, 0x02	; 2
  d0:	08 f0       	brcs	.+2      	; 0xd4 <DIO_pinMode+0x12>
  d2:	79 c0       	rjmp	.+242    	; 0x1c6 <DIO_pinMode+0x104>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	11 f1       	breq	.+68     	; 0x11c <DIO_pinMode+0x5a>
  d8:	30 f0       	brcs	.+12     	; 0xe6 <DIO_pinMode+0x24>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	d1 f1       	breq	.+116    	; 0x152 <DIO_pinMode+0x90>
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	09 f4       	brne	.+2      	; 0xe4 <DIO_pinMode+0x22>
  e2:	52 c0       	rjmp	.+164    	; 0x188 <DIO_pinMode+0xc6>
  e4:	72 c0       	rjmp	.+228    	; 0x1ca <DIO_pinMode+0x108>
  e6:	41 30       	cpi	r20, 0x01	; 1
  e8:	61 f4       	brne	.+24     	; 0x102 <DIO_pinMode+0x40>
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_pinMode+0x34>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_pinMode+0x30>
  fa:	82 2b       	or	r24, r18
  fc:	8a bb       	out	0x1a, r24	; 26
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	08 95       	ret
 102:	2a b3       	in	r18, 0x1a	; 26
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_pinMode+0x4c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_pinMode+0x48>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	8a bb       	out	0x1a, r24	; 26
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	08 95       	ret
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	61 f4       	brne	.+24     	; 0x138 <DIO_pinMode+0x76>
 120:	27 b3       	in	r18, 0x17	; 23
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_pinMode+0x6a>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_pinMode+0x66>
 130:	82 2b       	or	r24, r18
 132:	87 bb       	out	0x17, r24	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	08 95       	ret
 138:	27 b3       	in	r18, 0x17	; 23
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_pinMode+0x82>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_pinMode+0x7e>
 148:	80 95       	com	r24
 14a:	82 23       	and	r24, r18
 14c:	87 bb       	out	0x17, r24	; 23
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	08 95       	ret
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	61 f4       	brne	.+24     	; 0x16e <DIO_pinMode+0xac>
 156:	24 b3       	in	r18, 0x14	; 20
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_pinMode+0xa0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_pinMode+0x9c>
 166:	82 2b       	or	r24, r18
 168:	84 bb       	out	0x14, r24	; 20
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	08 95       	ret
 16e:	24 b3       	in	r18, 0x14	; 20
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_pinMode+0xb8>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_pinMode+0xb4>
 17e:	80 95       	com	r24
 180:	82 23       	and	r24, r18
 182:	84 bb       	out	0x14, r24	; 20
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	08 95       	ret
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	61 f4       	brne	.+24     	; 0x1a4 <DIO_pinMode+0xe2>
 18c:	21 b3       	in	r18, 0x11	; 17
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_pinMode+0xd6>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_pinMode+0xd2>
 19c:	82 2b       	or	r24, r18
 19e:	81 bb       	out	0x11, r24	; 17
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	08 95       	ret
 1a4:	21 b3       	in	r18, 0x11	; 17
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_pinMode+0xee>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_pinMode+0xea>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	81 bb       	out	0x11, r24	; 17
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	08 95       	ret
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	08 95       	ret
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	08 95       	ret
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	08 95       	ret
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	08 95       	ret

000001ce <DIO_togglePin>:
/*===========================================================================*/

enu_dio_error_t DIO_togglePin	(uint8 port,uint8 pin)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
 1ce:	84 30       	cpi	r24, 0x04	; 4
 1d0:	d0 f5       	brcc	.+116    	; 0x246 <DIO_togglePin+0x78>
	{
		if((pin >= PIN0_ID) && (pin < MAX_PIN_ID))
 1d2:	68 30       	cpi	r22, 0x08	; 8
 1d4:	d0 f5       	brcc	.+116    	; 0x24a <DIO_togglePin+0x7c>
		{
				switch(port)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 f0       	breq	.+36     	; 0x1fe <DIO_togglePin+0x30>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <DIO_togglePin+0x18>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	d9 f0       	breq	.+54     	; 0x216 <DIO_togglePin+0x48>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	29 f1       	breq	.+74     	; 0x22e <DIO_togglePin+0x60>
 1e4:	34 c0       	rjmp	.+104    	; 0x24e <DIO_togglePin+0x80>
				{
					case PORTA_ID:	TOGGLE_BIT(PORTA,pin);	break;
 1e6:	2b b3       	in	r18, 0x1b	; 27
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_togglePin+0x24>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_togglePin+0x20>
 1f6:	82 27       	eor	r24, r18
 1f8:	8b bb       	out	0x1b, r24	; 27

/*===========================================================================*/

enu_dio_error_t DIO_togglePin	(uint8 port,uint8 pin)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
	{
		if((pin >= PIN0_ID) && (pin < MAX_PIN_ID))
		{
				switch(port)
				{
					case PORTA_ID:	TOGGLE_BIT(PORTA,pin);	break;
 1fc:	08 95       	ret
					case PORTB_ID:	TOGGLE_BIT(PORTB,pin);	break;
 1fe:	28 b3       	in	r18, 0x18	; 24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_togglePin+0x3c>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_togglePin+0x38>
 20e:	82 27       	eor	r24, r18
 210:	88 bb       	out	0x18, r24	; 24

/*===========================================================================*/

enu_dio_error_t DIO_togglePin	(uint8 port,uint8 pin)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
 212:	81 e0       	ldi	r24, 0x01	; 1
		if((pin >= PIN0_ID) && (pin < MAX_PIN_ID))
		{
				switch(port)
				{
					case PORTA_ID:	TOGGLE_BIT(PORTA,pin);	break;
					case PORTB_ID:	TOGGLE_BIT(PORTB,pin);	break;
 214:	08 95       	ret
					case PORTC_ID:	TOGGLE_BIT(PORTC,pin);	break;
 216:	25 b3       	in	r18, 0x15	; 21
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_togglePin+0x54>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_togglePin+0x50>
 226:	82 27       	eor	r24, r18
 228:	85 bb       	out	0x15, r24	; 21

/*===========================================================================*/

enu_dio_error_t DIO_togglePin	(uint8 port,uint8 pin)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
 22a:	81 e0       	ldi	r24, 0x01	; 1
		{
				switch(port)
				{
					case PORTA_ID:	TOGGLE_BIT(PORTA,pin);	break;
					case PORTB_ID:	TOGGLE_BIT(PORTB,pin);	break;
					case PORTC_ID:	TOGGLE_BIT(PORTC,pin);	break;
 22c:	08 95       	ret
					case PORTD_ID:	TOGGLE_BIT(PORTD,pin);	break;
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_togglePin+0x6c>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_togglePin+0x68>
 23e:	82 27       	eor	r24, r18
 240:	82 bb       	out	0x12, r24	; 18

/*===========================================================================*/

enu_dio_error_t DIO_togglePin	(uint8 port,uint8 pin)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
 242:	81 e0       	ldi	r24, 0x01	; 1
				switch(port)
				{
					case PORTA_ID:	TOGGLE_BIT(PORTA,pin);	break;
					case PORTB_ID:	TOGGLE_BIT(PORTB,pin);	break;
					case PORTC_ID:	TOGGLE_BIT(PORTC,pin);	break;
					case PORTD_ID:	TOGGLE_BIT(PORTD,pin);	break;
 244:	08 95       	ret
			enu_dio_error = DIO_INVALID_PIN_ID;
		}
	}
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	08 95       	ret
					break;
				}
		}
		else
		{
			enu_dio_error = DIO_INVALID_PIN_ID;
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	08 95       	ret

/*===========================================================================*/

enu_dio_error_t DIO_togglePin	(uint8 port,uint8 pin)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
 24e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
 250:	08 95       	ret

00000252 <Init_external_interrupt>:
	else
	{
		enu_interrupt_error = ENU_INT_INVALID_INPUT ;
	}
	return enu_interrupt_error ;
}
 252:	83 30       	cpi	r24, 0x03	; 3
 254:	40 f5       	brcc	.+80     	; 0x2a6 <Init_external_interrupt+0x54>
 256:	64 30       	cpi	r22, 0x04	; 4
 258:	40 f5       	brcc	.+80     	; 0x2aa <Init_external_interrupt+0x58>
 25a:	81 11       	cpse	r24, r1
 25c:	06 c0       	rjmp	.+12     	; 0x26a <Init_external_interrupt+0x18>
 25e:	85 b7       	in	r24, 0x35	; 53
 260:	8c 7f       	andi	r24, 0xFC	; 252
 262:	68 2b       	or	r22, r24
 264:	65 bf       	out	0x35, r22	; 53
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	08 95       	ret
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	59 f4       	brne	.+22     	; 0x284 <Init_external_interrupt+0x32>
 26e:	85 b7       	in	r24, 0x35	; 53
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	66 0f       	add	r22, r22
 274:	77 1f       	adc	r23, r23
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	83 7f       	andi	r24, 0xF3	; 243
 27c:	68 2b       	or	r22, r24
 27e:	65 bf       	out	0x35, r22	; 53
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	08 95       	ret
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	99 f4       	brne	.+38     	; 0x2ae <Init_external_interrupt+0x5c>
 288:	8e ef       	ldi	r24, 0xFE	; 254
 28a:	86 0f       	add	r24, r22
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	88 f4       	brcc	.+34     	; 0x2b2 <Init_external_interrupt+0x60>
 290:	24 b7       	in	r18, 0x34	; 52
 292:	30 e4       	ldi	r19, 0x40	; 64
 294:	63 9f       	mul	r22, r19
 296:	c0 01       	movw	r24, r0
 298:	11 24       	eor	r1, r1
 29a:	92 2f       	mov	r25, r18
 29c:	9f 7b       	andi	r25, 0xBF	; 191
 29e:	89 2b       	or	r24, r25
 2a0:	84 bf       	out	0x34, r24	; 52
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	08 95       	ret
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	08 95       	ret
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	08 95       	ret
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	08 95       	ret

000002b6 <interrupt0_set_callback>:
 2b6:	00 97       	sbiw	r24, 0x00	; 0
 2b8:	31 f0       	breq	.+12     	; 0x2c6 <interrupt0_set_callback+0x10>
 2ba:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <gl_callbackptr_0+0x1>
 2be:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <gl_callbackptr_0>
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	08 95       	ret
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	08 95       	ret

000002ca <__vector_1>:

ISR_HANDLER(EXT_INT0)
{
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	2f 93       	push	r18
 2d6:	3f 93       	push	r19
 2d8:	4f 93       	push	r20
 2da:	5f 93       	push	r21
 2dc:	6f 93       	push	r22
 2de:	7f 93       	push	r23
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	af 93       	push	r26
 2e6:	bf 93       	push	r27
 2e8:	ef 93       	push	r30
 2ea:	ff 93       	push	r31
	if(gl_callbackptr_0 != NULL_PTR)
 2ec:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <gl_callbackptr_0>
 2f0:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <gl_callbackptr_0+0x1>
 2f4:	30 97       	sbiw	r30, 0x00	; 0
 2f6:	09 f0       	breq	.+2      	; 0x2fa <__vector_1+0x30>
	{
		gl_callbackptr_0();
 2f8:	09 95       	icall
	}
}
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	bf 91       	pop	r27
 300:	af 91       	pop	r26
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	7f 91       	pop	r23
 308:	6f 91       	pop	r22
 30a:	5f 91       	pop	r21
 30c:	4f 91       	pop	r20
 30e:	3f 91       	pop	r19
 310:	2f 91       	pop	r18
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <__vector_2>:

ISR_HANDLER(EXT_INT1)
{
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	2f 93       	push	r18
 328:	3f 93       	push	r19
 32a:	4f 93       	push	r20
 32c:	5f 93       	push	r21
 32e:	6f 93       	push	r22
 330:	7f 93       	push	r23
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	af 93       	push	r26
 338:	bf 93       	push	r27
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
	if(gl_callbackptr_1 != NULL_PTR)
 33e:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <gl_callbackptr_1>
 342:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <gl_callbackptr_1+0x1>
 346:	30 97       	sbiw	r30, 0x00	; 0
 348:	09 f0       	breq	.+2      	; 0x34c <__vector_2+0x30>
	{
		gl_callbackptr_1();
 34a:	09 95       	icall
	}
}
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <__vector_3>:

ISR_HANDLER(EXT_INT2)
{
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	4f 93       	push	r20
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
	if(gl_callbackptr_2 != NULL_PTR)
 390:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 394:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 398:	30 97       	sbiw	r30, 0x00	; 0
 39a:	09 f0       	breq	.+2      	; 0x39e <__vector_3+0x30>
	{
		gl_callbackptr_2();
 39c:	09 95       	icall
	}
}
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	7f 91       	pop	r23
 3ac:	6f 91       	pop	r22
 3ae:	5f 91       	pop	r21
 3b0:	4f 91       	pop	r20
 3b2:	3f 91       	pop	r19
 3b4:	2f 91       	pop	r18
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <_exit>:
 3c0:	f8 94       	cli

000003c2 <__stop_program>:
 3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <__stop_program>
