
car_avoid_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003044  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00003044  000030d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800076  00800076  000030ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000030ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003120  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  0000315c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040ed  00000000  00000000  0000347c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f9c  00000000  00000000  00007569  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003612  00000000  00000000  00008505  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a60  00000000  00000000  0000bb18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000173d  00000000  00000000  0000c578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000053de  00000000  00000000  0000dcb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  00013093  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__vector_1>
       8:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__vector_2>
       c:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__vector_3>
      10:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__vector_4>
      14:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__vector_9>
      28:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__vector_10>
      2c:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	64 09       	sbc	r22, r4
      56:	69 09       	sbc	r22, r9
      58:	6f 09       	sbc	r22, r15
      5a:	1f 0a       	sbc	r1, r31
      5c:	75 09       	sbc	r23, r5
      5e:	1f 0a       	sbc	r1, r31
      60:	7b 09       	sbc	r23, r11
      62:	81 09       	sbc	r24, r1
      64:	87 09       	sbc	r24, r7
      66:	8d 09       	sbc	r24, r13
      68:	a7 09       	sbc	r26, r7
      6a:	ac 09       	sbc	r26, r12
      6c:	b2 09       	sbc	r27, r2
      6e:	27 0a       	sbc	r2, r23
      70:	b8 09       	sbc	r27, r8
      72:	27 0a       	sbc	r2, r23
      74:	be 09       	sbc	r27, r14
      76:	c4 09       	sbc	r28, r4
      78:	ca 09       	sbc	r28, r10
      7a:	d0 09       	sbc	r29, r0
      7c:	e5 09       	sbc	r30, r5
      7e:	ea 09       	sbc	r30, r10
      80:	f0 09       	sbc	r31, r0
      82:	f6 09       	sbc	r31, r6
      84:	fc 09       	sbc	r31, r12
      86:	02 0a       	sbc	r0, r18
      88:	08 0a       	sbc	r0, r24
      8a:	0e 0a       	sbc	r0, r30

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e4 e4       	ldi	r30, 0x44	; 68
      a0:	f0 e3       	ldi	r31, 0x30	; 48
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a6 37       	cpi	r26, 0x76	; 118
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	a6 e7       	ldi	r26, 0x76	; 118
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a0 39       	cpi	r26, 0x90	; 144
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 f6 04 	call	0x9ec	; 0x9ec <main>
      c2:	0c 94 20 18 	jmp	0x3040	; 0x3040 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <Icu_init>:
 *				ENU_ICU_INVALID_INPUT		: in case of invalid passing argument Ex. timer channel id - null pointer - value out of range
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_init(const str_icu_configtype_t * str_icu_configtype)
{	
      ca:	ef 92       	push	r14
      cc:	ff 92       	push	r15
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	29 97       	sbiw	r28, 0x09	; 9
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	enu_intrrupt_id_t	enu_intrrupt_id		= ENU_MAX_INT_ID;
	enu_trigger_mode_t	enu_trigger_mode	= ENU_MAX_TRIGGER_MODE;
	enu_icu_error_t		enu_icu_error		= ENU_ICU_VALID;
	str_tmr_config_t	str_tmr_config;
	if(str_icu_configtype->enu_icu_clock < ENU_ICU_MAX_CLOCK)
      e6:	fc 01       	movw	r30, r24
      e8:	22 81       	ldd	r18, Z+2	; 0x02
      ea:	28 30       	cpi	r18, 0x08	; 8
      ec:	08 f0       	brcs	.+2      	; 0xf0 <Icu_init+0x26>
      ee:	4a c0       	rjmp	.+148    	; 0x184 <Icu_init+0xba>
	{
		if(str_icu_configtype->enu_icu_edgetype < ENU_ICU_MAX_EDGETYPE)
      f0:	23 81       	ldd	r18, Z+3	; 0x03
      f2:	22 30       	cpi	r18, 0x02	; 2
      f4:	08 f0       	brcs	.+2      	; 0xf8 <Icu_init+0x2e>
      f6:	48 c0       	rjmp	.+144    	; 0x188 <Icu_init+0xbe>
		{
			if (str_icu_configtype->enu_icu_channel_id < ENU_ICU_MAX_CHANNEL)
      f8:	30 81       	ld	r19, Z
      fa:	33 30       	cpi	r19, 0x03	; 3
      fc:	08 f0       	brcs	.+2      	; 0x100 <Icu_init+0x36>
      fe:	46 c0       	rjmp	.+140    	; 0x18c <Icu_init+0xc2>
			{
				if (str_icu_configtype->enu_timer_channel_id < ENU_TIMER_MAX_CHANNEL)
     100:	41 81       	ldd	r20, Z+1	; 0x01
     102:	43 30       	cpi	r20, 0x03	; 3
     104:	08 f0       	brcs	.+2      	; 0x108 <Icu_init+0x3e>
     106:	44 c0       	rjmp	.+136    	; 0x190 <Icu_init+0xc6>
				{
					if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID0)
     108:	31 11       	cpse	r19, r1
     10a:	04 c0       	rjmp	.+8      	; 0x114 <Icu_init+0x4a>
					{
						enu_intrrupt_id = ENU_INT0_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_0;
     10c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <gl_u8_interrupt_id>
			{
				if (str_icu_configtype->enu_timer_channel_id < ENU_TIMER_MAX_CHANNEL)
				{
					if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID0)
					{
						enu_intrrupt_id = ENU_INT0_ID;
     110:	f1 2c       	mov	r15, r1
     112:	0d c0       	rjmp	.+26     	; 0x12e <Icu_init+0x64>
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_0;
					}
					else if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID1)
     114:	31 30       	cpi	r19, 0x01	; 1
     116:	29 f4       	brne	.+10     	; 0x122 <Icu_init+0x58>
					{
						enu_intrrupt_id = ENU_INT1_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_1 ;
     118:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <gl_u8_interrupt_id>
						enu_intrrupt_id = ENU_INT0_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_0;
					}
					else if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID1)
					{
						enu_intrrupt_id = ENU_INT1_ID;
     11c:	ff 24       	eor	r15, r15
     11e:	f3 94       	inc	r15
     120:	06 c0       	rjmp	.+12     	; 0x12e <Icu_init+0x64>
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_1 ;
					} 
					else
					{
						enu_intrrupt_id = ENU_INT2_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_2 ;
     122:	32 e0       	ldi	r19, 0x02	; 2
     124:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <gl_u8_interrupt_id>
						enu_intrrupt_id = ENU_INT1_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_1 ;
					} 
					else
					{
						enu_intrrupt_id = ENU_INT2_ID;
     128:	68 94       	set
     12a:	ff 24       	eor	r15, r15
     12c:	f1 f8       	bld	r15, 1
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_2 ;
					}
					if(str_icu_configtype->enu_icu_edgetype == ENU_ICU_FALLING )
     12e:	21 11       	cpse	r18, r1
     130:	04 c0       	rjmp	.+8      	; 0x13a <Icu_init+0x70>
					{
						enu_trigger_mode = ENU_FALLING;
     132:	68 94       	set
     134:	ee 24       	eor	r14, r14
     136:	e1 f8       	bld	r14, 1
     138:	04 c0       	rjmp	.+8      	; 0x142 <Icu_init+0x78>
					}
					else
					{
						enu_trigger_mode = ENU_RISING;
     13a:	0f 2e       	mov	r0, r31
     13c:	f3 e0       	ldi	r31, 0x03	; 3
     13e:	ef 2e       	mov	r14, r31
     140:	f0 2d       	mov	r31, r0
     142:	8c 01       	movw	r16, r24
					}

					str_tmr_config.enu_tmr_channel_id		= str_icu_configtype->enu_timer_channel_id;
     144:	49 83       	std	Y+1, r20	; 0x01
					str_tmr_config.enu_tmr_mode				= ENU_TMR_NORMAL_MODE;
     146:	1a 82       	std	Y+2, r1	; 0x02
					str_tmr_config.enu_tmr_cmp_mode			= ENU_TMR_CMP_DISCONNECT;
     148:	1c 82       	std	Y+4, r1	; 0x04
					str_tmr_config.enu_tmr_clk				= (enu_tmr_clk_t) str_icu_configtype->enu_icu_clock;
     14a:	fc 01       	movw	r30, r24
     14c:	82 81       	ldd	r24, Z+2	; 0x02
     14e:	8d 83       	std	Y+5, r24	; 0x05
					str_tmr_config.enu_tmr_interrupt_state	= ENU_TMR_INT_DISABLE;
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	8b 83       	std	Y+3, r24	; 0x03
					str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
     154:	19 86       	std	Y+9, r1	; 0x09
     156:	18 86       	std	Y+8, r1	; 0x08
					str_tmr_config.u16_tmr_initial_value	= ZERO_VALUE;
     158:	1f 82       	std	Y+7, r1	; 0x07
     15a:	1e 82       	std	Y+6, r1	; 0x06
					gl_u8_timer_id = str_icu_configtype->enu_timer_channel_id;
     15c:	81 81       	ldd	r24, Z+1	; 0x01
     15e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					timer_init(&str_tmr_config);
     162:	ce 01       	movw	r24, r28
     164:	01 96       	adiw	r24, 0x01	; 1
     166:	0e 94 52 07 	call	0xea4	; 0xea4 <timer_init>
					timer_start(str_icu_configtype->enu_timer_channel_id);
     16a:	f8 01       	movw	r30, r16
     16c:	81 81       	ldd	r24, Z+1	; 0x01
     16e:	0e 94 3c 09 	call	0x1278	; 0x1278 <timer_start>
					Init_external_interrupt (enu_intrrupt_id,enu_trigger_mode);
     172:	6e 2d       	mov	r22, r14
     174:	8f 2d       	mov	r24, r15
     176:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Init_external_interrupt>
					enable_external_interrupt(enu_intrrupt_id);
     17a:	8f 2d       	mov	r24, r15
     17c:	0e 94 9a 06 	call	0xd34	; 0xd34 <enable_external_interrupt>
 */
enu_icu_error_t Icu_init(const str_icu_configtype_t * str_icu_configtype)
{	
	enu_intrrupt_id_t	enu_intrrupt_id		= ENU_MAX_INT_ID;
	enu_trigger_mode_t	enu_trigger_mode	= ENU_MAX_TRIGGER_MODE;
	enu_icu_error_t		enu_icu_error		= ENU_ICU_VALID;
     180:	84 e0       	ldi	r24, 0x04	; 4
     182:	07 c0       	rjmp	.+14     	; 0x192 <Icu_init+0xc8>
			enu_icu_error = ENU_ICU_INVALID_EDGETYP;
		}
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CLOCK;
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	05 c0       	rjmp	.+10     	; 0x192 <Icu_init+0xc8>
				enu_icu_error = ENU_ICU_MAX_CHANNEL;
			}
		}
		else
		{
			enu_icu_error = ENU_ICU_INVALID_EDGETYP;
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	03 c0       	rjmp	.+6      	; 0x192 <Icu_init+0xc8>
					enu_icu_error = ENU_TIMER_MAX_CHANNEL;
				}
			}
			else
			{
				enu_icu_error = ENU_ICU_MAX_CHANNEL;
     18c:	83 e0       	ldi	r24, 0x03	; 3
     18e:	01 c0       	rjmp	.+2      	; 0x192 <Icu_init+0xc8>
					Init_external_interrupt (enu_intrrupt_id,enu_trigger_mode);
					enable_external_interrupt(enu_intrrupt_id);
				}
				else
				{
					enu_icu_error = ENU_TIMER_MAX_CHANNEL;
     190:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CLOCK;
	}
	return enu_icu_error;
}
     192:	29 96       	adiw	r28, 0x09	; 9
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	de bf       	out	0x3e, r29	; 62
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	cd bf       	out	0x3d, r28	; 61
     19e:	df 91       	pop	r29
     1a0:	cf 91       	pop	r28
     1a2:	1f 91       	pop	r17
     1a4:	0f 91       	pop	r16
     1a6:	ff 90       	pop	r15
     1a8:	ef 90       	pop	r14
     1aa:	08 95       	ret

000001ac <Icu_setCallBack>:
 *				ENU_ICU_INVALID_INPUT		: in case of invalid passing argument Ex. timer channel id - null pointer - value out of range
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
     1ac:	9c 01       	movw	r18, r24
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_0)
     1ae:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <gl_u8_interrupt_id>
     1b2:	91 11       	cpse	r25, r1
     1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <Icu_setCallBack+0x14>
	{
		interrupt0_set_callback (a_ptr);
     1b6:	c9 01       	movw	r24, r18
     1b8:	0e 94 b5 06 	call	0xd6a	; 0xd6a <interrupt0_set_callback>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     1bc:	84 e0       	ldi	r24, 0x04	; 4
     1be:	08 95       	ret
	if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_0)
	{
		interrupt0_set_callback (a_ptr);
	}
	else if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_1)
     1c0:	91 30       	cpi	r25, 0x01	; 1
     1c2:	29 f4       	brne	.+10     	; 0x1ce <Icu_setCallBack+0x22>
	{
		interrupt1_set_callback (a_ptr);
     1c4:	c9 01       	movw	r24, r18
     1c6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <interrupt1_set_callback>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     1ca:	84 e0       	ldi	r24, 0x04	; 4
     1cc:	08 95       	ret
	}
	else if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_1)
	{
		interrupt1_set_callback (a_ptr);
	}
	else if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_2)
     1ce:	92 30       	cpi	r25, 0x02	; 2
     1d0:	29 f4       	brne	.+10     	; 0x1dc <Icu_setCallBack+0x30>
	{
		interrupt2_set_callback (a_ptr);
     1d2:	c9 01       	movw	r24, r18
     1d4:	0e 94 c9 06 	call	0xd92	; 0xd92 <interrupt2_set_callback>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     1d8:	84 e0       	ldi	r24, 0x04	; 4
     1da:	08 95       	ret
	{
		interrupt2_set_callback (a_ptr);
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CHANNEL;
     1dc:	83 e0       	ldi	r24, 0x03	; 3
	}
	return enu_icu_error;
	
}
     1de:	08 95       	ret

000001e0 <Icu_setEdgeDetectionType>:
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setEdgeDetectionType(const enu_icu_edgetype_t enu_icu_edgetype)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	if (enu_icu_edgetype < ENU_ICU_MAX_EDGETYPE)
     1e0:	82 30       	cpi	r24, 0x02	; 2
     1e2:	90 f4       	brcc	.+36     	; 0x208 <Icu_setEdgeDetectionType+0x28>
	{
		if((gl_u8_interrupt_id < MAX_INTERRUPT_CHANNEL))
     1e4:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <gl_u8_interrupt_id>
     1e8:	23 30       	cpi	r18, 0x03	; 3
     1ea:	80 f4       	brcc	.+32     	; 0x20c <Icu_setEdgeDetectionType+0x2c>
		{
			if (enu_icu_edgetype == ENU_ICU_FALLING)
     1ec:	81 11       	cpse	r24, r1
     1ee:	06 c0       	rjmp	.+12     	; 0x1fc <Icu_setEdgeDetectionType+0x1c>
			{
				Init_external_interrupt(gl_u8_interrupt_id,ENU_FALLING);
     1f0:	62 e0       	ldi	r22, 0x02	; 2
     1f2:	82 2f       	mov	r24, r18
     1f4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Init_external_interrupt>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setEdgeDetectionType(const enu_icu_edgetype_t enu_icu_edgetype)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     1f8:	84 e0       	ldi	r24, 0x04	; 4
     1fa:	08 95       	ret
			{
				Init_external_interrupt(gl_u8_interrupt_id,ENU_FALLING);
			}
			else
			{
				Init_external_interrupt(gl_u8_interrupt_id,ENU_RISING);
     1fc:	63 e0       	ldi	r22, 0x03	; 3
     1fe:	82 2f       	mov	r24, r18
     200:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Init_external_interrupt>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setEdgeDetectionType(const enu_icu_edgetype_t enu_icu_edgetype)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     204:	84 e0       	ldi	r24, 0x04	; 4
     206:	08 95       	ret
			enu_icu_error = ENU_ICU_INVALID_INPUT;
		}
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_EDGETYP ;
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	08 95       	ret
				Init_external_interrupt(gl_u8_interrupt_id,ENU_RISING);
			}	
		}
		else
		{
			enu_icu_error = ENU_ICU_INVALID_INPUT;
     20c:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		enu_icu_error = ENU_ICU_INVALID_EDGETYP ;
	}
	return enu_icu_error;
}
     20e:	08 95       	ret

00000210 <Icu_getTimerValue>:
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	//uint16 u16_l_timer_value = 0;
	if(ptr_u16_timer_value != NULL_PTR)
     210:	00 97       	sbiw	r24, 0x00	; 0
     212:	c1 f0       	breq	.+48     	; 0x244 <Icu_getTimerValue+0x34>
	{
		if(gl_u8_timer_id < MAX_TIMER_CHANNEL)
     214:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     218:	23 30       	cpi	r18, 0x03	; 3
     21a:	b0 f4       	brcc	.+44     	; 0x248 <Icu_getTimerValue+0x38>
     21c:	bc 01       	movw	r22, r24
		{
			if(gl_u8_timer_id == TIMER_CHANNEL_0)
     21e:	21 11       	cpse	r18, r1
     220:	05 c0       	rjmp	.+10     	; 0x22c <Icu_getTimerValue+0x1c>
			{
				timer_getValue(ENU_TMR_CHANNEL_0,ptr_u16_timer_value);
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <timer_getValue>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     228:	84 e0       	ldi	r24, 0x04	; 4
     22a:	08 95       	ret
		{
			if(gl_u8_timer_id == TIMER_CHANNEL_0)
			{
				timer_getValue(ENU_TMR_CHANNEL_0,ptr_u16_timer_value);
			}
			else if(gl_u8_timer_id == TIMER_CHANNEL_1)
     22c:	21 30       	cpi	r18, 0x01	; 1
     22e:	29 f4       	brne	.+10     	; 0x23a <Icu_getTimerValue+0x2a>
			{
				timer_getValue(ENU_TMR_CHANNEL_1,ptr_u16_timer_value);
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <timer_getValue>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     236:	84 e0       	ldi	r24, 0x04	; 4
     238:	08 95       	ret
			{
				timer_getValue(ENU_TMR_CHANNEL_1,ptr_u16_timer_value);
			}
			else
			{
				timer_getValue(ENU_TMR_CHANNEL_2,ptr_u16_timer_value);			
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <timer_getValue>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     240:	84 e0       	ldi	r24, 0x04	; 4
     242:	08 95       	ret
			enu_icu_error = ENU_ICU_INVALID_CHANNEL;
		}
	} 
	else
	{
		enu_icu_error = ENU_ICU_INVALID_INPUT;
     244:	82 e0       	ldi	r24, 0x02	; 2
     246:	08 95       	ret
				timer_getValue(ENU_TMR_CHANNEL_2,ptr_u16_timer_value);			
			}
		}
		else
		{
			enu_icu_error = ENU_ICU_INVALID_CHANNEL;
     248:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		enu_icu_error = ENU_ICU_INVALID_INPUT;
	}
	return enu_icu_error;
}
     24a:	08 95       	ret

0000024c <Icu_clearTimerValue>:
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	if(gl_u8_timer_id < MAX_TIMER_CHANNEL)
     24c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     250:	83 30       	cpi	r24, 0x03	; 3
     252:	48 f5       	brcc	.+82     	; 0x2a6 <Icu_clearTimerValue+0x5a>
	{
		if(gl_u8_timer_id == TIMER_CHANNEL_0)
     254:	81 11       	cpse	r24, r1
     256:	0c c0       	rjmp	.+24     	; 0x270 <Icu_clearTimerValue+0x24>
		{
			//to do clear timer0 value
			timer_stop(ENU_TMR_CHANNEL_0);
     258:	0e 94 2d 0a 	call	0x145a	; 0x145a <timer_stop>
			timer_setInitialValue(ENU_TMR_CHANNEL_0,ZERO_VALUE);
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	0e 94 11 09 	call	0x1222	; 0x1222 <timer_setInitialValue>
			timer_start(ENU_TMR_CHANNEL_0);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 3c 09 	call	0x1278	; 0x1278 <timer_start>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     26c:	84 e0       	ldi	r24, 0x04	; 4
     26e:	08 95       	ret
			//to do clear timer0 value
			timer_stop(ENU_TMR_CHANNEL_0);
			timer_setInitialValue(ENU_TMR_CHANNEL_0,ZERO_VALUE);
			timer_start(ENU_TMR_CHANNEL_0);
		}
		else if(gl_u8_timer_id == TIMER_CHANNEL_1)
     270:	81 30       	cpi	r24, 0x01	; 1
     272:	61 f4       	brne	.+24     	; 0x28c <Icu_clearTimerValue+0x40>
		{
			//to do clear timer1 value
			timer_stop(ENU_TMR_CHANNEL_1);
     274:	0e 94 2d 0a 	call	0x145a	; 0x145a <timer_stop>
			timer_setInitialValue(ENU_TMR_CHANNEL_1,ZERO_VALUE);
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	70 e0       	ldi	r23, 0x00	; 0
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	0e 94 11 09 	call	0x1222	; 0x1222 <timer_setInitialValue>
			timer_start(ENU_TMR_CHANNEL_1);
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	0e 94 3c 09 	call	0x1278	; 0x1278 <timer_start>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     288:	84 e0       	ldi	r24, 0x04	; 4
     28a:	08 95       	ret
			timer_start(ENU_TMR_CHANNEL_1);
		}
		else
		{
			//to do clear timer2 value
			timer_stop(ENU_TMR_CHANNEL_2);
     28c:	82 e0       	ldi	r24, 0x02	; 2
     28e:	0e 94 2d 0a 	call	0x145a	; 0x145a <timer_stop>
			timer_setInitialValue(ENU_TMR_CHANNEL_2,ZERO_VALUE);
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	82 e0       	ldi	r24, 0x02	; 2
     298:	0e 94 11 09 	call	0x1222	; 0x1222 <timer_setInitialValue>
			timer_start(ENU_TMR_CHANNEL_2);
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	0e 94 3c 09 	call	0x1278	; 0x1278 <timer_start>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     2a2:	84 e0       	ldi	r24, 0x04	; 4
     2a4:	08 95       	ret
			timer_start(ENU_TMR_CHANNEL_2);
		}
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CHANNEL;
     2a6:	83 e0       	ldi	r24, 0x03	; 3
	}
	return enu_icu_error;
}
     2a8:	08 95       	ret

000002aa <LCD_sendCommand>:
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
     2aa:	cf 93       	push	r28
     2ac:	c8 2f       	mov	r28, r24
     2ae:	40 e0       	ldi	r20, 0x00	; 0
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	0e 94 a8 05 	call	0xb50	; 0xb50 <DIO_writePin>
     2b8:	40 e0       	ldi	r20, 0x00	; 0
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	0e 94 a8 05 	call	0xb50	; 0xb50 <DIO_writePin>
     2c2:	8f ec       	ldi	r24, 0xCF	; 207
     2c4:	97 e0       	ldi	r25, 0x07	; 7
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LCD_sendCommand+0x1c>
     2ca:	00 c0       	rjmp	.+0      	; 0x2cc <LCD_sendCommand+0x22>
     2cc:	00 00       	nop
     2ce:	41 e0       	ldi	r20, 0x01	; 1
     2d0:	62 e0       	ldi	r22, 0x02	; 2
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	0e 94 a8 05 	call	0xb50	; 0xb50 <DIO_writePin>
     2d8:	8f ec       	ldi	r24, 0xCF	; 207
     2da:	97 e0       	ldi	r25, 0x07	; 7
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_sendCommand+0x32>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCD_sendCommand+0x38>
     2e2:	00 00       	nop
     2e4:	6c 2f       	mov	r22, r28
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	0e 94 4e 06 	call	0xc9c	; 0xc9c <DIO_writePort>
     2ec:	8f ec       	ldi	r24, 0xCF	; 207
     2ee:	97 e0       	ldi	r25, 0x07	; 7
     2f0:	01 97       	sbiw	r24, 0x01	; 1
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCD_sendCommand+0x46>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCD_sendCommand+0x4c>
     2f6:	00 00       	nop
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	62 e0       	ldi	r22, 0x02	; 2
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	0e 94 a8 05 	call	0xb50	; 0xb50 <DIO_writePin>
     302:	8f ec       	ldi	r24, 0xCF	; 207
     304:	97 e0       	ldi	r25, 0x07	; 7
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <LCD_sendCommand+0x5c>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_sendCommand+0x62>
     30c:	00 00       	nop
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <LCD_init>:
     312:	41 e0       	ldi	r20, 0x01	; 1
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	0e 94 22 05 	call	0xa44	; 0xa44 <DIO_pinMode>
     31c:	41 e0       	ldi	r20, 0x01	; 1
     31e:	61 e0       	ldi	r22, 0x01	; 1
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	0e 94 22 05 	call	0xa44	; 0xa44 <DIO_pinMode>
     326:	41 e0       	ldi	r20, 0x01	; 1
     328:	62 e0       	ldi	r22, 0x02	; 2
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	0e 94 22 05 	call	0xa44	; 0xa44 <DIO_pinMode>
     330:	6f ef       	ldi	r22, 0xFF	; 255
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_portMode>
     338:	88 e3       	ldi	r24, 0x38	; 56
     33a:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_sendCommand>
     33e:	8c e0       	ldi	r24, 0x0C	; 12
     340:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_sendCommand>
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_sendCommand>
     34a:	08 95       	ret

0000034c <LCD_displayCharacter>:
     34c:	cf 93       	push	r28
     34e:	c8 2f       	mov	r28, r24
     350:	41 e0       	ldi	r20, 0x01	; 1
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	0e 94 a8 05 	call	0xb50	; 0xb50 <DIO_writePin>
     35a:	40 e0       	ldi	r20, 0x00	; 0
     35c:	61 e0       	ldi	r22, 0x01	; 1
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	0e 94 a8 05 	call	0xb50	; 0xb50 <DIO_writePin>
     364:	8f ec       	ldi	r24, 0xCF	; 207
     366:	97 e0       	ldi	r25, 0x07	; 7
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_displayCharacter+0x1c>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_displayCharacter+0x22>
     36e:	00 00       	nop
     370:	41 e0       	ldi	r20, 0x01	; 1
     372:	62 e0       	ldi	r22, 0x02	; 2
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	0e 94 a8 05 	call	0xb50	; 0xb50 <DIO_writePin>
     37a:	8f ec       	ldi	r24, 0xCF	; 207
     37c:	97 e0       	ldi	r25, 0x07	; 7
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <LCD_displayCharacter+0x32>
     382:	00 c0       	rjmp	.+0      	; 0x384 <LCD_displayCharacter+0x38>
     384:	00 00       	nop
     386:	6c 2f       	mov	r22, r28
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <DIO_writePort>
     38e:	8f ec       	ldi	r24, 0xCF	; 207
     390:	97 e0       	ldi	r25, 0x07	; 7
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <LCD_displayCharacter+0x46>
     396:	00 c0       	rjmp	.+0      	; 0x398 <LCD_displayCharacter+0x4c>
     398:	00 00       	nop
     39a:	40 e0       	ldi	r20, 0x00	; 0
     39c:	62 e0       	ldi	r22, 0x02	; 2
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	0e 94 a8 05 	call	0xb50	; 0xb50 <DIO_writePin>
     3a4:	8f ec       	ldi	r24, 0xCF	; 207
     3a6:	97 e0       	ldi	r25, 0x07	; 7
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCD_displayCharacter+0x5c>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <LCD_displayCharacter+0x62>
     3ae:	00 00       	nop
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <LCD_displayString>:
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	8c 01       	movw	r16, r24
     3bc:	c0 e0       	ldi	r28, 0x00	; 0
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <LCD_displayString+0x12>
     3c0:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_displayCharacter>
     3c4:	cf 5f       	subi	r28, 0xFF	; 255
     3c6:	f8 01       	movw	r30, r16
     3c8:	ec 0f       	add	r30, r28
     3ca:	f1 1d       	adc	r31, r1
     3cc:	80 81       	ld	r24, Z
     3ce:	81 11       	cpse	r24, r1
     3d0:	f7 cf       	rjmp	.-18     	; 0x3c0 <LCD_displayString+0xc>
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	08 95       	ret

000003da <LCD_moveCursor>:
     3da:	81 30       	cpi	r24, 0x01	; 1
     3dc:	39 f0       	breq	.+14     	; 0x3ec <LCD_moveCursor+0x12>
     3de:	58 f0       	brcs	.+22     	; 0x3f6 <LCD_moveCursor+0x1c>
     3e0:	82 30       	cpi	r24, 0x02	; 2
     3e2:	31 f0       	breq	.+12     	; 0x3f0 <LCD_moveCursor+0x16>
     3e4:	83 30       	cpi	r24, 0x03	; 3
     3e6:	31 f0       	breq	.+12     	; 0x3f4 <LCD_moveCursor+0x1a>
     3e8:	61 e0       	ldi	r22, 0x01	; 1
     3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <LCD_moveCursor+0x1c>
     3ec:	60 5c       	subi	r22, 0xC0	; 192
     3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <LCD_moveCursor+0x1c>
     3f0:	60 5f       	subi	r22, 0xF0	; 240
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <LCD_moveCursor+0x1c>
     3f4:	60 5b       	subi	r22, 0xB0	; 176
     3f6:	86 2f       	mov	r24, r22
     3f8:	80 68       	ori	r24, 0x80	; 128
     3fa:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_sendCommand>
     3fe:	08 95       	ret

00000400 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
     408:	60 97       	sbiw	r28, 0x10	; 16
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	de bf       	out	0x3e, r29	; 62
     410:	0f be       	out	0x3f, r0	; 63
     412:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
     414:	4a e0       	ldi	r20, 0x0A	; 10
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	be 01       	movw	r22, r28
     41a:	6f 5f       	subi	r22, 0xFF	; 255
     41c:	7f 4f       	sbci	r23, 0xFF	; 255
     41e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <itoa>
   LCD_displayString(buff); /* Display the string */
     422:	ce 01       	movw	r24, r28
     424:	01 96       	adiw	r24, 0x01	; 1
     426:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_displayString>
}
     42a:	60 96       	adiw	r28, 0x10	; 16
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <timer_clk_map>:
				timer_start(gl_u8_timer_id);
				gl_bo_overFlow_flag[gl_u8_timer_id] = FALSE;
			}
		}
	}
}
     43c:	80 32       	cpi	r24, 0x20	; 32
     43e:	91 05       	cpc	r25, r1
     440:	e1 f0       	breq	.+56     	; 0x47a <timer_clk_map+0x3e>
     442:	38 f4       	brcc	.+14     	; 0x452 <timer_clk_map+0x16>
     444:	81 30       	cpi	r24, 0x01	; 1
     446:	91 05       	cpc	r25, r1
     448:	21 f1       	breq	.+72     	; 0x492 <timer_clk_map+0x56>
     44a:	98 f0       	brcs	.+38     	; 0x472 <timer_clk_map+0x36>
     44c:	08 97       	sbiw	r24, 0x08	; 8
     44e:	99 f0       	breq	.+38     	; 0x476 <timer_clk_map+0x3a>
     450:	1e c0       	rjmp	.+60     	; 0x48e <timer_clk_map+0x52>
     452:	80 38       	cpi	r24, 0x80	; 128
     454:	91 05       	cpc	r25, r1
     456:	a9 f0       	breq	.+42     	; 0x482 <timer_clk_map+0x46>
     458:	20 f4       	brcc	.+8      	; 0x462 <timer_clk_map+0x26>
     45a:	80 34       	cpi	r24, 0x40	; 64
     45c:	91 05       	cpc	r25, r1
     45e:	79 f0       	breq	.+30     	; 0x47e <timer_clk_map+0x42>
     460:	16 c0       	rjmp	.+44     	; 0x48e <timer_clk_map+0x52>
     462:	81 15       	cp	r24, r1
     464:	21 e0       	ldi	r18, 0x01	; 1
     466:	92 07       	cpc	r25, r18
     468:	71 f0       	breq	.+28     	; 0x486 <timer_clk_map+0x4a>
     46a:	81 15       	cp	r24, r1
     46c:	94 40       	sbci	r25, 0x04	; 4
     46e:	69 f0       	breq	.+26     	; 0x48a <timer_clk_map+0x4e>
     470:	0e c0       	rjmp	.+28     	; 0x48e <timer_clk_map+0x52>
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	08 95       	ret
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	08 95       	ret
     47a:	83 e0       	ldi	r24, 0x03	; 3
     47c:	08 95       	ret
     47e:	84 e0       	ldi	r24, 0x04	; 4
     480:	08 95       	ret
     482:	85 e0       	ldi	r24, 0x05	; 5
     484:	08 95       	ret
     486:	86 e0       	ldi	r24, 0x06	; 6
     488:	08 95       	ret
     48a:	87 e0       	ldi	r24, 0x07	; 7
     48c:	08 95       	ret
     48e:	8a e0       	ldi	r24, 0x0A	; 10
     490:	08 95       	ret
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	08 95       	ret

00000496 <delay_us>:
void (*gl_fun_ptr_arr[MAX_TIMER_ID]) (void)			= {NULL_PTR};	

/*============= FUNCTION PROTOTYPE =============*/

enu_time_error_t delay_us	(uint8 u8_timer_id,float32 f32_time_delay)
{
     496:	8f 92       	push	r8
     498:	9f 92       	push	r9
     49a:	af 92       	push	r10
     49c:	bf 92       	push	r11
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
     4b0:	2e 97       	sbiw	r28, 0x0e	; 14
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
	BOOLEAN bo_l_return_state		= FALSE ;
	uint16 u16_l_prescale			= ZERO_VALUE;
     4bc:	1a 82       	std	Y+2, r1	; 0x02
     4be:	19 82       	std	Y+1, r1	; 0x01
	uint16 u16_l_initialValue		= ZERO_VALUE;
     4c0:	1c 82       	std	Y+4, r1	; 0x04
     4c2:	1b 82       	std	Y+3, r1	; 0x03
	float32 f32_l_overFlows			= ZERO_VALUE;
	uint8 u8_l_flag_status			= ZERO_VALUE;
     4c4:	1d 82       	std	Y+5, r1	; 0x05
	uint16 u16_l_realPart			= ZERO_VALUE;
	float32 f32_l_reminderPart		= ZERO_VALUE;
	str_tmr_config_t str_tmr_config ;
	str_tmr_config.enu_tmr_channel_id		= u8_timer_id;
     4c6:	8e 83       	std	Y+6, r24	; 0x06
	str_tmr_config.enu_tmr_mode				= ENU_TMR_NORMAL_MODE;
     4c8:	1f 82       	std	Y+7, r1	; 0x07
	str_tmr_config.enu_tmr_cmp_mode			= ENU_TMR_CMP_DISCONNECT;
     4ca:	19 86       	std	Y+9, r1	; 0x09
	str_tmr_config.enu_tmr_interrupt_state	= ENU_TMR_INT_DISABLE;
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	98 87       	std	Y+8, r25	; 0x08
	str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
     4d0:	1e 86       	std	Y+14, r1	; 0x0e
     4d2:	1d 86       	std	Y+13, r1	; 0x0d
	
	if(u8_timer_id < MAX_ENU_TMR_CHANNEL)
     4d4:	83 30       	cpi	r24, 0x03	; 3
     4d6:	08 f0       	brcs	.+2      	; 0x4da <delay_us+0x44>
     4d8:	d5 c0       	rjmp	.+426    	; 0x684 <delay_us+0x1ee>
     4da:	4a 01       	movw	r8, r20
     4dc:	5b 01       	movw	r10, r22
     4de:	d8 2e       	mov	r13, r24
	{
		//compare delay with max timer value and if delay < max timer value, find the best prescaler value
		bo_l_return_state = calc_prescaler(f32_time_delay,u8_timer_id,ENU_MICRO_SECOND,&u16_l_prescale);
     4e0:	8e 01       	movw	r16, r28
     4e2:	0f 5f       	subi	r16, 0xFF	; 255
     4e4:	1f 4f       	sbci	r17, 0xFF	; 255
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	48 2f       	mov	r20, r24
     4ea:	c5 01       	movw	r24, r10
     4ec:	b4 01       	movw	r22, r8
     4ee:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <calc_prescaler>
		if(bo_l_return_state == TRUE)
     4f2:	81 30       	cpi	r24, 0x01	; 1
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <delay_us+0x62>
     4f6:	c8 c0       	rjmp	.+400    	; 0x688 <delay_us+0x1f2>
		{
			if (u16_l_prescale != NO_FIT_PRESCALER)
     4f8:	49 81       	ldd	r20, Y+1	; 0x01
     4fa:	5a 81       	ldd	r21, Y+2	; 0x02
     4fc:	4c 3d       	cpi	r20, 0xDC	; 220
     4fe:	85 e0       	ldi	r24, 0x05	; 5
     500:	58 07       	cpc	r21, r24
     502:	29 f1       	breq	.+74     	; 0x54e <delay_us+0xb8>
			{
				//use timer without overflows
				calc_initialValue(u8_timer_id,ENU_MICRO_SECOND,u16_l_prescale,f32_time_delay,&u16_l_initialValue);
     504:	ce 01       	movw	r24, r28
     506:	03 96       	adiw	r24, 0x03	; 3
     508:	7c 01       	movw	r14, r24
     50a:	95 01       	movw	r18, r10
     50c:	84 01       	movw	r16, r8
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	8d 2d       	mov	r24, r13
     512:	0e 94 41 10 	call	0x2082	; 0x2082 <calc_initialValue>
				str_tmr_config.enu_tmr_clk				= timer_clk_map(u16_l_prescale);
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	9a 81       	ldd	r25, Y+2	; 0x02
     51a:	0e 94 1e 02 	call	0x43c	; 0x43c <timer_clk_map>
     51e:	8a 87       	std	Y+10, r24	; 0x0a
				str_tmr_config.u16_tmr_initial_value	= u16_l_initialValue;
     520:	8b 81       	ldd	r24, Y+3	; 0x03
     522:	9c 81       	ldd	r25, Y+4	; 0x04
     524:	9c 87       	std	Y+12, r25	; 0x0c
     526:	8b 87       	std	Y+11, r24	; 0x0b
				timer_init(&str_tmr_config);
     528:	ce 01       	movw	r24, r28
     52a:	06 96       	adiw	r24, 0x06	; 6
     52c:	0e 94 52 07 	call	0xea4	; 0xea4 <timer_init>
				timer_start(u8_timer_id);
     530:	8d 2d       	mov	r24, r13
     532:	0e 94 3c 09 	call	0x1278	; 0x1278 <timer_start>
				//wait for timer_flag_notification
				do 
				{
					timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
     536:	ae 01       	movw	r20, r28
     538:	4b 5f       	subi	r20, 0xFB	; 251
     53a:	5f 4f       	sbci	r21, 0xFF	; 255
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	8d 2d       	mov	r24, r13
     540:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <timer_flag_notification>
				} while (u8_l_flag_status == LOGIC_FALSE);
     544:	8d 81       	ldd	r24, Y+5	; 0x05
     546:	88 23       	and	r24, r24
     548:	b1 f3       	breq	.-20     	; 0x536 <delay_us+0xa0>

/*============= FUNCTION PROTOTYPE =============*/

enu_time_error_t delay_us	(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
     54a:	83 e0       	ldi	r24, 0x03	; 3
     54c:	a0 c0       	rjmp	.+320    	; 0x68e <delay_us+0x1f8>
				} while (u8_l_flag_status == LOGIC_FALSE);
				
			}
			else
			{
				str_tmr_config.enu_tmr_clk				= timer_clk_map(P_1024);
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	94 e0       	ldi	r25, 0x04	; 4
     552:	0e 94 1e 02 	call	0x43c	; 0x43c <timer_clk_map>
     556:	8a 87       	std	Y+10, r24	; 0x0a
				str_tmr_config.u16_tmr_initial_value	= ZERO_VALUE;
     558:	1c 86       	std	Y+12, r1	; 0x0c
     55a:	1b 86       	std	Y+11, r1	; 0x0b
				//calculate number of overflows
				if(u8_timer_id == ENU_TMR_CHANNEL_0 || u8_timer_id == ENU_TMR_CHANNEL_2)
     55c:	dd 20       	and	r13, r13
     55e:	19 f0       	breq	.+6      	; 0x566 <delay_us+0xd0>
     560:	92 e0       	ldi	r25, 0x02	; 2
     562:	d9 12       	cpse	r13, r25
     564:	20 c0       	rjmp	.+64     	; 0x5a6 <delay_us+0x110>
				{
					f32_l_overFlows = f32_time_delay / MAX_8_BIT_DELAY_US(P_1024);
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	58 e3       	ldi	r21, 0x38	; 56
     56e:	c5 01       	movw	r24, r10
     570:	b4 01       	movw	r22, r8
     572:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
     576:	4b 01       	movw	r8, r22
     578:	5c 01       	movw	r10, r24
					u16_l_realPart = (uint16)f32_l_overFlows;
     57a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
     57e:	8b 01       	movw	r16, r22
					f32_l_reminderPart = (f32_l_overFlows - u16_l_realPart) * MAX_8_BIT_DELAY_US(P_1024);
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__floatunsisf>
     588:	9b 01       	movw	r18, r22
     58a:	ac 01       	movw	r20, r24
     58c:	c5 01       	movw	r24, r10
     58e:	b4 01       	movw	r22, r8
     590:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	40 e0       	ldi	r20, 0x00	; 0
     59a:	57 e4       	ldi	r21, 0x47	; 71
     59c:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
     5a0:	4b 01       	movw	r8, r22
     5a2:	5c 01       	movw	r10, r24
     5a4:	33 c0       	rjmp	.+102    	; 0x60c <delay_us+0x176>
				}
				else
				{
					f32_l_overFlows = f32_time_delay / MAX_16_BIT_DELAY_US(P_1024);
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	54 e3       	ldi	r21, 0x34	; 52
     5ae:	c5 01       	movw	r24, r10
     5b0:	b4 01       	movw	r22, r8
     5b2:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
     5b6:	4b 01       	movw	r8, r22
     5b8:	5c 01       	movw	r10, r24
					u16_l_realPart = (uint16)f32_l_overFlows;
     5ba:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
     5be:	8b 01       	movw	r16, r22
					f32_l_reminderPart =((f32_l_overFlows - u16_l_realPart) * MAX_16_BIT_DELAY_US(P_1024));
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__floatunsisf>
     5c8:	9b 01       	movw	r18, r22
     5ca:	ac 01       	movw	r20, r24
     5cc:	c5 01       	movw	r24, r10
     5ce:	b4 01       	movw	r22, r8
     5d0:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	5b e4       	ldi	r21, 0x4B	; 75
     5dc:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
     5e0:	4b 01       	movw	r8, r22
     5e2:	5c 01       	movw	r10, r24
     5e4:	13 c0       	rjmp	.+38     	; 0x60c <delay_us+0x176>
				}
				while (u16_l_realPart != ZERO_VALUE)
				{
					timer_init(&str_tmr_config);
     5e6:	ce 01       	movw	r24, r28
     5e8:	06 96       	adiw	r24, 0x06	; 6
     5ea:	0e 94 52 07 	call	0xea4	; 0xea4 <timer_init>
					timer_start(u8_timer_id);
     5ee:	8d 2d       	mov	r24, r13
     5f0:	0e 94 3c 09 	call	0x1278	; 0x1278 <timer_start>
					do 
					{
						timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
     5f4:	ae 01       	movw	r20, r28
     5f6:	4b 5f       	subi	r20, 0xFB	; 251
     5f8:	5f 4f       	sbci	r21, 0xFF	; 255
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	8d 2d       	mov	r24, r13
     5fe:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <timer_flag_notification>
					}while (u8_l_flag_status == LOGIC_FALSE);
     602:	9d 81       	ldd	r25, Y+5	; 0x05
     604:	99 23       	and	r25, r25
     606:	b1 f3       	breq	.-20     	; 0x5f4 <delay_us+0x15e>
					u16_l_realPart--;
     608:	01 50       	subi	r16, 0x01	; 1
     60a:	11 09       	sbc	r17, r1
				{
					f32_l_overFlows = f32_time_delay / MAX_16_BIT_DELAY_US(P_1024);
					u16_l_realPart = (uint16)f32_l_overFlows;
					f32_l_reminderPart =((f32_l_overFlows - u16_l_realPart) * MAX_16_BIT_DELAY_US(P_1024));
				}
				while (u16_l_realPart != ZERO_VALUE)
     60c:	01 15       	cp	r16, r1
     60e:	11 05       	cpc	r17, r1
     610:	51 f7       	brne	.-44     	; 0x5e6 <delay_us+0x150>
					{
						timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
					}while (u8_l_flag_status == LOGIC_FALSE);
					u16_l_realPart--;
				}
				if(f32_l_reminderPart > ZERO_VALUE)
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	a9 01       	movw	r20, r18
     618:	c5 01       	movw	r24, r10
     61a:	b4 01       	movw	r22, r8
     61c:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__gesf2>
     620:	18 16       	cp	r1, r24
     622:	a4 f5       	brge	.+104    	; 0x68c <delay_us+0x1f6>
				{
					calc_prescaler(f32_l_reminderPart,u8_timer_id,ENU_MICRO_SECOND,&u16_l_prescale);
     624:	8e 01       	movw	r16, r28
     626:	0f 5f       	subi	r16, 0xFF	; 255
     628:	1f 4f       	sbci	r17, 0xFF	; 255
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	4d 2d       	mov	r20, r13
     62e:	c5 01       	movw	r24, r10
     630:	b4 01       	movw	r22, r8
     632:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <calc_prescaler>
					calc_initialValue(u8_timer_id,ENU_MICRO_SECOND,u16_l_prescale,f32_l_reminderPart,&u16_l_initialValue);
     636:	49 81       	ldd	r20, Y+1	; 0x01
     638:	5a 81       	ldd	r21, Y+2	; 0x02
     63a:	ce 01       	movw	r24, r28
     63c:	03 96       	adiw	r24, 0x03	; 3
     63e:	7c 01       	movw	r14, r24
     640:	95 01       	movw	r18, r10
     642:	84 01       	movw	r16, r8
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	8d 2d       	mov	r24, r13
     648:	0e 94 41 10 	call	0x2082	; 0x2082 <calc_initialValue>
					str_tmr_config.enu_tmr_clk				= timer_clk_map(u16_l_prescale);
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	9a 81       	ldd	r25, Y+2	; 0x02
     650:	0e 94 1e 02 	call	0x43c	; 0x43c <timer_clk_map>
     654:	8a 87       	std	Y+10, r24	; 0x0a
					str_tmr_config.u16_tmr_initial_value	= u16_l_initialValue;
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	9c 81       	ldd	r25, Y+4	; 0x04
     65a:	9c 87       	std	Y+12, r25	; 0x0c
     65c:	8b 87       	std	Y+11, r24	; 0x0b
					timer_init(&str_tmr_config);
     65e:	ce 01       	movw	r24, r28
     660:	06 96       	adiw	r24, 0x06	; 6
     662:	0e 94 52 07 	call	0xea4	; 0xea4 <timer_init>
					timer_start(u8_timer_id);
     666:	8d 2d       	mov	r24, r13
     668:	0e 94 3c 09 	call	0x1278	; 0x1278 <timer_start>
					//wait for timer_flag_notification
					do 
					{
						timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
     66c:	ae 01       	movw	r20, r28
     66e:	4b 5f       	subi	r20, 0xFB	; 251
     670:	5f 4f       	sbci	r21, 0xFF	; 255
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	8d 2d       	mov	r24, r13
     676:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <timer_flag_notification>
					} while (u8_l_flag_status == LOGIC_FALSE);
     67a:	8d 81       	ldd	r24, Y+5	; 0x05
     67c:	88 23       	and	r24, r24
     67e:	b1 f3       	breq	.-20     	; 0x66c <delay_us+0x1d6>

/*============= FUNCTION PROTOTYPE =============*/

enu_time_error_t delay_us	(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
     680:	83 e0       	ldi	r24, 0x03	; 3
     682:	05 c0       	rjmp	.+10     	; 0x68e <delay_us+0x1f8>
			enu_time_error = ENU_TIMER_INVALID_ID;
		}		
	}
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	03 c0       	rjmp	.+6      	; 0x68e <delay_us+0x1f8>
				}
			}
		}
		else
		{
			enu_time_error = ENU_TIMER_INVALID_ID;
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	01 c0       	rjmp	.+2      	; 0x68e <delay_us+0x1f8>

/*============= FUNCTION PROTOTYPE =============*/

enu_time_error_t delay_us	(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
     68c:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
	}
	return enu_time_error;
}
     68e:	2e 96       	adiw	r28, 0x0e	; 14
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	1f 91       	pop	r17
     6a0:	0f 91       	pop	r16
     6a2:	ff 90       	pop	r15
     6a4:	ef 90       	pop	r14
     6a6:	df 90       	pop	r13
     6a8:	bf 90       	pop	r11
     6aa:	af 90       	pop	r10
     6ac:	9f 90       	pop	r9
     6ae:	8f 90       	pop	r8
     6b0:	08 95       	ret

000006b2 <delay_ms>:

enu_time_error_t delay_ms	(uint8 u8_timer_id,float32 f32_time_delay)
{
     6b2:	8f 92       	push	r8
     6b4:	9f 92       	push	r9
     6b6:	af 92       	push	r10
     6b8:	bf 92       	push	r11
     6ba:	df 92       	push	r13
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	2e 97       	sbiw	r28, 0x0e	; 14
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
	BOOLEAN bo_l_return_state		= FALSE ;
	uint16 u16_l_prescale			= ZERO_VALUE;
     6d8:	1a 82       	std	Y+2, r1	; 0x02
     6da:	19 82       	std	Y+1, r1	; 0x01
	uint16 u16_l_initialValue		= ZERO_VALUE;
     6dc:	1c 82       	std	Y+4, r1	; 0x04
     6de:	1b 82       	std	Y+3, r1	; 0x03
	float32 f32_l_overFlows			= ZERO_VALUE;
	uint8 u8_l_flag_status			= ZERO_VALUE;
     6e0:	1d 82       	std	Y+5, r1	; 0x05
	uint16 u16_l_realPart			= ZERO_VALUE;
	float32 f32_l_reminderPart		= ZERO_VALUE;
	str_tmr_config_t str_tmr_config ;
	str_tmr_config.enu_tmr_channel_id		= u8_timer_id;
     6e2:	8e 83       	std	Y+6, r24	; 0x06
	str_tmr_config.enu_tmr_mode				= ENU_TMR_NORMAL_MODE;
     6e4:	1f 82       	std	Y+7, r1	; 0x07
	str_tmr_config.enu_tmr_cmp_mode			= ENU_TMR_CMP_DISCONNECT;
     6e6:	19 86       	std	Y+9, r1	; 0x09
	str_tmr_config.enu_tmr_interrupt_state	= ENU_TMR_INT_DISABLE;
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	98 87       	std	Y+8, r25	; 0x08
	str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
     6ec:	1e 86       	std	Y+14, r1	; 0x0e
     6ee:	1d 86       	std	Y+13, r1	; 0x0d
	
	if(u8_timer_id < MAX_ENU_TMR_CHANNEL)
     6f0:	83 30       	cpi	r24, 0x03	; 3
     6f2:	08 f0       	brcs	.+2      	; 0x6f6 <delay_ms+0x44>
     6f4:	d5 c0       	rjmp	.+426    	; 0x8a0 <__stack+0x41>
     6f6:	4a 01       	movw	r8, r20
     6f8:	5b 01       	movw	r10, r22
     6fa:	d8 2e       	mov	r13, r24
	{
		//compare delay with max timer value and if delay < max timer value, find the best prescaler value
		bo_l_return_state = calc_prescaler(f32_time_delay,u8_timer_id,ENU_MILLI_SECOND,&u16_l_prescale);
     6fc:	8e 01       	movw	r16, r28
     6fe:	0f 5f       	subi	r16, 0xFF	; 255
     700:	1f 4f       	sbci	r17, 0xFF	; 255
     702:	21 e0       	ldi	r18, 0x01	; 1
     704:	48 2f       	mov	r20, r24
     706:	c5 01       	movw	r24, r10
     708:	b4 01       	movw	r22, r8
     70a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <calc_prescaler>
		if(bo_l_return_state == TRUE)
     70e:	81 30       	cpi	r24, 0x01	; 1
     710:	09 f0       	breq	.+2      	; 0x714 <delay_ms+0x62>
     712:	c8 c0       	rjmp	.+400    	; 0x8a4 <__stack+0x45>
		{
			if (u16_l_prescale != NO_FIT_PRESCALER)
     714:	49 81       	ldd	r20, Y+1	; 0x01
     716:	5a 81       	ldd	r21, Y+2	; 0x02
     718:	4c 3d       	cpi	r20, 0xDC	; 220
     71a:	85 e0       	ldi	r24, 0x05	; 5
     71c:	58 07       	cpc	r21, r24
     71e:	29 f1       	breq	.+74     	; 0x76a <delay_ms+0xb8>
			{
				//use timer without overflows
				calc_initialValue(u8_timer_id,ENU_MILLI_SECOND,u16_l_prescale,f32_time_delay,&u16_l_initialValue);
     720:	ce 01       	movw	r24, r28
     722:	03 96       	adiw	r24, 0x03	; 3
     724:	7c 01       	movw	r14, r24
     726:	95 01       	movw	r18, r10
     728:	84 01       	movw	r16, r8
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	8d 2d       	mov	r24, r13
     72e:	0e 94 41 10 	call	0x2082	; 0x2082 <calc_initialValue>
				str_tmr_config.enu_tmr_clk				= timer_clk_map(u16_l_prescale);
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	9a 81       	ldd	r25, Y+2	; 0x02
     736:	0e 94 1e 02 	call	0x43c	; 0x43c <timer_clk_map>
     73a:	8a 87       	std	Y+10, r24	; 0x0a
				str_tmr_config.u16_tmr_initial_value	= u16_l_initialValue;
     73c:	8b 81       	ldd	r24, Y+3	; 0x03
     73e:	9c 81       	ldd	r25, Y+4	; 0x04
     740:	9c 87       	std	Y+12, r25	; 0x0c
     742:	8b 87       	std	Y+11, r24	; 0x0b
				timer_init(&str_tmr_config);
     744:	ce 01       	movw	r24, r28
     746:	06 96       	adiw	r24, 0x06	; 6
     748:	0e 94 52 07 	call	0xea4	; 0xea4 <timer_init>
				timer_start(u8_timer_id);
     74c:	8d 2d       	mov	r24, r13
     74e:	0e 94 3c 09 	call	0x1278	; 0x1278 <timer_start>
				//wait for timer_flag_notification
				do 
				{
					timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
     752:	ae 01       	movw	r20, r28
     754:	4b 5f       	subi	r20, 0xFB	; 251
     756:	5f 4f       	sbci	r21, 0xFF	; 255
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	8d 2d       	mov	r24, r13
     75c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <timer_flag_notification>
				} while (u8_l_flag_status == LOGIC_FALSE);
     760:	8d 81       	ldd	r24, Y+5	; 0x05
     762:	88 23       	and	r24, r24
     764:	b1 f3       	breq	.-20     	; 0x752 <delay_ms+0xa0>
	return enu_time_error;
}

enu_time_error_t delay_ms	(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	a0 c0       	rjmp	.+320    	; 0x8aa <__stack+0x4b>
				} while (u8_l_flag_status == LOGIC_FALSE);
				
			}
			else
			{
				str_tmr_config.enu_tmr_clk				= timer_clk_map(P_1024);
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	94 e0       	ldi	r25, 0x04	; 4
     76e:	0e 94 1e 02 	call	0x43c	; 0x43c <timer_clk_map>
     772:	8a 87       	std	Y+10, r24	; 0x0a
				str_tmr_config.u16_tmr_initial_value	= ZERO_VALUE;
     774:	1c 86       	std	Y+12, r1	; 0x0c
     776:	1b 86       	std	Y+11, r1	; 0x0b
				//calculate number of overflows
				if(u8_timer_id == ENU_TMR_CHANNEL_0 || u8_timer_id == ENU_TMR_CHANNEL_2)
     778:	dd 20       	and	r13, r13
     77a:	19 f0       	breq	.+6      	; 0x782 <delay_ms+0xd0>
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	d9 12       	cpse	r13, r25
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <delay_ms+0x110>
				{
					f32_l_overFlows = f32_time_delay / MAX_8_BIT_DELAY_MS(P_1024);
     782:	2f e6       	ldi	r18, 0x6F	; 111
     784:	32 e1       	ldi	r19, 0x12	; 18
     786:	43 e0       	ldi	r20, 0x03	; 3
     788:	52 e4       	ldi	r21, 0x42	; 66
     78a:	c5 01       	movw	r24, r10
     78c:	b4 01       	movw	r22, r8
     78e:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
     792:	4b 01       	movw	r8, r22
     794:	5c 01       	movw	r10, r24
					u16_l_realPart = (uint16)f32_l_overFlows;
     796:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
     79a:	8b 01       	movw	r16, r22
					f32_l_reminderPart = (f32_l_overFlows - u16_l_realPart) * MAX_8_BIT_DELAY_MS(P_1024);
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__floatunsisf>
     7a4:	9b 01       	movw	r18, r22
     7a6:	ac 01       	movw	r20, r24
     7a8:	c5 01       	movw	r24, r10
     7aa:	b4 01       	movw	r22, r8
     7ac:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
     7b0:	2f e6       	ldi	r18, 0x6F	; 111
     7b2:	32 e1       	ldi	r19, 0x12	; 18
     7b4:	43 e0       	ldi	r20, 0x03	; 3
     7b6:	52 e4       	ldi	r21, 0x42	; 66
     7b8:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
     7bc:	4b 01       	movw	r8, r22
     7be:	5c 01       	movw	r10, r24
     7c0:	33 c0       	rjmp	.+102    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
				}
				else
				{
					f32_l_overFlows = f32_time_delay / MAX_16_BIT_DELAY_MS(P_1024);
     7c2:	2f e6       	ldi	r18, 0x6F	; 111
     7c4:	32 e1       	ldi	r19, 0x12	; 18
     7c6:	43 e0       	ldi	r20, 0x03	; 3
     7c8:	56 e4       	ldi	r21, 0x46	; 70
     7ca:	c5 01       	movw	r24, r10
     7cc:	b4 01       	movw	r22, r8
     7ce:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
     7d2:	4b 01       	movw	r8, r22
     7d4:	5c 01       	movw	r10, r24
					u16_l_realPart = (uint16)f32_l_overFlows;
     7d6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
     7da:	8b 01       	movw	r16, r22
					f32_l_reminderPart =((f32_l_overFlows - u16_l_realPart) * MAX_16_BIT_DELAY_MS(P_1024));
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__floatunsisf>
     7e4:	9b 01       	movw	r18, r22
     7e6:	ac 01       	movw	r20, r24
     7e8:	c5 01       	movw	r24, r10
     7ea:	b4 01       	movw	r22, r8
     7ec:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
     7f0:	2f e6       	ldi	r18, 0x6F	; 111
     7f2:	32 e1       	ldi	r19, 0x12	; 18
     7f4:	43 e0       	ldi	r20, 0x03	; 3
     7f6:	56 e4       	ldi	r21, 0x46	; 70
     7f8:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
     7fc:	4b 01       	movw	r8, r22
     7fe:	5c 01       	movw	r10, r24
     800:	13 c0       	rjmp	.+38     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
				}
				while (u16_l_realPart != ZERO_VALUE)
				{
					timer_init(&str_tmr_config);
     802:	ce 01       	movw	r24, r28
     804:	06 96       	adiw	r24, 0x06	; 6
     806:	0e 94 52 07 	call	0xea4	; 0xea4 <timer_init>
					timer_start(u8_timer_id);
     80a:	8d 2d       	mov	r24, r13
     80c:	0e 94 3c 09 	call	0x1278	; 0x1278 <timer_start>
					do 
					{
						timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
     810:	ae 01       	movw	r20, r28
     812:	4b 5f       	subi	r20, 0xFB	; 251
     814:	5f 4f       	sbci	r21, 0xFF	; 255
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	8d 2d       	mov	r24, r13
     81a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <timer_flag_notification>
					}while (u8_l_flag_status == LOGIC_FALSE);
     81e:	9d 81       	ldd	r25, Y+5	; 0x05
     820:	99 23       	and	r25, r25
     822:	b1 f3       	breq	.-20     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
					u16_l_realPart--;
     824:	01 50       	subi	r16, 0x01	; 1
     826:	11 09       	sbc	r17, r1
				{
					f32_l_overFlows = f32_time_delay / MAX_16_BIT_DELAY_MS(P_1024);
					u16_l_realPart = (uint16)f32_l_overFlows;
					f32_l_reminderPart =((f32_l_overFlows - u16_l_realPart) * MAX_16_BIT_DELAY_MS(P_1024));
				}
				while (u16_l_realPart != ZERO_VALUE)
     828:	01 15       	cp	r16, r1
     82a:	11 05       	cpc	r17, r1
     82c:	51 f7       	brne	.-44     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
					{
						timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
					}while (u8_l_flag_status == LOGIC_FALSE);
					u16_l_realPart--;
				}
				if(f32_l_reminderPart > ZERO_VALUE)
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	a9 01       	movw	r20, r18
     834:	c5 01       	movw	r24, r10
     836:	b4 01       	movw	r22, r8
     838:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__gesf2>
     83c:	18 16       	cp	r1, r24
     83e:	a4 f5       	brge	.+104    	; 0x8a8 <__stack+0x49>
				{
					calc_prescaler(f32_l_reminderPart,u8_timer_id,ENU_MILLI_SECOND,&u16_l_prescale);
     840:	8e 01       	movw	r16, r28
     842:	0f 5f       	subi	r16, 0xFF	; 255
     844:	1f 4f       	sbci	r17, 0xFF	; 255
     846:	21 e0       	ldi	r18, 0x01	; 1
     848:	4d 2d       	mov	r20, r13
     84a:	c5 01       	movw	r24, r10
     84c:	b4 01       	movw	r22, r8
     84e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <calc_prescaler>
					calc_initialValue(u8_timer_id,ENU_MILLI_SECOND,u16_l_prescale,f32_l_reminderPart,&u16_l_initialValue);
     852:	49 81       	ldd	r20, Y+1	; 0x01
     854:	5a 81       	ldd	r21, Y+2	; 0x02
     856:	ce 01       	movw	r24, r28
     858:	03 96       	adiw	r24, 0x03	; 3
     85a:	7c 01       	movw	r14, r24
     85c:	95 01       	movw	r18, r10
     85e:	84 01       	movw	r16, r8
     860:	61 e0       	ldi	r22, 0x01	; 1
     862:	8d 2d       	mov	r24, r13
     864:	0e 94 41 10 	call	0x2082	; 0x2082 <calc_initialValue>
					str_tmr_config.enu_tmr_clk				= timer_clk_map(u16_l_prescale);
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	9a 81       	ldd	r25, Y+2	; 0x02
     86c:	0e 94 1e 02 	call	0x43c	; 0x43c <timer_clk_map>
     870:	8a 87       	std	Y+10, r24	; 0x0a
					str_tmr_config.u16_tmr_initial_value	= u16_l_initialValue;
     872:	8b 81       	ldd	r24, Y+3	; 0x03
     874:	9c 81       	ldd	r25, Y+4	; 0x04
     876:	9c 87       	std	Y+12, r25	; 0x0c
     878:	8b 87       	std	Y+11, r24	; 0x0b
					timer_init(&str_tmr_config);
     87a:	ce 01       	movw	r24, r28
     87c:	06 96       	adiw	r24, 0x06	; 6
     87e:	0e 94 52 07 	call	0xea4	; 0xea4 <timer_init>
					timer_start(u8_timer_id);
     882:	8d 2d       	mov	r24, r13
     884:	0e 94 3c 09 	call	0x1278	; 0x1278 <timer_start>
					//wait for timer_flag_notification
					do 
					{
						timer_flag_notification(u8_timer_id,ENU_TMR_NORMAL_MODE,&u8_l_flag_status);
     888:	ae 01       	movw	r20, r28
     88a:	4b 5f       	subi	r20, 0xFB	; 251
     88c:	5f 4f       	sbci	r21, 0xFF	; 255
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	8d 2d       	mov	r24, r13
     892:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <timer_flag_notification>
					} while (u8_l_flag_status == LOGIC_FALSE);
     896:	8d 81       	ldd	r24, Y+5	; 0x05
     898:	88 23       	and	r24, r24
     89a:	b1 f3       	breq	.-20     	; 0x888 <__stack+0x29>
	return enu_time_error;
}

enu_time_error_t delay_ms	(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	05 c0       	rjmp	.+10     	; 0x8aa <__stack+0x4b>
			enu_time_error = ENU_TIMER_INVALID_ID;
		}		
	}
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	03 c0       	rjmp	.+6      	; 0x8aa <__stack+0x4b>
				}
			}
		}
		else
		{
			enu_time_error = ENU_TIMER_INVALID_ID;
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	01 c0       	rjmp	.+2      	; 0x8aa <__stack+0x4b>
	return enu_time_error;
}

enu_time_error_t delay_ms	(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
     8a8:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
	}
	return enu_time_error;
}
     8aa:	2e 96       	adiw	r28, 0x0e	; 14
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	ef 90       	pop	r14
     8c2:	df 90       	pop	r13
     8c4:	bf 90       	pop	r11
     8c6:	af 90       	pop	r10
     8c8:	9f 90       	pop	r9
     8ca:	8f 90       	pop	r8
     8cc:	08 95       	ret

000008ce <Ultrasonic_edgeProcessing>:
/**
 * @brief       Ultrasonic_edgeProcessing		: callback function used to process the detection of echo signal 
 */
void Ultrasonic_edgeProcessing(void)
{
	gl_u8_edgeCount++;
     8ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gl_u8_edgeCount>
     8d2:	8f 5f       	subi	r24, 0xFF	; 255
     8d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <gl_u8_edgeCount>
	if(gl_u8_edgeCount == FIREST_EDGE)
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	31 f4       	brne	.+12     	; 0x8e8 <Ultrasonic_edgeProcessing+0x1a>
	{
		Icu_clearTimerValue();
     8dc:	0e 94 26 01 	call	0x24c	; 0x24c <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(ENU_ICU_FALLING);
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Icu_setEdgeDetectionType>
     8e6:	08 95       	ret
	}
	else if(gl_u8_edgeCount == SECOND_EDGE)
     8e8:	82 30       	cpi	r24, 0x02	; 2
     8ea:	49 f4       	brne	.+18     	; 0x8fe <Ultrasonic_edgeProcessing+0x30>
	{
		Icu_getTimerValue(&gl_u16_timeHigh);
     8ec:	88 e7       	ldi	r24, 0x78	; 120
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 08 01 	call	0x210	; 0x210 <Icu_getTimerValue>
		Icu_clearTimerValue();
     8f4:	0e 94 26 01 	call	0x24c	; 0x24c <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(ENU_ICU_RISING);
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Icu_setEdgeDetectionType>
     8fe:	08 95       	ret

00000900 <Ultrasonic_init>:
 * @brief       Ultrasonic_init				: Function to initialize the ultrasonic driver
 *											  initialize ICU driver,set callback function,setup trigger pin direction as output
 *											  setup External interrupt source
 */
enu_usonic_state_t Ultrasonic_init(uint8 u8_triggerPort,uint8 u8_triggerPin,enu_echo_pin_id_t enu_echo_pin_id)
{
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	00 d0       	rcall	.+0      	; 0x90a <Ultrasonic_init+0xa>
     90a:	00 d0       	rcall	.+0      	; 0x90c <Ultrasonic_init+0xc>
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
	str_icu_configtype_t str_icu_configtype;
	if((u8_triggerPort < MAX_PORT_ID) && (u8_triggerPin < MAX_PIN_ID) && (enu_echo_pin_id < ENU_MAX_ECHO))
     910:	84 30       	cpi	r24, 0x04	; 4
     912:	20 f5       	brcc	.+72     	; 0x95c <Ultrasonic_init+0x5c>
     914:	68 30       	cpi	r22, 0x08	; 8
     916:	20 f5       	brcc	.+72     	; 0x960 <Ultrasonic_init+0x60>
     918:	43 30       	cpi	r20, 0x03	; 3
     91a:	20 f5       	brcc	.+72     	; 0x964 <Ultrasonic_init+0x64>
     91c:	06 2f       	mov	r16, r22
     91e:	18 2f       	mov	r17, r24
	{
		str_icu_configtype.enu_icu_channel_id	= enu_echo_pin_id;
     920:	49 83       	std	Y+1, r20	; 0x01
		str_icu_configtype.enu_timer_channel_id = ULTRASONIC_TIMER_ID;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	8a 83       	std	Y+2, r24	; 0x02
		str_icu_configtype.enu_icu_clock		= ENU_ICU_F_CPU_8;
     926:	92 e0       	ldi	r25, 0x02	; 2
     928:	9b 83       	std	Y+3, r25	; 0x03
		str_icu_configtype.enu_icu_edgetype		= ENU_ICU_RISING;
     92a:	8c 83       	std	Y+4, r24	; 0x04
		gl_u8_triggerPort						= u8_triggerPort;
     92c:	10 93 77 00 	sts	0x0077, r17	; 0x800077 <gl_u8_triggerPort>
		gl_u8_triggerPin						= u8_triggerPin;
     930:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <__data_end>
		Icu_init(&str_icu_configtype);
     934:	ce 01       	movw	r24, r28
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	0e 94 65 00 	call	0xca	; 0xca <Icu_init>
		Icu_setCallBack(Ultrasonic_edgeProcessing);
     93c:	87 e6       	ldi	r24, 0x67	; 103
     93e:	94 e0       	ldi	r25, 0x04	; 4
     940:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Icu_setCallBack>
		DIO_pinMode(u8_triggerPort,u8_triggerPin,PIN_OUTPUT);		 //setup trigger pin direction as output
     944:	41 e0       	ldi	r20, 0x01	; 1
     946:	60 2f       	mov	r22, r16
     948:	81 2f       	mov	r24, r17
     94a:	0e 94 22 05 	call	0xa44	; 0xa44 <DIO_pinMode>
		DIO_writePin(u8_triggerPort,u8_triggerPin,PIN_LOW);
     94e:	40 e0       	ldi	r20, 0x00	; 0
     950:	60 2f       	mov	r22, r16
     952:	81 2f       	mov	r24, r17
     954:	0e 94 a8 05 	call	0xb50	; 0xb50 <DIO_writePin>
 *											  initialize ICU driver,set callback function,setup trigger pin direction as output
 *											  setup External interrupt source
 */
enu_usonic_state_t Ultrasonic_init(uint8 u8_triggerPort,uint8 u8_triggerPin,enu_echo_pin_id_t enu_echo_pin_id)
{
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
     958:	80 e0       	ldi	r24, 0x00	; 0
		gl_u8_triggerPort						= u8_triggerPort;
		gl_u8_triggerPin						= u8_triggerPin;
		Icu_init(&str_icu_configtype);
		Icu_setCallBack(Ultrasonic_edgeProcessing);
		DIO_pinMode(u8_triggerPort,u8_triggerPin,PIN_OUTPUT);		 //setup trigger pin direction as output
		DIO_writePin(u8_triggerPort,u8_triggerPin,PIN_LOW);
     95a:	05 c0       	rjmp	.+10     	; 0x966 <Ultrasonic_init+0x66>
	}
	else
	{
		enu_usonic_state = ENU_USONIC_STATE_INVALID;
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	03 c0       	rjmp	.+6      	; 0x966 <Ultrasonic_init+0x66>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	01 c0       	rjmp	.+2      	; 0x966 <Ultrasonic_init+0x66>
     964:	81 e0       	ldi	r24, 0x01	; 1
	}
	return enu_usonic_state;
}
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	08 95       	ret

00000978 <Ultrasonic_Trigger>:
/**
 * @brief       Ultrasonic_Trigger		: function used to send trigger pulse 10 microSEC
 */
void Ultrasonic_Trigger(void)
{
	DIO_writePin(gl_u8_triggerPort, gl_u8_triggerPin,PIN_HIGH);
     978:	41 e0       	ldi	r20, 0x01	; 1
     97a:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <__data_end>
     97e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gl_u8_triggerPort>
     982:	0e 94 a8 05 	call	0xb50	; 0xb50 <DIO_writePin>
	delay_us(DELAY_ID,TRIGGER_TIME);
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	60 e2       	ldi	r22, 0x20	; 32
     98c:	71 e4       	ldi	r23, 0x41	; 65
     98e:	82 e0       	ldi	r24, 0x02	; 2
     990:	0e 94 4b 02 	call	0x496	; 0x496 <delay_us>
	DIO_writePin(gl_u8_triggerPort, gl_u8_triggerPin,PIN_LOW);
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	60 91 76 00 	lds	r22, 0x0076	; 0x800076 <__data_end>
     99a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gl_u8_triggerPort>
     99e:	0e 94 a8 05 	call	0xb50	; 0xb50 <DIO_writePin>
     9a2:	08 95       	ret

000009a4 <Ultrasonic_readDistance>:

/**
 * @brief       Ultrasonic_readDistance		: function to read distance of from the sensor
 */
enu_usonic_state_t Ultrasonic_readDistance(uint16* ptr_u16_distanceValue)
{
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
	if(ptr_u16_distanceValue != NULL_PTR)
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	e1 f0       	breq	.+56     	; 0x9e4 <Ultrasonic_readDistance+0x40>
     9ac:	ec 01       	movw	r28, r24
	{
		Ultrasonic_Trigger();
     9ae:	0e 94 bc 04 	call	0x978	; 0x978 <Ultrasonic_Trigger>
		while(gl_u8_edgeCount != NUM_OF_EDGES);			//wait until ultrasonic sound to travel towards the object and return.
     9b2:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <gl_u8_edgeCount>
     9b6:	92 30       	cpi	r25, 0x02	; 2
     9b8:	e1 f7       	brne	.-8      	; 0x9b2 <Ultrasonic_readDistance+0xe>
		*ptr_u16_distanceValue = CALC_DISTANCE(gl_u16_timeHigh);
     9ba:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <gl_u16_timeHigh>
     9be:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <gl_u16_timeHigh+0x1>
     9c2:	af e9       	ldi	r26, 0x9F	; 159
     9c4:	b6 e4       	ldi	r27, 0x46	; 70
     9c6:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <__umulhisi3>
     9ca:	92 95       	swap	r25
     9cc:	82 95       	swap	r24
     9ce:	8f 70       	andi	r24, 0x0F	; 15
     9d0:	89 27       	eor	r24, r25
     9d2:	9f 70       	andi	r25, 0x0F	; 15
     9d4:	89 27       	eor	r24, r25
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	99 83       	std	Y+1, r25	; 0x01
     9da:	88 83       	st	Y, r24
		gl_u8_edgeCount=ZERO;							//clear edge count to be ready for new read
     9dc:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <gl_u8_edgeCount>
/**
 * @brief       Ultrasonic_readDistance		: function to read distance of from the sensor
 */
enu_usonic_state_t Ultrasonic_readDistance(uint16* ptr_u16_distanceValue)
{
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <Ultrasonic_readDistance+0x42>
		*ptr_u16_distanceValue = CALC_DISTANCE(gl_u16_timeHigh);
		gl_u8_edgeCount=ZERO;							//clear edge count to be ready for new read
	}
	else
	{
		enu_usonic_state = ENU_USONIC_STATE_INVALID;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return enu_usonic_state;
}
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <main>:
{
	
}

int main(void)
{
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <main+0x6>
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
			fun();
		}
	}
*/
	
	uint16 value=0;
     9f6:	1a 82       	std	Y+2, r1	; 0x02
     9f8:	19 82       	std	Y+1, r1	; 0x01
	LCD_init();
     9fa:	0e 94 89 01 	call	0x312	; 0x312 <LCD_init>
	Ultrasonic_init(PORTB_ID,5,ENU_ECHO_ID_0);
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	65 e0       	ldi	r22, 0x05	; 5
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	0e 94 80 04 	call	0x900	; 0x900 <Ultrasonic_init>
	LCD_displayString("Distance = ");
     a08:	85 e6       	ldi	r24, 0x65	; 101
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_displayString>
	enable_global_interrupt();
     a10:	0e 94 4e 07 	call	0xe9c	; 0xe9c <enable_global_interrupt>
	while(1)
	{
		Ultrasonic_readDistance(&value);
     a14:	ce 01       	movw	r24, r28
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <Ultrasonic_readDistance>
		LCD_moveCursor(0,10);
     a1c:	6a e0       	ldi	r22, 0x0A	; 10
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_moveCursor>
		LCD_intgerToString(value);
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	9a 81       	ldd	r25, Y+2	; 0x02
     a28:	0e 94 00 02 	call	0x400	; 0x400 <LCD_intgerToString>
		LCD_displayString(" CM");
     a2c:	81 e7       	ldi	r24, 0x71	; 113
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_displayString>
		//_delay_ms(200);
		delay_ms(2,50);
     a34:	40 e0       	ldi	r20, 0x00	; 0
     a36:	50 e0       	ldi	r21, 0x00	; 0
     a38:	68 e4       	ldi	r22, 0x48	; 72
     a3a:	72 e4       	ldi	r23, 0x42	; 66
     a3c:	82 e0       	ldi	r24, 0x02	; 2
     a3e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <delay_ms>
     a42:	e8 cf       	rjmp	.-48     	; 0xa14 <main+0x28>

00000a44 <DIO_pinMode>:
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
     a44:	84 30       	cpi	r24, 0x04	; 4
     a46:	08 f0       	brcs	.+2      	; 0xa4a <DIO_pinMode+0x6>
     a48:	7b c0       	rjmp	.+246    	; 0xb40 <DIO_pinMode+0xfc>
     a4a:	68 30       	cpi	r22, 0x08	; 8
     a4c:	08 f0       	brcs	.+2      	; 0xa50 <DIO_pinMode+0xc>
     a4e:	7a c0       	rjmp	.+244    	; 0xb44 <DIO_pinMode+0x100>
     a50:	42 30       	cpi	r20, 0x02	; 2
     a52:	08 f0       	brcs	.+2      	; 0xa56 <DIO_pinMode+0x12>
     a54:	79 c0       	rjmp	.+242    	; 0xb48 <DIO_pinMode+0x104>
     a56:	81 30       	cpi	r24, 0x01	; 1
     a58:	11 f1       	breq	.+68     	; 0xa9e <DIO_pinMode+0x5a>
     a5a:	30 f0       	brcs	.+12     	; 0xa68 <DIO_pinMode+0x24>
     a5c:	82 30       	cpi	r24, 0x02	; 2
     a5e:	d1 f1       	breq	.+116    	; 0xad4 <DIO_pinMode+0x90>
     a60:	83 30       	cpi	r24, 0x03	; 3
     a62:	09 f4       	brne	.+2      	; 0xa66 <DIO_pinMode+0x22>
     a64:	52 c0       	rjmp	.+164    	; 0xb0a <DIO_pinMode+0xc6>
     a66:	72 c0       	rjmp	.+228    	; 0xb4c <DIO_pinMode+0x108>
     a68:	41 30       	cpi	r20, 0x01	; 1
     a6a:	61 f4       	brne	.+24     	; 0xa84 <DIO_pinMode+0x40>
     a6c:	2a b3       	in	r18, 0x1a	; 26
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <DIO_pinMode+0x34>
     a74:	88 0f       	add	r24, r24
     a76:	99 1f       	adc	r25, r25
     a78:	6a 95       	dec	r22
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <DIO_pinMode+0x30>
     a7c:	82 2b       	or	r24, r18
     a7e:	8a bb       	out	0x1a, r24	; 26
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	08 95       	ret
     a84:	2a b3       	in	r18, 0x1a	; 26
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <DIO_pinMode+0x4c>
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	6a 95       	dec	r22
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <DIO_pinMode+0x48>
     a94:	80 95       	com	r24
     a96:	82 23       	and	r24, r18
     a98:	8a bb       	out	0x1a, r24	; 26
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	08 95       	ret
     a9e:	41 30       	cpi	r20, 0x01	; 1
     aa0:	61 f4       	brne	.+24     	; 0xaba <DIO_pinMode+0x76>
     aa2:	27 b3       	in	r18, 0x17	; 23
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <DIO_pinMode+0x6a>
     aaa:	88 0f       	add	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	6a 95       	dec	r22
     ab0:	e2 f7       	brpl	.-8      	; 0xaaa <DIO_pinMode+0x66>
     ab2:	82 2b       	or	r24, r18
     ab4:	87 bb       	out	0x17, r24	; 23
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	08 95       	ret
     aba:	27 b3       	in	r18, 0x17	; 23
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <DIO_pinMode+0x82>
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	6a 95       	dec	r22
     ac8:	e2 f7       	brpl	.-8      	; 0xac2 <DIO_pinMode+0x7e>
     aca:	80 95       	com	r24
     acc:	82 23       	and	r24, r18
     ace:	87 bb       	out	0x17, r24	; 23
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	08 95       	ret
     ad4:	41 30       	cpi	r20, 0x01	; 1
     ad6:	61 f4       	brne	.+24     	; 0xaf0 <DIO_pinMode+0xac>
     ad8:	24 b3       	in	r18, 0x14	; 20
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <DIO_pinMode+0xa0>
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	6a 95       	dec	r22
     ae6:	e2 f7       	brpl	.-8      	; 0xae0 <DIO_pinMode+0x9c>
     ae8:	82 2b       	or	r24, r18
     aea:	84 bb       	out	0x14, r24	; 20
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	08 95       	ret
     af0:	24 b3       	in	r18, 0x14	; 20
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	02 c0       	rjmp	.+4      	; 0xafc <DIO_pinMode+0xb8>
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	6a 95       	dec	r22
     afe:	e2 f7       	brpl	.-8      	; 0xaf8 <DIO_pinMode+0xb4>
     b00:	80 95       	com	r24
     b02:	82 23       	and	r24, r18
     b04:	84 bb       	out	0x14, r24	; 20
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	08 95       	ret
     b0a:	41 30       	cpi	r20, 0x01	; 1
     b0c:	61 f4       	brne	.+24     	; 0xb26 <DIO_pinMode+0xe2>
     b0e:	21 b3       	in	r18, 0x11	; 17
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <DIO_pinMode+0xd6>
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	6a 95       	dec	r22
     b1c:	e2 f7       	brpl	.-8      	; 0xb16 <DIO_pinMode+0xd2>
     b1e:	82 2b       	or	r24, r18
     b20:	81 bb       	out	0x11, r24	; 17
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	08 95       	ret
     b26:	21 b3       	in	r18, 0x11	; 17
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <DIO_pinMode+0xee>
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	6a 95       	dec	r22
     b34:	e2 f7       	brpl	.-8      	; 0xb2e <DIO_pinMode+0xea>
     b36:	80 95       	com	r24
     b38:	82 23       	and	r24, r18
     b3a:	81 bb       	out	0x11, r24	; 17
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	08 95       	ret
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	08 95       	ret
     b44:	83 e0       	ldi	r24, 0x03	; 3
     b46:	08 95       	ret
     b48:	84 e0       	ldi	r24, 0x04	; 4
     b4a:	08 95       	ret
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	08 95       	ret

00000b50 <DIO_writePin>:
     b50:	84 30       	cpi	r24, 0x04	; 4
     b52:	08 f0       	brcs	.+2      	; 0xb56 <DIO_writePin+0x6>
     b54:	7b c0       	rjmp	.+246    	; 0xc4c <DIO_writePin+0xfc>
     b56:	68 30       	cpi	r22, 0x08	; 8
     b58:	08 f0       	brcs	.+2      	; 0xb5c <DIO_writePin+0xc>
     b5a:	7a c0       	rjmp	.+244    	; 0xc50 <DIO_writePin+0x100>
     b5c:	42 30       	cpi	r20, 0x02	; 2
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <DIO_writePin+0x12>
     b60:	79 c0       	rjmp	.+242    	; 0xc54 <DIO_writePin+0x104>
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	11 f1       	breq	.+68     	; 0xbaa <DIO_writePin+0x5a>
     b66:	30 f0       	brcs	.+12     	; 0xb74 <DIO_writePin+0x24>
     b68:	82 30       	cpi	r24, 0x02	; 2
     b6a:	d1 f1       	breq	.+116    	; 0xbe0 <DIO_writePin+0x90>
     b6c:	83 30       	cpi	r24, 0x03	; 3
     b6e:	09 f4       	brne	.+2      	; 0xb72 <DIO_writePin+0x22>
     b70:	52 c0       	rjmp	.+164    	; 0xc16 <DIO_writePin+0xc6>
     b72:	72 c0       	rjmp	.+228    	; 0xc58 <DIO_writePin+0x108>
     b74:	41 30       	cpi	r20, 0x01	; 1
     b76:	61 f4       	brne	.+24     	; 0xb90 <DIO_writePin+0x40>
     b78:	2b b3       	in	r18, 0x1b	; 27
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <DIO_writePin+0x34>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	6a 95       	dec	r22
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <DIO_writePin+0x30>
     b88:	82 2b       	or	r24, r18
     b8a:	8b bb       	out	0x1b, r24	; 27
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	08 95       	ret
     b90:	2b b3       	in	r18, 0x1b	; 27
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <DIO_writePin+0x4c>
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	6a 95       	dec	r22
     b9e:	e2 f7       	brpl	.-8      	; 0xb98 <DIO_writePin+0x48>
     ba0:	80 95       	com	r24
     ba2:	82 23       	and	r24, r18
     ba4:	8b bb       	out	0x1b, r24	; 27
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	08 95       	ret
     baa:	41 30       	cpi	r20, 0x01	; 1
     bac:	61 f4       	brne	.+24     	; 0xbc6 <DIO_writePin+0x76>
     bae:	28 b3       	in	r18, 0x18	; 24
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <DIO_writePin+0x6a>
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	6a 95       	dec	r22
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <DIO_writePin+0x66>
     bbe:	82 2b       	or	r24, r18
     bc0:	88 bb       	out	0x18, r24	; 24
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	08 95       	ret
     bc6:	28 b3       	in	r18, 0x18	; 24
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <DIO_writePin+0x82>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	6a 95       	dec	r22
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <DIO_writePin+0x7e>
     bd6:	80 95       	com	r24
     bd8:	82 23       	and	r24, r18
     bda:	88 bb       	out	0x18, r24	; 24
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	08 95       	ret
     be0:	41 30       	cpi	r20, 0x01	; 1
     be2:	61 f4       	brne	.+24     	; 0xbfc <DIO_writePin+0xac>
     be4:	25 b3       	in	r18, 0x15	; 21
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <DIO_writePin+0xa0>
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	6a 95       	dec	r22
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <DIO_writePin+0x9c>
     bf4:	82 2b       	or	r24, r18
     bf6:	85 bb       	out	0x15, r24	; 21
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	08 95       	ret
     bfc:	25 b3       	in	r18, 0x15	; 21
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <DIO_writePin+0xb8>
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	6a 95       	dec	r22
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <DIO_writePin+0xb4>
     c0c:	80 95       	com	r24
     c0e:	82 23       	and	r24, r18
     c10:	85 bb       	out	0x15, r24	; 21
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	08 95       	ret
     c16:	41 30       	cpi	r20, 0x01	; 1
     c18:	61 f4       	brne	.+24     	; 0xc32 <DIO_writePin+0xe2>
     c1a:	22 b3       	in	r18, 0x12	; 18
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <DIO_writePin+0xd6>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	6a 95       	dec	r22
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <DIO_writePin+0xd2>
     c2a:	82 2b       	or	r24, r18
     c2c:	82 bb       	out	0x12, r24	; 18
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	08 95       	ret
     c32:	22 b3       	in	r18, 0x12	; 18
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <DIO_writePin+0xee>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	6a 95       	dec	r22
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <DIO_writePin+0xea>
     c42:	80 95       	com	r24
     c44:	82 23       	and	r24, r18
     c46:	82 bb       	out	0x12, r24	; 18
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	08 95       	ret
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	08 95       	ret
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	08 95       	ret
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	08 95       	ret
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	08 95       	ret

00000c5c <DIO_portMode>:
/*===========================================================================*/

enu_dio_error_t DIO_portMode	(uint8 port,enu_port_direction_t enu_port_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
     c5c:	84 30       	cpi	r24, 0x04	; 4
     c5e:	c0 f4       	brcc	.+48     	; 0xc90 <DIO_portMode+0x34>
	{
		if((enu_port_direction == PORT_INPUT) || (enu_port_direction == PORT_OUTPUT))
     c60:	9f ef       	ldi	r25, 0xFF	; 255
     c62:	96 0f       	add	r25, r22
     c64:	9e 3f       	cpi	r25, 0xFE	; 254
     c66:	b0 f0       	brcs	.+44     	; 0xc94 <DIO_portMode+0x38>
		{
			switch(port)
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	49 f0       	breq	.+18     	; 0xc7e <DIO_portMode+0x22>
     c6c:	28 f0       	brcs	.+10     	; 0xc78 <DIO_portMode+0x1c>
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	49 f0       	breq	.+18     	; 0xc84 <DIO_portMode+0x28>
     c72:	83 30       	cpi	r24, 0x03	; 3
     c74:	51 f0       	breq	.+20     	; 0xc8a <DIO_portMode+0x2e>
     c76:	10 c0       	rjmp	.+32     	; 0xc98 <DIO_portMode+0x3c>
			{
				case PORTA_ID:	DDRA = enu_port_direction;	break;
     c78:	6a bb       	out	0x1a, r22	; 26

/*===========================================================================*/

enu_dio_error_t DIO_portMode	(uint8 port,enu_port_direction_t enu_port_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
	{
		if((enu_port_direction == PORT_INPUT) || (enu_port_direction == PORT_OUTPUT))
		{
			switch(port)
			{
				case PORTA_ID:	DDRA = enu_port_direction;	break;
     c7c:	08 95       	ret
				case PORTB_ID:	DDRB = enu_port_direction;	break;
     c7e:	67 bb       	out	0x17, r22	; 23

/*===========================================================================*/

enu_dio_error_t DIO_portMode	(uint8 port,enu_port_direction_t enu_port_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     c80:	81 e0       	ldi	r24, 0x01	; 1
		if((enu_port_direction == PORT_INPUT) || (enu_port_direction == PORT_OUTPUT))
		{
			switch(port)
			{
				case PORTA_ID:	DDRA = enu_port_direction;	break;
				case PORTB_ID:	DDRB = enu_port_direction;	break;
     c82:	08 95       	ret
				case PORTC_ID:	DDRC = enu_port_direction;	break;
     c84:	64 bb       	out	0x14, r22	; 20

/*===========================================================================*/

enu_dio_error_t DIO_portMode	(uint8 port,enu_port_direction_t enu_port_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     c86:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(port)
			{
				case PORTA_ID:	DDRA = enu_port_direction;	break;
				case PORTB_ID:	DDRB = enu_port_direction;	break;
				case PORTC_ID:	DDRC = enu_port_direction;	break;
     c88:	08 95       	ret
				case PORTD_ID:	DDRD = enu_port_direction;	break;
     c8a:	61 bb       	out	0x11, r22	; 17

/*===========================================================================*/

enu_dio_error_t DIO_portMode	(uint8 port,enu_port_direction_t enu_port_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
			switch(port)
			{
				case PORTA_ID:	DDRA = enu_port_direction;	break;
				case PORTB_ID:	DDRB = enu_port_direction;	break;
				case PORTC_ID:	DDRC = enu_port_direction;	break;
				case PORTD_ID:	DDRD = enu_port_direction;	break;
     c8e:	08 95       	ret
			enu_dio_error = DIO_INVALID_PORT_ID;
		}
	}
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	08 95       	ret
					break;
			}
		}
		else
		{
			enu_dio_error = DIO_INVALID_PORT_ID;
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	08 95       	ret

/*===========================================================================*/

enu_dio_error_t DIO_portMode	(uint8 port,enu_port_direction_t enu_port_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     c98:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
     c9a:	08 95       	ret

00000c9c <DIO_writePort>:
/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
     c9c:	84 30       	cpi	r24, 0x04	; 4
     c9e:	a0 f4       	brcc	.+40     	; 0xcc8 <DIO_writePort+0x2c>
	{
			switch(port)
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	49 f0       	breq	.+18     	; 0xcb6 <DIO_writePort+0x1a>
     ca4:	28 f0       	brcs	.+10     	; 0xcb0 <DIO_writePort+0x14>
     ca6:	82 30       	cpi	r24, 0x02	; 2
     ca8:	49 f0       	breq	.+18     	; 0xcbc <DIO_writePort+0x20>
     caa:	83 30       	cpi	r24, 0x03	; 3
     cac:	51 f0       	breq	.+20     	; 0xcc2 <DIO_writePort+0x26>
     cae:	0e c0       	rjmp	.+28     	; 0xccc <DIO_writePort+0x30>
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
     cb0:	6b bb       	out	0x1b, r22	; 27

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
	{
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
     cb4:	08 95       	ret
				case PORTB_ID:	PORTB = enu_port_value;		break;
     cb6:	68 bb       	out	0x18, r22	; 24

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
	{
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
				case PORTB_ID:	PORTB = enu_port_value;		break;
     cba:	08 95       	ret
				case PORTC_ID:	PORTC = enu_port_value;		break;
     cbc:	65 bb       	out	0x15, r22	; 21

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
	{
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
				case PORTB_ID:	PORTB = enu_port_value;		break;
				case PORTC_ID:	PORTC = enu_port_value;		break;
     cc0:	08 95       	ret
				case PORTD_ID:	PORTD = enu_port_value;		break;
     cc2:	62 bb       	out	0x12, r22	; 18

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
				case PORTB_ID:	PORTB = enu_port_value;		break;
				case PORTC_ID:	PORTC = enu_port_value;		break;
				case PORTD_ID:	PORTD = enu_port_value;		break;
     cc6:	08 95       	ret
					break;
			}
	}
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	08 95       	ret

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
     cce:	08 95       	ret

00000cd0 <Init_external_interrupt>:
	 else
	 {
		 enu_interrupt_error = ENU_INT_INVALID_ID;
	 }
	 return enu_interrupt_error;
 }
     cd0:	83 30       	cpi	r24, 0x03	; 3
     cd2:	40 f5       	brcc	.+80     	; 0xd24 <Init_external_interrupt+0x54>
     cd4:	64 30       	cpi	r22, 0x04	; 4
     cd6:	40 f5       	brcc	.+80     	; 0xd28 <Init_external_interrupt+0x58>
     cd8:	81 11       	cpse	r24, r1
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <Init_external_interrupt+0x18>
     cdc:	85 b7       	in	r24, 0x35	; 53
     cde:	8c 7f       	andi	r24, 0xFC	; 252
     ce0:	68 2b       	or	r22, r24
     ce2:	65 bf       	out	0x35, r22	; 53
     ce4:	83 e0       	ldi	r24, 0x03	; 3
     ce6:	08 95       	ret
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	59 f4       	brne	.+22     	; 0xd02 <Init_external_interrupt+0x32>
     cec:	85 b7       	in	r24, 0x35	; 53
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	66 0f       	add	r22, r22
     cf2:	77 1f       	adc	r23, r23
     cf4:	66 0f       	add	r22, r22
     cf6:	77 1f       	adc	r23, r23
     cf8:	83 7f       	andi	r24, 0xF3	; 243
     cfa:	68 2b       	or	r22, r24
     cfc:	65 bf       	out	0x35, r22	; 53
     cfe:	83 e0       	ldi	r24, 0x03	; 3
     d00:	08 95       	ret
     d02:	82 30       	cpi	r24, 0x02	; 2
     d04:	99 f4       	brne	.+38     	; 0xd2c <Init_external_interrupt+0x5c>
     d06:	8e ef       	ldi	r24, 0xFE	; 254
     d08:	86 0f       	add	r24, r22
     d0a:	82 30       	cpi	r24, 0x02	; 2
     d0c:	88 f4       	brcc	.+34     	; 0xd30 <Init_external_interrupt+0x60>
     d0e:	24 b7       	in	r18, 0x34	; 52
     d10:	30 e4       	ldi	r19, 0x40	; 64
     d12:	63 9f       	mul	r22, r19
     d14:	c0 01       	movw	r24, r0
     d16:	11 24       	eor	r1, r1
     d18:	92 2f       	mov	r25, r18
     d1a:	9f 7b       	andi	r25, 0xBF	; 191
     d1c:	89 2b       	or	r24, r25
     d1e:	84 bf       	out	0x34, r24	; 52
     d20:	83 e0       	ldi	r24, 0x03	; 3
     d22:	08 95       	ret
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	08 95       	ret
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	08 95       	ret
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	08 95       	ret
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	08 95       	ret

00000d34 <enable_external_interrupt>:
     d34:	83 30       	cpi	r24, 0x03	; 3
     d36:	a8 f4       	brcc	.+42     	; 0xd62 <enable_external_interrupt+0x2e>
     d38:	81 11       	cpse	r24, r1
     d3a:	05 c0       	rjmp	.+10     	; 0xd46 <enable_external_interrupt+0x12>
     d3c:	8b b7       	in	r24, 0x3b	; 59
     d3e:	80 64       	ori	r24, 0x40	; 64
     d40:	8b bf       	out	0x3b, r24	; 59
     d42:	83 e0       	ldi	r24, 0x03	; 3
     d44:	08 95       	ret
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	29 f4       	brne	.+10     	; 0xd54 <enable_external_interrupt+0x20>
     d4a:	8b b7       	in	r24, 0x3b	; 59
     d4c:	80 68       	ori	r24, 0x80	; 128
     d4e:	8b bf       	out	0x3b, r24	; 59
     d50:	83 e0       	ldi	r24, 0x03	; 3
     d52:	08 95       	ret
     d54:	82 30       	cpi	r24, 0x02	; 2
     d56:	39 f4       	brne	.+14     	; 0xd66 <enable_external_interrupt+0x32>
     d58:	8b b7       	in	r24, 0x3b	; 59
     d5a:	80 62       	ori	r24, 0x20	; 32
     d5c:	8b bf       	out	0x3b, r24	; 59
     d5e:	83 e0       	ldi	r24, 0x03	; 3
     d60:	08 95       	ret
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	08 95       	ret
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	08 95       	ret

00000d6a <interrupt0_set_callback>:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt0_set_callback (void(*f_ptr)(void))
{
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
	if (f_ptr != NULL_PTR)
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	31 f0       	breq	.+12     	; 0xd7a <interrupt0_set_callback+0x10>
	{
		gl_callbackptr_0 = f_ptr;
     d6e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <gl_callbackptr_0+0x1>
     d72:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <gl_callbackptr_0>
 *				INVALID_PIN_ID				:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt0_set_callback (void(*f_ptr)(void))
{
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	08 95       	ret
		gl_callbackptr_0 = f_ptr;
		
	}
	else
	{
		enu_interrupt_error = ENU_INT_INVALID_INPUT ;
     d7a:	82 e0       	ldi	r24, 0x02	; 2
	}
	return enu_interrupt_error ;
}
     d7c:	08 95       	ret

00000d7e <interrupt1_set_callback>:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt1_set_callback (void(*f_ptr)(void))
{
		enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
		if (f_ptr != NULL_PTR)
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	31 f0       	breq	.+12     	; 0xd8e <interrupt1_set_callback+0x10>
		{
			gl_callbackptr_1 = f_ptr;
     d82:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <gl_callbackptr_1+0x1>
     d86:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <gl_callbackptr_1>
 *				INVALID_PIN_ID				:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt1_set_callback (void(*f_ptr)(void))
{
		enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
     d8a:	83 e0       	ldi	r24, 0x03	; 3
     d8c:	08 95       	ret
			gl_callbackptr_1 = f_ptr;
			
		}
		else
		{
			enu_interrupt_error = ENU_INT_INVALID_INPUT ;
     d8e:	82 e0       	ldi	r24, 0x02	; 2
		}
		return enu_interrupt_error ;
}
     d90:	08 95       	ret

00000d92 <interrupt2_set_callback>:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt2_set_callback (void(*f_ptr)(void))
{	
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
	if (f_ptr != NULL_PTR)
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	31 f0       	breq	.+12     	; 0xda2 <interrupt2_set_callback+0x10>
	{
		gl_callbackptr_2 = f_ptr;
     d96:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <gl_callbackptr_2+0x1>
     d9a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <gl_callbackptr_2>
 *				INVALID_PIN_ID				:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt2_set_callback (void(*f_ptr)(void))
{	
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
     d9e:	83 e0       	ldi	r24, 0x03	; 3
     da0:	08 95       	ret
		gl_callbackptr_2 = f_ptr;
		
	}
	else
	{
		enu_interrupt_error = ENU_INT_INVALID_INPUT ;
     da2:	82 e0       	ldi	r24, 0x02	; 2
	}
	return enu_interrupt_error ;
}
     da4:	08 95       	ret

00000da6 <__vector_1>:

ISR_HANDLER(EXT_INT0)
{
     da6:	1f 92       	push	r1
     da8:	0f 92       	push	r0
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	0f 92       	push	r0
     dae:	11 24       	eor	r1, r1
     db0:	2f 93       	push	r18
     db2:	3f 93       	push	r19
     db4:	4f 93       	push	r20
     db6:	5f 93       	push	r21
     db8:	6f 93       	push	r22
     dba:	7f 93       	push	r23
     dbc:	8f 93       	push	r24
     dbe:	9f 93       	push	r25
     dc0:	af 93       	push	r26
     dc2:	bf 93       	push	r27
     dc4:	ef 93       	push	r30
     dc6:	ff 93       	push	r31
	if(gl_callbackptr_0 != NULL_PTR)
     dc8:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <gl_callbackptr_0>
     dcc:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <gl_callbackptr_0+0x1>
     dd0:	30 97       	sbiw	r30, 0x00	; 0
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <__vector_1+0x30>
	{
		gl_callbackptr_0();
     dd4:	09 95       	icall
	}
}
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
     dda:	bf 91       	pop	r27
     ddc:	af 91       	pop	r26
     dde:	9f 91       	pop	r25
     de0:	8f 91       	pop	r24
     de2:	7f 91       	pop	r23
     de4:	6f 91       	pop	r22
     de6:	5f 91       	pop	r21
     de8:	4f 91       	pop	r20
     dea:	3f 91       	pop	r19
     dec:	2f 91       	pop	r18
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <__vector_2>:

ISR_HANDLER(EXT_INT1)
{
     df8:	1f 92       	push	r1
     dfa:	0f 92       	push	r0
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	0f 92       	push	r0
     e00:	11 24       	eor	r1, r1
     e02:	2f 93       	push	r18
     e04:	3f 93       	push	r19
     e06:	4f 93       	push	r20
     e08:	5f 93       	push	r21
     e0a:	6f 93       	push	r22
     e0c:	7f 93       	push	r23
     e0e:	8f 93       	push	r24
     e10:	9f 93       	push	r25
     e12:	af 93       	push	r26
     e14:	bf 93       	push	r27
     e16:	ef 93       	push	r30
     e18:	ff 93       	push	r31
	if(gl_callbackptr_1 != NULL_PTR)
     e1a:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <gl_callbackptr_1>
     e1e:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <gl_callbackptr_1+0x1>
     e22:	30 97       	sbiw	r30, 0x00	; 0
     e24:	09 f0       	breq	.+2      	; 0xe28 <__vector_2+0x30>
	{
		gl_callbackptr_1();
     e26:	09 95       	icall
	}
}
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	bf 91       	pop	r27
     e2e:	af 91       	pop	r26
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	7f 91       	pop	r23
     e36:	6f 91       	pop	r22
     e38:	5f 91       	pop	r21
     e3a:	4f 91       	pop	r20
     e3c:	3f 91       	pop	r19
     e3e:	2f 91       	pop	r18
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <__vector_3>:

ISR_HANDLER(EXT_INT2)
{
     e4a:	1f 92       	push	r1
     e4c:	0f 92       	push	r0
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	0f 92       	push	r0
     e52:	11 24       	eor	r1, r1
     e54:	2f 93       	push	r18
     e56:	3f 93       	push	r19
     e58:	4f 93       	push	r20
     e5a:	5f 93       	push	r21
     e5c:	6f 93       	push	r22
     e5e:	7f 93       	push	r23
     e60:	8f 93       	push	r24
     e62:	9f 93       	push	r25
     e64:	af 93       	push	r26
     e66:	bf 93       	push	r27
     e68:	ef 93       	push	r30
     e6a:	ff 93       	push	r31
	if(gl_callbackptr_2 != NULL_PTR)
     e6c:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <gl_callbackptr_2>
     e70:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <gl_callbackptr_2+0x1>
     e74:	30 97       	sbiw	r30, 0x00	; 0
     e76:	09 f0       	breq	.+2      	; 0xe7a <__vector_3+0x30>
	{
		gl_callbackptr_2();
     e78:	09 95       	icall
	}
}
     e7a:	ff 91       	pop	r31
     e7c:	ef 91       	pop	r30
     e7e:	bf 91       	pop	r27
     e80:	af 91       	pop	r26
     e82:	9f 91       	pop	r25
     e84:	8f 91       	pop	r24
     e86:	7f 91       	pop	r23
     e88:	6f 91       	pop	r22
     e8a:	5f 91       	pop	r21
     e8c:	4f 91       	pop	r20
     e8e:	3f 91       	pop	r19
     e90:	2f 91       	pop	r18
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	0f 90       	pop	r0
     e98:	1f 90       	pop	r1
     e9a:	18 95       	reti

00000e9c <enable_global_interrupt>:


/*================ APIS ================*/
void enable_global_interrupt (void)
{
	SET_BIT(SREG,PIN7);
     e9c:	8f b7       	in	r24, 0x3f	; 63
     e9e:	80 68       	ori	r24, 0x80	; 128
     ea0:	8f bf       	out	0x3f, r24	; 63
     ea2:	08 95       	ret

00000ea4 <timer_init>:
	else
	{
		enu_tmr_error = ENU_TMR_INVALID_ID;
	}
	return ENU_TMR_INVALID_ID;
}
     ea4:	fc 01       	movw	r30, r24
     ea6:	89 2b       	or	r24, r25
     ea8:	09 f4       	brne	.+2      	; 0xeac <timer_init+0x8>
     eaa:	95 c1       	rjmp	.+810    	; 0x11d6 <timer_init+0x332>
     eac:	80 81       	ld	r24, Z
     eae:	83 30       	cpi	r24, 0x03	; 3
     eb0:	08 f0       	brcs	.+2      	; 0xeb4 <timer_init+0x10>
     eb2:	93 c1       	rjmp	.+806    	; 0x11da <timer_init+0x336>
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	92 30       	cpi	r25, 0x02	; 2
     eb8:	08 f0       	brcs	.+2      	; 0xebc <timer_init+0x18>
     eba:	91 c1       	rjmp	.+802    	; 0x11de <timer_init+0x33a>
     ebc:	92 81       	ldd	r25, Z+2	; 0x02
     ebe:	92 30       	cpi	r25, 0x02	; 2
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <timer_init+0x20>
     ec2:	8f c1       	rjmp	.+798    	; 0x11e2 <timer_init+0x33e>
     ec4:	93 81       	ldd	r25, Z+3	; 0x03
     ec6:	94 30       	cpi	r25, 0x04	; 4
     ec8:	08 f0       	brcs	.+2      	; 0xecc <timer_init+0x28>
     eca:	8d c1       	rjmp	.+794    	; 0x11e6 <timer_init+0x342>
     ecc:	94 81       	ldd	r25, Z+4	; 0x04
     ece:	9a 30       	cpi	r25, 0x0A	; 10
     ed0:	08 f0       	brcs	.+2      	; 0xed4 <timer_init+0x30>
     ed2:	8b c1       	rjmp	.+790    	; 0x11ea <timer_init+0x346>
     ed4:	81 11       	cpse	r24, r1
     ed6:	7d c0       	rjmp	.+250    	; 0xfd2 <timer_init+0x12e>
     ed8:	83 b7       	in	r24, 0x33	; 51
     eda:	80 68       	ori	r24, 0x80	; 128
     edc:	83 bf       	out	0x33, r24	; 51
     ede:	81 81       	ldd	r24, Z+1	; 0x01
     ee0:	88 23       	and	r24, r24
     ee2:	19 f0       	breq	.+6      	; 0xeea <timer_init+0x46>
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	41 f0       	breq	.+16     	; 0xef8 <timer_init+0x54>
     ee8:	0d c0       	rjmp	.+26     	; 0xf04 <timer_init+0x60>
     eea:	83 b7       	in	r24, 0x33	; 51
     eec:	8f 7b       	andi	r24, 0xBF	; 191
     eee:	83 bf       	out	0x33, r24	; 51
     ef0:	83 b7       	in	r24, 0x33	; 51
     ef2:	87 7f       	andi	r24, 0xF7	; 247
     ef4:	83 bf       	out	0x33, r24	; 51
     ef6:	06 c0       	rjmp	.+12     	; 0xf04 <timer_init+0x60>
     ef8:	83 b7       	in	r24, 0x33	; 51
     efa:	8f 7b       	andi	r24, 0xBF	; 191
     efc:	83 bf       	out	0x33, r24	; 51
     efe:	83 b7       	in	r24, 0x33	; 51
     f00:	88 60       	ori	r24, 0x08	; 8
     f02:	83 bf       	out	0x33, r24	; 51
     f04:	83 81       	ldd	r24, Z+3	; 0x03
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	69 f0       	breq	.+26     	; 0xf24 <timer_init+0x80>
     f0a:	28 f0       	brcs	.+10     	; 0xf16 <timer_init+0x72>
     f0c:	82 30       	cpi	r24, 0x02	; 2
     f0e:	a1 f0       	breq	.+40     	; 0xf38 <timer_init+0x94>
     f10:	83 30       	cpi	r24, 0x03	; 3
     f12:	e1 f0       	breq	.+56     	; 0xf4c <timer_init+0xa8>
     f14:	24 c0       	rjmp	.+72     	; 0xf5e <timer_init+0xba>
     f16:	83 b7       	in	r24, 0x33	; 51
     f18:	8f 7e       	andi	r24, 0xEF	; 239
     f1a:	83 bf       	out	0x33, r24	; 51
     f1c:	83 b7       	in	r24, 0x33	; 51
     f1e:	8f 7d       	andi	r24, 0xDF	; 223
     f20:	83 bf       	out	0x33, r24	; 51
     f22:	1d c0       	rjmp	.+58     	; 0xf5e <timer_init+0xba>
     f24:	87 b3       	in	r24, 0x17	; 23
     f26:	88 60       	ori	r24, 0x08	; 8
     f28:	87 bb       	out	0x17, r24	; 23
     f2a:	83 b7       	in	r24, 0x33	; 51
     f2c:	80 61       	ori	r24, 0x10	; 16
     f2e:	83 bf       	out	0x33, r24	; 51
     f30:	83 b7       	in	r24, 0x33	; 51
     f32:	8f 7d       	andi	r24, 0xDF	; 223
     f34:	83 bf       	out	0x33, r24	; 51
     f36:	13 c0       	rjmp	.+38     	; 0xf5e <timer_init+0xba>
     f38:	87 b3       	in	r24, 0x17	; 23
     f3a:	88 60       	ori	r24, 0x08	; 8
     f3c:	87 bb       	out	0x17, r24	; 23
     f3e:	83 b7       	in	r24, 0x33	; 51
     f40:	8f 7e       	andi	r24, 0xEF	; 239
     f42:	83 bf       	out	0x33, r24	; 51
     f44:	83 b7       	in	r24, 0x33	; 51
     f46:	80 62       	ori	r24, 0x20	; 32
     f48:	83 bf       	out	0x33, r24	; 51
     f4a:	09 c0       	rjmp	.+18     	; 0xf5e <timer_init+0xba>
     f4c:	87 b3       	in	r24, 0x17	; 23
     f4e:	88 60       	ori	r24, 0x08	; 8
     f50:	87 bb       	out	0x17, r24	; 23
     f52:	83 b7       	in	r24, 0x33	; 51
     f54:	80 61       	ori	r24, 0x10	; 16
     f56:	83 bf       	out	0x33, r24	; 51
     f58:	83 b7       	in	r24, 0x33	; 51
     f5a:	80 62       	ori	r24, 0x20	; 32
     f5c:	83 bf       	out	0x33, r24	; 51
     f5e:	84 81       	ldd	r24, Z+4	; 0x04
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	09 f4       	brne	.+2      	; 0xf66 <timer_init+0xc2>
     f64:	44 c1       	rjmp	.+648    	; 0x11ee <timer_init+0x34a>
     f66:	85 30       	cpi	r24, 0x05	; 5
     f68:	09 f4       	brne	.+2      	; 0xf6c <timer_init+0xc8>
     f6a:	43 c1       	rjmp	.+646    	; 0x11f2 <timer_init+0x34e>
     f6c:	a0 81       	ld	r26, Z
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	ae 59       	subi	r26, 0x9E	; 158
     f72:	bf 4f       	sbci	r27, 0xFF	; 255
     f74:	8c 93       	st	X, r24
     f76:	82 81       	ldd	r24, Z+2	; 0x02
     f78:	81 11       	cpse	r24, r1
     f7a:	0b c0       	rjmp	.+22     	; 0xf92 <timer_init+0xee>
     f7c:	81 81       	ldd	r24, Z+1	; 0x01
     f7e:	81 11       	cpse	r24, r1
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <timer_init+0xe6>
     f82:	89 b7       	in	r24, 0x39	; 57
     f84:	81 60       	ori	r24, 0x01	; 1
     f86:	89 bf       	out	0x39, r24	; 57
     f88:	0a c0       	rjmp	.+20     	; 0xf9e <timer_init+0xfa>
     f8a:	89 b7       	in	r24, 0x39	; 57
     f8c:	82 60       	ori	r24, 0x02	; 2
     f8e:	89 bf       	out	0x39, r24	; 57
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <timer_init+0xfa>
     f92:	89 b7       	in	r24, 0x39	; 57
     f94:	8e 7f       	andi	r24, 0xFE	; 254
     f96:	89 bf       	out	0x39, r24	; 57
     f98:	89 b7       	in	r24, 0x39	; 57
     f9a:	8d 7f       	andi	r24, 0xFD	; 253
     f9c:	89 bf       	out	0x39, r24	; 57
     f9e:	85 81       	ldd	r24, Z+5	; 0x05
     fa0:	96 81       	ldd	r25, Z+6	; 0x06
     fa2:	8f 3f       	cpi	r24, 0xFF	; 255
     fa4:	91 05       	cpc	r25, r1
     fa6:	11 f0       	breq	.+4      	; 0xfac <timer_init+0x108>
     fa8:	08 f0       	brcs	.+2      	; 0xfac <timer_init+0x108>
     faa:	25 c1       	rjmp	.+586    	; 0x11f6 <timer_init+0x352>
     fac:	27 81       	ldd	r18, Z+7	; 0x07
     fae:	30 85       	ldd	r19, Z+8	; 0x08
     fb0:	2f 3f       	cpi	r18, 0xFF	; 255
     fb2:	31 05       	cpc	r19, r1
     fb4:	11 f0       	breq	.+4      	; 0xfba <timer_init+0x116>
     fb6:	08 f0       	brcs	.+2      	; 0xfba <timer_init+0x116>
     fb8:	20 c1       	rjmp	.+576    	; 0x11fa <timer_init+0x356>
     fba:	21 81       	ldd	r18, Z+1	; 0x01
     fbc:	21 11       	cpse	r18, r1
     fbe:	04 c0       	rjmp	.+8      	; 0xfc8 <timer_init+0x124>
     fc0:	82 bf       	out	0x32, r24	; 50
     fc2:	1c be       	out	0x3c, r1	; 60
     fc4:	86 e0       	ldi	r24, 0x06	; 6
     fc6:	24 c1       	rjmp	.+584    	; 0x1210 <timer_init+0x36c>
     fc8:	12 be       	out	0x32, r1	; 50
     fca:	87 81       	ldd	r24, Z+7	; 0x07
     fcc:	8c bf       	out	0x3c, r24	; 60
     fce:	86 e0       	ldi	r24, 0x06	; 6
     fd0:	1f c1       	rjmp	.+574    	; 0x1210 <timer_init+0x36c>
     fd2:	81 30       	cpi	r24, 0x01	; 1
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <timer_init+0x134>
     fd6:	85 c0       	rjmp	.+266    	; 0x10e2 <timer_init+0x23e>
     fd8:	8f b5       	in	r24, 0x2f	; 47
     fda:	88 60       	ori	r24, 0x08	; 8
     fdc:	8f bd       	out	0x2f, r24	; 47
     fde:	8f b5       	in	r24, 0x2f	; 47
     fe0:	84 60       	ori	r24, 0x04	; 4
     fe2:	8f bd       	out	0x2f, r24	; 47
     fe4:	81 81       	ldd	r24, Z+1	; 0x01
     fe6:	88 23       	and	r24, r24
     fe8:	19 f0       	breq	.+6      	; 0xff0 <timer_init+0x14c>
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	71 f0       	breq	.+28     	; 0x100a <timer_init+0x166>
     fee:	19 c0       	rjmp	.+50     	; 0x1022 <timer_init+0x17e>
     ff0:	8f b5       	in	r24, 0x2f	; 47
     ff2:	8e 7f       	andi	r24, 0xFE	; 254
     ff4:	8f bd       	out	0x2f, r24	; 47
     ff6:	8f b5       	in	r24, 0x2f	; 47
     ff8:	8d 7f       	andi	r24, 0xFD	; 253
     ffa:	8f bd       	out	0x2f, r24	; 47
     ffc:	8e b5       	in	r24, 0x2e	; 46
     ffe:	87 7f       	andi	r24, 0xF7	; 247
    1000:	8e bd       	out	0x2e, r24	; 46
    1002:	8e b5       	in	r24, 0x2e	; 46
    1004:	8f 7e       	andi	r24, 0xEF	; 239
    1006:	8e bd       	out	0x2e, r24	; 46
    1008:	0c c0       	rjmp	.+24     	; 0x1022 <timer_init+0x17e>
    100a:	8f b5       	in	r24, 0x2f	; 47
    100c:	8e 7f       	andi	r24, 0xFE	; 254
    100e:	8f bd       	out	0x2f, r24	; 47
    1010:	8f b5       	in	r24, 0x2f	; 47
    1012:	8d 7f       	andi	r24, 0xFD	; 253
    1014:	8f bd       	out	0x2f, r24	; 47
    1016:	8e b5       	in	r24, 0x2e	; 46
    1018:	88 60       	ori	r24, 0x08	; 8
    101a:	8e bd       	out	0x2e, r24	; 46
    101c:	8e b5       	in	r24, 0x2e	; 46
    101e:	8f 7e       	andi	r24, 0xEF	; 239
    1020:	8e bd       	out	0x2e, r24	; 46
    1022:	83 81       	ldd	r24, Z+3	; 0x03
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	69 f0       	breq	.+26     	; 0x1042 <timer_init+0x19e>
    1028:	28 f0       	brcs	.+10     	; 0x1034 <timer_init+0x190>
    102a:	82 30       	cpi	r24, 0x02	; 2
    102c:	a1 f0       	breq	.+40     	; 0x1056 <timer_init+0x1b2>
    102e:	83 30       	cpi	r24, 0x03	; 3
    1030:	e1 f0       	breq	.+56     	; 0x106a <timer_init+0x1c6>
    1032:	24 c0       	rjmp	.+72     	; 0x107c <timer_init+0x1d8>
    1034:	8f b5       	in	r24, 0x2f	; 47
    1036:	8f 7b       	andi	r24, 0xBF	; 191
    1038:	8f bd       	out	0x2f, r24	; 47
    103a:	8f b5       	in	r24, 0x2f	; 47
    103c:	8f 77       	andi	r24, 0x7F	; 127
    103e:	8f bd       	out	0x2f, r24	; 47
    1040:	1d c0       	rjmp	.+58     	; 0x107c <timer_init+0x1d8>
    1042:	81 b3       	in	r24, 0x11	; 17
    1044:	80 62       	ori	r24, 0x20	; 32
    1046:	81 bb       	out	0x11, r24	; 17
    1048:	8f b5       	in	r24, 0x2f	; 47
    104a:	80 64       	ori	r24, 0x40	; 64
    104c:	8f bd       	out	0x2f, r24	; 47
    104e:	8f b5       	in	r24, 0x2f	; 47
    1050:	8f 77       	andi	r24, 0x7F	; 127
    1052:	8f bd       	out	0x2f, r24	; 47
    1054:	13 c0       	rjmp	.+38     	; 0x107c <timer_init+0x1d8>
    1056:	81 b3       	in	r24, 0x11	; 17
    1058:	80 62       	ori	r24, 0x20	; 32
    105a:	81 bb       	out	0x11, r24	; 17
    105c:	8f b5       	in	r24, 0x2f	; 47
    105e:	8f 7b       	andi	r24, 0xBF	; 191
    1060:	8f bd       	out	0x2f, r24	; 47
    1062:	8f b5       	in	r24, 0x2f	; 47
    1064:	80 68       	ori	r24, 0x80	; 128
    1066:	8f bd       	out	0x2f, r24	; 47
    1068:	09 c0       	rjmp	.+18     	; 0x107c <timer_init+0x1d8>
    106a:	81 b3       	in	r24, 0x11	; 17
    106c:	80 62       	ori	r24, 0x20	; 32
    106e:	81 bb       	out	0x11, r24	; 17
    1070:	8f b5       	in	r24, 0x2f	; 47
    1072:	80 64       	ori	r24, 0x40	; 64
    1074:	8f bd       	out	0x2f, r24	; 47
    1076:	8f b5       	in	r24, 0x2f	; 47
    1078:	80 68       	ori	r24, 0x80	; 128
    107a:	8f bd       	out	0x2f, r24	; 47
    107c:	84 81       	ldd	r24, Z+4	; 0x04
    107e:	83 30       	cpi	r24, 0x03	; 3
    1080:	09 f4       	brne	.+2      	; 0x1084 <timer_init+0x1e0>
    1082:	bd c0       	rjmp	.+378    	; 0x11fe <timer_init+0x35a>
    1084:	85 30       	cpi	r24, 0x05	; 5
    1086:	09 f4       	brne	.+2      	; 0x108a <timer_init+0x1e6>
    1088:	bc c0       	rjmp	.+376    	; 0x1202 <timer_init+0x35e>
    108a:	a0 81       	ld	r26, Z
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	ae 59       	subi	r26, 0x9E	; 158
    1090:	bf 4f       	sbci	r27, 0xFF	; 255
    1092:	8c 93       	st	X, r24
    1094:	82 81       	ldd	r24, Z+2	; 0x02
    1096:	81 11       	cpse	r24, r1
    1098:	0b c0       	rjmp	.+22     	; 0x10b0 <timer_init+0x20c>
    109a:	81 81       	ldd	r24, Z+1	; 0x01
    109c:	81 11       	cpse	r24, r1
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <timer_init+0x204>
    10a0:	89 b7       	in	r24, 0x39	; 57
    10a2:	84 60       	ori	r24, 0x04	; 4
    10a4:	89 bf       	out	0x39, r24	; 57
    10a6:	0a c0       	rjmp	.+20     	; 0x10bc <timer_init+0x218>
    10a8:	89 b7       	in	r24, 0x39	; 57
    10aa:	80 61       	ori	r24, 0x10	; 16
    10ac:	89 bf       	out	0x39, r24	; 57
    10ae:	06 c0       	rjmp	.+12     	; 0x10bc <timer_init+0x218>
    10b0:	89 b7       	in	r24, 0x39	; 57
    10b2:	8b 7f       	andi	r24, 0xFB	; 251
    10b4:	89 bf       	out	0x39, r24	; 57
    10b6:	89 b7       	in	r24, 0x39	; 57
    10b8:	8f 7e       	andi	r24, 0xEF	; 239
    10ba:	89 bf       	out	0x39, r24	; 57
    10bc:	81 81       	ldd	r24, Z+1	; 0x01
    10be:	81 11       	cpse	r24, r1
    10c0:	08 c0       	rjmp	.+16     	; 0x10d2 <timer_init+0x22e>
    10c2:	85 81       	ldd	r24, Z+5	; 0x05
    10c4:	96 81       	ldd	r25, Z+6	; 0x06
    10c6:	9d bd       	out	0x2d, r25	; 45
    10c8:	8c bd       	out	0x2c, r24	; 44
    10ca:	1b bc       	out	0x2b, r1	; 43
    10cc:	1a bc       	out	0x2a, r1	; 42
    10ce:	86 e0       	ldi	r24, 0x06	; 6
    10d0:	9f c0       	rjmp	.+318    	; 0x1210 <timer_init+0x36c>
    10d2:	1d bc       	out	0x2d, r1	; 45
    10d4:	1c bc       	out	0x2c, r1	; 44
    10d6:	87 81       	ldd	r24, Z+7	; 0x07
    10d8:	90 85       	ldd	r25, Z+8	; 0x08
    10da:	9b bd       	out	0x2b, r25	; 43
    10dc:	8a bd       	out	0x2a, r24	; 42
    10de:	86 e0       	ldi	r24, 0x06	; 6
    10e0:	97 c0       	rjmp	.+302    	; 0x1210 <timer_init+0x36c>
    10e2:	85 b5       	in	r24, 0x25	; 37
    10e4:	80 68       	ori	r24, 0x80	; 128
    10e6:	85 bd       	out	0x25, r24	; 37
    10e8:	81 81       	ldd	r24, Z+1	; 0x01
    10ea:	88 23       	and	r24, r24
    10ec:	19 f0       	breq	.+6      	; 0x10f4 <timer_init+0x250>
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	41 f0       	breq	.+16     	; 0x1102 <timer_init+0x25e>
    10f2:	0d c0       	rjmp	.+26     	; 0x110e <timer_init+0x26a>
    10f4:	85 b5       	in	r24, 0x25	; 37
    10f6:	8f 7b       	andi	r24, 0xBF	; 191
    10f8:	85 bd       	out	0x25, r24	; 37
    10fa:	85 b5       	in	r24, 0x25	; 37
    10fc:	87 7f       	andi	r24, 0xF7	; 247
    10fe:	85 bd       	out	0x25, r24	; 37
    1100:	06 c0       	rjmp	.+12     	; 0x110e <timer_init+0x26a>
    1102:	85 b5       	in	r24, 0x25	; 37
    1104:	8f 7b       	andi	r24, 0xBF	; 191
    1106:	85 bd       	out	0x25, r24	; 37
    1108:	85 b5       	in	r24, 0x25	; 37
    110a:	88 60       	ori	r24, 0x08	; 8
    110c:	85 bd       	out	0x25, r24	; 37
    110e:	83 81       	ldd	r24, Z+3	; 0x03
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	69 f0       	breq	.+26     	; 0x112e <timer_init+0x28a>
    1114:	28 f0       	brcs	.+10     	; 0x1120 <timer_init+0x27c>
    1116:	82 30       	cpi	r24, 0x02	; 2
    1118:	a1 f0       	breq	.+40     	; 0x1142 <timer_init+0x29e>
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	e1 f0       	breq	.+56     	; 0x1156 <timer_init+0x2b2>
    111e:	24 c0       	rjmp	.+72     	; 0x1168 <timer_init+0x2c4>
    1120:	85 b5       	in	r24, 0x25	; 37
    1122:	8f 7e       	andi	r24, 0xEF	; 239
    1124:	85 bd       	out	0x25, r24	; 37
    1126:	85 b5       	in	r24, 0x25	; 37
    1128:	8f 7d       	andi	r24, 0xDF	; 223
    112a:	85 bd       	out	0x25, r24	; 37
    112c:	1d c0       	rjmp	.+58     	; 0x1168 <timer_init+0x2c4>
    112e:	81 b3       	in	r24, 0x11	; 17
    1130:	80 68       	ori	r24, 0x80	; 128
    1132:	81 bb       	out	0x11, r24	; 17
    1134:	85 b5       	in	r24, 0x25	; 37
    1136:	80 61       	ori	r24, 0x10	; 16
    1138:	85 bd       	out	0x25, r24	; 37
    113a:	85 b5       	in	r24, 0x25	; 37
    113c:	8f 7d       	andi	r24, 0xDF	; 223
    113e:	85 bd       	out	0x25, r24	; 37
    1140:	13 c0       	rjmp	.+38     	; 0x1168 <timer_init+0x2c4>
    1142:	81 b3       	in	r24, 0x11	; 17
    1144:	80 68       	ori	r24, 0x80	; 128
    1146:	81 bb       	out	0x11, r24	; 17
    1148:	85 b5       	in	r24, 0x25	; 37
    114a:	8f 7e       	andi	r24, 0xEF	; 239
    114c:	85 bd       	out	0x25, r24	; 37
    114e:	85 b5       	in	r24, 0x25	; 37
    1150:	80 62       	ori	r24, 0x20	; 32
    1152:	85 bd       	out	0x25, r24	; 37
    1154:	09 c0       	rjmp	.+18     	; 0x1168 <timer_init+0x2c4>
    1156:	81 b3       	in	r24, 0x11	; 17
    1158:	80 68       	ori	r24, 0x80	; 128
    115a:	81 bb       	out	0x11, r24	; 17
    115c:	85 b5       	in	r24, 0x25	; 37
    115e:	80 61       	ori	r24, 0x10	; 16
    1160:	85 bd       	out	0x25, r24	; 37
    1162:	85 b5       	in	r24, 0x25	; 37
    1164:	80 62       	ori	r24, 0x20	; 32
    1166:	85 bd       	out	0x25, r24	; 37
    1168:	84 81       	ldd	r24, Z+4	; 0x04
    116a:	98 ef       	ldi	r25, 0xF8	; 248
    116c:	98 0f       	add	r25, r24
    116e:	92 30       	cpi	r25, 0x02	; 2
    1170:	08 f4       	brcc	.+2      	; 0x1174 <timer_init+0x2d0>
    1172:	49 c0       	rjmp	.+146    	; 0x1206 <timer_init+0x362>
    1174:	a0 81       	ld	r26, Z
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	ae 59       	subi	r26, 0x9E	; 158
    117a:	bf 4f       	sbci	r27, 0xFF	; 255
    117c:	8c 93       	st	X, r24
    117e:	82 81       	ldd	r24, Z+2	; 0x02
    1180:	81 11       	cpse	r24, r1
    1182:	0b c0       	rjmp	.+22     	; 0x119a <timer_init+0x2f6>
    1184:	81 81       	ldd	r24, Z+1	; 0x01
    1186:	81 11       	cpse	r24, r1
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <timer_init+0x2ee>
    118a:	89 b7       	in	r24, 0x39	; 57
    118c:	80 64       	ori	r24, 0x40	; 64
    118e:	89 bf       	out	0x39, r24	; 57
    1190:	0a c0       	rjmp	.+20     	; 0x11a6 <timer_init+0x302>
    1192:	89 b7       	in	r24, 0x39	; 57
    1194:	80 68       	ori	r24, 0x80	; 128
    1196:	89 bf       	out	0x39, r24	; 57
    1198:	06 c0       	rjmp	.+12     	; 0x11a6 <timer_init+0x302>
    119a:	89 b7       	in	r24, 0x39	; 57
    119c:	8f 7b       	andi	r24, 0xBF	; 191
    119e:	89 bf       	out	0x39, r24	; 57
    11a0:	89 b7       	in	r24, 0x39	; 57
    11a2:	8f 77       	andi	r24, 0x7F	; 127
    11a4:	89 bf       	out	0x39, r24	; 57
    11a6:	85 81       	ldd	r24, Z+5	; 0x05
    11a8:	96 81       	ldd	r25, Z+6	; 0x06
    11aa:	8f 3f       	cpi	r24, 0xFF	; 255
    11ac:	91 05       	cpc	r25, r1
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <timer_init+0x30e>
    11b0:	60 f5       	brcc	.+88     	; 0x120a <timer_init+0x366>
    11b2:	27 81       	ldd	r18, Z+7	; 0x07
    11b4:	30 85       	ldd	r19, Z+8	; 0x08
    11b6:	2f 3f       	cpi	r18, 0xFF	; 255
    11b8:	31 05       	cpc	r19, r1
    11ba:	09 f0       	breq	.+2      	; 0x11be <timer_init+0x31a>
    11bc:	40 f5       	brcc	.+80     	; 0x120e <timer_init+0x36a>
    11be:	21 81       	ldd	r18, Z+1	; 0x01
    11c0:	21 11       	cpse	r18, r1
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <timer_init+0x328>
    11c4:	84 bd       	out	0x24, r24	; 36
    11c6:	13 bc       	out	0x23, r1	; 35
    11c8:	86 e0       	ldi	r24, 0x06	; 6
    11ca:	22 c0       	rjmp	.+68     	; 0x1210 <timer_init+0x36c>
    11cc:	14 bc       	out	0x24, r1	; 36
    11ce:	87 81       	ldd	r24, Z+7	; 0x07
    11d0:	83 bd       	out	0x23, r24	; 35
    11d2:	86 e0       	ldi	r24, 0x06	; 6
    11d4:	1d c0       	rjmp	.+58     	; 0x1210 <timer_init+0x36c>
    11d6:	85 e0       	ldi	r24, 0x05	; 5
    11d8:	1b c0       	rjmp	.+54     	; 0x1210 <timer_init+0x36c>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	19 c0       	rjmp	.+50     	; 0x1210 <timer_init+0x36c>
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	17 c0       	rjmp	.+46     	; 0x1210 <timer_init+0x36c>
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	15 c0       	rjmp	.+42     	; 0x1210 <timer_init+0x36c>
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	13 c0       	rjmp	.+38     	; 0x1210 <timer_init+0x36c>
    11ea:	84 e0       	ldi	r24, 0x04	; 4
    11ec:	11 c0       	rjmp	.+34     	; 0x1210 <timer_init+0x36c>
    11ee:	84 e0       	ldi	r24, 0x04	; 4
    11f0:	0f c0       	rjmp	.+30     	; 0x1210 <timer_init+0x36c>
    11f2:	84 e0       	ldi	r24, 0x04	; 4
    11f4:	0d c0       	rjmp	.+26     	; 0x1210 <timer_init+0x36c>
    11f6:	85 e0       	ldi	r24, 0x05	; 5
    11f8:	0b c0       	rjmp	.+22     	; 0x1210 <timer_init+0x36c>
    11fa:	85 e0       	ldi	r24, 0x05	; 5
    11fc:	09 c0       	rjmp	.+18     	; 0x1210 <timer_init+0x36c>
    11fe:	84 e0       	ldi	r24, 0x04	; 4
    1200:	07 c0       	rjmp	.+14     	; 0x1210 <timer_init+0x36c>
    1202:	84 e0       	ldi	r24, 0x04	; 4
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <timer_init+0x36c>
    1206:	84 e0       	ldi	r24, 0x04	; 4
    1208:	03 c0       	rjmp	.+6      	; 0x1210 <timer_init+0x36c>
    120a:	85 e0       	ldi	r24, 0x05	; 5
    120c:	01 c0       	rjmp	.+2      	; 0x1210 <timer_init+0x36c>
    120e:	85 e0       	ldi	r24, 0x05	; 5
    1210:	86 30       	cpi	r24, 0x06	; 6
    1212:	31 f4       	brne	.+12     	; 0x1220 <timer_init+0x37c>
    1214:	e0 81       	ld	r30, Z
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	e3 57       	subi	r30, 0x73	; 115
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	90 83       	st	Z, r25
    1220:	08 95       	ret

00001222 <timer_setInitialValue>:
    1222:	83 30       	cpi	r24, 0x03	; 3
    1224:	f8 f4       	brcc	.+62     	; 0x1264 <timer_setInitialValue+0x42>
    1226:	e8 2f       	mov	r30, r24
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	e3 57       	subi	r30, 0x73	; 115
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	90 81       	ld	r25, Z
    1230:	91 30       	cpi	r25, 0x01	; 1
    1232:	d1 f4       	brne	.+52     	; 0x1268 <timer_setInitialValue+0x46>
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	59 f0       	breq	.+22     	; 0x124e <timer_setInitialValue+0x2c>
    1238:	18 f0       	brcs	.+6      	; 0x1240 <timer_setInitialValue+0x1e>
    123a:	82 30       	cpi	r24, 0x02	; 2
    123c:	61 f0       	breq	.+24     	; 0x1256 <timer_setInitialValue+0x34>
    123e:	16 c0       	rjmp	.+44     	; 0x126c <timer_setInitialValue+0x4a>
    1240:	6f 3f       	cpi	r22, 0xFF	; 255
    1242:	71 05       	cpc	r23, r1
    1244:	09 f0       	breq	.+2      	; 0x1248 <timer_setInitialValue+0x26>
    1246:	a0 f4       	brcc	.+40     	; 0x1270 <timer_setInitialValue+0x4e>
    1248:	62 bf       	out	0x32, r22	; 50
    124a:	86 e0       	ldi	r24, 0x06	; 6
    124c:	08 95       	ret
    124e:	7d bd       	out	0x2d, r23	; 45
    1250:	6c bd       	out	0x2c, r22	; 44
    1252:	86 e0       	ldi	r24, 0x06	; 6
    1254:	08 95       	ret
    1256:	6f 3f       	cpi	r22, 0xFF	; 255
    1258:	71 05       	cpc	r23, r1
    125a:	09 f0       	breq	.+2      	; 0x125e <timer_setInitialValue+0x3c>
    125c:	58 f4       	brcc	.+22     	; 0x1274 <timer_setInitialValue+0x52>
    125e:	64 bd       	out	0x24, r22	; 36
    1260:	86 e0       	ldi	r24, 0x06	; 6
    1262:	08 95       	ret
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	08 95       	ret
    1268:	88 e0       	ldi	r24, 0x08	; 8
    126a:	08 95       	ret
    126c:	86 e0       	ldi	r24, 0x06	; 6
    126e:	08 95       	ret
    1270:	85 e0       	ldi	r24, 0x05	; 5
    1272:	08 95       	ret
    1274:	85 e0       	ldi	r24, 0x05	; 5
    1276:	08 95       	ret

00001278 <timer_start>:
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	08 f0       	brcs	.+2      	; 0x127e <timer_start+0x6>
    127c:	d4 c0       	rjmp	.+424    	; 0x1426 <timer_start+0x1ae>
    127e:	e8 2f       	mov	r30, r24
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	e3 57       	subi	r30, 0x73	; 115
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	90 81       	ld	r25, Z
    1288:	91 30       	cpi	r25, 0x01	; 1
    128a:	09 f0       	breq	.+2      	; 0x128e <timer_start+0x16>
    128c:	ce c0       	rjmp	.+412    	; 0x142a <timer_start+0x1b2>
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	09 f4       	brne	.+2      	; 0x1294 <timer_start+0x1c>
    1292:	48 c0       	rjmp	.+144    	; 0x1324 <timer_start+0xac>
    1294:	20 f0       	brcs	.+8      	; 0x129e <timer_start+0x26>
    1296:	82 30       	cpi	r24, 0x02	; 2
    1298:	09 f4       	brne	.+2      	; 0x129c <timer_start+0x24>
    129a:	87 c0       	rjmp	.+270    	; 0x13aa <timer_start+0x132>
    129c:	c8 c0       	rjmp	.+400    	; 0x142e <timer_start+0x1b6>
    129e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gl_enu_tmr_clk>
    12a2:	8a 30       	cpi	r24, 0x0A	; 10
    12a4:	08 f0       	brcs	.+2      	; 0x12a8 <timer_start+0x30>
    12a6:	c5 c0       	rjmp	.+394    	; 0x1432 <timer_start+0x1ba>
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	09 f4       	brne	.+2      	; 0x12ae <timer_start+0x36>
    12ac:	c4 c0       	rjmp	.+392    	; 0x1436 <timer_start+0x1be>
    12ae:	85 30       	cpi	r24, 0x05	; 5
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <timer_start+0x3c>
    12b2:	c3 c0       	rjmp	.+390    	; 0x143a <timer_start+0x1c2>
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	8a 30       	cpi	r24, 0x0A	; 10
    12b8:	91 05       	cpc	r25, r1
    12ba:	08 f0       	brcs	.+2      	; 0x12be <timer_start+0x46>
    12bc:	c0 c0       	rjmp	.+384    	; 0x143e <timer_start+0x1c6>
    12be:	fc 01       	movw	r30, r24
    12c0:	e6 5d       	subi	r30, 0xD6	; 214
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__tablejump2__>
    12c8:	83 b7       	in	r24, 0x33	; 51
    12ca:	88 7f       	andi	r24, 0xF8	; 248
    12cc:	83 bf       	out	0x33, r24	; 51
    12ce:	86 e0       	ldi	r24, 0x06	; 6
    12d0:	08 95       	ret
    12d2:	83 b7       	in	r24, 0x33	; 51
    12d4:	88 7f       	andi	r24, 0xF8	; 248
    12d6:	81 60       	ori	r24, 0x01	; 1
    12d8:	83 bf       	out	0x33, r24	; 51
    12da:	86 e0       	ldi	r24, 0x06	; 6
    12dc:	08 95       	ret
    12de:	83 b7       	in	r24, 0x33	; 51
    12e0:	88 7f       	andi	r24, 0xF8	; 248
    12e2:	82 60       	ori	r24, 0x02	; 2
    12e4:	83 bf       	out	0x33, r24	; 51
    12e6:	86 e0       	ldi	r24, 0x06	; 6
    12e8:	08 95       	ret
    12ea:	83 b7       	in	r24, 0x33	; 51
    12ec:	88 7f       	andi	r24, 0xF8	; 248
    12ee:	83 60       	ori	r24, 0x03	; 3
    12f0:	83 bf       	out	0x33, r24	; 51
    12f2:	86 e0       	ldi	r24, 0x06	; 6
    12f4:	08 95       	ret
    12f6:	83 b7       	in	r24, 0x33	; 51
    12f8:	88 7f       	andi	r24, 0xF8	; 248
    12fa:	84 60       	ori	r24, 0x04	; 4
    12fc:	83 bf       	out	0x33, r24	; 51
    12fe:	86 e0       	ldi	r24, 0x06	; 6
    1300:	08 95       	ret
    1302:	83 b7       	in	r24, 0x33	; 51
    1304:	88 7f       	andi	r24, 0xF8	; 248
    1306:	85 60       	ori	r24, 0x05	; 5
    1308:	83 bf       	out	0x33, r24	; 51
    130a:	86 e0       	ldi	r24, 0x06	; 6
    130c:	08 95       	ret
    130e:	83 b7       	in	r24, 0x33	; 51
    1310:	88 7f       	andi	r24, 0xF8	; 248
    1312:	86 60       	ori	r24, 0x06	; 6
    1314:	83 bf       	out	0x33, r24	; 51
    1316:	86 e0       	ldi	r24, 0x06	; 6
    1318:	08 95       	ret
    131a:	83 b7       	in	r24, 0x33	; 51
    131c:	87 60       	ori	r24, 0x07	; 7
    131e:	83 bf       	out	0x33, r24	; 51
    1320:	86 e0       	ldi	r24, 0x06	; 6
    1322:	08 95       	ret
    1324:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <gl_enu_tmr_clk+0x1>
    1328:	8a 30       	cpi	r24, 0x0A	; 10
    132a:	08 f0       	brcs	.+2      	; 0x132e <timer_start+0xb6>
    132c:	8a c0       	rjmp	.+276    	; 0x1442 <timer_start+0x1ca>
    132e:	83 30       	cpi	r24, 0x03	; 3
    1330:	09 f4       	brne	.+2      	; 0x1334 <timer_start+0xbc>
    1332:	89 c0       	rjmp	.+274    	; 0x1446 <timer_start+0x1ce>
    1334:	85 30       	cpi	r24, 0x05	; 5
    1336:	09 f4       	brne	.+2      	; 0x133a <timer_start+0xc2>
    1338:	88 c0       	rjmp	.+272    	; 0x144a <timer_start+0x1d2>
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	8a 30       	cpi	r24, 0x0A	; 10
    133e:	91 05       	cpc	r25, r1
    1340:	08 f0       	brcs	.+2      	; 0x1344 <timer_start+0xcc>
    1342:	85 c0       	rjmp	.+266    	; 0x144e <timer_start+0x1d6>
    1344:	fc 01       	movw	r30, r24
    1346:	ec 5c       	subi	r30, 0xCC	; 204
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__tablejump2__>
    134e:	8e b5       	in	r24, 0x2e	; 46
    1350:	88 7f       	andi	r24, 0xF8	; 248
    1352:	8e bd       	out	0x2e, r24	; 46
    1354:	86 e0       	ldi	r24, 0x06	; 6
    1356:	08 95       	ret
    1358:	8e b5       	in	r24, 0x2e	; 46
    135a:	88 7f       	andi	r24, 0xF8	; 248
    135c:	81 60       	ori	r24, 0x01	; 1
    135e:	8e bd       	out	0x2e, r24	; 46
    1360:	86 e0       	ldi	r24, 0x06	; 6
    1362:	08 95       	ret
    1364:	8e b5       	in	r24, 0x2e	; 46
    1366:	88 7f       	andi	r24, 0xF8	; 248
    1368:	82 60       	ori	r24, 0x02	; 2
    136a:	8e bd       	out	0x2e, r24	; 46
    136c:	86 e0       	ldi	r24, 0x06	; 6
    136e:	08 95       	ret
    1370:	8e b5       	in	r24, 0x2e	; 46
    1372:	88 7f       	andi	r24, 0xF8	; 248
    1374:	83 60       	ori	r24, 0x03	; 3
    1376:	8e bd       	out	0x2e, r24	; 46
    1378:	86 e0       	ldi	r24, 0x06	; 6
    137a:	08 95       	ret
    137c:	8e b5       	in	r24, 0x2e	; 46
    137e:	88 7f       	andi	r24, 0xF8	; 248
    1380:	84 60       	ori	r24, 0x04	; 4
    1382:	8e bd       	out	0x2e, r24	; 46
    1384:	86 e0       	ldi	r24, 0x06	; 6
    1386:	08 95       	ret
    1388:	8e b5       	in	r24, 0x2e	; 46
    138a:	88 7f       	andi	r24, 0xF8	; 248
    138c:	85 60       	ori	r24, 0x05	; 5
    138e:	8e bd       	out	0x2e, r24	; 46
    1390:	86 e0       	ldi	r24, 0x06	; 6
    1392:	08 95       	ret
    1394:	8e b5       	in	r24, 0x2e	; 46
    1396:	88 7f       	andi	r24, 0xF8	; 248
    1398:	86 60       	ori	r24, 0x06	; 6
    139a:	8e bd       	out	0x2e, r24	; 46
    139c:	86 e0       	ldi	r24, 0x06	; 6
    139e:	08 95       	ret
    13a0:	8e b5       	in	r24, 0x2e	; 46
    13a2:	87 60       	ori	r24, 0x07	; 7
    13a4:	8e bd       	out	0x2e, r24	; 46
    13a6:	86 e0       	ldi	r24, 0x06	; 6
    13a8:	08 95       	ret
    13aa:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <gl_enu_tmr_clk+0x2>
    13ae:	e8 30       	cpi	r30, 0x08	; 8
    13b0:	08 f0       	brcs	.+2      	; 0x13b4 <timer_start+0x13c>
    13b2:	4f c0       	rjmp	.+158    	; 0x1452 <timer_start+0x1da>
    13b4:	8e 2f       	mov	r24, r30
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	88 30       	cpi	r24, 0x08	; 8
    13ba:	91 05       	cpc	r25, r1
    13bc:	08 f0       	brcs	.+2      	; 0x13c0 <timer_start+0x148>
    13be:	4b c0       	rjmp	.+150    	; 0x1456 <timer_start+0x1de>
    13c0:	fc 01       	movw	r30, r24
    13c2:	e2 5c       	subi	r30, 0xC2	; 194
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__tablejump2__>
    13ca:	85 b5       	in	r24, 0x25	; 37
    13cc:	88 7f       	andi	r24, 0xF8	; 248
    13ce:	85 bd       	out	0x25, r24	; 37
    13d0:	86 e0       	ldi	r24, 0x06	; 6
    13d2:	08 95       	ret
    13d4:	85 b5       	in	r24, 0x25	; 37
    13d6:	88 7f       	andi	r24, 0xF8	; 248
    13d8:	81 60       	ori	r24, 0x01	; 1
    13da:	85 bd       	out	0x25, r24	; 37
    13dc:	86 e0       	ldi	r24, 0x06	; 6
    13de:	08 95       	ret
    13e0:	85 b5       	in	r24, 0x25	; 37
    13e2:	88 7f       	andi	r24, 0xF8	; 248
    13e4:	82 60       	ori	r24, 0x02	; 2
    13e6:	85 bd       	out	0x25, r24	; 37
    13e8:	86 e0       	ldi	r24, 0x06	; 6
    13ea:	08 95       	ret
    13ec:	85 b5       	in	r24, 0x25	; 37
    13ee:	88 7f       	andi	r24, 0xF8	; 248
    13f0:	83 60       	ori	r24, 0x03	; 3
    13f2:	85 bd       	out	0x25, r24	; 37
    13f4:	86 e0       	ldi	r24, 0x06	; 6
    13f6:	08 95       	ret
    13f8:	85 b5       	in	r24, 0x25	; 37
    13fa:	88 7f       	andi	r24, 0xF8	; 248
    13fc:	84 60       	ori	r24, 0x04	; 4
    13fe:	85 bd       	out	0x25, r24	; 37
    1400:	86 e0       	ldi	r24, 0x06	; 6
    1402:	08 95       	ret
    1404:	85 b5       	in	r24, 0x25	; 37
    1406:	88 7f       	andi	r24, 0xF8	; 248
    1408:	85 60       	ori	r24, 0x05	; 5
    140a:	85 bd       	out	0x25, r24	; 37
    140c:	86 e0       	ldi	r24, 0x06	; 6
    140e:	08 95       	ret
    1410:	85 b5       	in	r24, 0x25	; 37
    1412:	88 7f       	andi	r24, 0xF8	; 248
    1414:	86 60       	ori	r24, 0x06	; 6
    1416:	85 bd       	out	0x25, r24	; 37
    1418:	86 e0       	ldi	r24, 0x06	; 6
    141a:	08 95       	ret
    141c:	85 b5       	in	r24, 0x25	; 37
    141e:	87 60       	ori	r24, 0x07	; 7
    1420:	85 bd       	out	0x25, r24	; 37
    1422:	86 e0       	ldi	r24, 0x06	; 6
    1424:	08 95       	ret
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	08 95       	ret
    142a:	88 e0       	ldi	r24, 0x08	; 8
    142c:	08 95       	ret
    142e:	86 e0       	ldi	r24, 0x06	; 6
    1430:	08 95       	ret
    1432:	84 e0       	ldi	r24, 0x04	; 4
    1434:	08 95       	ret
    1436:	84 e0       	ldi	r24, 0x04	; 4
    1438:	08 95       	ret
    143a:	84 e0       	ldi	r24, 0x04	; 4
    143c:	08 95       	ret
    143e:	86 e0       	ldi	r24, 0x06	; 6
    1440:	08 95       	ret
    1442:	84 e0       	ldi	r24, 0x04	; 4
    1444:	08 95       	ret
    1446:	84 e0       	ldi	r24, 0x04	; 4
    1448:	08 95       	ret
    144a:	84 e0       	ldi	r24, 0x04	; 4
    144c:	08 95       	ret
    144e:	86 e0       	ldi	r24, 0x06	; 6
    1450:	08 95       	ret
    1452:	84 e0       	ldi	r24, 0x04	; 4
    1454:	08 95       	ret
    1456:	86 e0       	ldi	r24, 0x06	; 6
    1458:	08 95       	ret

0000145a <timer_stop>:
    145a:	83 30       	cpi	r24, 0x03	; 3
    145c:	e0 f4       	brcc	.+56     	; 0x1496 <timer_stop+0x3c>
    145e:	e8 2f       	mov	r30, r24
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	e3 57       	subi	r30, 0x73	; 115
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	90 81       	ld	r25, Z
    1468:	91 30       	cpi	r25, 0x01	; 1
    146a:	b9 f4       	brne	.+46     	; 0x149a <timer_stop+0x40>
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	49 f0       	breq	.+18     	; 0x1482 <timer_stop+0x28>
    1470:	18 f0       	brcs	.+6      	; 0x1478 <timer_stop+0x1e>
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	59 f0       	breq	.+22     	; 0x148c <timer_stop+0x32>
    1476:	13 c0       	rjmp	.+38     	; 0x149e <timer_stop+0x44>
    1478:	83 b7       	in	r24, 0x33	; 51
    147a:	88 7f       	andi	r24, 0xF8	; 248
    147c:	83 bf       	out	0x33, r24	; 51
    147e:	86 e0       	ldi	r24, 0x06	; 6
    1480:	08 95       	ret
    1482:	8e b5       	in	r24, 0x2e	; 46
    1484:	88 7f       	andi	r24, 0xF8	; 248
    1486:	8e bd       	out	0x2e, r24	; 46
    1488:	86 e0       	ldi	r24, 0x06	; 6
    148a:	08 95       	ret
    148c:	85 b5       	in	r24, 0x25	; 37
    148e:	88 7f       	andi	r24, 0xF8	; 248
    1490:	85 bd       	out	0x25, r24	; 37
    1492:	86 e0       	ldi	r24, 0x06	; 6
    1494:	08 95       	ret
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	08 95       	ret
    149a:	88 e0       	ldi	r24, 0x08	; 8
    149c:	08 95       	ret
    149e:	86 e0       	ldi	r24, 0x06	; 6
    14a0:	08 95       	ret

000014a2 <timer_getValue>:
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	10 f5       	brcc	.+68     	; 0x14ea <timer_getValue+0x48>
    14a6:	e8 2f       	mov	r30, r24
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	e3 57       	subi	r30, 0x73	; 115
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	90 81       	ld	r25, Z
    14b0:	91 30       	cpi	r25, 0x01	; 1
    14b2:	e9 f4       	brne	.+58     	; 0x14ee <timer_getValue+0x4c>
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	59 f0       	breq	.+22     	; 0x14ce <timer_getValue+0x2c>
    14b8:	18 f0       	brcs	.+6      	; 0x14c0 <timer_getValue+0x1e>
    14ba:	82 30       	cpi	r24, 0x02	; 2
    14bc:	79 f0       	breq	.+30     	; 0x14dc <timer_getValue+0x3a>
    14be:	19 c0       	rjmp	.+50     	; 0x14f2 <timer_getValue+0x50>
    14c0:	82 b7       	in	r24, 0x32	; 50
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	fb 01       	movw	r30, r22
    14c6:	91 83       	std	Z+1, r25	; 0x01
    14c8:	80 83       	st	Z, r24
    14ca:	86 e0       	ldi	r24, 0x06	; 6
    14cc:	08 95       	ret
    14ce:	8c b5       	in	r24, 0x2c	; 44
    14d0:	9d b5       	in	r25, 0x2d	; 45
    14d2:	fb 01       	movw	r30, r22
    14d4:	91 83       	std	Z+1, r25	; 0x01
    14d6:	80 83       	st	Z, r24
    14d8:	86 e0       	ldi	r24, 0x06	; 6
    14da:	08 95       	ret
    14dc:	84 b5       	in	r24, 0x24	; 36
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	fb 01       	movw	r30, r22
    14e2:	91 83       	std	Z+1, r25	; 0x01
    14e4:	80 83       	st	Z, r24
    14e6:	86 e0       	ldi	r24, 0x06	; 6
    14e8:	08 95       	ret
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	08 95       	ret
    14ee:	88 e0       	ldi	r24, 0x08	; 8
    14f0:	08 95       	ret
    14f2:	86 e0       	ldi	r24, 0x06	; 6
    14f4:	08 95       	ret

000014f6 <timer_flag_notification>:
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
	if(enu_tmr_channel_id < MAX_ENU_TMR_CHANNEL)
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <timer_flag_notification+0x6>
    14fa:	76 c0       	rjmp	.+236    	; 0x15e8 <timer_flag_notification+0xf2>
	{
		if(enu_tmr_mode < ENU_MAX_TMR_MODE)
    14fc:	62 30       	cpi	r22, 0x02	; 2
    14fe:	08 f0       	brcs	.+2      	; 0x1502 <timer_flag_notification+0xc>
    1500:	75 c0       	rjmp	.+234    	; 0x15ec <timer_flag_notification+0xf6>
		{
			if(ptr_u8_flag_status != NULL_PTR)
    1502:	41 15       	cp	r20, r1
    1504:	51 05       	cpc	r21, r1
    1506:	09 f4       	brne	.+2      	; 0x150a <timer_flag_notification+0x14>
    1508:	73 c0       	rjmp	.+230    	; 0x15f0 <timer_flag_notification+0xfa>
			{
				if(gl_bo_timer_init_flag[enu_tmr_channel_id] == TRUE)
    150a:	e8 2f       	mov	r30, r24
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	e3 57       	subi	r30, 0x73	; 115
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	90 81       	ld	r25, Z
    1514:	91 30       	cpi	r25, 0x01	; 1
    1516:	09 f0       	breq	.+2      	; 0x151a <timer_flag_notification+0x24>
    1518:	6d c0       	rjmp	.+218    	; 0x15f4 <timer_flag_notification+0xfe>
				{
					switch (enu_tmr_channel_id)
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	29 f1       	breq	.+74     	; 0x1568 <timer_flag_notification+0x72>
    151e:	20 f0       	brcs	.+8      	; 0x1528 <timer_flag_notification+0x32>
    1520:	82 30       	cpi	r24, 0x02	; 2
    1522:	09 f4       	brne	.+2      	; 0x1526 <timer_flag_notification+0x30>
    1524:	41 c0       	rjmp	.+130    	; 0x15a8 <timer_flag_notification+0xb2>
    1526:	68 c0       	rjmp	.+208    	; 0x15f8 <timer_flag_notification+0x102>
					{
						case ENU_TMR_CHANNEL_0:
						{
							if(enu_tmr_mode == ENU_TMR_NORMAL_MODE)
    1528:	61 11       	cpse	r22, r1
    152a:	0f c0       	rjmp	.+30     	; 0x154a <timer_flag_notification+0x54>
							{
								if(BIT_IS_SET(TIFR,TOV0))
    152c:	08 b6       	in	r0, 0x38	; 56
    152e:	00 fe       	sbrs	r0, 0
    1530:	08 c0       	rjmp	.+16     	; 0x1542 <timer_flag_notification+0x4c>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	fa 01       	movw	r30, r20
    1536:	80 83       	st	Z, r24
									SET_BIT(TIFR,TOV0);	//TOV0 is cleared by writing a logic one to the flag
    1538:	88 b7       	in	r24, 0x38	; 56
    153a:	81 60       	ori	r24, 0x01	; 1
    153c:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    153e:	86 e0       	ldi	r24, 0x06	; 6
    1540:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,TOV0);	//TOV0 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    1542:	fa 01       	movw	r30, r20
    1544:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1546:	86 e0       	ldi	r24, 0x06	; 6
    1548:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_FALSE;
								}
							}
							else
							{
								if(BIT_IS_SET(TIFR,OCF0))	// in case compare flag
    154a:	08 b6       	in	r0, 0x38	; 56
    154c:	01 fe       	sbrs	r0, 1
    154e:	08 c0       	rjmp	.+16     	; 0x1560 <timer_flag_notification+0x6a>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	fa 01       	movw	r30, r20
    1554:	80 83       	st	Z, r24
									SET_BIT(TIFR,OCF0);	//OCF0 is cleared by writing a logic one to the flag
    1556:	88 b7       	in	r24, 0x38	; 56
    1558:	82 60       	ori	r24, 0x02	; 2
    155a:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    155c:	86 e0       	ldi	r24, 0x06	; 6
    155e:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,OCF0);	//OCF0 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    1560:	fa 01       	movw	r30, r20
    1562:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1564:	86 e0       	ldi	r24, 0x06	; 6
    1566:	08 95       	ret
							}
						}
						break;
						case ENU_TMR_CHANNEL_1:
						{
							if(enu_tmr_mode == ENU_TMR_NORMAL_MODE)
    1568:	61 11       	cpse	r22, r1
    156a:	0f c0       	rjmp	.+30     	; 0x158a <timer_flag_notification+0x94>
							{
								if(BIT_IS_SET(TIFR,TOV1))
    156c:	08 b6       	in	r0, 0x38	; 56
    156e:	02 fe       	sbrs	r0, 2
    1570:	08 c0       	rjmp	.+16     	; 0x1582 <timer_flag_notification+0x8c>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	fa 01       	movw	r30, r20
    1576:	80 83       	st	Z, r24
									SET_BIT(TIFR,TOV1);	//TOV1 is cleared by writing a logic one to the flag
    1578:	88 b7       	in	r24, 0x38	; 56
    157a:	84 60       	ori	r24, 0x04	; 4
    157c:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    157e:	86 e0       	ldi	r24, 0x06	; 6
    1580:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,TOV1);	//TOV1 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    1582:	fa 01       	movw	r30, r20
    1584:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1586:	86 e0       	ldi	r24, 0x06	; 6
    1588:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_FALSE;
								}
							}
							else
							{
								if(BIT_IS_SET(TIFR,OCF1A))
    158a:	08 b6       	in	r0, 0x38	; 56
    158c:	04 fe       	sbrs	r0, 4
    158e:	08 c0       	rjmp	.+16     	; 0x15a0 <timer_flag_notification+0xaa>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	fa 01       	movw	r30, r20
    1594:	80 83       	st	Z, r24
									SET_BIT(TIFR,OCF1A);	//OCF1A is cleared by writing a logic one to the flag
    1596:	88 b7       	in	r24, 0x38	; 56
    1598:	80 61       	ori	r24, 0x10	; 16
    159a:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    159c:	86 e0       	ldi	r24, 0x06	; 6
    159e:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,OCF1A);	//OCF1A is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    15a0:	fa 01       	movw	r30, r20
    15a2:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    15a4:	86 e0       	ldi	r24, 0x06	; 6
    15a6:	08 95       	ret
							}
						}
						break;
						case ENU_TMR_CHANNEL_2:
						{
							if(enu_tmr_mode == ENU_TMR_NORMAL_MODE)
    15a8:	61 11       	cpse	r22, r1
    15aa:	0f c0       	rjmp	.+30     	; 0x15ca <timer_flag_notification+0xd4>
							{
								if(BIT_IS_SET(TIFR,TOV2))
    15ac:	08 b6       	in	r0, 0x38	; 56
    15ae:	06 fe       	sbrs	r0, 6
    15b0:	08 c0       	rjmp	.+16     	; 0x15c2 <timer_flag_notification+0xcc>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	fa 01       	movw	r30, r20
    15b6:	80 83       	st	Z, r24
									SET_BIT(TIFR,TOV2);	//TOV2 is cleared by writing a logic one to the flag
    15b8:	88 b7       	in	r24, 0x38	; 56
    15ba:	80 64       	ori	r24, 0x40	; 64
    15bc:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    15be:	86 e0       	ldi	r24, 0x06	; 6
    15c0:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,TOV2);	//TOV2 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    15c2:	fa 01       	movw	r30, r20
    15c4:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    15c6:	86 e0       	ldi	r24, 0x06	; 6
    15c8:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_FALSE;
								}
							}
							else
							{
								if(BIT_IS_SET(TIFR,OCF2))
    15ca:	08 b6       	in	r0, 0x38	; 56
    15cc:	07 fe       	sbrs	r0, 7
    15ce:	08 c0       	rjmp	.+16     	; 0x15e0 <timer_flag_notification+0xea>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	fa 01       	movw	r30, r20
    15d4:	80 83       	st	Z, r24
									SET_BIT(TIFR,OCF2);	//OCF2 is cleared by writing a logic one to the flag
    15d6:	88 b7       	in	r24, 0x38	; 56
    15d8:	80 68       	ori	r24, 0x80	; 128
    15da:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    15dc:	86 e0       	ldi	r24, 0x06	; 6
    15de:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,OCF2);	//OCF2 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    15e0:	fa 01       	movw	r30, r20
    15e2:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    15e4:	86 e0       	ldi	r24, 0x06	; 6
    15e6:	08 95       	ret
			enu_tmr_error = ENU_TMR_INVALID_MODE;
		}
	}
	else
	{
		enu_tmr_error = ENU_TMR_INVALID_ID;
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	08 95       	ret
				enu_tmr_error = ENU_TMR_INVALID_INPUT;
			}
		}
		else
		{
			enu_tmr_error = ENU_TMR_INVALID_MODE;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	08 95       	ret
					enu_tmr_error = ENU_TMR_NOT_INITIALIZED;
				}
			}
			else
			{
				enu_tmr_error = ENU_TMR_INVALID_INPUT;
    15f0:	85 e0       	ldi	r24, 0x05	; 5
    15f2:	08 95       	ret
						}
					}
				}
				else
				{
					enu_tmr_error = ENU_TMR_NOT_INITIALIZED;
    15f4:	88 e0       	ldi	r24, 0x08	; 8
    15f6:	08 95       	ret
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    15f8:	86 e0       	ldi	r24, 0x06	; 6
	else
	{
		enu_tmr_error = ENU_TMR_INVALID_ID;
	}
	return enu_tmr_error;
}
    15fa:	08 95       	ret

000015fc <__vector_11>:

/*===============ISR HANDLERS================*/
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR_HANDLER(TMR0_OVF)
{
    15fc:	1f 92       	push	r1
    15fe:	0f 92       	push	r0
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	0f 92       	push	r0
    1604:	11 24       	eor	r1, r1
    1606:	2f 93       	push	r18
    1608:	3f 93       	push	r19
    160a:	4f 93       	push	r20
    160c:	5f 93       	push	r21
    160e:	6f 93       	push	r22
    1610:	7f 93       	push	r23
    1612:	8f 93       	push	r24
    1614:	9f 93       	push	r25
    1616:	af 93       	push	r26
    1618:	bf 93       	push	r27
    161a:	ef 93       	push	r30
    161c:	ff 93       	push	r31
	if(gl_callBackPtr_timer0_OVF != NULL_PTR)
    161e:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <gl_callBackPtr_timer0_OVF>
    1622:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <gl_callBackPtr_timer0_OVF+0x1>
    1626:	30 97       	sbiw	r30, 0x00	; 0
    1628:	09 f0       	breq	.+2      	; 0x162c <__vector_11+0x30>
	{
		gl_callBackPtr_timer0_OVF();
    162a:	09 95       	icall
	}
}
    162c:	ff 91       	pop	r31
    162e:	ef 91       	pop	r30
    1630:	bf 91       	pop	r27
    1632:	af 91       	pop	r26
    1634:	9f 91       	pop	r25
    1636:	8f 91       	pop	r24
    1638:	7f 91       	pop	r23
    163a:	6f 91       	pop	r22
    163c:	5f 91       	pop	r21
    163e:	4f 91       	pop	r20
    1640:	3f 91       	pop	r19
    1642:	2f 91       	pop	r18
    1644:	0f 90       	pop	r0
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	0f 90       	pop	r0
    164a:	1f 90       	pop	r1
    164c:	18 95       	reti

0000164e <__vector_9>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR_HANDLER(TMR1_OVF)
{
    164e:	1f 92       	push	r1
    1650:	0f 92       	push	r0
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	0f 92       	push	r0
    1656:	11 24       	eor	r1, r1
    1658:	2f 93       	push	r18
    165a:	3f 93       	push	r19
    165c:	4f 93       	push	r20
    165e:	5f 93       	push	r21
    1660:	6f 93       	push	r22
    1662:	7f 93       	push	r23
    1664:	8f 93       	push	r24
    1666:	9f 93       	push	r25
    1668:	af 93       	push	r26
    166a:	bf 93       	push	r27
    166c:	ef 93       	push	r30
    166e:	ff 93       	push	r31
	if(gl_callBackPtr_timer1_OVF != NULL_PTR)
    1670:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <gl_callBackPtr_timer1_OVF>
    1674:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <gl_callBackPtr_timer1_OVF+0x1>
    1678:	30 97       	sbiw	r30, 0x00	; 0
    167a:	09 f0       	breq	.+2      	; 0x167e <__vector_9+0x30>
	{
		gl_callBackPtr_timer1_OVF();
    167c:	09 95       	icall
	}
}
    167e:	ff 91       	pop	r31
    1680:	ef 91       	pop	r30
    1682:	bf 91       	pop	r27
    1684:	af 91       	pop	r26
    1686:	9f 91       	pop	r25
    1688:	8f 91       	pop	r24
    168a:	7f 91       	pop	r23
    168c:	6f 91       	pop	r22
    168e:	5f 91       	pop	r21
    1690:	4f 91       	pop	r20
    1692:	3f 91       	pop	r19
    1694:	2f 91       	pop	r18
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <__vector_5>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR_HANDLER(TMR2_OVF)
{
    16a0:	1f 92       	push	r1
    16a2:	0f 92       	push	r0
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	0f 92       	push	r0
    16a8:	11 24       	eor	r1, r1
    16aa:	2f 93       	push	r18
    16ac:	3f 93       	push	r19
    16ae:	4f 93       	push	r20
    16b0:	5f 93       	push	r21
    16b2:	6f 93       	push	r22
    16b4:	7f 93       	push	r23
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	af 93       	push	r26
    16bc:	bf 93       	push	r27
    16be:	ef 93       	push	r30
    16c0:	ff 93       	push	r31
	if(gl_callBackPtr_timer2_OVF != NULL_PTR)
    16c2:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <gl_callBackPtr_timer2_OVF>
    16c6:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <gl_callBackPtr_timer2_OVF+0x1>
    16ca:	30 97       	sbiw	r30, 0x00	; 0
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <__vector_5+0x30>
	{
		gl_callBackPtr_timer2_OVF();
    16ce:	09 95       	icall
	}
}
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	bf 91       	pop	r27
    16d6:	af 91       	pop	r26
    16d8:	9f 91       	pop	r25
    16da:	8f 91       	pop	r24
    16dc:	7f 91       	pop	r23
    16de:	6f 91       	pop	r22
    16e0:	5f 91       	pop	r21
    16e2:	4f 91       	pop	r20
    16e4:	3f 91       	pop	r19
    16e6:	2f 91       	pop	r18
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <__vector_10>:
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR_HANDLER(TMR0_CMP)
{
    16f2:	1f 92       	push	r1
    16f4:	0f 92       	push	r0
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	0f 92       	push	r0
    16fa:	11 24       	eor	r1, r1
    16fc:	2f 93       	push	r18
    16fe:	3f 93       	push	r19
    1700:	4f 93       	push	r20
    1702:	5f 93       	push	r21
    1704:	6f 93       	push	r22
    1706:	7f 93       	push	r23
    1708:	8f 93       	push	r24
    170a:	9f 93       	push	r25
    170c:	af 93       	push	r26
    170e:	bf 93       	push	r27
    1710:	ef 93       	push	r30
    1712:	ff 93       	push	r31
	if(gl_callBackPtr_timer0_COMP != NULL_PTR)
    1714:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <gl_callBackPtr_timer0_COMP>
    1718:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <gl_callBackPtr_timer0_COMP+0x1>
    171c:	30 97       	sbiw	r30, 0x00	; 0
    171e:	09 f0       	breq	.+2      	; 0x1722 <__vector_10+0x30>
	{
		gl_callBackPtr_timer0_COMP();
    1720:	09 95       	icall
	}
}
    1722:	ff 91       	pop	r31
    1724:	ef 91       	pop	r30
    1726:	bf 91       	pop	r27
    1728:	af 91       	pop	r26
    172a:	9f 91       	pop	r25
    172c:	8f 91       	pop	r24
    172e:	7f 91       	pop	r23
    1730:	6f 91       	pop	r22
    1732:	5f 91       	pop	r21
    1734:	4f 91       	pop	r20
    1736:	3f 91       	pop	r19
    1738:	2f 91       	pop	r18
    173a:	0f 90       	pop	r0
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	0f 90       	pop	r0
    1740:	1f 90       	pop	r1
    1742:	18 95       	reti

00001744 <__vector_7>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR_HANDLER(TMR1_CMP_A)
{
    1744:	1f 92       	push	r1
    1746:	0f 92       	push	r0
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	0f 92       	push	r0
    174c:	11 24       	eor	r1, r1
    174e:	2f 93       	push	r18
    1750:	3f 93       	push	r19
    1752:	4f 93       	push	r20
    1754:	5f 93       	push	r21
    1756:	6f 93       	push	r22
    1758:	7f 93       	push	r23
    175a:	8f 93       	push	r24
    175c:	9f 93       	push	r25
    175e:	af 93       	push	r26
    1760:	bf 93       	push	r27
    1762:	ef 93       	push	r30
    1764:	ff 93       	push	r31
	if(gl_callBackPtr_timer1_COMP != NULL_PTR)
    1766:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <gl_callBackPtr_timer1_COMP>
    176a:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <gl_callBackPtr_timer1_COMP+0x1>
    176e:	30 97       	sbiw	r30, 0x00	; 0
    1770:	09 f0       	breq	.+2      	; 0x1774 <__vector_7+0x30>
	{
		gl_callBackPtr_timer1_COMP();
    1772:	09 95       	icall
	}
}
    1774:	ff 91       	pop	r31
    1776:	ef 91       	pop	r30
    1778:	bf 91       	pop	r27
    177a:	af 91       	pop	r26
    177c:	9f 91       	pop	r25
    177e:	8f 91       	pop	r24
    1780:	7f 91       	pop	r23
    1782:	6f 91       	pop	r22
    1784:	5f 91       	pop	r21
    1786:	4f 91       	pop	r20
    1788:	3f 91       	pop	r19
    178a:	2f 91       	pop	r18
    178c:	0f 90       	pop	r0
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	0f 90       	pop	r0
    1792:	1f 90       	pop	r1
    1794:	18 95       	reti

00001796 <__vector_4>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR_HANDLER(TMR2_CMP)
{
    1796:	1f 92       	push	r1
    1798:	0f 92       	push	r0
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	0f 92       	push	r0
    179e:	11 24       	eor	r1, r1
    17a0:	2f 93       	push	r18
    17a2:	3f 93       	push	r19
    17a4:	4f 93       	push	r20
    17a6:	5f 93       	push	r21
    17a8:	6f 93       	push	r22
    17aa:	7f 93       	push	r23
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
    17b0:	af 93       	push	r26
    17b2:	bf 93       	push	r27
    17b4:	ef 93       	push	r30
    17b6:	ff 93       	push	r31
	if(gl_callBackPtr_timer2_COMP != NULL_PTR)
    17b8:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <gl_callBackPtr_timer2_COMP>
    17bc:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <gl_callBackPtr_timer2_COMP+0x1>
    17c0:	30 97       	sbiw	r30, 0x00	; 0
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <__vector_4+0x30>
	{
		gl_callBackPtr_timer2_COMP(); 
    17c4:	09 95       	icall
	}
    17c6:	ff 91       	pop	r31
    17c8:	ef 91       	pop	r30
    17ca:	bf 91       	pop	r27
    17cc:	af 91       	pop	r26
    17ce:	9f 91       	pop	r25
    17d0:	8f 91       	pop	r24
    17d2:	7f 91       	pop	r23
    17d4:	6f 91       	pop	r22
    17d6:	5f 91       	pop	r21
    17d8:	4f 91       	pop	r20
    17da:	3f 91       	pop	r19
    17dc:	2f 91       	pop	r18
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	1f 90       	pop	r1
    17e6:	18 95       	reti

000017e8 <calc_prescaler>:

/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
    17e8:	cf 92       	push	r12
    17ea:	df 92       	push	r13
    17ec:	ef 92       	push	r14
    17ee:	ff 92       	push	r15
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	6b 01       	movw	r12, r22
    17f6:	7c 01       	movw	r14, r24
	BOOLEAN bo_return_value = TRUE;
	if(enu_time_unit == ENU_MICRO_SECOND)
    17f8:	21 11       	cpse	r18, r1
    17fa:	65 c1       	rjmp	.+714    	; 0x1ac6 <calc_prescaler+0x2de>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    17fc:	41 11       	cpse	r20, r1
    17fe:	69 c0       	rjmp	.+210    	; 0x18d2 <calc_prescaler+0xea>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e0       	ldi	r20, 0x00	; 0
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    180c:	18 16       	cp	r1, r24
    180e:	0c f4       	brge	.+2      	; 0x1812 <calc_prescaler+0x2a>
    1810:	59 c0       	rjmp	.+178    	; 0x18c4 <calc_prescaler+0xdc>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	52 e4       	ldi	r21, 0x42	; 66
    181a:	c7 01       	movw	r24, r14
    181c:	b6 01       	movw	r22, r12
    181e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1822:	18 16       	cp	r1, r24
    1824:	34 f0       	brlt	.+12     	; 0x1832 <calc_prescaler+0x4a>
				*ptr_u16_prescale=P_1;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	f8 01       	movw	r30, r16
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	80 83       	st	Z, r24
    1830:	21 c4       	rjmp	.+2114   	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e8       	ldi	r20, 0x80	; 128
    1838:	53 e4       	ldi	r21, 0x43	; 67
    183a:	c7 01       	movw	r24, r14
    183c:	b6 01       	movw	r22, r12
    183e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1842:	18 16       	cp	r1, r24
    1844:	3c f0       	brlt	.+14     	; 0x1854 <calc_prescaler+0x6c>
				*ptr_u16_prescale=P_8;
    1846:	88 e0       	ldi	r24, 0x08	; 8
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	f8 01       	movw	r30, r16
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	10 c4       	rjmp	.+2080   	; 0x2074 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	55 e4       	ldi	r21, 0x45	; 69
    185c:	c7 01       	movw	r24, r14
    185e:	b6 01       	movw	r22, r12
    1860:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1864:	18 16       	cp	r1, r24
    1866:	3c f0       	brlt	.+14     	; 0x1876 <calc_prescaler+0x8e>
				*ptr_u16_prescale=P_64;
    1868:	80 e4       	ldi	r24, 0x40	; 64
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	f8 01       	movw	r30, r16
    186e:	91 83       	std	Z+1, r25	; 0x01
    1870:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	ff c3       	rjmp	.+2046   	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	56 e4       	ldi	r21, 0x46	; 70
    187e:	c7 01       	movw	r24, r14
    1880:	b6 01       	movw	r22, r12
    1882:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1886:	18 16       	cp	r1, r24
    1888:	3c f0       	brlt	.+14     	; 0x1898 <calc_prescaler+0xb0>
				*ptr_u16_prescale=P_256;
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	f8 01       	movw	r30, r16
    1890:	91 83       	std	Z+1, r25	; 0x01
    1892:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	ee c3       	rjmp	.+2012   	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024))
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e0       	ldi	r20, 0x00	; 0
    189e:	57 e4       	ldi	r21, 0x47	; 71
    18a0:	c7 01       	movw	r24, r14
    18a2:	b6 01       	movw	r22, r12
    18a4:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    18a8:	18 16       	cp	r1, r24
    18aa:	3c f0       	brlt	.+14     	; 0x18ba <calc_prescaler+0xd2>
				*ptr_u16_prescale=P_1024;
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	94 e0       	ldi	r25, 0x04	; 4
    18b0:	f8 01       	movw	r30, r16
    18b2:	91 83       	std	Z+1, r25	; 0x01
    18b4:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	dd c3       	rjmp	.+1978   	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    18ba:	f8 01       	movw	r30, r16
    18bc:	11 82       	std	Z+1, r1	; 0x01
    18be:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	d8 c3       	rjmp	.+1968   	; 0x2074 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    18c4:	8c ed       	ldi	r24, 0xDC	; 220
    18c6:	95 e0       	ldi	r25, 0x05	; 5
    18c8:	f8 01       	movw	r30, r16
    18ca:	91 83       	std	Z+1, r25	; 0x01
    18cc:	80 83       	st	Z, r24
				bo_return_value = TRUE;	
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	d1 c3       	rjmp	.+1954   	; 0x2074 <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    18d2:	41 30       	cpi	r20, 0x01	; 1
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <calc_prescaler+0xf0>
    18d6:	69 c0       	rjmp	.+210    	; 0x19aa <calc_prescaler+0x1c2>
		{
			if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024) )
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	5b e4       	ldi	r21, 0x4B	; 75
    18e0:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    18e4:	18 16       	cp	r1, r24
    18e6:	0c f4       	brge	.+2      	; 0x18ea <calc_prescaler+0x102>
    18e8:	59 c0       	rjmp	.+178    	; 0x199c <calc_prescaler+0x1b4>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_US(P_1))
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	56 e4       	ldi	r21, 0x46	; 70
    18f2:	c7 01       	movw	r24, r14
    18f4:	b6 01       	movw	r22, r12
    18f6:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    18fa:	18 16       	cp	r1, r24
    18fc:	34 f0       	brlt	.+12     	; 0x190a <calc_prescaler+0x122>
				*ptr_u16_prescale=P_1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	f8 01       	movw	r30, r16
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	80 83       	st	Z, r24
    1908:	b5 c3       	rjmp	.+1898   	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e8       	ldi	r20, 0x80	; 128
    1910:	57 e4       	ldi	r21, 0x47	; 71
    1912:	c7 01       	movw	r24, r14
    1914:	b6 01       	movw	r22, r12
    1916:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    191a:	18 16       	cp	r1, r24
    191c:	3c f0       	brlt	.+14     	; 0x192c <calc_prescaler+0x144>
				*ptr_u16_prescale=P_8;
    191e:	88 e0       	ldi	r24, 0x08	; 8
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	f8 01       	movw	r30, r16
    1924:	91 83       	std	Z+1, r25	; 0x01
    1926:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	a4 c3       	rjmp	.+1864   	; 0x2074 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	59 e4       	ldi	r21, 0x49	; 73
    1934:	c7 01       	movw	r24, r14
    1936:	b6 01       	movw	r22, r12
    1938:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    193c:	18 16       	cp	r1, r24
    193e:	3c f0       	brlt	.+14     	; 0x194e <calc_prescaler+0x166>
				*ptr_u16_prescale=P_64;
    1940:	80 e4       	ldi	r24, 0x40	; 64
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	f8 01       	movw	r30, r16
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	93 c3       	rjmp	.+1830   	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	5a e4       	ldi	r21, 0x4A	; 74
    1956:	c7 01       	movw	r24, r14
    1958:	b6 01       	movw	r22, r12
    195a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    195e:	18 16       	cp	r1, r24
    1960:	3c f0       	brlt	.+14     	; 0x1970 <calc_prescaler+0x188>
				*ptr_u16_prescale=P_256;
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	91 e0       	ldi	r25, 0x01	; 1
    1966:	f8 01       	movw	r30, r16
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	82 c3       	rjmp	.+1796   	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024))
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	5b e4       	ldi	r21, 0x4B	; 75
    1978:	c7 01       	movw	r24, r14
    197a:	b6 01       	movw	r22, r12
    197c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1980:	18 16       	cp	r1, r24
    1982:	3c f0       	brlt	.+14     	; 0x1992 <calc_prescaler+0x1aa>
				*ptr_u16_prescale=P_1024;
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	94 e0       	ldi	r25, 0x04	; 4
    1988:	f8 01       	movw	r30, r16
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	71 c3       	rjmp	.+1762   	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1992:	f8 01       	movw	r30, r16
    1994:	11 82       	std	Z+1, r1	; 0x01
    1996:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	6c c3       	rjmp	.+1752   	; 0x2074 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    199c:	8c ed       	ldi	r24, 0xDC	; 220
    199e:	95 e0       	ldi	r25, 0x05	; 5
    19a0:	f8 01       	movw	r30, r16
    19a2:	91 83       	std	Z+1, r25	; 0x01
    19a4:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	65 c3       	rjmp	.+1738   	; 0x2074 <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    19aa:	42 30       	cpi	r20, 0x02	; 2
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <calc_prescaler+0x1c8>
    19ae:	5b c3       	rjmp	.+1718   	; 0x2066 <calc_prescaler+0x87e>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	57 e4       	ldi	r21, 0x47	; 71
    19b8:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    19bc:	18 16       	cp	r1, r24
    19be:	0c f4       	brge	.+2      	; 0x19c2 <calc_prescaler+0x1da>
    19c0:	7b c0       	rjmp	.+246    	; 0x1ab8 <calc_prescaler+0x2d0>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	52 e4       	ldi	r21, 0x42	; 66
    19ca:	c7 01       	movw	r24, r14
    19cc:	b6 01       	movw	r22, r12
    19ce:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    19d2:	18 16       	cp	r1, r24
    19d4:	34 f0       	brlt	.+12     	; 0x19e2 <calc_prescaler+0x1fa>
				*ptr_u16_prescale=P_1;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	f8 01       	movw	r30, r16
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	80 83       	st	Z, r24
    19e0:	49 c3       	rjmp	.+1682   	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e8       	ldi	r20, 0x80	; 128
    19e8:	53 e4       	ldi	r21, 0x43	; 67
    19ea:	c7 01       	movw	r24, r14
    19ec:	b6 01       	movw	r22, r12
    19ee:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    19f2:	18 16       	cp	r1, r24
    19f4:	3c f0       	brlt	.+14     	; 0x1a04 <calc_prescaler+0x21c>
				*ptr_u16_prescale=P_8;
    19f6:	88 e0       	ldi	r24, 0x08	; 8
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	f8 01       	movw	r30, r16
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	38 c3       	rjmp	.+1648   	; 0x2074 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e8       	ldi	r20, 0x80	; 128
    1a0a:	54 e4       	ldi	r21, 0x44	; 68
    1a0c:	c7 01       	movw	r24, r14
    1a0e:	b6 01       	movw	r22, r12
    1a10:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1a14:	18 16       	cp	r1, r24
    1a16:	3c f0       	brlt	.+14     	; 0x1a26 <calc_prescaler+0x23e>
				*ptr_u16_prescale=P_32;
    1a18:	80 e2       	ldi	r24, 0x20	; 32
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	f8 01       	movw	r30, r16
    1a1e:	91 83       	std	Z+1, r25	; 0x01
    1a20:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	27 c3       	rjmp	.+1614   	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	55 e4       	ldi	r21, 0x45	; 69
    1a2e:	c7 01       	movw	r24, r14
    1a30:	b6 01       	movw	r22, r12
    1a32:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	3c f0       	brlt	.+14     	; 0x1a48 <calc_prescaler+0x260>
				*ptr_u16_prescale=P_64;
    1a3a:	80 e4       	ldi	r24, 0x40	; 64
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	f8 01       	movw	r30, r16
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	16 c3       	rjmp	.+1580   	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	55 e4       	ldi	r21, 0x45	; 69
    1a50:	c7 01       	movw	r24, r14
    1a52:	b6 01       	movw	r22, r12
    1a54:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1a58:	18 16       	cp	r1, r24
    1a5a:	3c f0       	brlt	.+14     	; 0x1a6a <calc_prescaler+0x282>
				*ptr_u16_prescale=P_128;
    1a5c:	80 e8       	ldi	r24, 0x80	; 128
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	f8 01       	movw	r30, r16
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	05 c3       	rjmp	.+1546   	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	56 e4       	ldi	r21, 0x46	; 70
    1a72:	c7 01       	movw	r24, r14
    1a74:	b6 01       	movw	r22, r12
    1a76:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1a7a:	18 16       	cp	r1, r24
    1a7c:	3c f0       	brlt	.+14     	; 0x1a8c <calc_prescaler+0x2a4>
				*ptr_u16_prescale=P_256;
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	91 e0       	ldi	r25, 0x01	; 1
    1a82:	f8 01       	movw	r30, r16
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	f4 c2       	rjmp	.+1512   	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_US(P_1024))
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	57 e4       	ldi	r21, 0x47	; 71
    1a94:	c7 01       	movw	r24, r14
    1a96:	b6 01       	movw	r22, r12
    1a98:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1a9c:	18 16       	cp	r1, r24
    1a9e:	3c f0       	brlt	.+14     	; 0x1aae <calc_prescaler+0x2c6>
				*ptr_u16_prescale=P_1024;
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	94 e0       	ldi	r25, 0x04	; 4
    1aa4:	f8 01       	movw	r30, r16
    1aa6:	91 83       	std	Z+1, r25	; 0x01
    1aa8:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	e3 c2       	rjmp	.+1478   	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1aae:	f8 01       	movw	r30, r16
    1ab0:	11 82       	std	Z+1, r1	; 0x01
    1ab2:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	de c2       	rjmp	.+1468   	; 0x2074 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1ab8:	8c ed       	ldi	r24, 0xDC	; 220
    1aba:	95 e0       	ldi	r25, 0x05	; 5
    1abc:	f8 01       	movw	r30, r16
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	d7 c2       	rjmp	.+1454   	; 0x2074 <calc_prescaler+0x88c>
		else
		{
			bo_return_value = FALSE;
		}
	}
	else if (enu_time_unit == ENU_MILLI_SECOND)
    1ac6:	21 30       	cpi	r18, 0x01	; 1
    1ac8:	09 f0       	breq	.+2      	; 0x1acc <calc_prescaler+0x2e4>
    1aca:	65 c1       	rjmp	.+714    	; 0x1d96 <calc_prescaler+0x5ae>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    1acc:	41 11       	cpse	r20, r1
    1ace:	69 c0       	rjmp	.+210    	; 0x1ba2 <calc_prescaler+0x3ba>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024) )
    1ad0:	2f e6       	ldi	r18, 0x6F	; 111
    1ad2:	32 e1       	ldi	r19, 0x12	; 18
    1ad4:	43 e0       	ldi	r20, 0x03	; 3
    1ad6:	52 e4       	ldi	r21, 0x42	; 66
    1ad8:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	0c f4       	brge	.+2      	; 0x1ae2 <calc_prescaler+0x2fa>
    1ae0:	59 c0       	rjmp	.+178    	; 0x1b94 <calc_prescaler+0x3ac>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
    1ae2:	2f e6       	ldi	r18, 0x6F	; 111
    1ae4:	32 e1       	ldi	r19, 0x12	; 18
    1ae6:	43 e0       	ldi	r20, 0x03	; 3
    1ae8:	5d e3       	ldi	r21, 0x3D	; 61
    1aea:	c7 01       	movw	r24, r14
    1aec:	b6 01       	movw	r22, r12
    1aee:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1af2:	18 16       	cp	r1, r24
    1af4:	34 f0       	brlt	.+12     	; 0x1b02 <calc_prescaler+0x31a>
				*ptr_u16_prescale=P_1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	f8 01       	movw	r30, r16
    1afc:	91 83       	std	Z+1, r25	; 0x01
    1afe:	80 83       	st	Z, r24
    1b00:	b9 c2       	rjmp	.+1394   	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
    1b02:	2f e6       	ldi	r18, 0x6F	; 111
    1b04:	32 e1       	ldi	r19, 0x12	; 18
    1b06:	43 e8       	ldi	r20, 0x83	; 131
    1b08:	5e e3       	ldi	r21, 0x3E	; 62
    1b0a:	c7 01       	movw	r24, r14
    1b0c:	b6 01       	movw	r22, r12
    1b0e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1b12:	18 16       	cp	r1, r24
    1b14:	3c f0       	brlt	.+14     	; 0x1b24 <calc_prescaler+0x33c>
				*ptr_u16_prescale=P_8;
    1b16:	88 e0       	ldi	r24, 0x08	; 8
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	91 83       	std	Z+1, r25	; 0x01
    1b1e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	a8 c2       	rjmp	.+1360   	; 0x2074 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
    1b24:	2f e6       	ldi	r18, 0x6F	; 111
    1b26:	32 e1       	ldi	r19, 0x12	; 18
    1b28:	43 e0       	ldi	r20, 0x03	; 3
    1b2a:	50 e4       	ldi	r21, 0x40	; 64
    1b2c:	c7 01       	movw	r24, r14
    1b2e:	b6 01       	movw	r22, r12
    1b30:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1b34:	18 16       	cp	r1, r24
    1b36:	3c f0       	brlt	.+14     	; 0x1b46 <calc_prescaler+0x35e>
				*ptr_u16_prescale=P_64;
    1b38:	80 e4       	ldi	r24, 0x40	; 64
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	f8 01       	movw	r30, r16
    1b3e:	91 83       	std	Z+1, r25	; 0x01
    1b40:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	97 c2       	rjmp	.+1326   	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
    1b46:	2f e6       	ldi	r18, 0x6F	; 111
    1b48:	32 e1       	ldi	r19, 0x12	; 18
    1b4a:	43 e0       	ldi	r20, 0x03	; 3
    1b4c:	51 e4       	ldi	r21, 0x41	; 65
    1b4e:	c7 01       	movw	r24, r14
    1b50:	b6 01       	movw	r22, r12
    1b52:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	3c f0       	brlt	.+14     	; 0x1b68 <calc_prescaler+0x380>
				*ptr_u16_prescale=P_256;
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	91 e0       	ldi	r25, 0x01	; 1
    1b5e:	f8 01       	movw	r30, r16
    1b60:	91 83       	std	Z+1, r25	; 0x01
    1b62:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	86 c2       	rjmp	.+1292   	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024))
    1b68:	2f e6       	ldi	r18, 0x6F	; 111
    1b6a:	32 e1       	ldi	r19, 0x12	; 18
    1b6c:	43 e0       	ldi	r20, 0x03	; 3
    1b6e:	52 e4       	ldi	r21, 0x42	; 66
    1b70:	c7 01       	movw	r24, r14
    1b72:	b6 01       	movw	r22, r12
    1b74:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1b78:	18 16       	cp	r1, r24
    1b7a:	3c f0       	brlt	.+14     	; 0x1b8a <calc_prescaler+0x3a2>
				*ptr_u16_prescale=P_1024;
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	94 e0       	ldi	r25, 0x04	; 4
    1b80:	f8 01       	movw	r30, r16
    1b82:	91 83       	std	Z+1, r25	; 0x01
    1b84:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	75 c2       	rjmp	.+1258   	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	11 82       	std	Z+1, r1	; 0x01
    1b8e:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	70 c2       	rjmp	.+1248   	; 0x2074 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1b94:	8c ed       	ldi	r24, 0xDC	; 220
    1b96:	95 e0       	ldi	r25, 0x05	; 5
    1b98:	f8 01       	movw	r30, r16
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	69 c2       	rjmp	.+1234   	; 0x2074 <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    1ba2:	41 30       	cpi	r20, 0x01	; 1
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <calc_prescaler+0x3c0>
    1ba6:	69 c0       	rjmp	.+210    	; 0x1c7a <calc_prescaler+0x492>
		{

			if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024) )
    1ba8:	2f e6       	ldi	r18, 0x6F	; 111
    1baa:	32 e1       	ldi	r19, 0x12	; 18
    1bac:	43 e0       	ldi	r20, 0x03	; 3
    1bae:	56 e4       	ldi	r21, 0x46	; 70
    1bb0:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	0c f4       	brge	.+2      	; 0x1bba <calc_prescaler+0x3d2>
    1bb8:	59 c0       	rjmp	.+178    	; 0x1c6c <calc_prescaler+0x484>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1))
    1bba:	2f e6       	ldi	r18, 0x6F	; 111
    1bbc:	32 e1       	ldi	r19, 0x12	; 18
    1bbe:	43 e0       	ldi	r20, 0x03	; 3
    1bc0:	51 e4       	ldi	r21, 0x41	; 65
    1bc2:	c7 01       	movw	r24, r14
    1bc4:	b6 01       	movw	r22, r12
    1bc6:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1bca:	18 16       	cp	r1, r24
    1bcc:	34 f0       	brlt	.+12     	; 0x1bda <calc_prescaler+0x3f2>
				*ptr_u16_prescale=P_1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	91 83       	std	Z+1, r25	; 0x01
    1bd6:	80 83       	st	Z, r24
    1bd8:	4d c2       	rjmp	.+1178   	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
    1bda:	2f e6       	ldi	r18, 0x6F	; 111
    1bdc:	32 e1       	ldi	r19, 0x12	; 18
    1bde:	43 e8       	ldi	r20, 0x83	; 131
    1be0:	52 e4       	ldi	r21, 0x42	; 66
    1be2:	c7 01       	movw	r24, r14
    1be4:	b6 01       	movw	r22, r12
    1be6:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1bea:	18 16       	cp	r1, r24
    1bec:	3c f0       	brlt	.+14     	; 0x1bfc <calc_prescaler+0x414>
				*ptr_u16_prescale=P_8;
    1bee:	88 e0       	ldi	r24, 0x08	; 8
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	91 83       	std	Z+1, r25	; 0x01
    1bf6:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	3c c2       	rjmp	.+1144   	; 0x2074 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
    1bfc:	2f e6       	ldi	r18, 0x6F	; 111
    1bfe:	32 e1       	ldi	r19, 0x12	; 18
    1c00:	43 e0       	ldi	r20, 0x03	; 3
    1c02:	54 e4       	ldi	r21, 0x44	; 68
    1c04:	c7 01       	movw	r24, r14
    1c06:	b6 01       	movw	r22, r12
    1c08:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1c0c:	18 16       	cp	r1, r24
    1c0e:	3c f0       	brlt	.+14     	; 0x1c1e <calc_prescaler+0x436>
				*ptr_u16_prescale=P_64;
    1c10:	80 e4       	ldi	r24, 0x40	; 64
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	f8 01       	movw	r30, r16
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	2b c2       	rjmp	.+1110   	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
    1c1e:	2f e6       	ldi	r18, 0x6F	; 111
    1c20:	32 e1       	ldi	r19, 0x12	; 18
    1c22:	43 e0       	ldi	r20, 0x03	; 3
    1c24:	55 e4       	ldi	r21, 0x45	; 69
    1c26:	c7 01       	movw	r24, r14
    1c28:	b6 01       	movw	r22, r12
    1c2a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1c2e:	18 16       	cp	r1, r24
    1c30:	3c f0       	brlt	.+14     	; 0x1c40 <calc_prescaler+0x458>
				*ptr_u16_prescale=P_256;
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	91 e0       	ldi	r25, 0x01	; 1
    1c36:	f8 01       	movw	r30, r16
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	1a c2       	rjmp	.+1076   	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024))
    1c40:	2f e6       	ldi	r18, 0x6F	; 111
    1c42:	32 e1       	ldi	r19, 0x12	; 18
    1c44:	43 e0       	ldi	r20, 0x03	; 3
    1c46:	56 e4       	ldi	r21, 0x46	; 70
    1c48:	c7 01       	movw	r24, r14
    1c4a:	b6 01       	movw	r22, r12
    1c4c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1c50:	18 16       	cp	r1, r24
    1c52:	3c f0       	brlt	.+14     	; 0x1c62 <calc_prescaler+0x47a>
				*ptr_u16_prescale=P_1024;
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	94 e0       	ldi	r25, 0x04	; 4
    1c58:	f8 01       	movw	r30, r16
    1c5a:	91 83       	std	Z+1, r25	; 0x01
    1c5c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	09 c2       	rjmp	.+1042   	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale= P_0;
    1c62:	f8 01       	movw	r30, r16
    1c64:	11 82       	std	Z+1, r1	; 0x01
    1c66:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	04 c2       	rjmp	.+1032   	; 0x2074 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale= P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1c6c:	8c ed       	ldi	r24, 0xDC	; 220
    1c6e:	95 e0       	ldi	r25, 0x05	; 5
    1c70:	f8 01       	movw	r30, r16
    1c72:	91 83       	std	Z+1, r25	; 0x01
    1c74:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	fd c1       	rjmp	.+1018   	; 0x2074 <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    1c7a:	42 30       	cpi	r20, 0x02	; 2
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <calc_prescaler+0x498>
    1c7e:	f5 c1       	rjmp	.+1002   	; 0x206a <calc_prescaler+0x882>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	57 e4       	ldi	r21, 0x47	; 71
    1c88:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	0c f4       	brge	.+2      	; 0x1c92 <calc_prescaler+0x4aa>
    1c90:	7b c0       	rjmp	.+246    	; 0x1d88 <calc_prescaler+0x5a0>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
    1c92:	2f e6       	ldi	r18, 0x6F	; 111
    1c94:	32 e1       	ldi	r19, 0x12	; 18
    1c96:	43 e0       	ldi	r20, 0x03	; 3
    1c98:	5d e3       	ldi	r21, 0x3D	; 61
    1c9a:	c7 01       	movw	r24, r14
    1c9c:	b6 01       	movw	r22, r12
    1c9e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1ca2:	18 16       	cp	r1, r24
    1ca4:	34 f0       	brlt	.+12     	; 0x1cb2 <calc_prescaler+0x4ca>
				*ptr_u16_prescale=P_1;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	f8 01       	movw	r30, r16
    1cac:	91 83       	std	Z+1, r25	; 0x01
    1cae:	80 83       	st	Z, r24
    1cb0:	e1 c1       	rjmp	.+962    	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
    1cb2:	2f e6       	ldi	r18, 0x6F	; 111
    1cb4:	32 e1       	ldi	r19, 0x12	; 18
    1cb6:	43 e8       	ldi	r20, 0x83	; 131
    1cb8:	5e e3       	ldi	r21, 0x3E	; 62
    1cba:	c7 01       	movw	r24, r14
    1cbc:	b6 01       	movw	r22, r12
    1cbe:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1cc2:	18 16       	cp	r1, r24
    1cc4:	3c f0       	brlt	.+14     	; 0x1cd4 <calc_prescaler+0x4ec>
				*ptr_u16_prescale=P_8;
    1cc6:	88 e0       	ldi	r24, 0x08	; 8
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	f8 01       	movw	r30, r16
    1ccc:	91 83       	std	Z+1, r25	; 0x01
    1cce:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	d0 c1       	rjmp	.+928    	; 0x2074 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
    1cd4:	2f e6       	ldi	r18, 0x6F	; 111
    1cd6:	32 e1       	ldi	r19, 0x12	; 18
    1cd8:	43 e8       	ldi	r20, 0x83	; 131
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	c7 01       	movw	r24, r14
    1cde:	b6 01       	movw	r22, r12
    1ce0:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1ce4:	18 16       	cp	r1, r24
    1ce6:	3c f0       	brlt	.+14     	; 0x1cf6 <calc_prescaler+0x50e>
				*ptr_u16_prescale=P_32;
    1ce8:	80 e2       	ldi	r24, 0x20	; 32
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	f8 01       	movw	r30, r16
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	bf c1       	rjmp	.+894    	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
    1cf6:	2f e6       	ldi	r18, 0x6F	; 111
    1cf8:	32 e1       	ldi	r19, 0x12	; 18
    1cfa:	43 e0       	ldi	r20, 0x03	; 3
    1cfc:	50 e4       	ldi	r21, 0x40	; 64
    1cfe:	c7 01       	movw	r24, r14
    1d00:	b6 01       	movw	r22, r12
    1d02:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1d06:	18 16       	cp	r1, r24
    1d08:	3c f0       	brlt	.+14     	; 0x1d18 <calc_prescaler+0x530>
				*ptr_u16_prescale=P_64;
    1d0a:	80 e4       	ldi	r24, 0x40	; 64
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	f8 01       	movw	r30, r16
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	ae c1       	rjmp	.+860    	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
    1d18:	2f e6       	ldi	r18, 0x6F	; 111
    1d1a:	32 e1       	ldi	r19, 0x12	; 18
    1d1c:	43 e8       	ldi	r20, 0x83	; 131
    1d1e:	50 e4       	ldi	r21, 0x40	; 64
    1d20:	c7 01       	movw	r24, r14
    1d22:	b6 01       	movw	r22, r12
    1d24:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	3c f0       	brlt	.+14     	; 0x1d3a <calc_prescaler+0x552>
				*ptr_u16_prescale=P_128;
    1d2c:	80 e8       	ldi	r24, 0x80	; 128
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	f8 01       	movw	r30, r16
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	9d c1       	rjmp	.+826    	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
    1d3a:	2f e6       	ldi	r18, 0x6F	; 111
    1d3c:	32 e1       	ldi	r19, 0x12	; 18
    1d3e:	43 e0       	ldi	r20, 0x03	; 3
    1d40:	51 e4       	ldi	r21, 0x41	; 65
    1d42:	c7 01       	movw	r24, r14
    1d44:	b6 01       	movw	r22, r12
    1d46:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1d4a:	18 16       	cp	r1, r24
    1d4c:	3c f0       	brlt	.+14     	; 0x1d5c <calc_prescaler+0x574>
				*ptr_u16_prescale=P_256;
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	91 e0       	ldi	r25, 0x01	; 1
    1d52:	f8 01       	movw	r30, r16
    1d54:	91 83       	std	Z+1, r25	; 0x01
    1d56:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	8c c1       	rjmp	.+792    	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_MS(P_1024))
    1d5c:	2f e6       	ldi	r18, 0x6F	; 111
    1d5e:	32 e1       	ldi	r19, 0x12	; 18
    1d60:	43 e0       	ldi	r20, 0x03	; 3
    1d62:	52 e4       	ldi	r21, 0x42	; 66
    1d64:	c7 01       	movw	r24, r14
    1d66:	b6 01       	movw	r22, r12
    1d68:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1d6c:	18 16       	cp	r1, r24
    1d6e:	3c f0       	brlt	.+14     	; 0x1d7e <calc_prescaler+0x596>
				*ptr_u16_prescale=P_1024;
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	94 e0       	ldi	r25, 0x04	; 4
    1d74:	f8 01       	movw	r30, r16
    1d76:	91 83       	std	Z+1, r25	; 0x01
    1d78:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	7b c1       	rjmp	.+758    	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1d7e:	f8 01       	movw	r30, r16
    1d80:	11 82       	std	Z+1, r1	; 0x01
    1d82:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	76 c1       	rjmp	.+748    	; 0x2074 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1d88:	8c ed       	ldi	r24, 0xDC	; 220
    1d8a:	95 e0       	ldi	r25, 0x05	; 5
    1d8c:	f8 01       	movw	r30, r16
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	6f c1       	rjmp	.+734    	; 0x2074 <calc_prescaler+0x88c>
		{
			bo_return_value = FALSE;
			// do nothing
		}
	}
	else if (enu_time_unit == ENU_SECOND)
    1d96:	22 30       	cpi	r18, 0x02	; 2
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <calc_prescaler+0x5b4>
    1d9a:	69 c1       	rjmp	.+722    	; 0x206e <calc_prescaler+0x886>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    1d9c:	41 11       	cpse	r20, r1
    1d9e:	69 c0       	rjmp	.+210    	; 0x1e72 <calc_prescaler+0x68a>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024) )
    1da0:	2d eb       	ldi	r18, 0xBD	; 189
    1da2:	37 e3       	ldi	r19, 0x37	; 55
    1da4:	46 e0       	ldi	r20, 0x06	; 6
    1da6:	5d e3       	ldi	r21, 0x3D	; 61
    1da8:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1dac:	18 16       	cp	r1, r24
    1dae:	0c f4       	brge	.+2      	; 0x1db2 <calc_prescaler+0x5ca>
    1db0:	59 c0       	rjmp	.+178    	; 0x1e64 <calc_prescaler+0x67c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
    1db2:	2d eb       	ldi	r18, 0xBD	; 189
    1db4:	37 e3       	ldi	r19, 0x37	; 55
    1db6:	46 e0       	ldi	r20, 0x06	; 6
    1db8:	58 e3       	ldi	r21, 0x38	; 56
    1dba:	c7 01       	movw	r24, r14
    1dbc:	b6 01       	movw	r22, r12
    1dbe:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1dc2:	18 16       	cp	r1, r24
    1dc4:	34 f0       	brlt	.+12     	; 0x1dd2 <calc_prescaler+0x5ea>
				*ptr_u16_prescale=P_1;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	f8 01       	movw	r30, r16
    1dcc:	91 83       	std	Z+1, r25	; 0x01
    1dce:	80 83       	st	Z, r24
    1dd0:	51 c1       	rjmp	.+674    	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
    1dd2:	2d eb       	ldi	r18, 0xBD	; 189
    1dd4:	37 e3       	ldi	r19, 0x37	; 55
    1dd6:	46 e8       	ldi	r20, 0x86	; 134
    1dd8:	59 e3       	ldi	r21, 0x39	; 57
    1dda:	c7 01       	movw	r24, r14
    1ddc:	b6 01       	movw	r22, r12
    1dde:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	3c f0       	brlt	.+14     	; 0x1df4 <calc_prescaler+0x60c>
				*ptr_u16_prescale=P_8;
    1de6:	88 e0       	ldi	r24, 0x08	; 8
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	f8 01       	movw	r30, r16
    1dec:	91 83       	std	Z+1, r25	; 0x01
    1dee:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	40 c1       	rjmp	.+640    	; 0x2074 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
    1df4:	2d eb       	ldi	r18, 0xBD	; 189
    1df6:	37 e3       	ldi	r19, 0x37	; 55
    1df8:	46 e0       	ldi	r20, 0x06	; 6
    1dfa:	5b e3       	ldi	r21, 0x3B	; 59
    1dfc:	c7 01       	movw	r24, r14
    1dfe:	b6 01       	movw	r22, r12
    1e00:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1e04:	18 16       	cp	r1, r24
    1e06:	3c f0       	brlt	.+14     	; 0x1e16 <calc_prescaler+0x62e>
				*ptr_u16_prescale=P_64;
    1e08:	80 e4       	ldi	r24, 0x40	; 64
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	2f c1       	rjmp	.+606    	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
    1e16:	2d eb       	ldi	r18, 0xBD	; 189
    1e18:	37 e3       	ldi	r19, 0x37	; 55
    1e1a:	46 e0       	ldi	r20, 0x06	; 6
    1e1c:	5c e3       	ldi	r21, 0x3C	; 60
    1e1e:	c7 01       	movw	r24, r14
    1e20:	b6 01       	movw	r22, r12
    1e22:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1e26:	18 16       	cp	r1, r24
    1e28:	3c f0       	brlt	.+14     	; 0x1e38 <calc_prescaler+0x650>
				*ptr_u16_prescale=P_256;
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	91 e0       	ldi	r25, 0x01	; 1
    1e2e:	f8 01       	movw	r30, r16
    1e30:	91 83       	std	Z+1, r25	; 0x01
    1e32:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	1e c1       	rjmp	.+572    	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024))
    1e38:	2d eb       	ldi	r18, 0xBD	; 189
    1e3a:	37 e3       	ldi	r19, 0x37	; 55
    1e3c:	46 e0       	ldi	r20, 0x06	; 6
    1e3e:	5d e3       	ldi	r21, 0x3D	; 61
    1e40:	c7 01       	movw	r24, r14
    1e42:	b6 01       	movw	r22, r12
    1e44:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1e48:	18 16       	cp	r1, r24
    1e4a:	3c f0       	brlt	.+14     	; 0x1e5a <calc_prescaler+0x672>
				*ptr_u16_prescale=P_1024;
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	94 e0       	ldi	r25, 0x04	; 4
    1e50:	f8 01       	movw	r30, r16
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	0d c1       	rjmp	.+538    	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	11 82       	std	Z+1, r1	; 0x01
    1e5e:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	08 c1       	rjmp	.+528    	; 0x2074 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1e64:	8c ed       	ldi	r24, 0xDC	; 220
    1e66:	95 e0       	ldi	r25, 0x05	; 5
    1e68:	f8 01       	movw	r30, r16
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	01 c1       	rjmp	.+514    	; 0x2074 <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    1e72:	41 30       	cpi	r20, 0x01	; 1
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <calc_prescaler+0x690>
    1e76:	69 c0       	rjmp	.+210    	; 0x1f4a <calc_prescaler+0x762>
		{
			if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024) )
    1e78:	2d eb       	ldi	r18, 0xBD	; 189
    1e7a:	37 e3       	ldi	r19, 0x37	; 55
    1e7c:	46 e0       	ldi	r20, 0x06	; 6
    1e7e:	51 e4       	ldi	r21, 0x41	; 65
    1e80:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1e84:	18 16       	cp	r1, r24
    1e86:	0c f4       	brge	.+2      	; 0x1e8a <calc_prescaler+0x6a2>
    1e88:	59 c0       	rjmp	.+178    	; 0x1f3c <calc_prescaler+0x754>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1))
    1e8a:	2d eb       	ldi	r18, 0xBD	; 189
    1e8c:	37 e3       	ldi	r19, 0x37	; 55
    1e8e:	46 e0       	ldi	r20, 0x06	; 6
    1e90:	5c e3       	ldi	r21, 0x3C	; 60
    1e92:	c7 01       	movw	r24, r14
    1e94:	b6 01       	movw	r22, r12
    1e96:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1e9a:	18 16       	cp	r1, r24
    1e9c:	34 f0       	brlt	.+12     	; 0x1eaa <calc_prescaler+0x6c2>
				*ptr_u16_prescale=P_1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
    1ea8:	e5 c0       	rjmp	.+458    	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
    1eaa:	2d eb       	ldi	r18, 0xBD	; 189
    1eac:	37 e3       	ldi	r19, 0x37	; 55
    1eae:	46 e8       	ldi	r20, 0x86	; 134
    1eb0:	5d e3       	ldi	r21, 0x3D	; 61
    1eb2:	c7 01       	movw	r24, r14
    1eb4:	b6 01       	movw	r22, r12
    1eb6:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1eba:	18 16       	cp	r1, r24
    1ebc:	3c f0       	brlt	.+14     	; 0x1ecc <calc_prescaler+0x6e4>
				*ptr_u16_prescale=P_8;
    1ebe:	88 e0       	ldi	r24, 0x08	; 8
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	91 83       	std	Z+1, r25	; 0x01
    1ec6:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	d4 c0       	rjmp	.+424    	; 0x2074 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
    1ecc:	2d eb       	ldi	r18, 0xBD	; 189
    1ece:	37 e3       	ldi	r19, 0x37	; 55
    1ed0:	46 e0       	ldi	r20, 0x06	; 6
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	c7 01       	movw	r24, r14
    1ed6:	b6 01       	movw	r22, r12
    1ed8:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1edc:	18 16       	cp	r1, r24
    1ede:	3c f0       	brlt	.+14     	; 0x1eee <calc_prescaler+0x706>
				*ptr_u16_prescale=P_64;
    1ee0:	80 e4       	ldi	r24, 0x40	; 64
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	c3 c0       	rjmp	.+390    	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
    1eee:	2d eb       	ldi	r18, 0xBD	; 189
    1ef0:	37 e3       	ldi	r19, 0x37	; 55
    1ef2:	46 e0       	ldi	r20, 0x06	; 6
    1ef4:	50 e4       	ldi	r21, 0x40	; 64
    1ef6:	c7 01       	movw	r24, r14
    1ef8:	b6 01       	movw	r22, r12
    1efa:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	3c f0       	brlt	.+14     	; 0x1f10 <calc_prescaler+0x728>
				*ptr_u16_prescale=P_256;
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	f8 01       	movw	r30, r16
    1f08:	91 83       	std	Z+1, r25	; 0x01
    1f0a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	b2 c0       	rjmp	.+356    	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024))
    1f10:	2d eb       	ldi	r18, 0xBD	; 189
    1f12:	37 e3       	ldi	r19, 0x37	; 55
    1f14:	46 e0       	ldi	r20, 0x06	; 6
    1f16:	51 e4       	ldi	r21, 0x41	; 65
    1f18:	c7 01       	movw	r24, r14
    1f1a:	b6 01       	movw	r22, r12
    1f1c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1f20:	18 16       	cp	r1, r24
    1f22:	3c f0       	brlt	.+14     	; 0x1f32 <calc_prescaler+0x74a>
				*ptr_u16_prescale=P_1024;
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	94 e0       	ldi	r25, 0x04	; 4
    1f28:	f8 01       	movw	r30, r16
    1f2a:	91 83       	std	Z+1, r25	; 0x01
    1f2c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	a1 c0       	rjmp	.+322    	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1f32:	f8 01       	movw	r30, r16
    1f34:	11 82       	std	Z+1, r1	; 0x01
    1f36:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	9c c0       	rjmp	.+312    	; 0x2074 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1f3c:	8c ed       	ldi	r24, 0xDC	; 220
    1f3e:	95 e0       	ldi	r25, 0x05	; 5
    1f40:	f8 01       	movw	r30, r16
    1f42:	91 83       	std	Z+1, r25	; 0x01
    1f44:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	95 c0       	rjmp	.+298    	; 0x2074 <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    1f4a:	42 30       	cpi	r20, 0x02	; 2
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <calc_prescaler+0x768>
    1f4e:	91 c0       	rjmp	.+290    	; 0x2072 <calc_prescaler+0x88a>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024) )
    1f50:	2d eb       	ldi	r18, 0xBD	; 189
    1f52:	37 e3       	ldi	r19, 0x37	; 55
    1f54:	46 e0       	ldi	r20, 0x06	; 6
    1f56:	5d e3       	ldi	r21, 0x3D	; 61
    1f58:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1f5c:	18 16       	cp	r1, r24
    1f5e:	0c f4       	brge	.+2      	; 0x1f62 <calc_prescaler+0x77a>
    1f60:	7b c0       	rjmp	.+246    	; 0x2058 <calc_prescaler+0x870>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
    1f62:	2d eb       	ldi	r18, 0xBD	; 189
    1f64:	37 e3       	ldi	r19, 0x37	; 55
    1f66:	46 e0       	ldi	r20, 0x06	; 6
    1f68:	58 e3       	ldi	r21, 0x38	; 56
    1f6a:	c7 01       	movw	r24, r14
    1f6c:	b6 01       	movw	r22, r12
    1f6e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1f72:	18 16       	cp	r1, r24
    1f74:	34 f0       	brlt	.+12     	; 0x1f82 <calc_prescaler+0x79a>
				*ptr_u16_prescale=P_1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	80 83       	st	Z, r24
    1f80:	79 c0       	rjmp	.+242    	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
    1f82:	2d eb       	ldi	r18, 0xBD	; 189
    1f84:	37 e3       	ldi	r19, 0x37	; 55
    1f86:	46 e8       	ldi	r20, 0x86	; 134
    1f88:	59 e3       	ldi	r21, 0x39	; 57
    1f8a:	c7 01       	movw	r24, r14
    1f8c:	b6 01       	movw	r22, r12
    1f8e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1f92:	18 16       	cp	r1, r24
    1f94:	3c f0       	brlt	.+14     	; 0x1fa4 <calc_prescaler+0x7bc>
				*ptr_u16_prescale=P_8;
    1f96:	88 e0       	ldi	r24, 0x08	; 8
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	f8 01       	movw	r30, r16
    1f9c:	91 83       	std	Z+1, r25	; 0x01
    1f9e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	68 c0       	rjmp	.+208    	; 0x2074 <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
    1fa4:	2d eb       	ldi	r18, 0xBD	; 189
    1fa6:	37 e3       	ldi	r19, 0x37	; 55
    1fa8:	46 e8       	ldi	r20, 0x86	; 134
    1faa:	5a e3       	ldi	r21, 0x3A	; 58
    1fac:	c7 01       	movw	r24, r14
    1fae:	b6 01       	movw	r22, r12
    1fb0:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1fb4:	18 16       	cp	r1, r24
    1fb6:	3c f0       	brlt	.+14     	; 0x1fc6 <calc_prescaler+0x7de>
				*ptr_u16_prescale=P_32;
    1fb8:	80 e2       	ldi	r24, 0x20	; 32
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	57 c0       	rjmp	.+174    	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
    1fc6:	2d eb       	ldi	r18, 0xBD	; 189
    1fc8:	37 e3       	ldi	r19, 0x37	; 55
    1fca:	46 e0       	ldi	r20, 0x06	; 6
    1fcc:	5b e3       	ldi	r21, 0x3B	; 59
    1fce:	c7 01       	movw	r24, r14
    1fd0:	b6 01       	movw	r22, r12
    1fd2:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	3c f0       	brlt	.+14     	; 0x1fe8 <calc_prescaler+0x800>
				*ptr_u16_prescale=P_64;
    1fda:	80 e4       	ldi	r24, 0x40	; 64
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	f8 01       	movw	r30, r16
    1fe0:	91 83       	std	Z+1, r25	; 0x01
    1fe2:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	46 c0       	rjmp	.+140    	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
    1fe8:	2d eb       	ldi	r18, 0xBD	; 189
    1fea:	37 e3       	ldi	r19, 0x37	; 55
    1fec:	46 e8       	ldi	r20, 0x86	; 134
    1fee:	5b e3       	ldi	r21, 0x3B	; 59
    1ff0:	c7 01       	movw	r24, r14
    1ff2:	b6 01       	movw	r22, r12
    1ff4:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    1ff8:	18 16       	cp	r1, r24
    1ffa:	3c f0       	brlt	.+14     	; 0x200a <calc_prescaler+0x822>
				*ptr_u16_prescale=P_128;
    1ffc:	80 e8       	ldi	r24, 0x80	; 128
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	f8 01       	movw	r30, r16
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	35 c0       	rjmp	.+106    	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
    200a:	2d eb       	ldi	r18, 0xBD	; 189
    200c:	37 e3       	ldi	r19, 0x37	; 55
    200e:	46 e0       	ldi	r20, 0x06	; 6
    2010:	5c e3       	ldi	r21, 0x3C	; 60
    2012:	c7 01       	movw	r24, r14
    2014:	b6 01       	movw	r22, r12
    2016:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    201a:	18 16       	cp	r1, r24
    201c:	3c f0       	brlt	.+14     	; 0x202c <calc_prescaler+0x844>
				*ptr_u16_prescale=P_256;
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	91 e0       	ldi	r25, 0x01	; 1
    2022:	f8 01       	movw	r30, r16
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	24 c0       	rjmp	.+72     	; 0x2074 <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_SEC(P_1024))
    202c:	2d eb       	ldi	r18, 0xBD	; 189
    202e:	37 e3       	ldi	r19, 0x37	; 55
    2030:	46 e0       	ldi	r20, 0x06	; 6
    2032:	5d e3       	ldi	r21, 0x3D	; 61
    2034:	c7 01       	movw	r24, r14
    2036:	b6 01       	movw	r22, r12
    2038:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__cmpsf2>
    203c:	18 16       	cp	r1, r24
    203e:	3c f0       	brlt	.+14     	; 0x204e <calc_prescaler+0x866>
				*ptr_u16_prescale=P_1024;
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	94 e0       	ldi	r25, 0x04	; 4
    2044:	f8 01       	movw	r30, r16
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	13 c0       	rjmp	.+38     	; 0x2074 <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    204e:	f8 01       	movw	r30, r16
    2050:	11 82       	std	Z+1, r1	; 0x01
    2052:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	0e c0       	rjmp	.+28     	; 0x2074 <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    2058:	8c ed       	ldi	r24, 0xDC	; 220
    205a:	95 e0       	ldi	r25, 0x05	; 5
    205c:	f8 01       	movw	r30, r16
    205e:	91 83       	std	Z+1, r25	; 0x01
    2060:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	07 c0       	rjmp	.+14     	; 0x2074 <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	05 c0       	rjmp	.+10     	; 0x2074 <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <calc_prescaler+0x88c>
			// do nothing
		}
	}
	else
	{
		bo_return_value = FALSE;
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    2072:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		bo_return_value = FALSE;
	}
	return bo_return_value;
}
    2074:	1f 91       	pop	r17
    2076:	0f 91       	pop	r16
    2078:	ff 90       	pop	r15
    207a:	ef 90       	pop	r14
    207c:	df 90       	pop	r13
    207e:	cf 90       	pop	r12
    2080:	08 95       	ret

00002082 <calc_initialValue>:

/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
    2082:	ef 92       	push	r14
    2084:	ff 92       	push	r15
    2086:	0f 93       	push	r16
    2088:	1f 93       	push	r17
	BOOLEAN bo_return_value = TRUE;
	if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    208a:	81 11       	cpse	r24, r1
    208c:	8a c1       	rjmp	.+788    	; 0x23a2 <calc_initialValue+0x320>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    208e:	61 11       	cpse	r22, r1
    2090:	7c c0       	rjmp	.+248    	; 0x218a <calc_initialValue+0x108>
		{
			switch(prescaler)
    2092:	40 34       	cpi	r20, 0x40	; 64
    2094:	51 05       	cpc	r21, r1
    2096:	a9 f1       	breq	.+106    	; 0x2102 <calc_initialValue+0x80>
    2098:	38 f4       	brcc	.+14     	; 0x20a8 <calc_initialValue+0x26>
    209a:	41 30       	cpi	r20, 0x01	; 1
    209c:	51 05       	cpc	r21, r1
    209e:	69 f0       	breq	.+26     	; 0x20ba <calc_initialValue+0x38>
    20a0:	48 30       	cpi	r20, 0x08	; 8
    20a2:	51 05       	cpc	r21, r1
    20a4:	f9 f0       	breq	.+62     	; 0x20e4 <calc_initialValue+0x62>
    20a6:	6c c0       	rjmp	.+216    	; 0x2180 <calc_initialValue+0xfe>
    20a8:	41 15       	cp	r20, r1
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	58 07       	cpc	r21, r24
    20ae:	f1 f1       	breq	.+124    	; 0x212c <calc_initialValue+0xaa>
    20b0:	41 15       	cp	r20, r1
    20b2:	54 40       	sbci	r21, 0x04	; 4
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <calc_initialValue+0x36>
    20b6:	4f c0       	rjmp	.+158    	; 0x2156 <calc_initialValue+0xd4>
    20b8:	63 c0       	rjmp	.+198    	; 0x2180 <calc_initialValue+0xfe>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    20ba:	a9 01       	movw	r20, r18
    20bc:	98 01       	movw	r18, r16
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	92 e4       	ldi	r25, 0x42	; 66
    20c6:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
    20d6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    20da:	f7 01       	movw	r30, r14
    20dc:	71 83       	std	Z+1, r23	; 0x01
    20de:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    20e2:	1d c5       	rjmp	.+2618   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    20e4:	a9 01       	movw	r20, r18
    20e6:	98 01       	movw	r18, r16
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	70 e0       	ldi	r23, 0x00	; 0
    20ec:	80 e8       	ldi	r24, 0x80	; 128
    20ee:	93 e4       	ldi	r25, 0x43	; 67
    20f0:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    20f4:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    20f8:	f7 01       	movw	r30, r14
    20fa:	71 83       	std	Z+1, r23	; 0x01
    20fc:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    20fe:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    2100:	0e c5       	rjmp	.+2588   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    2102:	a9 01       	movw	r20, r18
    2104:	98 01       	movw	r18, r16
    2106:	60 e0       	ldi	r22, 0x00	; 0
    2108:	70 e0       	ldi	r23, 0x00	; 0
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	95 e4       	ldi	r25, 0x45	; 69
    210e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	5e e3       	ldi	r21, 0x3E	; 62
    211a:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
    211e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2122:	f7 01       	movw	r30, r14
    2124:	71 83       	std	Z+1, r23	; 0x01
    2126:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2128:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    212a:	f9 c4       	rjmp	.+2546   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    212c:	a9 01       	movw	r20, r18
    212e:	98 01       	movw	r18, r16
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	96 e4       	ldi	r25, 0x46	; 70
    2138:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	5d e3       	ldi	r21, 0x3D	; 61
    2144:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
    2148:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    214c:	f7 01       	movw	r30, r14
    214e:	71 83       	std	Z+1, r23	; 0x01
    2150:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2152:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    2154:	e4 c4       	rjmp	.+2504   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    2156:	a9 01       	movw	r20, r18
    2158:	98 01       	movw	r18, r16
    215a:	60 e0       	ldi	r22, 0x00	; 0
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	97 e4       	ldi	r25, 0x47	; 71
    2162:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e0       	ldi	r20, 0x00	; 0
    216c:	5c e3       	ldi	r21, 0x3C	; 60
    216e:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
    2172:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2176:	f7 01       	movw	r30, r14
    2178:	71 83       	std	Z+1, r23	; 0x01
    217a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    217c:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    217e:	cf c4       	rjmp	.+2462   	; 0x2b1e <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2180:	f7 01       	movw	r30, r14
    2182:	11 82       	std	Z+1, r1	; 0x01
    2184:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2186:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2188:	ca c4       	rjmp	.+2452   	; 0x2b1e <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    218a:	61 30       	cpi	r22, 0x01	; 1
    218c:	09 f0       	breq	.+2      	; 0x2190 <calc_initialValue+0x10e>
    218e:	83 c0       	rjmp	.+262    	; 0x2296 <calc_initialValue+0x214>
		{
			switch(prescaler)
    2190:	40 34       	cpi	r20, 0x40	; 64
    2192:	51 05       	cpc	r21, r1
    2194:	e1 f1       	breq	.+120    	; 0x220e <calc_initialValue+0x18c>
    2196:	38 f4       	brcc	.+14     	; 0x21a6 <calc_initialValue+0x124>
    2198:	41 30       	cpi	r20, 0x01	; 1
    219a:	51 05       	cpc	r21, r1
    219c:	71 f0       	breq	.+28     	; 0x21ba <calc_initialValue+0x138>
    219e:	48 30       	cpi	r20, 0x08	; 8
    21a0:	51 05       	cpc	r21, r1
    21a2:	01 f1       	breq	.+64     	; 0x21e4 <calc_initialValue+0x162>
    21a4:	73 c0       	rjmp	.+230    	; 0x228c <calc_initialValue+0x20a>
    21a6:	41 15       	cp	r20, r1
    21a8:	f1 e0       	ldi	r31, 0x01	; 1
    21aa:	5f 07       	cpc	r21, r31
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <calc_initialValue+0x12e>
    21ae:	44 c0       	rjmp	.+136    	; 0x2238 <calc_initialValue+0x1b6>
    21b0:	41 15       	cp	r20, r1
    21b2:	54 40       	sbci	r21, 0x04	; 4
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <calc_initialValue+0x136>
    21b6:	55 c0       	rjmp	.+170    	; 0x2262 <calc_initialValue+0x1e0>
    21b8:	69 c0       	rjmp	.+210    	; 0x228c <calc_initialValue+0x20a>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    21ba:	a9 01       	movw	r20, r18
    21bc:	98 01       	movw	r18, r16
    21be:	6f e6       	ldi	r22, 0x6F	; 111
    21c0:	72 e1       	ldi	r23, 0x12	; 18
    21c2:	83 e0       	ldi	r24, 0x03	; 3
    21c4:	9d e3       	ldi	r25, 0x3D	; 61
    21c6:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    21ca:	2f e6       	ldi	r18, 0x6F	; 111
    21cc:	32 e1       	ldi	r19, 0x12	; 18
    21ce:	43 e0       	ldi	r20, 0x03	; 3
    21d0:	59 e3       	ldi	r21, 0x39	; 57
    21d2:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    21d6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    21da:	f7 01       	movw	r30, r14
    21dc:	71 83       	std	Z+1, r23	; 0x01
    21de:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    21e2:	9d c4       	rjmp	.+2362   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    21e4:	a9 01       	movw	r20, r18
    21e6:	98 01       	movw	r18, r16
    21e8:	6f e6       	ldi	r22, 0x6F	; 111
    21ea:	72 e1       	ldi	r23, 0x12	; 18
    21ec:	83 e8       	ldi	r24, 0x83	; 131
    21ee:	9e e3       	ldi	r25, 0x3E	; 62
    21f0:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    21f4:	2f e6       	ldi	r18, 0x6F	; 111
    21f6:	32 e1       	ldi	r19, 0x12	; 18
    21f8:	43 e8       	ldi	r20, 0x83	; 131
    21fa:	5a e3       	ldi	r21, 0x3A	; 58
    21fc:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2200:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2204:	f7 01       	movw	r30, r14
    2206:	71 83       	std	Z+1, r23	; 0x01
    2208:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    220a:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    220c:	88 c4       	rjmp	.+2320   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    220e:	a9 01       	movw	r20, r18
    2210:	98 01       	movw	r18, r16
    2212:	6f e6       	ldi	r22, 0x6F	; 111
    2214:	72 e1       	ldi	r23, 0x12	; 18
    2216:	83 e0       	ldi	r24, 0x03	; 3
    2218:	90 e4       	ldi	r25, 0x40	; 64
    221a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    221e:	2f e6       	ldi	r18, 0x6F	; 111
    2220:	32 e1       	ldi	r19, 0x12	; 18
    2222:	43 e0       	ldi	r20, 0x03	; 3
    2224:	5c e3       	ldi	r21, 0x3C	; 60
    2226:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    222a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    222e:	f7 01       	movw	r30, r14
    2230:	71 83       	std	Z+1, r23	; 0x01
    2232:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2234:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    2236:	73 c4       	rjmp	.+2278   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    2238:	a9 01       	movw	r20, r18
    223a:	98 01       	movw	r18, r16
    223c:	6f e6       	ldi	r22, 0x6F	; 111
    223e:	72 e1       	ldi	r23, 0x12	; 18
    2240:	83 e0       	ldi	r24, 0x03	; 3
    2242:	91 e4       	ldi	r25, 0x41	; 65
    2244:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2248:	2f e6       	ldi	r18, 0x6F	; 111
    224a:	32 e1       	ldi	r19, 0x12	; 18
    224c:	43 e0       	ldi	r20, 0x03	; 3
    224e:	5d e3       	ldi	r21, 0x3D	; 61
    2250:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2254:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2258:	f7 01       	movw	r30, r14
    225a:	71 83       	std	Z+1, r23	; 0x01
    225c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    225e:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    2260:	5e c4       	rjmp	.+2236   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    2262:	a9 01       	movw	r20, r18
    2264:	98 01       	movw	r18, r16
    2266:	6f e6       	ldi	r22, 0x6F	; 111
    2268:	72 e1       	ldi	r23, 0x12	; 18
    226a:	83 e0       	ldi	r24, 0x03	; 3
    226c:	92 e4       	ldi	r25, 0x42	; 66
    226e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2272:	2f e6       	ldi	r18, 0x6F	; 111
    2274:	32 e1       	ldi	r19, 0x12	; 18
    2276:	43 e0       	ldi	r20, 0x03	; 3
    2278:	5e e3       	ldi	r21, 0x3E	; 62
    227a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    227e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2282:	f7 01       	movw	r30, r14
    2284:	71 83       	std	Z+1, r23	; 0x01
    2286:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2288:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    228a:	49 c4       	rjmp	.+2194   	; 0x2b1e <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    228c:	f7 01       	movw	r30, r14
    228e:	11 82       	std	Z+1, r1	; 0x01
    2290:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2292:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2294:	44 c4       	rjmp	.+2184   	; 0x2b1e <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    2296:	62 30       	cpi	r22, 0x02	; 2
    2298:	09 f0       	breq	.+2      	; 0x229c <calc_initialValue+0x21a>
    229a:	3a c4       	rjmp	.+2164   	; 0x2b10 <calc_initialValue+0xa8e>
		{
			switch(prescaler)
    229c:	40 34       	cpi	r20, 0x40	; 64
    229e:	51 05       	cpc	r21, r1
    22a0:	e1 f1       	breq	.+120    	; 0x231a <calc_initialValue+0x298>
    22a2:	38 f4       	brcc	.+14     	; 0x22b2 <calc_initialValue+0x230>
    22a4:	41 30       	cpi	r20, 0x01	; 1
    22a6:	51 05       	cpc	r21, r1
    22a8:	71 f0       	breq	.+28     	; 0x22c6 <calc_initialValue+0x244>
    22aa:	48 30       	cpi	r20, 0x08	; 8
    22ac:	51 05       	cpc	r21, r1
    22ae:	01 f1       	breq	.+64     	; 0x22f0 <calc_initialValue+0x26e>
    22b0:	73 c0       	rjmp	.+230    	; 0x2398 <calc_initialValue+0x316>
    22b2:	41 15       	cp	r20, r1
    22b4:	f1 e0       	ldi	r31, 0x01	; 1
    22b6:	5f 07       	cpc	r21, r31
    22b8:	09 f4       	brne	.+2      	; 0x22bc <calc_initialValue+0x23a>
    22ba:	44 c0       	rjmp	.+136    	; 0x2344 <calc_initialValue+0x2c2>
    22bc:	41 15       	cp	r20, r1
    22be:	54 40       	sbci	r21, 0x04	; 4
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <calc_initialValue+0x242>
    22c2:	55 c0       	rjmp	.+170    	; 0x236e <calc_initialValue+0x2ec>
    22c4:	69 c0       	rjmp	.+210    	; 0x2398 <calc_initialValue+0x316>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    22c6:	a9 01       	movw	r20, r18
    22c8:	98 01       	movw	r18, r16
    22ca:	6d eb       	ldi	r22, 0xBD	; 189
    22cc:	77 e3       	ldi	r23, 0x37	; 55
    22ce:	86 e0       	ldi	r24, 0x06	; 6
    22d0:	98 e3       	ldi	r25, 0x38	; 56
    22d2:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    22d6:	2d eb       	ldi	r18, 0xBD	; 189
    22d8:	37 e3       	ldi	r19, 0x37	; 55
    22da:	46 e0       	ldi	r20, 0x06	; 6
    22dc:	54 e3       	ldi	r21, 0x34	; 52
    22de:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    22e2:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    22e6:	f7 01       	movw	r30, r14
    22e8:	71 83       	std	Z+1, r23	; 0x01
    22ea:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    22ee:	17 c4       	rjmp	.+2094   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    22f0:	a9 01       	movw	r20, r18
    22f2:	98 01       	movw	r18, r16
    22f4:	6d eb       	ldi	r22, 0xBD	; 189
    22f6:	77 e3       	ldi	r23, 0x37	; 55
    22f8:	86 e8       	ldi	r24, 0x86	; 134
    22fa:	99 e3       	ldi	r25, 0x39	; 57
    22fc:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2300:	2d eb       	ldi	r18, 0xBD	; 189
    2302:	37 e3       	ldi	r19, 0x37	; 55
    2304:	46 e8       	ldi	r20, 0x86	; 134
    2306:	55 e3       	ldi	r21, 0x35	; 53
    2308:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    230c:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2310:	f7 01       	movw	r30, r14
    2312:	71 83       	std	Z+1, r23	; 0x01
    2314:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2316:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    2318:	02 c4       	rjmp	.+2052   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    231a:	a9 01       	movw	r20, r18
    231c:	98 01       	movw	r18, r16
    231e:	6d eb       	ldi	r22, 0xBD	; 189
    2320:	77 e3       	ldi	r23, 0x37	; 55
    2322:	86 e0       	ldi	r24, 0x06	; 6
    2324:	9b e3       	ldi	r25, 0x3B	; 59
    2326:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    232a:	2d eb       	ldi	r18, 0xBD	; 189
    232c:	37 e3       	ldi	r19, 0x37	; 55
    232e:	46 e0       	ldi	r20, 0x06	; 6
    2330:	57 e3       	ldi	r21, 0x37	; 55
    2332:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2336:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    233a:	f7 01       	movw	r30, r14
    233c:	71 83       	std	Z+1, r23	; 0x01
    233e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2340:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    2342:	ed c3       	rjmp	.+2010   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    2344:	a9 01       	movw	r20, r18
    2346:	98 01       	movw	r18, r16
    2348:	6d eb       	ldi	r22, 0xBD	; 189
    234a:	77 e3       	ldi	r23, 0x37	; 55
    234c:	86 e0       	ldi	r24, 0x06	; 6
    234e:	9c e3       	ldi	r25, 0x3C	; 60
    2350:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2354:	2d eb       	ldi	r18, 0xBD	; 189
    2356:	37 e3       	ldi	r19, 0x37	; 55
    2358:	46 e0       	ldi	r20, 0x06	; 6
    235a:	58 e3       	ldi	r21, 0x38	; 56
    235c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2360:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2364:	f7 01       	movw	r30, r14
    2366:	71 83       	std	Z+1, r23	; 0x01
    2368:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    236a:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    236c:	d8 c3       	rjmp	.+1968   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    236e:	a9 01       	movw	r20, r18
    2370:	98 01       	movw	r18, r16
    2372:	6d eb       	ldi	r22, 0xBD	; 189
    2374:	77 e3       	ldi	r23, 0x37	; 55
    2376:	86 e0       	ldi	r24, 0x06	; 6
    2378:	9d e3       	ldi	r25, 0x3D	; 61
    237a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    237e:	2d eb       	ldi	r18, 0xBD	; 189
    2380:	37 e3       	ldi	r19, 0x37	; 55
    2382:	46 e0       	ldi	r20, 0x06	; 6
    2384:	59 e3       	ldi	r21, 0x39	; 57
    2386:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    238a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    238e:	f7 01       	movw	r30, r14
    2390:	71 83       	std	Z+1, r23	; 0x01
    2392:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2394:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    2396:	c3 c3       	rjmp	.+1926   	; 0x2b1e <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2398:	f7 01       	movw	r30, r14
    239a:	11 82       	std	Z+1, r1	; 0x01
    239c:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    239e:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    23a0:	be c3       	rjmp	.+1916   	; 0x2b1e <calc_initialValue+0xa9c>
		else
		{
			// do nothing
		}
	}
	else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    23a2:	81 30       	cpi	r24, 0x01	; 1
    23a4:	09 f0       	breq	.+2      	; 0x23a8 <calc_initialValue+0x326>
    23a6:	8a c1       	rjmp	.+788    	; 0x26bc <calc_initialValue+0x63a>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    23a8:	61 11       	cpse	r22, r1
    23aa:	7c c0       	rjmp	.+248    	; 0x24a4 <calc_initialValue+0x422>
		{
			switch(prescaler)
    23ac:	40 34       	cpi	r20, 0x40	; 64
    23ae:	51 05       	cpc	r21, r1
    23b0:	a9 f1       	breq	.+106    	; 0x241c <calc_initialValue+0x39a>
    23b2:	38 f4       	brcc	.+14     	; 0x23c2 <calc_initialValue+0x340>
    23b4:	41 30       	cpi	r20, 0x01	; 1
    23b6:	51 05       	cpc	r21, r1
    23b8:	69 f0       	breq	.+26     	; 0x23d4 <calc_initialValue+0x352>
    23ba:	48 30       	cpi	r20, 0x08	; 8
    23bc:	51 05       	cpc	r21, r1
    23be:	f9 f0       	breq	.+62     	; 0x23fe <calc_initialValue+0x37c>
    23c0:	6c c0       	rjmp	.+216    	; 0x249a <calc_initialValue+0x418>
    23c2:	41 15       	cp	r20, r1
    23c4:	f1 e0       	ldi	r31, 0x01	; 1
    23c6:	5f 07       	cpc	r21, r31
    23c8:	f1 f1       	breq	.+124    	; 0x2446 <calc_initialValue+0x3c4>
    23ca:	41 15       	cp	r20, r1
    23cc:	54 40       	sbci	r21, 0x04	; 4
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <calc_initialValue+0x350>
    23d0:	4f c0       	rjmp	.+158    	; 0x2470 <calc_initialValue+0x3ee>
    23d2:	63 c0       	rjmp	.+198    	; 0x249a <calc_initialValue+0x418>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    23d4:	a9 01       	movw	r20, r18
    23d6:	98 01       	movw	r18, r16
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	96 e4       	ldi	r25, 0x46	; 70
    23e0:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e0       	ldi	r20, 0x00	; 0
    23ea:	51 e4       	ldi	r21, 0x41	; 65
    23ec:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
    23f0:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    23f4:	f7 01       	movw	r30, r14
    23f6:	71 83       	std	Z+1, r23	; 0x01
    23f8:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    23fc:	90 c3       	rjmp	.+1824   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    23fe:	a9 01       	movw	r20, r18
    2400:	98 01       	movw	r18, r16
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	70 e0       	ldi	r23, 0x00	; 0
    2406:	80 e8       	ldi	r24, 0x80	; 128
    2408:	97 e4       	ldi	r25, 0x47	; 71
    240a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    240e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2412:	f7 01       	movw	r30, r14
    2414:	71 83       	std	Z+1, r23	; 0x01
    2416:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2418:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    241a:	81 c3       	rjmp	.+1794   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    241c:	a9 01       	movw	r20, r18
    241e:	98 01       	movw	r18, r16
    2420:	60 e0       	ldi	r22, 0x00	; 0
    2422:	70 e0       	ldi	r23, 0x00	; 0
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	99 e4       	ldi	r25, 0x49	; 73
    2428:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	5e e3       	ldi	r21, 0x3E	; 62
    2434:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
    2438:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    243c:	f7 01       	movw	r30, r14
    243e:	71 83       	std	Z+1, r23	; 0x01
    2440:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2442:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    2444:	6c c3       	rjmp	.+1752   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    2446:	a9 01       	movw	r20, r18
    2448:	98 01       	movw	r18, r16
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	70 e0       	ldi	r23, 0x00	; 0
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	9a e4       	ldi	r25, 0x4A	; 74
    2452:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	5d e3       	ldi	r21, 0x3D	; 61
    245e:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
    2462:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2466:	f7 01       	movw	r30, r14
    2468:	71 83       	std	Z+1, r23	; 0x01
    246a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    246c:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    246e:	57 c3       	rjmp	.+1710   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    2470:	a9 01       	movw	r20, r18
    2472:	98 01       	movw	r18, r16
    2474:	60 e0       	ldi	r22, 0x00	; 0
    2476:	70 e0       	ldi	r23, 0x00	; 0
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	9b e4       	ldi	r25, 0x4B	; 75
    247c:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e0       	ldi	r20, 0x00	; 0
    2486:	5c e3       	ldi	r21, 0x3C	; 60
    2488:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
    248c:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2490:	f7 01       	movw	r30, r14
    2492:	71 83       	std	Z+1, r23	; 0x01
    2494:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2496:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    2498:	42 c3       	rjmp	.+1668   	; 0x2b1e <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    249a:	f7 01       	movw	r30, r14
    249c:	11 82       	std	Z+1, r1	; 0x01
    249e:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    24a0:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    24a2:	3d c3       	rjmp	.+1658   	; 0x2b1e <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    24a4:	61 30       	cpi	r22, 0x01	; 1
    24a6:	09 f0       	breq	.+2      	; 0x24aa <calc_initialValue+0x428>
    24a8:	83 c0       	rjmp	.+262    	; 0x25b0 <calc_initialValue+0x52e>
		{
			switch(prescaler)
    24aa:	40 34       	cpi	r20, 0x40	; 64
    24ac:	51 05       	cpc	r21, r1
    24ae:	e1 f1       	breq	.+120    	; 0x2528 <calc_initialValue+0x4a6>
    24b0:	38 f4       	brcc	.+14     	; 0x24c0 <calc_initialValue+0x43e>
    24b2:	41 30       	cpi	r20, 0x01	; 1
    24b4:	51 05       	cpc	r21, r1
    24b6:	71 f0       	breq	.+28     	; 0x24d4 <calc_initialValue+0x452>
    24b8:	48 30       	cpi	r20, 0x08	; 8
    24ba:	51 05       	cpc	r21, r1
    24bc:	01 f1       	breq	.+64     	; 0x24fe <calc_initialValue+0x47c>
    24be:	73 c0       	rjmp	.+230    	; 0x25a6 <calc_initialValue+0x524>
    24c0:	41 15       	cp	r20, r1
    24c2:	f1 e0       	ldi	r31, 0x01	; 1
    24c4:	5f 07       	cpc	r21, r31
    24c6:	09 f4       	brne	.+2      	; 0x24ca <calc_initialValue+0x448>
    24c8:	44 c0       	rjmp	.+136    	; 0x2552 <calc_initialValue+0x4d0>
    24ca:	41 15       	cp	r20, r1
    24cc:	54 40       	sbci	r21, 0x04	; 4
    24ce:	09 f4       	brne	.+2      	; 0x24d2 <calc_initialValue+0x450>
    24d0:	55 c0       	rjmp	.+170    	; 0x257c <calc_initialValue+0x4fa>
    24d2:	69 c0       	rjmp	.+210    	; 0x25a6 <calc_initialValue+0x524>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    24d4:	a9 01       	movw	r20, r18
    24d6:	98 01       	movw	r18, r16
    24d8:	6f e6       	ldi	r22, 0x6F	; 111
    24da:	72 e1       	ldi	r23, 0x12	; 18
    24dc:	83 e0       	ldi	r24, 0x03	; 3
    24de:	91 e4       	ldi	r25, 0x41	; 65
    24e0:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    24e4:	2f e6       	ldi	r18, 0x6F	; 111
    24e6:	32 e1       	ldi	r19, 0x12	; 18
    24e8:	43 e0       	ldi	r20, 0x03	; 3
    24ea:	59 e3       	ldi	r21, 0x39	; 57
    24ec:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    24f0:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    24f4:	f7 01       	movw	r30, r14
    24f6:	71 83       	std	Z+1, r23	; 0x01
    24f8:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    24fa:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    24fc:	10 c3       	rjmp	.+1568   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    24fe:	a9 01       	movw	r20, r18
    2500:	98 01       	movw	r18, r16
    2502:	6f e6       	ldi	r22, 0x6F	; 111
    2504:	72 e1       	ldi	r23, 0x12	; 18
    2506:	83 e8       	ldi	r24, 0x83	; 131
    2508:	92 e4       	ldi	r25, 0x42	; 66
    250a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    250e:	2f e6       	ldi	r18, 0x6F	; 111
    2510:	32 e1       	ldi	r19, 0x12	; 18
    2512:	43 e8       	ldi	r20, 0x83	; 131
    2514:	5a e3       	ldi	r21, 0x3A	; 58
    2516:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    251a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    251e:	f7 01       	movw	r30, r14
    2520:	71 83       	std	Z+1, r23	; 0x01
    2522:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2524:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    2526:	fb c2       	rjmp	.+1526   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    2528:	a9 01       	movw	r20, r18
    252a:	98 01       	movw	r18, r16
    252c:	6f e6       	ldi	r22, 0x6F	; 111
    252e:	72 e1       	ldi	r23, 0x12	; 18
    2530:	83 e0       	ldi	r24, 0x03	; 3
    2532:	94 e4       	ldi	r25, 0x44	; 68
    2534:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2538:	2f e6       	ldi	r18, 0x6F	; 111
    253a:	32 e1       	ldi	r19, 0x12	; 18
    253c:	43 e0       	ldi	r20, 0x03	; 3
    253e:	5c e3       	ldi	r21, 0x3C	; 60
    2540:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2544:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2548:	f7 01       	movw	r30, r14
    254a:	71 83       	std	Z+1, r23	; 0x01
    254c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    254e:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    2550:	e6 c2       	rjmp	.+1484   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    2552:	a9 01       	movw	r20, r18
    2554:	98 01       	movw	r18, r16
    2556:	6f e6       	ldi	r22, 0x6F	; 111
    2558:	72 e1       	ldi	r23, 0x12	; 18
    255a:	83 e0       	ldi	r24, 0x03	; 3
    255c:	95 e4       	ldi	r25, 0x45	; 69
    255e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2562:	2f e6       	ldi	r18, 0x6F	; 111
    2564:	32 e1       	ldi	r19, 0x12	; 18
    2566:	43 e0       	ldi	r20, 0x03	; 3
    2568:	5d e3       	ldi	r21, 0x3D	; 61
    256a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    256e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2572:	f7 01       	movw	r30, r14
    2574:	71 83       	std	Z+1, r23	; 0x01
    2576:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2578:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    257a:	d1 c2       	rjmp	.+1442   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    257c:	a9 01       	movw	r20, r18
    257e:	98 01       	movw	r18, r16
    2580:	6f e6       	ldi	r22, 0x6F	; 111
    2582:	72 e1       	ldi	r23, 0x12	; 18
    2584:	83 e0       	ldi	r24, 0x03	; 3
    2586:	96 e4       	ldi	r25, 0x46	; 70
    2588:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    258c:	2f e6       	ldi	r18, 0x6F	; 111
    258e:	32 e1       	ldi	r19, 0x12	; 18
    2590:	43 e0       	ldi	r20, 0x03	; 3
    2592:	5e e3       	ldi	r21, 0x3E	; 62
    2594:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2598:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    259c:	f7 01       	movw	r30, r14
    259e:	71 83       	std	Z+1, r23	; 0x01
    25a0:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    25a2:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    25a4:	bc c2       	rjmp	.+1400   	; 0x2b1e <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    25a6:	f7 01       	movw	r30, r14
    25a8:	11 82       	std	Z+1, r1	; 0x01
    25aa:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    25ac:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    25ae:	b7 c2       	rjmp	.+1390   	; 0x2b1e <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    25b0:	62 30       	cpi	r22, 0x02	; 2
    25b2:	09 f0       	breq	.+2      	; 0x25b6 <calc_initialValue+0x534>
    25b4:	af c2       	rjmp	.+1374   	; 0x2b14 <calc_initialValue+0xa92>
		{
			switch(prescaler)
    25b6:	40 34       	cpi	r20, 0x40	; 64
    25b8:	51 05       	cpc	r21, r1
    25ba:	e1 f1       	breq	.+120    	; 0x2634 <calc_initialValue+0x5b2>
    25bc:	38 f4       	brcc	.+14     	; 0x25cc <calc_initialValue+0x54a>
    25be:	41 30       	cpi	r20, 0x01	; 1
    25c0:	51 05       	cpc	r21, r1
    25c2:	71 f0       	breq	.+28     	; 0x25e0 <calc_initialValue+0x55e>
    25c4:	48 30       	cpi	r20, 0x08	; 8
    25c6:	51 05       	cpc	r21, r1
    25c8:	01 f1       	breq	.+64     	; 0x260a <calc_initialValue+0x588>
    25ca:	73 c0       	rjmp	.+230    	; 0x26b2 <calc_initialValue+0x630>
    25cc:	41 15       	cp	r20, r1
    25ce:	f1 e0       	ldi	r31, 0x01	; 1
    25d0:	5f 07       	cpc	r21, r31
    25d2:	09 f4       	brne	.+2      	; 0x25d6 <calc_initialValue+0x554>
    25d4:	44 c0       	rjmp	.+136    	; 0x265e <calc_initialValue+0x5dc>
    25d6:	41 15       	cp	r20, r1
    25d8:	54 40       	sbci	r21, 0x04	; 4
    25da:	09 f4       	brne	.+2      	; 0x25de <calc_initialValue+0x55c>
    25dc:	55 c0       	rjmp	.+170    	; 0x2688 <calc_initialValue+0x606>
    25de:	69 c0       	rjmp	.+210    	; 0x26b2 <calc_initialValue+0x630>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    25e0:	a9 01       	movw	r20, r18
    25e2:	98 01       	movw	r18, r16
    25e4:	6d eb       	ldi	r22, 0xBD	; 189
    25e6:	77 e3       	ldi	r23, 0x37	; 55
    25e8:	86 e0       	ldi	r24, 0x06	; 6
    25ea:	9c e3       	ldi	r25, 0x3C	; 60
    25ec:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    25f0:	2d eb       	ldi	r18, 0xBD	; 189
    25f2:	37 e3       	ldi	r19, 0x37	; 55
    25f4:	46 e0       	ldi	r20, 0x06	; 6
    25f6:	54 e3       	ldi	r21, 0x34	; 52
    25f8:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    25fc:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2600:	f7 01       	movw	r30, r14
    2602:	71 83       	std	Z+1, r23	; 0x01
    2604:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2606:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    2608:	8a c2       	rjmp	.+1300   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    260a:	a9 01       	movw	r20, r18
    260c:	98 01       	movw	r18, r16
    260e:	6d eb       	ldi	r22, 0xBD	; 189
    2610:	77 e3       	ldi	r23, 0x37	; 55
    2612:	86 e8       	ldi	r24, 0x86	; 134
    2614:	9d e3       	ldi	r25, 0x3D	; 61
    2616:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    261a:	2d eb       	ldi	r18, 0xBD	; 189
    261c:	37 e3       	ldi	r19, 0x37	; 55
    261e:	46 e8       	ldi	r20, 0x86	; 134
    2620:	55 e3       	ldi	r21, 0x35	; 53
    2622:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2626:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    262a:	f7 01       	movw	r30, r14
    262c:	71 83       	std	Z+1, r23	; 0x01
    262e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2630:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    2632:	75 c2       	rjmp	.+1258   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    2634:	a9 01       	movw	r20, r18
    2636:	98 01       	movw	r18, r16
    2638:	6d eb       	ldi	r22, 0xBD	; 189
    263a:	77 e3       	ldi	r23, 0x37	; 55
    263c:	86 e0       	ldi	r24, 0x06	; 6
    263e:	9f e3       	ldi	r25, 0x3F	; 63
    2640:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2644:	2d eb       	ldi	r18, 0xBD	; 189
    2646:	37 e3       	ldi	r19, 0x37	; 55
    2648:	46 e0       	ldi	r20, 0x06	; 6
    264a:	57 e3       	ldi	r21, 0x37	; 55
    264c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2650:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2654:	f7 01       	movw	r30, r14
    2656:	71 83       	std	Z+1, r23	; 0x01
    2658:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    265a:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    265c:	60 c2       	rjmp	.+1216   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    265e:	a9 01       	movw	r20, r18
    2660:	98 01       	movw	r18, r16
    2662:	6d eb       	ldi	r22, 0xBD	; 189
    2664:	77 e3       	ldi	r23, 0x37	; 55
    2666:	86 e0       	ldi	r24, 0x06	; 6
    2668:	90 e4       	ldi	r25, 0x40	; 64
    266a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    266e:	2d eb       	ldi	r18, 0xBD	; 189
    2670:	37 e3       	ldi	r19, 0x37	; 55
    2672:	46 e0       	ldi	r20, 0x06	; 6
    2674:	58 e3       	ldi	r21, 0x38	; 56
    2676:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    267a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    267e:	f7 01       	movw	r30, r14
    2680:	71 83       	std	Z+1, r23	; 0x01
    2682:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2684:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    2686:	4b c2       	rjmp	.+1174   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    2688:	a9 01       	movw	r20, r18
    268a:	98 01       	movw	r18, r16
    268c:	6d eb       	ldi	r22, 0xBD	; 189
    268e:	77 e3       	ldi	r23, 0x37	; 55
    2690:	86 e0       	ldi	r24, 0x06	; 6
    2692:	91 e4       	ldi	r25, 0x41	; 65
    2694:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2698:	2d eb       	ldi	r18, 0xBD	; 189
    269a:	37 e3       	ldi	r19, 0x37	; 55
    269c:	46 e0       	ldi	r20, 0x06	; 6
    269e:	59 e3       	ldi	r21, 0x39	; 57
    26a0:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    26a4:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    26a8:	f7 01       	movw	r30, r14
    26aa:	71 83       	std	Z+1, r23	; 0x01
    26ac:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    26ae:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    26b0:	36 c2       	rjmp	.+1132   	; 0x2b1e <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    26b2:	f7 01       	movw	r30, r14
    26b4:	11 82       	std	Z+1, r1	; 0x01
    26b6:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    26b8:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    26ba:	31 c2       	rjmp	.+1122   	; 0x2b1e <calc_initialValue+0xa9c>
		else
		{
			// do nothing
		}
	}
	else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    26bc:	82 30       	cpi	r24, 0x02	; 2
    26be:	09 f0       	breq	.+2      	; 0x26c2 <calc_initialValue+0x640>
    26c0:	2b c2       	rjmp	.+1110   	; 0x2b18 <calc_initialValue+0xa96>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    26c2:	61 11       	cpse	r22, r1
    26c4:	b1 c0       	rjmp	.+354    	; 0x2828 <calc_initialValue+0x7a6>
		{
			switch(prescaler)
    26c6:	40 34       	cpi	r20, 0x40	; 64
    26c8:	51 05       	cpc	r21, r1
    26ca:	09 f4       	brne	.+2      	; 0x26ce <calc_initialValue+0x64c>
    26cc:	54 c0       	rjmp	.+168    	; 0x2776 <calc_initialValue+0x6f4>
    26ce:	58 f4       	brcc	.+22     	; 0x26e6 <calc_initialValue+0x664>
    26d0:	48 30       	cpi	r20, 0x08	; 8
    26d2:	51 05       	cpc	r21, r1
    26d4:	61 f1       	breq	.+88     	; 0x272e <calc_initialValue+0x6ac>
    26d6:	40 32       	cpi	r20, 0x20	; 32
    26d8:	51 05       	cpc	r21, r1
    26da:	c1 f1       	breq	.+112    	; 0x274c <calc_initialValue+0x6ca>
    26dc:	41 30       	cpi	r20, 0x01	; 1
    26de:	51 05       	cpc	r21, r1
    26e0:	09 f0       	breq	.+2      	; 0x26e4 <calc_initialValue+0x662>
    26e2:	9d c0       	rjmp	.+314    	; 0x281e <calc_initialValue+0x79c>
    26e4:	0f c0       	rjmp	.+30     	; 0x2704 <calc_initialValue+0x682>
    26e6:	41 15       	cp	r20, r1
    26e8:	f1 e0       	ldi	r31, 0x01	; 1
    26ea:	5f 07       	cpc	r21, r31
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <calc_initialValue+0x66e>
    26ee:	6d c0       	rjmp	.+218    	; 0x27ca <calc_initialValue+0x748>
    26f0:	41 15       	cp	r20, r1
    26f2:	84 e0       	ldi	r24, 0x04	; 4
    26f4:	58 07       	cpc	r21, r24
    26f6:	09 f4       	brne	.+2      	; 0x26fa <calc_initialValue+0x678>
    26f8:	7d c0       	rjmp	.+250    	; 0x27f4 <calc_initialValue+0x772>
    26fa:	40 38       	cpi	r20, 0x80	; 128
    26fc:	51 05       	cpc	r21, r1
    26fe:	09 f0       	breq	.+2      	; 0x2702 <calc_initialValue+0x680>
    2700:	8e c0       	rjmp	.+284    	; 0x281e <calc_initialValue+0x79c>
    2702:	4e c0       	rjmp	.+156    	; 0x27a0 <calc_initialValue+0x71e>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    2704:	a9 01       	movw	r20, r18
    2706:	98 01       	movw	r18, r16
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	70 e0       	ldi	r23, 0x00	; 0
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	92 e4       	ldi	r25, 0x42	; 66
    2710:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	51 e4       	ldi	r21, 0x41	; 65
    271c:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
    2720:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2724:	f7 01       	movw	r30, r14
    2726:	71 83       	std	Z+1, r23	; 0x01
    2728:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    272a:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    272c:	f8 c1       	rjmp	.+1008   	; 0x2b1e <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    272e:	a9 01       	movw	r20, r18
    2730:	98 01       	movw	r18, r16
    2732:	60 e0       	ldi	r22, 0x00	; 0
    2734:	70 e0       	ldi	r23, 0x00	; 0
    2736:	80 e8       	ldi	r24, 0x80	; 128
    2738:	93 e4       	ldi	r25, 0x43	; 67
    273a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    273e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2742:	f7 01       	movw	r30, r14
    2744:	71 83       	std	Z+1, r23	; 0x01
    2746:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2748:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    274a:	e9 c1       	rjmp	.+978    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
    274c:	a9 01       	movw	r20, r18
    274e:	98 01       	movw	r18, r16
    2750:	60 e0       	ldi	r22, 0x00	; 0
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	80 e8       	ldi	r24, 0x80	; 128
    2756:	94 e4       	ldi	r25, 0x44	; 68
    2758:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e8       	ldi	r20, 0x80	; 128
    2762:	5e e3       	ldi	r21, 0x3E	; 62
    2764:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
    2768:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    276c:	f7 01       	movw	r30, r14
    276e:	71 83       	std	Z+1, r23	; 0x01
    2770:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2772:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
				break;
    2774:	d4 c1       	rjmp	.+936    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    2776:	a9 01       	movw	r20, r18
    2778:	98 01       	movw	r18, r16
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	95 e4       	ldi	r25, 0x45	; 69
    2782:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	5e e3       	ldi	r21, 0x3E	; 62
    278e:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
    2792:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2796:	f7 01       	movw	r30, r14
    2798:	71 83       	std	Z+1, r23	; 0x01
    279a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    279c:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    279e:	bf c1       	rjmp	.+894    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
    27a0:	a9 01       	movw	r20, r18
    27a2:	98 01       	movw	r18, r16
    27a4:	60 e0       	ldi	r22, 0x00	; 0
    27a6:	70 e0       	ldi	r23, 0x00	; 0
    27a8:	80 e8       	ldi	r24, 0x80	; 128
    27aa:	95 e4       	ldi	r25, 0x45	; 69
    27ac:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e8       	ldi	r20, 0x80	; 128
    27b6:	5d e3       	ldi	r21, 0x3D	; 61
    27b8:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
    27bc:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    27c0:	f7 01       	movw	r30, r14
    27c2:	71 83       	std	Z+1, r23	; 0x01
    27c4:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
				break;
    27c8:	aa c1       	rjmp	.+852    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    27ca:	a9 01       	movw	r20, r18
    27cc:	98 01       	movw	r18, r16
    27ce:	60 e0       	ldi	r22, 0x00	; 0
    27d0:	70 e0       	ldi	r23, 0x00	; 0
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	96 e4       	ldi	r25, 0x46	; 70
    27d6:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e0       	ldi	r20, 0x00	; 0
    27e0:	5d e3       	ldi	r21, 0x3D	; 61
    27e2:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
    27e6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    27ea:	f7 01       	movw	r30, r14
    27ec:	71 83       	std	Z+1, r23	; 0x01
    27ee:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    27f2:	95 c1       	rjmp	.+810    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    27f4:	a9 01       	movw	r20, r18
    27f6:	98 01       	movw	r18, r16
    27f8:	60 e0       	ldi	r22, 0x00	; 0
    27fa:	70 e0       	ldi	r23, 0x00	; 0
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	97 e4       	ldi	r25, 0x47	; 71
    2800:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e0       	ldi	r20, 0x00	; 0
    280a:	5c e3       	ldi	r21, 0x3C	; 60
    280c:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <__mulsf3>
    2810:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2814:	f7 01       	movw	r30, r14
    2816:	71 83       	std	Z+1, r23	; 0x01
    2818:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    281a:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    281c:	80 c1       	rjmp	.+768    	; 0x2b1e <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    281e:	f7 01       	movw	r30, r14
    2820:	11 82       	std	Z+1, r1	; 0x01
    2822:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2824:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2826:	7b c1       	rjmp	.+758    	; 0x2b1e <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    2828:	61 30       	cpi	r22, 0x01	; 1
    282a:	09 f0       	breq	.+2      	; 0x282e <calc_initialValue+0x7ac>
    282c:	b7 c0       	rjmp	.+366    	; 0x299c <calc_initialValue+0x91a>
		{
			switch(prescaler)
    282e:	40 34       	cpi	r20, 0x40	; 64
    2830:	51 05       	cpc	r21, r1
    2832:	09 f4       	brne	.+2      	; 0x2836 <calc_initialValue+0x7b4>
    2834:	5a c0       	rjmp	.+180    	; 0x28ea <calc_initialValue+0x868>
    2836:	58 f4       	brcc	.+22     	; 0x284e <calc_initialValue+0x7cc>
    2838:	48 30       	cpi	r20, 0x08	; 8
    283a:	51 05       	cpc	r21, r1
    283c:	61 f1       	breq	.+88     	; 0x2896 <calc_initialValue+0x814>
    283e:	40 32       	cpi	r20, 0x20	; 32
    2840:	51 05       	cpc	r21, r1
    2842:	f1 f1       	breq	.+124    	; 0x28c0 <calc_initialValue+0x83e>
    2844:	41 30       	cpi	r20, 0x01	; 1
    2846:	51 05       	cpc	r21, r1
    2848:	09 f0       	breq	.+2      	; 0x284c <calc_initialValue+0x7ca>
    284a:	a3 c0       	rjmp	.+326    	; 0x2992 <calc_initialValue+0x910>
    284c:	0f c0       	rjmp	.+30     	; 0x286c <calc_initialValue+0x7ea>
    284e:	41 15       	cp	r20, r1
    2850:	f1 e0       	ldi	r31, 0x01	; 1
    2852:	5f 07       	cpc	r21, r31
    2854:	09 f4       	brne	.+2      	; 0x2858 <calc_initialValue+0x7d6>
    2856:	73 c0       	rjmp	.+230    	; 0x293e <calc_initialValue+0x8bc>
    2858:	41 15       	cp	r20, r1
    285a:	84 e0       	ldi	r24, 0x04	; 4
    285c:	58 07       	cpc	r21, r24
    285e:	09 f4       	brne	.+2      	; 0x2862 <calc_initialValue+0x7e0>
    2860:	83 c0       	rjmp	.+262    	; 0x2968 <calc_initialValue+0x8e6>
    2862:	40 38       	cpi	r20, 0x80	; 128
    2864:	51 05       	cpc	r21, r1
    2866:	09 f0       	breq	.+2      	; 0x286a <calc_initialValue+0x7e8>
    2868:	94 c0       	rjmp	.+296    	; 0x2992 <calc_initialValue+0x910>
    286a:	54 c0       	rjmp	.+168    	; 0x2914 <calc_initialValue+0x892>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    286c:	a9 01       	movw	r20, r18
    286e:	98 01       	movw	r18, r16
    2870:	6f e6       	ldi	r22, 0x6F	; 111
    2872:	72 e1       	ldi	r23, 0x12	; 18
    2874:	83 e0       	ldi	r24, 0x03	; 3
    2876:	9d e3       	ldi	r25, 0x3D	; 61
    2878:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    287c:	2f e6       	ldi	r18, 0x6F	; 111
    287e:	32 e1       	ldi	r19, 0x12	; 18
    2880:	43 e0       	ldi	r20, 0x03	; 3
    2882:	59 e3       	ldi	r21, 0x39	; 57
    2884:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2888:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    288c:	f7 01       	movw	r30, r14
    288e:	71 83       	std	Z+1, r23	; 0x01
    2890:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2892:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    2894:	44 c1       	rjmp	.+648    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    2896:	a9 01       	movw	r20, r18
    2898:	98 01       	movw	r18, r16
    289a:	6f e6       	ldi	r22, 0x6F	; 111
    289c:	72 e1       	ldi	r23, 0x12	; 18
    289e:	83 e8       	ldi	r24, 0x83	; 131
    28a0:	9e e3       	ldi	r25, 0x3E	; 62
    28a2:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    28a6:	2f e6       	ldi	r18, 0x6F	; 111
    28a8:	32 e1       	ldi	r19, 0x12	; 18
    28aa:	43 e8       	ldi	r20, 0x83	; 131
    28ac:	5a e3       	ldi	r21, 0x3A	; 58
    28ae:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    28b2:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    28b6:	f7 01       	movw	r30, r14
    28b8:	71 83       	std	Z+1, r23	; 0x01
    28ba:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    28be:	2f c1       	rjmp	.+606    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
    28c0:	a9 01       	movw	r20, r18
    28c2:	98 01       	movw	r18, r16
    28c4:	6f e6       	ldi	r22, 0x6F	; 111
    28c6:	72 e1       	ldi	r23, 0x12	; 18
    28c8:	83 e8       	ldi	r24, 0x83	; 131
    28ca:	9f e3       	ldi	r25, 0x3F	; 63
    28cc:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    28d0:	2f e6       	ldi	r18, 0x6F	; 111
    28d2:	32 e1       	ldi	r19, 0x12	; 18
    28d4:	43 e8       	ldi	r20, 0x83	; 131
    28d6:	5b e3       	ldi	r21, 0x3B	; 59
    28d8:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    28dc:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    28e0:	f7 01       	movw	r30, r14
    28e2:	71 83       	std	Z+1, r23	; 0x01
    28e4:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
				break;
    28e8:	1a c1       	rjmp	.+564    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    28ea:	a9 01       	movw	r20, r18
    28ec:	98 01       	movw	r18, r16
    28ee:	6f e6       	ldi	r22, 0x6F	; 111
    28f0:	72 e1       	ldi	r23, 0x12	; 18
    28f2:	83 e0       	ldi	r24, 0x03	; 3
    28f4:	90 e4       	ldi	r25, 0x40	; 64
    28f6:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    28fa:	2f e6       	ldi	r18, 0x6F	; 111
    28fc:	32 e1       	ldi	r19, 0x12	; 18
    28fe:	43 e0       	ldi	r20, 0x03	; 3
    2900:	5c e3       	ldi	r21, 0x3C	; 60
    2902:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2906:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    290a:	f7 01       	movw	r30, r14
    290c:	71 83       	std	Z+1, r23	; 0x01
    290e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2910:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    2912:	05 c1       	rjmp	.+522    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
    2914:	a9 01       	movw	r20, r18
    2916:	98 01       	movw	r18, r16
    2918:	6f e6       	ldi	r22, 0x6F	; 111
    291a:	72 e1       	ldi	r23, 0x12	; 18
    291c:	83 e8       	ldi	r24, 0x83	; 131
    291e:	90 e4       	ldi	r25, 0x40	; 64
    2920:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2924:	2f e6       	ldi	r18, 0x6F	; 111
    2926:	32 e1       	ldi	r19, 0x12	; 18
    2928:	43 e8       	ldi	r20, 0x83	; 131
    292a:	5c e3       	ldi	r21, 0x3C	; 60
    292c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2930:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2934:	f7 01       	movw	r30, r14
    2936:	71 83       	std	Z+1, r23	; 0x01
    2938:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    293a:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
				break;
    293c:	f0 c0       	rjmp	.+480    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    293e:	a9 01       	movw	r20, r18
    2940:	98 01       	movw	r18, r16
    2942:	6f e6       	ldi	r22, 0x6F	; 111
    2944:	72 e1       	ldi	r23, 0x12	; 18
    2946:	83 e0       	ldi	r24, 0x03	; 3
    2948:	91 e4       	ldi	r25, 0x41	; 65
    294a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    294e:	2f e6       	ldi	r18, 0x6F	; 111
    2950:	32 e1       	ldi	r19, 0x12	; 18
    2952:	43 e0       	ldi	r20, 0x03	; 3
    2954:	5d e3       	ldi	r21, 0x3D	; 61
    2956:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    295a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    295e:	f7 01       	movw	r30, r14
    2960:	71 83       	std	Z+1, r23	; 0x01
    2962:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2964:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    2966:	db c0       	rjmp	.+438    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    2968:	a9 01       	movw	r20, r18
    296a:	98 01       	movw	r18, r16
    296c:	6f e6       	ldi	r22, 0x6F	; 111
    296e:	72 e1       	ldi	r23, 0x12	; 18
    2970:	83 e0       	ldi	r24, 0x03	; 3
    2972:	92 e4       	ldi	r25, 0x42	; 66
    2974:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2978:	2f e6       	ldi	r18, 0x6F	; 111
    297a:	32 e1       	ldi	r19, 0x12	; 18
    297c:	43 e0       	ldi	r20, 0x03	; 3
    297e:	5e e3       	ldi	r21, 0x3E	; 62
    2980:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2984:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2988:	f7 01       	movw	r30, r14
    298a:	71 83       	std	Z+1, r23	; 0x01
    298c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    298e:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    2990:	c6 c0       	rjmp	.+396    	; 0x2b1e <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2992:	f7 01       	movw	r30, r14
    2994:	11 82       	std	Z+1, r1	; 0x01
    2996:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2998:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    299a:	c1 c0       	rjmp	.+386    	; 0x2b1e <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    299c:	62 30       	cpi	r22, 0x02	; 2
    299e:	09 f0       	breq	.+2      	; 0x29a2 <calc_initialValue+0x920>
    29a0:	bd c0       	rjmp	.+378    	; 0x2b1c <calc_initialValue+0xa9a>
		{
			switch(prescaler)
    29a2:	40 34       	cpi	r20, 0x40	; 64
    29a4:	51 05       	cpc	r21, r1
    29a6:	09 f4       	brne	.+2      	; 0x29aa <calc_initialValue+0x928>
    29a8:	5a c0       	rjmp	.+180    	; 0x2a5e <calc_initialValue+0x9dc>
    29aa:	58 f4       	brcc	.+22     	; 0x29c2 <calc_initialValue+0x940>
    29ac:	48 30       	cpi	r20, 0x08	; 8
    29ae:	51 05       	cpc	r21, r1
    29b0:	61 f1       	breq	.+88     	; 0x2a0a <calc_initialValue+0x988>
    29b2:	40 32       	cpi	r20, 0x20	; 32
    29b4:	51 05       	cpc	r21, r1
    29b6:	f1 f1       	breq	.+124    	; 0x2a34 <calc_initialValue+0x9b2>
    29b8:	41 30       	cpi	r20, 0x01	; 1
    29ba:	51 05       	cpc	r21, r1
    29bc:	09 f0       	breq	.+2      	; 0x29c0 <calc_initialValue+0x93e>
    29be:	a3 c0       	rjmp	.+326    	; 0x2b06 <calc_initialValue+0xa84>
    29c0:	0f c0       	rjmp	.+30     	; 0x29e0 <calc_initialValue+0x95e>
    29c2:	41 15       	cp	r20, r1
    29c4:	f1 e0       	ldi	r31, 0x01	; 1
    29c6:	5f 07       	cpc	r21, r31
    29c8:	09 f4       	brne	.+2      	; 0x29cc <calc_initialValue+0x94a>
    29ca:	73 c0       	rjmp	.+230    	; 0x2ab2 <calc_initialValue+0xa30>
    29cc:	41 15       	cp	r20, r1
    29ce:	84 e0       	ldi	r24, 0x04	; 4
    29d0:	58 07       	cpc	r21, r24
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <calc_initialValue+0x954>
    29d4:	83 c0       	rjmp	.+262    	; 0x2adc <calc_initialValue+0xa5a>
    29d6:	40 38       	cpi	r20, 0x80	; 128
    29d8:	51 05       	cpc	r21, r1
    29da:	09 f0       	breq	.+2      	; 0x29de <calc_initialValue+0x95c>
    29dc:	94 c0       	rjmp	.+296    	; 0x2b06 <calc_initialValue+0xa84>
    29de:	54 c0       	rjmp	.+168    	; 0x2a88 <calc_initialValue+0xa06>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    29e0:	a9 01       	movw	r20, r18
    29e2:	98 01       	movw	r18, r16
    29e4:	6d eb       	ldi	r22, 0xBD	; 189
    29e6:	77 e3       	ldi	r23, 0x37	; 55
    29e8:	86 e0       	ldi	r24, 0x06	; 6
    29ea:	98 e3       	ldi	r25, 0x38	; 56
    29ec:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    29f0:	2d eb       	ldi	r18, 0xBD	; 189
    29f2:	37 e3       	ldi	r19, 0x37	; 55
    29f4:	46 e0       	ldi	r20, 0x06	; 6
    29f6:	54 e3       	ldi	r21, 0x34	; 52
    29f8:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    29fc:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2a00:	f7 01       	movw	r30, r14
    2a02:	71 83       	std	Z+1, r23	; 0x01
    2a04:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    2a08:	8a c0       	rjmp	.+276    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    2a0a:	a9 01       	movw	r20, r18
    2a0c:	98 01       	movw	r18, r16
    2a0e:	6d eb       	ldi	r22, 0xBD	; 189
    2a10:	77 e3       	ldi	r23, 0x37	; 55
    2a12:	86 e8       	ldi	r24, 0x86	; 134
    2a14:	99 e3       	ldi	r25, 0x39	; 57
    2a16:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2a1a:	2d eb       	ldi	r18, 0xBD	; 189
    2a1c:	37 e3       	ldi	r19, 0x37	; 55
    2a1e:	46 e8       	ldi	r20, 0x86	; 134
    2a20:	55 e3       	ldi	r21, 0x35	; 53
    2a22:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2a26:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2a2a:	f7 01       	movw	r30, r14
    2a2c:	71 83       	std	Z+1, r23	; 0x01
    2a2e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2a30:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    2a32:	75 c0       	rjmp	.+234    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
    2a34:	a9 01       	movw	r20, r18
    2a36:	98 01       	movw	r18, r16
    2a38:	6d eb       	ldi	r22, 0xBD	; 189
    2a3a:	77 e3       	ldi	r23, 0x37	; 55
    2a3c:	86 e8       	ldi	r24, 0x86	; 134
    2a3e:	9a e3       	ldi	r25, 0x3A	; 58
    2a40:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2a44:	2d eb       	ldi	r18, 0xBD	; 189
    2a46:	37 e3       	ldi	r19, 0x37	; 55
    2a48:	46 e8       	ldi	r20, 0x86	; 134
    2a4a:	56 e3       	ldi	r21, 0x36	; 54
    2a4c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2a50:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2a54:	f7 01       	movw	r30, r14
    2a56:	71 83       	std	Z+1, r23	; 0x01
    2a58:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
				break;
    2a5c:	60 c0       	rjmp	.+192    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    2a5e:	a9 01       	movw	r20, r18
    2a60:	98 01       	movw	r18, r16
    2a62:	6d eb       	ldi	r22, 0xBD	; 189
    2a64:	77 e3       	ldi	r23, 0x37	; 55
    2a66:	86 e0       	ldi	r24, 0x06	; 6
    2a68:	9b e3       	ldi	r25, 0x3B	; 59
    2a6a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2a6e:	2d eb       	ldi	r18, 0xBD	; 189
    2a70:	37 e3       	ldi	r19, 0x37	; 55
    2a72:	46 e0       	ldi	r20, 0x06	; 6
    2a74:	57 e3       	ldi	r21, 0x37	; 55
    2a76:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2a7a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2a7e:	f7 01       	movw	r30, r14
    2a80:	71 83       	std	Z+1, r23	; 0x01
    2a82:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    2a86:	4b c0       	rjmp	.+150    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
    2a88:	a9 01       	movw	r20, r18
    2a8a:	98 01       	movw	r18, r16
    2a8c:	6d eb       	ldi	r22, 0xBD	; 189
    2a8e:	77 e3       	ldi	r23, 0x37	; 55
    2a90:	86 e8       	ldi	r24, 0x86	; 134
    2a92:	9b e3       	ldi	r25, 0x3B	; 59
    2a94:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2a98:	2d eb       	ldi	r18, 0xBD	; 189
    2a9a:	37 e3       	ldi	r19, 0x37	; 55
    2a9c:	46 e8       	ldi	r20, 0x86	; 134
    2a9e:	57 e3       	ldi	r21, 0x37	; 55
    2aa0:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2aa4:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2aa8:	f7 01       	movw	r30, r14
    2aaa:	71 83       	std	Z+1, r23	; 0x01
    2aac:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2aae:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
				break;
    2ab0:	36 c0       	rjmp	.+108    	; 0x2b1e <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    2ab2:	a9 01       	movw	r20, r18
    2ab4:	98 01       	movw	r18, r16
    2ab6:	6d eb       	ldi	r22, 0xBD	; 189
    2ab8:	77 e3       	ldi	r23, 0x37	; 55
    2aba:	86 e0       	ldi	r24, 0x06	; 6
    2abc:	9c e3       	ldi	r25, 0x3C	; 60
    2abe:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2ac2:	2d eb       	ldi	r18, 0xBD	; 189
    2ac4:	37 e3       	ldi	r19, 0x37	; 55
    2ac6:	46 e0       	ldi	r20, 0x06	; 6
    2ac8:	58 e3       	ldi	r21, 0x38	; 56
    2aca:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2ace:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2ad2:	f7 01       	movw	r30, r14
    2ad4:	71 83       	std	Z+1, r23	; 0x01
    2ad6:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    2ada:	21 c0       	rjmp	.+66     	; 0x2b1e <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    2adc:	a9 01       	movw	r20, r18
    2ade:	98 01       	movw	r18, r16
    2ae0:	6d eb       	ldi	r22, 0xBD	; 189
    2ae2:	77 e3       	ldi	r23, 0x37	; 55
    2ae4:	86 e0       	ldi	r24, 0x06	; 6
    2ae6:	9d e3       	ldi	r25, 0x3D	; 61
    2ae8:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__subsf3>
    2aec:	2d eb       	ldi	r18, 0xBD	; 189
    2aee:	37 e3       	ldi	r19, 0x37	; 55
    2af0:	46 e0       	ldi	r20, 0x06	; 6
    2af2:	59 e3       	ldi	r21, 0x39	; 57
    2af4:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__divsf3>
    2af8:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fixunssfsi>
    2afc:	f7 01       	movw	r30, r14
    2afe:	71 83       	std	Z+1, r23	; 0x01
    2b00:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2b02:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    2b04:	0c c0       	rjmp	.+24     	; 0x2b1e <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2b06:	f7 01       	movw	r30, r14
    2b08:	11 82       	std	Z+1, r1	; 0x01
    2b0a:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2b0e:	07 c0       	rjmp	.+14     	; 0x2b1e <calc_initialValue+0xa9c>
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	05 c0       	rjmp	.+10     	; 0x2b1e <calc_initialValue+0xa9c>
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	03 c0       	rjmp	.+6      	; 0x2b1e <calc_initialValue+0xa9c>
		}
		
	}
	else
	{
		bo_return_value = FALSE;
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	01 c0       	rjmp	.+2      	; 0x2b1e <calc_initialValue+0xa9c>
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		bo_return_value = FALSE;
	}
	return bo_return_value;
    2b1e:	1f 91       	pop	r17
    2b20:	0f 91       	pop	r16
    2b22:	ff 90       	pop	r15
    2b24:	ef 90       	pop	r14
    2b26:	08 95       	ret

00002b28 <__subsf3>:
    2b28:	50 58       	subi	r21, 0x80	; 128

00002b2a <__addsf3>:
    2b2a:	bb 27       	eor	r27, r27
    2b2c:	aa 27       	eor	r26, r26
    2b2e:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__addsf3x>
    2b32:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__fp_round>
    2b36:	0e 94 11 17 	call	0x2e22	; 0x2e22 <__fp_pscA>
    2b3a:	38 f0       	brcs	.+14     	; 0x2b4a <__addsf3+0x20>
    2b3c:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fp_pscB>
    2b40:	20 f0       	brcs	.+8      	; 0x2b4a <__addsf3+0x20>
    2b42:	39 f4       	brne	.+14     	; 0x2b52 <__addsf3+0x28>
    2b44:	9f 3f       	cpi	r25, 0xFF	; 255
    2b46:	19 f4       	brne	.+6      	; 0x2b4e <__addsf3+0x24>
    2b48:	26 f4       	brtc	.+8      	; 0x2b52 <__addsf3+0x28>
    2b4a:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__fp_nan>
    2b4e:	0e f4       	brtc	.+2      	; 0x2b52 <__addsf3+0x28>
    2b50:	e0 95       	com	r30
    2b52:	e7 fb       	bst	r30, 7
    2b54:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__fp_inf>

00002b58 <__addsf3x>:
    2b58:	e9 2f       	mov	r30, r25
    2b5a:	0e 94 30 17 	call	0x2e60	; 0x2e60 <__fp_split3>
    2b5e:	58 f3       	brcs	.-42     	; 0x2b36 <__addsf3+0xc>
    2b60:	ba 17       	cp	r27, r26
    2b62:	62 07       	cpc	r22, r18
    2b64:	73 07       	cpc	r23, r19
    2b66:	84 07       	cpc	r24, r20
    2b68:	95 07       	cpc	r25, r21
    2b6a:	20 f0       	brcs	.+8      	; 0x2b74 <__addsf3x+0x1c>
    2b6c:	79 f4       	brne	.+30     	; 0x2b8c <__addsf3x+0x34>
    2b6e:	a6 f5       	brtc	.+104    	; 0x2bd8 <__addsf3x+0x80>
    2b70:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__fp_zero>
    2b74:	0e f4       	brtc	.+2      	; 0x2b78 <__addsf3x+0x20>
    2b76:	e0 95       	com	r30
    2b78:	0b 2e       	mov	r0, r27
    2b7a:	ba 2f       	mov	r27, r26
    2b7c:	a0 2d       	mov	r26, r0
    2b7e:	0b 01       	movw	r0, r22
    2b80:	b9 01       	movw	r22, r18
    2b82:	90 01       	movw	r18, r0
    2b84:	0c 01       	movw	r0, r24
    2b86:	ca 01       	movw	r24, r20
    2b88:	a0 01       	movw	r20, r0
    2b8a:	11 24       	eor	r1, r1
    2b8c:	ff 27       	eor	r31, r31
    2b8e:	59 1b       	sub	r21, r25
    2b90:	99 f0       	breq	.+38     	; 0x2bb8 <__addsf3x+0x60>
    2b92:	59 3f       	cpi	r21, 0xF9	; 249
    2b94:	50 f4       	brcc	.+20     	; 0x2baa <__addsf3x+0x52>
    2b96:	50 3e       	cpi	r21, 0xE0	; 224
    2b98:	68 f1       	brcs	.+90     	; 0x2bf4 <__addsf3x+0x9c>
    2b9a:	1a 16       	cp	r1, r26
    2b9c:	f0 40       	sbci	r31, 0x00	; 0
    2b9e:	a2 2f       	mov	r26, r18
    2ba0:	23 2f       	mov	r18, r19
    2ba2:	34 2f       	mov	r19, r20
    2ba4:	44 27       	eor	r20, r20
    2ba6:	58 5f       	subi	r21, 0xF8	; 248
    2ba8:	f3 cf       	rjmp	.-26     	; 0x2b90 <__addsf3x+0x38>
    2baa:	46 95       	lsr	r20
    2bac:	37 95       	ror	r19
    2bae:	27 95       	ror	r18
    2bb0:	a7 95       	ror	r26
    2bb2:	f0 40       	sbci	r31, 0x00	; 0
    2bb4:	53 95       	inc	r21
    2bb6:	c9 f7       	brne	.-14     	; 0x2baa <__addsf3x+0x52>
    2bb8:	7e f4       	brtc	.+30     	; 0x2bd8 <__addsf3x+0x80>
    2bba:	1f 16       	cp	r1, r31
    2bbc:	ba 0b       	sbc	r27, r26
    2bbe:	62 0b       	sbc	r22, r18
    2bc0:	73 0b       	sbc	r23, r19
    2bc2:	84 0b       	sbc	r24, r20
    2bc4:	ba f0       	brmi	.+46     	; 0x2bf4 <__addsf3x+0x9c>
    2bc6:	91 50       	subi	r25, 0x01	; 1
    2bc8:	a1 f0       	breq	.+40     	; 0x2bf2 <__addsf3x+0x9a>
    2bca:	ff 0f       	add	r31, r31
    2bcc:	bb 1f       	adc	r27, r27
    2bce:	66 1f       	adc	r22, r22
    2bd0:	77 1f       	adc	r23, r23
    2bd2:	88 1f       	adc	r24, r24
    2bd4:	c2 f7       	brpl	.-16     	; 0x2bc6 <__addsf3x+0x6e>
    2bd6:	0e c0       	rjmp	.+28     	; 0x2bf4 <__addsf3x+0x9c>
    2bd8:	ba 0f       	add	r27, r26
    2bda:	62 1f       	adc	r22, r18
    2bdc:	73 1f       	adc	r23, r19
    2bde:	84 1f       	adc	r24, r20
    2be0:	48 f4       	brcc	.+18     	; 0x2bf4 <__addsf3x+0x9c>
    2be2:	87 95       	ror	r24
    2be4:	77 95       	ror	r23
    2be6:	67 95       	ror	r22
    2be8:	b7 95       	ror	r27
    2bea:	f7 95       	ror	r31
    2bec:	9e 3f       	cpi	r25, 0xFE	; 254
    2bee:	08 f0       	brcs	.+2      	; 0x2bf2 <__addsf3x+0x9a>
    2bf0:	b0 cf       	rjmp	.-160    	; 0x2b52 <__addsf3+0x28>
    2bf2:	93 95       	inc	r25
    2bf4:	88 0f       	add	r24, r24
    2bf6:	08 f0       	brcs	.+2      	; 0x2bfa <__addsf3x+0xa2>
    2bf8:	99 27       	eor	r25, r25
    2bfa:	ee 0f       	add	r30, r30
    2bfc:	97 95       	ror	r25
    2bfe:	87 95       	ror	r24
    2c00:	08 95       	ret

00002c02 <__cmpsf2>:
    2c02:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__fp_cmp>
    2c06:	08 f4       	brcc	.+2      	; 0x2c0a <__cmpsf2+0x8>
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	08 95       	ret

00002c0c <__divsf3>:
    2c0c:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__divsf3x>
    2c10:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__fp_round>
    2c14:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fp_pscB>
    2c18:	58 f0       	brcs	.+22     	; 0x2c30 <__divsf3+0x24>
    2c1a:	0e 94 11 17 	call	0x2e22	; 0x2e22 <__fp_pscA>
    2c1e:	40 f0       	brcs	.+16     	; 0x2c30 <__divsf3+0x24>
    2c20:	29 f4       	brne	.+10     	; 0x2c2c <__divsf3+0x20>
    2c22:	5f 3f       	cpi	r21, 0xFF	; 255
    2c24:	29 f0       	breq	.+10     	; 0x2c30 <__divsf3+0x24>
    2c26:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__fp_inf>
    2c2a:	51 11       	cpse	r21, r1
    2c2c:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__fp_szero>
    2c30:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__fp_nan>

00002c34 <__divsf3x>:
    2c34:	0e 94 30 17 	call	0x2e60	; 0x2e60 <__fp_split3>
    2c38:	68 f3       	brcs	.-38     	; 0x2c14 <__divsf3+0x8>

00002c3a <__divsf3_pse>:
    2c3a:	99 23       	and	r25, r25
    2c3c:	b1 f3       	breq	.-20     	; 0x2c2a <__divsf3+0x1e>
    2c3e:	55 23       	and	r21, r21
    2c40:	91 f3       	breq	.-28     	; 0x2c26 <__divsf3+0x1a>
    2c42:	95 1b       	sub	r25, r21
    2c44:	55 0b       	sbc	r21, r21
    2c46:	bb 27       	eor	r27, r27
    2c48:	aa 27       	eor	r26, r26
    2c4a:	62 17       	cp	r22, r18
    2c4c:	73 07       	cpc	r23, r19
    2c4e:	84 07       	cpc	r24, r20
    2c50:	38 f0       	brcs	.+14     	; 0x2c60 <__divsf3_pse+0x26>
    2c52:	9f 5f       	subi	r25, 0xFF	; 255
    2c54:	5f 4f       	sbci	r21, 0xFF	; 255
    2c56:	22 0f       	add	r18, r18
    2c58:	33 1f       	adc	r19, r19
    2c5a:	44 1f       	adc	r20, r20
    2c5c:	aa 1f       	adc	r26, r26
    2c5e:	a9 f3       	breq	.-22     	; 0x2c4a <__divsf3_pse+0x10>
    2c60:	35 d0       	rcall	.+106    	; 0x2ccc <__divsf3_pse+0x92>
    2c62:	0e 2e       	mov	r0, r30
    2c64:	3a f0       	brmi	.+14     	; 0x2c74 <__divsf3_pse+0x3a>
    2c66:	e0 e8       	ldi	r30, 0x80	; 128
    2c68:	32 d0       	rcall	.+100    	; 0x2cce <__divsf3_pse+0x94>
    2c6a:	91 50       	subi	r25, 0x01	; 1
    2c6c:	50 40       	sbci	r21, 0x00	; 0
    2c6e:	e6 95       	lsr	r30
    2c70:	00 1c       	adc	r0, r0
    2c72:	ca f7       	brpl	.-14     	; 0x2c66 <__divsf3_pse+0x2c>
    2c74:	2b d0       	rcall	.+86     	; 0x2ccc <__divsf3_pse+0x92>
    2c76:	fe 2f       	mov	r31, r30
    2c78:	29 d0       	rcall	.+82     	; 0x2ccc <__divsf3_pse+0x92>
    2c7a:	66 0f       	add	r22, r22
    2c7c:	77 1f       	adc	r23, r23
    2c7e:	88 1f       	adc	r24, r24
    2c80:	bb 1f       	adc	r27, r27
    2c82:	26 17       	cp	r18, r22
    2c84:	37 07       	cpc	r19, r23
    2c86:	48 07       	cpc	r20, r24
    2c88:	ab 07       	cpc	r26, r27
    2c8a:	b0 e8       	ldi	r27, 0x80	; 128
    2c8c:	09 f0       	breq	.+2      	; 0x2c90 <__divsf3_pse+0x56>
    2c8e:	bb 0b       	sbc	r27, r27
    2c90:	80 2d       	mov	r24, r0
    2c92:	bf 01       	movw	r22, r30
    2c94:	ff 27       	eor	r31, r31
    2c96:	93 58       	subi	r25, 0x83	; 131
    2c98:	5f 4f       	sbci	r21, 0xFF	; 255
    2c9a:	3a f0       	brmi	.+14     	; 0x2caa <__divsf3_pse+0x70>
    2c9c:	9e 3f       	cpi	r25, 0xFE	; 254
    2c9e:	51 05       	cpc	r21, r1
    2ca0:	78 f0       	brcs	.+30     	; 0x2cc0 <__divsf3_pse+0x86>
    2ca2:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__fp_inf>
    2ca6:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__fp_szero>
    2caa:	5f 3f       	cpi	r21, 0xFF	; 255
    2cac:	e4 f3       	brlt	.-8      	; 0x2ca6 <__divsf3_pse+0x6c>
    2cae:	98 3e       	cpi	r25, 0xE8	; 232
    2cb0:	d4 f3       	brlt	.-12     	; 0x2ca6 <__divsf3_pse+0x6c>
    2cb2:	86 95       	lsr	r24
    2cb4:	77 95       	ror	r23
    2cb6:	67 95       	ror	r22
    2cb8:	b7 95       	ror	r27
    2cba:	f7 95       	ror	r31
    2cbc:	9f 5f       	subi	r25, 0xFF	; 255
    2cbe:	c9 f7       	brne	.-14     	; 0x2cb2 <__divsf3_pse+0x78>
    2cc0:	88 0f       	add	r24, r24
    2cc2:	91 1d       	adc	r25, r1
    2cc4:	96 95       	lsr	r25
    2cc6:	87 95       	ror	r24
    2cc8:	97 f9       	bld	r25, 7
    2cca:	08 95       	ret
    2ccc:	e1 e0       	ldi	r30, 0x01	; 1
    2cce:	66 0f       	add	r22, r22
    2cd0:	77 1f       	adc	r23, r23
    2cd2:	88 1f       	adc	r24, r24
    2cd4:	bb 1f       	adc	r27, r27
    2cd6:	62 17       	cp	r22, r18
    2cd8:	73 07       	cpc	r23, r19
    2cda:	84 07       	cpc	r24, r20
    2cdc:	ba 07       	cpc	r27, r26
    2cde:	20 f0       	brcs	.+8      	; 0x2ce8 <__divsf3_pse+0xae>
    2ce0:	62 1b       	sub	r22, r18
    2ce2:	73 0b       	sbc	r23, r19
    2ce4:	84 0b       	sbc	r24, r20
    2ce6:	ba 0b       	sbc	r27, r26
    2ce8:	ee 1f       	adc	r30, r30
    2cea:	88 f7       	brcc	.-30     	; 0x2cce <__divsf3_pse+0x94>
    2cec:	e0 95       	com	r30
    2cee:	08 95       	ret

00002cf0 <__fixunssfsi>:
    2cf0:	0e 94 38 17 	call	0x2e70	; 0x2e70 <__fp_splitA>
    2cf4:	88 f0       	brcs	.+34     	; 0x2d18 <__fixunssfsi+0x28>
    2cf6:	9f 57       	subi	r25, 0x7F	; 127
    2cf8:	98 f0       	brcs	.+38     	; 0x2d20 <__fixunssfsi+0x30>
    2cfa:	b9 2f       	mov	r27, r25
    2cfc:	99 27       	eor	r25, r25
    2cfe:	b7 51       	subi	r27, 0x17	; 23
    2d00:	b0 f0       	brcs	.+44     	; 0x2d2e <__fixunssfsi+0x3e>
    2d02:	e1 f0       	breq	.+56     	; 0x2d3c <__fixunssfsi+0x4c>
    2d04:	66 0f       	add	r22, r22
    2d06:	77 1f       	adc	r23, r23
    2d08:	88 1f       	adc	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	1a f0       	brmi	.+6      	; 0x2d14 <__fixunssfsi+0x24>
    2d0e:	ba 95       	dec	r27
    2d10:	c9 f7       	brne	.-14     	; 0x2d04 <__fixunssfsi+0x14>
    2d12:	14 c0       	rjmp	.+40     	; 0x2d3c <__fixunssfsi+0x4c>
    2d14:	b1 30       	cpi	r27, 0x01	; 1
    2d16:	91 f0       	breq	.+36     	; 0x2d3c <__fixunssfsi+0x4c>
    2d18:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__fp_zero>
    2d1c:	b1 e0       	ldi	r27, 0x01	; 1
    2d1e:	08 95       	ret
    2d20:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__fp_zero>
    2d24:	67 2f       	mov	r22, r23
    2d26:	78 2f       	mov	r23, r24
    2d28:	88 27       	eor	r24, r24
    2d2a:	b8 5f       	subi	r27, 0xF8	; 248
    2d2c:	39 f0       	breq	.+14     	; 0x2d3c <__fixunssfsi+0x4c>
    2d2e:	b9 3f       	cpi	r27, 0xF9	; 249
    2d30:	cc f3       	brlt	.-14     	; 0x2d24 <__fixunssfsi+0x34>
    2d32:	86 95       	lsr	r24
    2d34:	77 95       	ror	r23
    2d36:	67 95       	ror	r22
    2d38:	b3 95       	inc	r27
    2d3a:	d9 f7       	brne	.-10     	; 0x2d32 <__fixunssfsi+0x42>
    2d3c:	3e f4       	brtc	.+14     	; 0x2d4c <__fixunssfsi+0x5c>
    2d3e:	90 95       	com	r25
    2d40:	80 95       	com	r24
    2d42:	70 95       	com	r23
    2d44:	61 95       	neg	r22
    2d46:	7f 4f       	sbci	r23, 0xFF	; 255
    2d48:	8f 4f       	sbci	r24, 0xFF	; 255
    2d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4c:	08 95       	ret

00002d4e <__floatunsisf>:
    2d4e:	e8 94       	clt
    2d50:	09 c0       	rjmp	.+18     	; 0x2d64 <__floatsisf+0x12>

00002d52 <__floatsisf>:
    2d52:	97 fb       	bst	r25, 7
    2d54:	3e f4       	brtc	.+14     	; 0x2d64 <__floatsisf+0x12>
    2d56:	90 95       	com	r25
    2d58:	80 95       	com	r24
    2d5a:	70 95       	com	r23
    2d5c:	61 95       	neg	r22
    2d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d60:	8f 4f       	sbci	r24, 0xFF	; 255
    2d62:	9f 4f       	sbci	r25, 0xFF	; 255
    2d64:	99 23       	and	r25, r25
    2d66:	a9 f0       	breq	.+42     	; 0x2d92 <__floatsisf+0x40>
    2d68:	f9 2f       	mov	r31, r25
    2d6a:	96 e9       	ldi	r25, 0x96	; 150
    2d6c:	bb 27       	eor	r27, r27
    2d6e:	93 95       	inc	r25
    2d70:	f6 95       	lsr	r31
    2d72:	87 95       	ror	r24
    2d74:	77 95       	ror	r23
    2d76:	67 95       	ror	r22
    2d78:	b7 95       	ror	r27
    2d7a:	f1 11       	cpse	r31, r1
    2d7c:	f8 cf       	rjmp	.-16     	; 0x2d6e <__floatsisf+0x1c>
    2d7e:	fa f4       	brpl	.+62     	; 0x2dbe <__floatsisf+0x6c>
    2d80:	bb 0f       	add	r27, r27
    2d82:	11 f4       	brne	.+4      	; 0x2d88 <__floatsisf+0x36>
    2d84:	60 ff       	sbrs	r22, 0
    2d86:	1b c0       	rjmp	.+54     	; 0x2dbe <__floatsisf+0x6c>
    2d88:	6f 5f       	subi	r22, 0xFF	; 255
    2d8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d90:	16 c0       	rjmp	.+44     	; 0x2dbe <__floatsisf+0x6c>
    2d92:	88 23       	and	r24, r24
    2d94:	11 f0       	breq	.+4      	; 0x2d9a <__floatsisf+0x48>
    2d96:	96 e9       	ldi	r25, 0x96	; 150
    2d98:	11 c0       	rjmp	.+34     	; 0x2dbc <__floatsisf+0x6a>
    2d9a:	77 23       	and	r23, r23
    2d9c:	21 f0       	breq	.+8      	; 0x2da6 <__floatsisf+0x54>
    2d9e:	9e e8       	ldi	r25, 0x8E	; 142
    2da0:	87 2f       	mov	r24, r23
    2da2:	76 2f       	mov	r23, r22
    2da4:	05 c0       	rjmp	.+10     	; 0x2db0 <__floatsisf+0x5e>
    2da6:	66 23       	and	r22, r22
    2da8:	71 f0       	breq	.+28     	; 0x2dc6 <__floatsisf+0x74>
    2daa:	96 e8       	ldi	r25, 0x86	; 134
    2dac:	86 2f       	mov	r24, r22
    2dae:	70 e0       	ldi	r23, 0x00	; 0
    2db0:	60 e0       	ldi	r22, 0x00	; 0
    2db2:	2a f0       	brmi	.+10     	; 0x2dbe <__floatsisf+0x6c>
    2db4:	9a 95       	dec	r25
    2db6:	66 0f       	add	r22, r22
    2db8:	77 1f       	adc	r23, r23
    2dba:	88 1f       	adc	r24, r24
    2dbc:	da f7       	brpl	.-10     	; 0x2db4 <__floatsisf+0x62>
    2dbe:	88 0f       	add	r24, r24
    2dc0:	96 95       	lsr	r25
    2dc2:	87 95       	ror	r24
    2dc4:	97 f9       	bld	r25, 7
    2dc6:	08 95       	ret

00002dc8 <__fp_cmp>:
    2dc8:	99 0f       	add	r25, r25
    2dca:	00 08       	sbc	r0, r0
    2dcc:	55 0f       	add	r21, r21
    2dce:	aa 0b       	sbc	r26, r26
    2dd0:	e0 e8       	ldi	r30, 0x80	; 128
    2dd2:	fe ef       	ldi	r31, 0xFE	; 254
    2dd4:	16 16       	cp	r1, r22
    2dd6:	17 06       	cpc	r1, r23
    2dd8:	e8 07       	cpc	r30, r24
    2dda:	f9 07       	cpc	r31, r25
    2ddc:	c0 f0       	brcs	.+48     	; 0x2e0e <__fp_cmp+0x46>
    2dde:	12 16       	cp	r1, r18
    2de0:	13 06       	cpc	r1, r19
    2de2:	e4 07       	cpc	r30, r20
    2de4:	f5 07       	cpc	r31, r21
    2de6:	98 f0       	brcs	.+38     	; 0x2e0e <__fp_cmp+0x46>
    2de8:	62 1b       	sub	r22, r18
    2dea:	73 0b       	sbc	r23, r19
    2dec:	84 0b       	sbc	r24, r20
    2dee:	95 0b       	sbc	r25, r21
    2df0:	39 f4       	brne	.+14     	; 0x2e00 <__fp_cmp+0x38>
    2df2:	0a 26       	eor	r0, r26
    2df4:	61 f0       	breq	.+24     	; 0x2e0e <__fp_cmp+0x46>
    2df6:	23 2b       	or	r18, r19
    2df8:	24 2b       	or	r18, r20
    2dfa:	25 2b       	or	r18, r21
    2dfc:	21 f4       	brne	.+8      	; 0x2e06 <__fp_cmp+0x3e>
    2dfe:	08 95       	ret
    2e00:	0a 26       	eor	r0, r26
    2e02:	09 f4       	brne	.+2      	; 0x2e06 <__fp_cmp+0x3e>
    2e04:	a1 40       	sbci	r26, 0x01	; 1
    2e06:	a6 95       	lsr	r26
    2e08:	8f ef       	ldi	r24, 0xFF	; 255
    2e0a:	81 1d       	adc	r24, r1
    2e0c:	81 1d       	adc	r24, r1
    2e0e:	08 95       	ret

00002e10 <__fp_inf>:
    2e10:	97 f9       	bld	r25, 7
    2e12:	9f 67       	ori	r25, 0x7F	; 127
    2e14:	80 e8       	ldi	r24, 0x80	; 128
    2e16:	70 e0       	ldi	r23, 0x00	; 0
    2e18:	60 e0       	ldi	r22, 0x00	; 0
    2e1a:	08 95       	ret

00002e1c <__fp_nan>:
    2e1c:	9f ef       	ldi	r25, 0xFF	; 255
    2e1e:	80 ec       	ldi	r24, 0xC0	; 192
    2e20:	08 95       	ret

00002e22 <__fp_pscA>:
    2e22:	00 24       	eor	r0, r0
    2e24:	0a 94       	dec	r0
    2e26:	16 16       	cp	r1, r22
    2e28:	17 06       	cpc	r1, r23
    2e2a:	18 06       	cpc	r1, r24
    2e2c:	09 06       	cpc	r0, r25
    2e2e:	08 95       	ret

00002e30 <__fp_pscB>:
    2e30:	00 24       	eor	r0, r0
    2e32:	0a 94       	dec	r0
    2e34:	12 16       	cp	r1, r18
    2e36:	13 06       	cpc	r1, r19
    2e38:	14 06       	cpc	r1, r20
    2e3a:	05 06       	cpc	r0, r21
    2e3c:	08 95       	ret

00002e3e <__fp_round>:
    2e3e:	09 2e       	mov	r0, r25
    2e40:	03 94       	inc	r0
    2e42:	00 0c       	add	r0, r0
    2e44:	11 f4       	brne	.+4      	; 0x2e4a <__fp_round+0xc>
    2e46:	88 23       	and	r24, r24
    2e48:	52 f0       	brmi	.+20     	; 0x2e5e <__fp_round+0x20>
    2e4a:	bb 0f       	add	r27, r27
    2e4c:	40 f4       	brcc	.+16     	; 0x2e5e <__fp_round+0x20>
    2e4e:	bf 2b       	or	r27, r31
    2e50:	11 f4       	brne	.+4      	; 0x2e56 <__fp_round+0x18>
    2e52:	60 ff       	sbrs	r22, 0
    2e54:	04 c0       	rjmp	.+8      	; 0x2e5e <__fp_round+0x20>
    2e56:	6f 5f       	subi	r22, 0xFF	; 255
    2e58:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e5e:	08 95       	ret

00002e60 <__fp_split3>:
    2e60:	57 fd       	sbrc	r21, 7
    2e62:	90 58       	subi	r25, 0x80	; 128
    2e64:	44 0f       	add	r20, r20
    2e66:	55 1f       	adc	r21, r21
    2e68:	59 f0       	breq	.+22     	; 0x2e80 <__fp_splitA+0x10>
    2e6a:	5f 3f       	cpi	r21, 0xFF	; 255
    2e6c:	71 f0       	breq	.+28     	; 0x2e8a <__fp_splitA+0x1a>
    2e6e:	47 95       	ror	r20

00002e70 <__fp_splitA>:
    2e70:	88 0f       	add	r24, r24
    2e72:	97 fb       	bst	r25, 7
    2e74:	99 1f       	adc	r25, r25
    2e76:	61 f0       	breq	.+24     	; 0x2e90 <__fp_splitA+0x20>
    2e78:	9f 3f       	cpi	r25, 0xFF	; 255
    2e7a:	79 f0       	breq	.+30     	; 0x2e9a <__fp_splitA+0x2a>
    2e7c:	87 95       	ror	r24
    2e7e:	08 95       	ret
    2e80:	12 16       	cp	r1, r18
    2e82:	13 06       	cpc	r1, r19
    2e84:	14 06       	cpc	r1, r20
    2e86:	55 1f       	adc	r21, r21
    2e88:	f2 cf       	rjmp	.-28     	; 0x2e6e <__fp_split3+0xe>
    2e8a:	46 95       	lsr	r20
    2e8c:	f1 df       	rcall	.-30     	; 0x2e70 <__fp_splitA>
    2e8e:	08 c0       	rjmp	.+16     	; 0x2ea0 <__fp_splitA+0x30>
    2e90:	16 16       	cp	r1, r22
    2e92:	17 06       	cpc	r1, r23
    2e94:	18 06       	cpc	r1, r24
    2e96:	99 1f       	adc	r25, r25
    2e98:	f1 cf       	rjmp	.-30     	; 0x2e7c <__fp_splitA+0xc>
    2e9a:	86 95       	lsr	r24
    2e9c:	71 05       	cpc	r23, r1
    2e9e:	61 05       	cpc	r22, r1
    2ea0:	08 94       	sec
    2ea2:	08 95       	ret

00002ea4 <__fp_zero>:
    2ea4:	e8 94       	clt

00002ea6 <__fp_szero>:
    2ea6:	bb 27       	eor	r27, r27
    2ea8:	66 27       	eor	r22, r22
    2eaa:	77 27       	eor	r23, r23
    2eac:	cb 01       	movw	r24, r22
    2eae:	97 f9       	bld	r25, 7
    2eb0:	08 95       	ret

00002eb2 <__gesf2>:
    2eb2:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__fp_cmp>
    2eb6:	08 f4       	brcc	.+2      	; 0x2eba <__gesf2+0x8>
    2eb8:	8f ef       	ldi	r24, 0xFF	; 255
    2eba:	08 95       	ret

00002ebc <__mulsf3>:
    2ebc:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <__mulsf3x>
    2ec0:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__fp_round>
    2ec4:	0e 94 11 17 	call	0x2e22	; 0x2e22 <__fp_pscA>
    2ec8:	38 f0       	brcs	.+14     	; 0x2ed8 <__mulsf3+0x1c>
    2eca:	0e 94 18 17 	call	0x2e30	; 0x2e30 <__fp_pscB>
    2ece:	20 f0       	brcs	.+8      	; 0x2ed8 <__mulsf3+0x1c>
    2ed0:	95 23       	and	r25, r21
    2ed2:	11 f0       	breq	.+4      	; 0x2ed8 <__mulsf3+0x1c>
    2ed4:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__fp_inf>
    2ed8:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__fp_nan>
    2edc:	11 24       	eor	r1, r1
    2ede:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__fp_szero>

00002ee2 <__mulsf3x>:
    2ee2:	0e 94 30 17 	call	0x2e60	; 0x2e60 <__fp_split3>
    2ee6:	70 f3       	brcs	.-36     	; 0x2ec4 <__mulsf3+0x8>

00002ee8 <__mulsf3_pse>:
    2ee8:	95 9f       	mul	r25, r21
    2eea:	c1 f3       	breq	.-16     	; 0x2edc <__mulsf3+0x20>
    2eec:	95 0f       	add	r25, r21
    2eee:	50 e0       	ldi	r21, 0x00	; 0
    2ef0:	55 1f       	adc	r21, r21
    2ef2:	62 9f       	mul	r22, r18
    2ef4:	f0 01       	movw	r30, r0
    2ef6:	72 9f       	mul	r23, r18
    2ef8:	bb 27       	eor	r27, r27
    2efa:	f0 0d       	add	r31, r0
    2efc:	b1 1d       	adc	r27, r1
    2efe:	63 9f       	mul	r22, r19
    2f00:	aa 27       	eor	r26, r26
    2f02:	f0 0d       	add	r31, r0
    2f04:	b1 1d       	adc	r27, r1
    2f06:	aa 1f       	adc	r26, r26
    2f08:	64 9f       	mul	r22, r20
    2f0a:	66 27       	eor	r22, r22
    2f0c:	b0 0d       	add	r27, r0
    2f0e:	a1 1d       	adc	r26, r1
    2f10:	66 1f       	adc	r22, r22
    2f12:	82 9f       	mul	r24, r18
    2f14:	22 27       	eor	r18, r18
    2f16:	b0 0d       	add	r27, r0
    2f18:	a1 1d       	adc	r26, r1
    2f1a:	62 1f       	adc	r22, r18
    2f1c:	73 9f       	mul	r23, r19
    2f1e:	b0 0d       	add	r27, r0
    2f20:	a1 1d       	adc	r26, r1
    2f22:	62 1f       	adc	r22, r18
    2f24:	83 9f       	mul	r24, r19
    2f26:	a0 0d       	add	r26, r0
    2f28:	61 1d       	adc	r22, r1
    2f2a:	22 1f       	adc	r18, r18
    2f2c:	74 9f       	mul	r23, r20
    2f2e:	33 27       	eor	r19, r19
    2f30:	a0 0d       	add	r26, r0
    2f32:	61 1d       	adc	r22, r1
    2f34:	23 1f       	adc	r18, r19
    2f36:	84 9f       	mul	r24, r20
    2f38:	60 0d       	add	r22, r0
    2f3a:	21 1d       	adc	r18, r1
    2f3c:	82 2f       	mov	r24, r18
    2f3e:	76 2f       	mov	r23, r22
    2f40:	6a 2f       	mov	r22, r26
    2f42:	11 24       	eor	r1, r1
    2f44:	9f 57       	subi	r25, 0x7F	; 127
    2f46:	50 40       	sbci	r21, 0x00	; 0
    2f48:	9a f0       	brmi	.+38     	; 0x2f70 <__mulsf3_pse+0x88>
    2f4a:	f1 f0       	breq	.+60     	; 0x2f88 <__mulsf3_pse+0xa0>
    2f4c:	88 23       	and	r24, r24
    2f4e:	4a f0       	brmi	.+18     	; 0x2f62 <__mulsf3_pse+0x7a>
    2f50:	ee 0f       	add	r30, r30
    2f52:	ff 1f       	adc	r31, r31
    2f54:	bb 1f       	adc	r27, r27
    2f56:	66 1f       	adc	r22, r22
    2f58:	77 1f       	adc	r23, r23
    2f5a:	88 1f       	adc	r24, r24
    2f5c:	91 50       	subi	r25, 0x01	; 1
    2f5e:	50 40       	sbci	r21, 0x00	; 0
    2f60:	a9 f7       	brne	.-22     	; 0x2f4c <__mulsf3_pse+0x64>
    2f62:	9e 3f       	cpi	r25, 0xFE	; 254
    2f64:	51 05       	cpc	r21, r1
    2f66:	80 f0       	brcs	.+32     	; 0x2f88 <__mulsf3_pse+0xa0>
    2f68:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__fp_inf>
    2f6c:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__fp_szero>
    2f70:	5f 3f       	cpi	r21, 0xFF	; 255
    2f72:	e4 f3       	brlt	.-8      	; 0x2f6c <__mulsf3_pse+0x84>
    2f74:	98 3e       	cpi	r25, 0xE8	; 232
    2f76:	d4 f3       	brlt	.-12     	; 0x2f6c <__mulsf3_pse+0x84>
    2f78:	86 95       	lsr	r24
    2f7a:	77 95       	ror	r23
    2f7c:	67 95       	ror	r22
    2f7e:	b7 95       	ror	r27
    2f80:	f7 95       	ror	r31
    2f82:	e7 95       	ror	r30
    2f84:	9f 5f       	subi	r25, 0xFF	; 255
    2f86:	c1 f7       	brne	.-16     	; 0x2f78 <__mulsf3_pse+0x90>
    2f88:	fe 2b       	or	r31, r30
    2f8a:	88 0f       	add	r24, r24
    2f8c:	91 1d       	adc	r25, r1
    2f8e:	96 95       	lsr	r25
    2f90:	87 95       	ror	r24
    2f92:	97 f9       	bld	r25, 7
    2f94:	08 95       	ret

00002f96 <__tablejump2__>:
    2f96:	ee 0f       	add	r30, r30
    2f98:	ff 1f       	adc	r31, r31
    2f9a:	05 90       	lpm	r0, Z+
    2f9c:	f4 91       	lpm	r31, Z
    2f9e:	e0 2d       	mov	r30, r0
    2fa0:	09 94       	ijmp

00002fa2 <__umulhisi3>:
    2fa2:	a2 9f       	mul	r26, r18
    2fa4:	b0 01       	movw	r22, r0
    2fa6:	b3 9f       	mul	r27, r19
    2fa8:	c0 01       	movw	r24, r0
    2faa:	a3 9f       	mul	r26, r19
    2fac:	70 0d       	add	r23, r0
    2fae:	81 1d       	adc	r24, r1
    2fb0:	11 24       	eor	r1, r1
    2fb2:	91 1d       	adc	r25, r1
    2fb4:	b2 9f       	mul	r27, r18
    2fb6:	70 0d       	add	r23, r0
    2fb8:	81 1d       	adc	r24, r1
    2fba:	11 24       	eor	r1, r1
    2fbc:	91 1d       	adc	r25, r1
    2fbe:	08 95       	ret

00002fc0 <itoa>:
    2fc0:	45 32       	cpi	r20, 0x25	; 37
    2fc2:	51 05       	cpc	r21, r1
    2fc4:	20 f4       	brcc	.+8      	; 0x2fce <itoa+0xe>
    2fc6:	42 30       	cpi	r20, 0x02	; 2
    2fc8:	10 f0       	brcs	.+4      	; 0x2fce <itoa+0xe>
    2fca:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__itoa_ncheck>
    2fce:	fb 01       	movw	r30, r22
    2fd0:	10 82       	st	Z, r1
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	08 95       	ret

00002fd6 <__itoa_ncheck>:
    2fd6:	bb 27       	eor	r27, r27
    2fd8:	4a 30       	cpi	r20, 0x0A	; 10
    2fda:	31 f4       	brne	.+12     	; 0x2fe8 <__itoa_ncheck+0x12>
    2fdc:	99 23       	and	r25, r25
    2fde:	22 f4       	brpl	.+8      	; 0x2fe8 <__itoa_ncheck+0x12>
    2fe0:	bd e2       	ldi	r27, 0x2D	; 45
    2fe2:	90 95       	com	r25
    2fe4:	81 95       	neg	r24
    2fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe8:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <__utoa_common>

00002fec <__utoa_ncheck>:
    2fec:	bb 27       	eor	r27, r27

00002fee <__utoa_common>:
    2fee:	fb 01       	movw	r30, r22
    2ff0:	55 27       	eor	r21, r21
    2ff2:	aa 27       	eor	r26, r26
    2ff4:	88 0f       	add	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	aa 1f       	adc	r26, r26
    2ffa:	a4 17       	cp	r26, r20
    2ffc:	10 f0       	brcs	.+4      	; 0x3002 <__utoa_common+0x14>
    2ffe:	a4 1b       	sub	r26, r20
    3000:	83 95       	inc	r24
    3002:	50 51       	subi	r21, 0x10	; 16
    3004:	b9 f7       	brne	.-18     	; 0x2ff4 <__utoa_common+0x6>
    3006:	a0 5d       	subi	r26, 0xD0	; 208
    3008:	aa 33       	cpi	r26, 0x3A	; 58
    300a:	08 f0       	brcs	.+2      	; 0x300e <__utoa_common+0x20>
    300c:	a9 5d       	subi	r26, 0xD9	; 217
    300e:	a1 93       	st	Z+, r26
    3010:	00 97       	sbiw	r24, 0x00	; 0
    3012:	79 f7       	brne	.-34     	; 0x2ff2 <__utoa_common+0x4>
    3014:	b1 11       	cpse	r27, r1
    3016:	b1 93       	st	Z+, r27
    3018:	11 92       	st	Z+, r1
    301a:	cb 01       	movw	r24, r22
    301c:	0c 94 10 18 	jmp	0x3020	; 0x3020 <strrev>

00003020 <strrev>:
    3020:	dc 01       	movw	r26, r24
    3022:	fc 01       	movw	r30, r24
    3024:	67 2f       	mov	r22, r23
    3026:	71 91       	ld	r23, Z+
    3028:	77 23       	and	r23, r23
    302a:	e1 f7       	brne	.-8      	; 0x3024 <strrev+0x4>
    302c:	32 97       	sbiw	r30, 0x02	; 2
    302e:	04 c0       	rjmp	.+8      	; 0x3038 <strrev+0x18>
    3030:	7c 91       	ld	r23, X
    3032:	6d 93       	st	X+, r22
    3034:	70 83       	st	Z, r23
    3036:	62 91       	ld	r22, -Z
    3038:	ae 17       	cp	r26, r30
    303a:	bf 07       	cpc	r27, r31
    303c:	c8 f3       	brcs	.-14     	; 0x3030 <strrev+0x10>
    303e:	08 95       	ret

00003040 <_exit>:
    3040:	f8 94       	cli

00003042 <__stop_program>:
    3042:	ff cf       	rjmp	.-2      	; 0x3042 <__stop_program>
