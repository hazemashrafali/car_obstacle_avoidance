
car_avoid_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000028b0  00002944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  00800064  00800064  00002948  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  000029b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f5e  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3a  00000000  00000000  00005b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e7b  00000000  00000000  000067c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008cc  00000000  00000000  00009640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011ff  00000000  00000000  00009f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a5c  00000000  00000000  0000b10b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000fb67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__vector_1>
       8:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_2>
       c:	0c 94 ca 03 	jmp	0x794	; 0x794 <__vector_3>
      10:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__vector_4>
      14:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 27 08 	jmp	0x104e	; 0x104e <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__vector_9>
      28:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__vector_10>
      2c:	0c 94 83 07 	jmp	0xf06	; 0xf06 <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	96 06       	cpc	r9, r22
      56:	9b 06       	cpc	r9, r27
      58:	a1 06       	cpc	r10, r17
      5a:	51 07       	cpc	r21, r17
      5c:	a7 06       	cpc	r10, r23
      5e:	51 07       	cpc	r21, r17
      60:	ad 06       	cpc	r10, r29
      62:	b3 06       	cpc	r11, r19
      64:	b9 06       	cpc	r11, r25
      66:	bf 06       	cpc	r11, r31
      68:	d9 06       	cpc	r13, r25
      6a:	de 06       	cpc	r13, r30
      6c:	e4 06       	cpc	r14, r20
      6e:	59 07       	cpc	r21, r25
      70:	ea 06       	cpc	r14, r26
      72:	59 07       	cpc	r21, r25
      74:	f0 06       	cpc	r15, r16
      76:	f6 06       	cpc	r15, r22
      78:	fc 06       	cpc	r15, r28
      7a:	02 07       	cpc	r16, r18
      7c:	17 07       	cpc	r17, r23
      7e:	1c 07       	cpc	r17, r28
      80:	22 07       	cpc	r18, r18
      82:	28 07       	cpc	r18, r24
      84:	2e 07       	cpc	r18, r30
      86:	34 07       	cpc	r19, r20
      88:	3a 07       	cpc	r19, r26
      8a:	40 07       	cpc	r20, r16

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e0 eb       	ldi	r30, 0xB0	; 176
      a0:	f8 e2       	ldi	r31, 0x28	; 40
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a4 36       	cpi	r26, 0x64	; 100
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	a4 e6       	ldi	r26, 0x64	; 100
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a5 3a       	cpi	r26, 0xA5	; 165
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 46 02 	call	0x48c	; 0x48c <main>
      c2:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <led_init>:
#include "led.h"

/*============= FUNCTION DEFINITIONS =============*/

enu_led_error_t led_init(uint8 u8_port,uint8 u8_pin)
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	c8 2f       	mov	r28, r24
      d0:	d6 2f       	mov	r29, r22
	enu_led_error_t enu_led_error = LED_VALID_OPERATION;
	enu_led_error = (enu_led_error_t) DIO_pinMode(u8_port,u8_pin,PIN_OUTPUT);
      d2:	41 e0       	ldi	r20, 0x01	; 1
      d4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_pinMode>
	if(enu_led_error == LED_VALID_OPERATION)
      d8:	81 30       	cpi	r24, 0x01	; 1
      da:	29 f4       	brne	.+10     	; 0xe6 <led_init+0x1c>
	{
		enu_led_error = DIO_writePin(u8_port,u8_pin,PIN_LOW);
      dc:	40 e0       	ldi	r20, 0x00	; 0
      de:	6d 2f       	mov	r22, r29
      e0:	8c 2f       	mov	r24, r28
      e2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <DIO_writePin>
	}
	return enu_led_error;
}
      e6:	df 91       	pop	r29
      e8:	cf 91       	pop	r28
      ea:	08 95       	ret

000000ec <led_write>:

enu_led_error_t led_write(uint8 u8_port,uint8 u8_pin,enu_pin_value_t enu_led_state)
{
	enu_led_error_t enu_led_error = LED_VALID_OPERATION;

	enu_led_error = (enu_led_error_t) DIO_writePin(u8_port,u8_pin,enu_led_state);
      ec:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <DIO_writePin>

	return enu_led_error;
}
      f0:	08 95       	ret

000000f2 <timer_clk_map>:
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
	}
	return enu_time_error;	
}
      f2:	80 32       	cpi	r24, 0x20	; 32
      f4:	91 05       	cpc	r25, r1
      f6:	e1 f0       	breq	.+56     	; 0x130 <timer_clk_map+0x3e>
      f8:	38 f4       	brcc	.+14     	; 0x108 <timer_clk_map+0x16>
      fa:	81 30       	cpi	r24, 0x01	; 1
      fc:	91 05       	cpc	r25, r1
      fe:	21 f1       	breq	.+72     	; 0x148 <timer_clk_map+0x56>
     100:	98 f0       	brcs	.+38     	; 0x128 <timer_clk_map+0x36>
     102:	08 97       	sbiw	r24, 0x08	; 8
     104:	99 f0       	breq	.+38     	; 0x12c <timer_clk_map+0x3a>
     106:	1e c0       	rjmp	.+60     	; 0x144 <timer_clk_map+0x52>
     108:	80 38       	cpi	r24, 0x80	; 128
     10a:	91 05       	cpc	r25, r1
     10c:	a9 f0       	breq	.+42     	; 0x138 <timer_clk_map+0x46>
     10e:	20 f4       	brcc	.+8      	; 0x118 <timer_clk_map+0x26>
     110:	80 34       	cpi	r24, 0x40	; 64
     112:	91 05       	cpc	r25, r1
     114:	79 f0       	breq	.+30     	; 0x134 <timer_clk_map+0x42>
     116:	16 c0       	rjmp	.+44     	; 0x144 <timer_clk_map+0x52>
     118:	81 15       	cp	r24, r1
     11a:	21 e0       	ldi	r18, 0x01	; 1
     11c:	92 07       	cpc	r25, r18
     11e:	71 f0       	breq	.+28     	; 0x13c <timer_clk_map+0x4a>
     120:	81 15       	cp	r24, r1
     122:	94 40       	sbci	r25, 0x04	; 4
     124:	69 f0       	breq	.+26     	; 0x140 <timer_clk_map+0x4e>
     126:	0e c0       	rjmp	.+28     	; 0x144 <timer_clk_map+0x52>
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	08 95       	ret
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	08 95       	ret
     130:	83 e0       	ldi	r24, 0x03	; 3
     132:	08 95       	ret
     134:	84 e0       	ldi	r24, 0x04	; 4
     136:	08 95       	ret
     138:	85 e0       	ldi	r24, 0x05	; 5
     13a:	08 95       	ret
     13c:	86 e0       	ldi	r24, 0x06	; 6
     13e:	08 95       	ret
     140:	87 e0       	ldi	r24, 0x07	; 7
     142:	08 95       	ret
     144:	8a e0       	ldi	r24, 0x0A	; 10
     146:	08 95       	ret
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	08 95       	ret

0000014c <timeOut_callBack>:
     14c:	1f 93       	push	r17
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     156:	28 2f       	mov	r18, r24
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	f9 01       	movw	r30, r18
     15c:	e4 59       	subi	r30, 0x94	; 148
     15e:	ff 4f       	sbci	r31, 0xFF	; 255
     160:	90 81       	ld	r25, Z
     162:	91 11       	cpse	r25, r1
     164:	17 c0       	rjmp	.+46     	; 0x194 <timeOut_callBack+0x48>
     166:	0e 94 5f 07 	call	0xebe	; 0xebe <timer_stop>
     16a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	ee 0f       	add	r30, r30
     172:	ff 1f       	adc	r31, r31
     174:	ea 59       	subi	r30, 0x9A	; 154
     176:	ff 4f       	sbci	r31, 0xFF	; 255
     178:	01 90       	ld	r0, Z+
     17a:	f0 81       	ld	r31, Z
     17c:	e0 2d       	mov	r30, r0
     17e:	30 97       	sbiw	r30, 0x00	; 0
     180:	09 f0       	breq	.+2      	; 0x184 <timeOut_callBack+0x38>
     182:	09 95       	icall
     184:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	e5 58       	subi	r30, 0x85	; 133
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	80 83       	st	Z, r24
     192:	54 c0       	rjmp	.+168    	; 0x23c <timeOut_callBack+0xf0>
     194:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__data_end>
     198:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__data_end+0x1>
     19c:	4f 5f       	subi	r20, 0xFF	; 255
     19e:	5f 4f       	sbci	r21, 0xFF	; 255
     1a0:	50 93 65 00 	sts	0x0065, r21	; 0x800065 <__data_end+0x1>
     1a4:	40 93 64 00 	sts	0x0064, r20	; 0x800064 <__data_end>
     1a8:	22 0f       	add	r18, r18
     1aa:	33 1f       	adc	r19, r19
     1ac:	f9 01       	movw	r30, r18
     1ae:	e6 57       	subi	r30, 0x76	; 118
     1b0:	ff 4f       	sbci	r31, 0xFF	; 255
     1b2:	20 81       	ld	r18, Z
     1b4:	31 81       	ldd	r19, Z+1	; 0x01
     1b6:	42 17       	cp	r20, r18
     1b8:	53 07       	cpc	r21, r19
     1ba:	09 f0       	breq	.+2      	; 0x1be <timeOut_callBack+0x72>
     1bc:	3f c0       	rjmp	.+126    	; 0x23c <timeOut_callBack+0xf0>
     1be:	0e 94 5f 07 	call	0xebe	; 0xebe <timer_stop>
     1c2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
     1c6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
     1ca:	10 91 60 00 	lds	r17, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1ce:	c1 2f       	mov	r28, r17
     1d0:	d0 e0       	ldi	r29, 0x00	; 0
     1d2:	fe 01       	movw	r30, r28
     1d4:	ee 0f       	add	r30, r30
     1d6:	ff 1f       	adc	r31, r31
     1d8:	ee 0f       	add	r30, r30
     1da:	ff 1f       	adc	r31, r31
     1dc:	e2 58       	subi	r30, 0x82	; 130
     1de:	ff 4f       	sbci	r31, 0xFF	; 255
     1e0:	60 81       	ld	r22, Z
     1e2:	71 81       	ldd	r23, Z+1	; 0x01
     1e4:	82 81       	ldd	r24, Z+2	; 0x02
     1e6:	93 81       	ldd	r25, Z+3	; 0x03
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	a9 01       	movw	r20, r18
     1ee:	0e 94 de 13 	call	0x27bc	; 0x27bc <__gesf2>
     1f2:	18 16       	cp	r1, r24
     1f4:	1c f5       	brge	.+70     	; 0x23c <timeOut_callBack+0xf0>
     1f6:	cc 0f       	add	r28, r28
     1f8:	dd 1f       	adc	r29, r29
     1fa:	c1 59       	subi	r28, 0x91	; 145
     1fc:	df 4f       	sbci	r29, 0xFF	; 255
     1fe:	68 81       	ld	r22, Y
     200:	79 81       	ldd	r23, Y+1	; 0x01
     202:	81 2f       	mov	r24, r17
     204:	0e 94 b6 05 	call	0xb6c	; 0xb6c <timer_setInitialValue>
     208:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     20c:	ec 2f       	mov	r30, r28
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	ee 0f       	add	r30, r30
     212:	ff 1f       	adc	r31, r31
     214:	eb 58       	subi	r30, 0x8B	; 139
     216:	ff 4f       	sbci	r31, 0xFF	; 255
     218:	80 81       	ld	r24, Z
     21a:	91 81       	ldd	r25, Z+1	; 0x01
     21c:	0e 94 79 00 	call	0xf2	; 0xf2 <timer_clk_map>
     220:	68 2f       	mov	r22, r24
     222:	8c 2f       	mov	r24, r28
     224:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <timer_setClock>
     228:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     22c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <timer_start>
     230:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	e4 59       	subi	r30, 0x94	; 148
     238:	ff 4f       	sbci	r31, 0xFF	; 255
     23a:	10 82       	st	Z, r1
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	08 95       	ret

00000244 <timeOut_sec>:
     244:	8f 92       	push	r8
     246:	9f 92       	push	r9
     248:	af 92       	push	r10
     24a:	bf 92       	push	r11
     24c:	df 92       	push	r13
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	0f 93       	push	r16
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	cd b7       	in	r28, 0x3d	; 61
     25c:	de b7       	in	r29, 0x3e	; 62
     25e:	2d 97       	sbiw	r28, 0x0d	; 13
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	f8 94       	cli
     264:	de bf       	out	0x3e, r29	; 62
     266:	0f be       	out	0x3f, r0	; 63
     268:	cd bf       	out	0x3d, r28	; 61
     26a:	1a 82       	std	Y+2, r1	; 0x02
     26c:	19 82       	std	Y+1, r1	; 0x01
     26e:	1c 82       	std	Y+4, r1	; 0x04
     270:	1b 82       	std	Y+3, r1	; 0x03
     272:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	e5 58       	subi	r30, 0x85	; 133
     27a:	ff 4f       	sbci	r31, 0xFF	; 255
     27c:	10 82       	st	Z, r1
     27e:	8d 83       	std	Y+5, r24	; 0x05
     280:	1e 82       	std	Y+6, r1	; 0x06
     282:	18 86       	std	Y+8, r1	; 0x08
     284:	1f 82       	std	Y+7, r1	; 0x07
     286:	1d 86       	std	Y+13, r1	; 0x0d
     288:	1c 86       	std	Y+12, r1	; 0x0c
     28a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     28e:	83 30       	cpi	r24, 0x03	; 3
     290:	08 f0       	brcs	.+2      	; 0x294 <timeOut_sec+0x50>
     292:	d4 c0       	rjmp	.+424    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     294:	4a 01       	movw	r8, r20
     296:	5b 01       	movw	r10, r22
     298:	d8 2e       	mov	r13, r24
     29a:	8e 01       	movw	r16, r28
     29c:	0f 5f       	subi	r16, 0xFF	; 255
     29e:	1f 4f       	sbci	r17, 0xFF	; 255
     2a0:	22 e0       	ldi	r18, 0x02	; 2
     2a2:	48 2f       	mov	r20, r24
     2a4:	c5 01       	movw	r24, r10
     2a6:	b4 01       	movw	r22, r8
     2a8:	0e 94 79 08 	call	0x10f2	; 0x10f2 <calc_prescaler>
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <timeOut_sec+0x6e>
     2b0:	c7 c0       	rjmp	.+398    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     2b2:	49 81       	ldd	r20, Y+1	; 0x01
     2b4:	5a 81       	ldd	r21, Y+2	; 0x02
     2b6:	4c 3d       	cpi	r20, 0xDC	; 220
     2b8:	85 e0       	ldi	r24, 0x05	; 5
     2ba:	58 07       	cpc	r21, r24
     2bc:	c1 f0       	breq	.+48     	; 0x2ee <timeOut_sec+0xaa>
     2be:	ed 2d       	mov	r30, r13
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	e4 59       	subi	r30, 0x94	; 148
     2c4:	ff 4f       	sbci	r31, 0xFF	; 255
     2c6:	10 82       	st	Z, r1
     2c8:	fe 01       	movw	r30, r28
     2ca:	33 96       	adiw	r30, 0x03	; 3
     2cc:	7f 01       	movw	r14, r30
     2ce:	95 01       	movw	r18, r10
     2d0:	84 01       	movw	r16, r8
     2d2:	62 e0       	ldi	r22, 0x02	; 2
     2d4:	8d 2d       	mov	r24, r13
     2d6:	0e 94 c6 0c 	call	0x198c	; 0x198c <calc_initialValue>
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	9a 81       	ldd	r25, Y+2	; 0x02
     2de:	0e 94 79 00 	call	0xf2	; 0xf2 <timer_clk_map>
     2e2:	89 87       	std	Y+9, r24	; 0x09
     2e4:	8b 81       	ldd	r24, Y+3	; 0x03
     2e6:	9c 81       	ldd	r25, Y+4	; 0x04
     2e8:	9b 87       	std	Y+11, r25	; 0x0b
     2ea:	8a 87       	std	Y+10, r24	; 0x0a
     2ec:	98 c0       	rjmp	.+304    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     2ee:	0d 2d       	mov	r16, r13
     2f0:	10 e0       	ldi	r17, 0x00	; 0
     2f2:	f8 01       	movw	r30, r16
     2f4:	e4 59       	subi	r30, 0x94	; 148
     2f6:	ff 4f       	sbci	r31, 0xFF	; 255
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 83       	st	Z, r24
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	94 e0       	ldi	r25, 0x04	; 4
     300:	0e 94 79 00 	call	0xf2	; 0xf2 <timer_clk_map>
     304:	89 87       	std	Y+9, r24	; 0x09
     306:	1b 86       	std	Y+11, r1	; 0x0b
     308:	1a 86       	std	Y+10, r1	; 0x0a
     30a:	dd 20       	and	r13, r13
     30c:	19 f0       	breq	.+6      	; 0x314 <timeOut_sec+0xd0>
     30e:	f2 e0       	ldi	r31, 0x02	; 2
     310:	df 12       	cpse	r13, r31
     312:	2f c0       	rjmp	.+94     	; 0x372 <timeOut_sec+0x12e>
     314:	2d eb       	ldi	r18, 0xBD	; 189
     316:	37 e3       	ldi	r19, 0x37	; 55
     318:	46 e0       	ldi	r20, 0x06	; 6
     31a:	5d e3       	ldi	r21, 0x3D	; 61
     31c:	c5 01       	movw	r24, r10
     31e:	b4 01       	movw	r22, r8
     320:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
     324:	4b 01       	movw	r8, r22
     326:	5c 01       	movw	r10, r24
     328:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
     32c:	f8 01       	movw	r30, r16
     32e:	ee 0f       	add	r30, r30
     330:	ff 1f       	adc	r31, r31
     332:	e6 57       	subi	r30, 0x76	; 118
     334:	ff 4f       	sbci	r31, 0xFF	; 255
     336:	71 83       	std	Z+1, r23	; 0x01
     338:	60 83       	st	Z, r22
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatunsisf>
     342:	9b 01       	movw	r18, r22
     344:	ac 01       	movw	r20, r24
     346:	c5 01       	movw	r24, r10
     348:	b4 01       	movw	r22, r8
     34a:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
     34e:	2d eb       	ldi	r18, 0xBD	; 189
     350:	37 e3       	ldi	r19, 0x37	; 55
     352:	46 e0       	ldi	r20, 0x06	; 6
     354:	5d e3       	ldi	r21, 0x3D	; 61
     356:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
     35a:	f8 01       	movw	r30, r16
     35c:	ee 0f       	add	r30, r30
     35e:	ff 1f       	adc	r31, r31
     360:	ee 0f       	add	r30, r30
     362:	ff 1f       	adc	r31, r31
     364:	e2 58       	subi	r30, 0x82	; 130
     366:	ff 4f       	sbci	r31, 0xFF	; 255
     368:	60 83       	st	Z, r22
     36a:	71 83       	std	Z+1, r23	; 0x01
     36c:	82 83       	std	Z+2, r24	; 0x02
     36e:	93 83       	std	Z+3, r25	; 0x03
     370:	2e c0       	rjmp	.+92     	; 0x3ce <timeOut_sec+0x18a>
     372:	2d eb       	ldi	r18, 0xBD	; 189
     374:	37 e3       	ldi	r19, 0x37	; 55
     376:	46 e0       	ldi	r20, 0x06	; 6
     378:	51 e4       	ldi	r21, 0x41	; 65
     37a:	c5 01       	movw	r24, r10
     37c:	b4 01       	movw	r22, r8
     37e:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
     382:	4b 01       	movw	r8, r22
     384:	5c 01       	movw	r10, r24
     386:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
     38a:	f8 01       	movw	r30, r16
     38c:	ee 0f       	add	r30, r30
     38e:	ff 1f       	adc	r31, r31
     390:	e6 57       	subi	r30, 0x76	; 118
     392:	ff 4f       	sbci	r31, 0xFF	; 255
     394:	71 83       	std	Z+1, r23	; 0x01
     396:	60 83       	st	Z, r22
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatunsisf>
     3a0:	9b 01       	movw	r18, r22
     3a2:	ac 01       	movw	r20, r24
     3a4:	c5 01       	movw	r24, r10
     3a6:	b4 01       	movw	r22, r8
     3a8:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
     3ac:	2d eb       	ldi	r18, 0xBD	; 189
     3ae:	37 e3       	ldi	r19, 0x37	; 55
     3b0:	46 e0       	ldi	r20, 0x06	; 6
     3b2:	51 e4       	ldi	r21, 0x41	; 65
     3b4:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
     3b8:	f8 01       	movw	r30, r16
     3ba:	ee 0f       	add	r30, r30
     3bc:	ff 1f       	adc	r31, r31
     3be:	ee 0f       	add	r30, r30
     3c0:	ff 1f       	adc	r31, r31
     3c2:	e2 58       	subi	r30, 0x82	; 130
     3c4:	ff 4f       	sbci	r31, 0xFF	; 255
     3c6:	60 83       	st	Z, r22
     3c8:	71 83       	std	Z+1, r23	; 0x01
     3ca:	82 83       	std	Z+2, r24	; 0x02
     3cc:	93 83       	std	Z+3, r25	; 0x03
     3ce:	78 01       	movw	r14, r16
     3d0:	ee 0c       	add	r14, r14
     3d2:	ff 1c       	adc	r15, r15
     3d4:	c7 01       	movw	r24, r14
     3d6:	8b 58       	subi	r24, 0x8B	; 139
     3d8:	9f 4f       	sbci	r25, 0xFF	; 255
     3da:	4c 01       	movw	r8, r24
     3dc:	00 0f       	add	r16, r16
     3de:	11 1f       	adc	r17, r17
     3e0:	00 0f       	add	r16, r16
     3e2:	11 1f       	adc	r17, r17
     3e4:	f8 01       	movw	r30, r16
     3e6:	e2 58       	subi	r30, 0x82	; 130
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	5f 01       	movw	r10, r30
     3ec:	60 81       	ld	r22, Z
     3ee:	71 81       	ldd	r23, Z+1	; 0x01
     3f0:	82 81       	ldd	r24, Z+2	; 0x02
     3f2:	93 81       	ldd	r25, Z+3	; 0x03
     3f4:	84 01       	movw	r16, r8
     3f6:	22 e0       	ldi	r18, 0x02	; 2
     3f8:	4d 2d       	mov	r20, r13
     3fa:	0e 94 79 08 	call	0x10f2	; 0x10f2 <calc_prescaler>
     3fe:	c7 01       	movw	r24, r14
     400:	81 59       	subi	r24, 0x91	; 145
     402:	9f 4f       	sbci	r25, 0xFF	; 255
     404:	7c 01       	movw	r14, r24
     406:	f5 01       	movw	r30, r10
     408:	00 81       	ld	r16, Z
     40a:	11 81       	ldd	r17, Z+1	; 0x01
     40c:	22 81       	ldd	r18, Z+2	; 0x02
     40e:	33 81       	ldd	r19, Z+3	; 0x03
     410:	f4 01       	movw	r30, r8
     412:	40 81       	ld	r20, Z
     414:	51 81       	ldd	r21, Z+1	; 0x01
     416:	62 e0       	ldi	r22, 0x02	; 2
     418:	8d 2d       	mov	r24, r13
     41a:	0e 94 c6 0c 	call	0x198c	; 0x198c <calc_initialValue>
     41e:	ce 01       	movw	r24, r28
     420:	05 96       	adiw	r24, 0x05	; 5
     422:	0e 94 f7 03 	call	0x7ee	; 0x7ee <timer_init>
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	66 ea       	ldi	r22, 0xA6	; 166
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	8d 2d       	mov	r24, r13
     42e:	0e 94 23 06 	call	0xc46	; 0xc46 <timer_setCallBack>
     432:	8d 2d       	mov	r24, r13
     434:	0e 94 6e 06 	call	0xcdc	; 0xcdc <timer_start>
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	03 c0       	rjmp	.+6      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	01 c0       	rjmp	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     440:	83 e0       	ldi	r24, 0x03	; 3
     442:	2d 96       	adiw	r28, 0x0d	; 13
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	bf 90       	pop	r11
     45e:	af 90       	pop	r10
     460:	9f 90       	pop	r9
     462:	8f 90       	pop	r8
     464:	08 95       	ret

00000466 <timer_check_time_out_flag>:

enu_time_error_t timer_check_time_out_flag (uint8 u8_timer_id,uint8* ptr_u8_flag)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
	if(u8_timer_id < MAX_ENU_TMR_CHANNEL)
     466:	83 30       	cpi	r24, 0x03	; 3
     468:	68 f4       	brcc	.+26     	; 0x484 <timer_check_time_out_flag+0x1e>
	{
		if(ptr_u8_flag != NULL_PTR)
     46a:	61 15       	cp	r22, r1
     46c:	71 05       	cpc	r23, r1
     46e:	61 f0       	breq	.+24     	; 0x488 <timer_check_time_out_flag+0x22>
		{		
			*ptr_u8_flag = gl_bo_timeOut_flag[u8_timer_id];
     470:	e8 2f       	mov	r30, r24
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	e5 58       	subi	r30, 0x85	; 133
     476:	ff 4f       	sbci	r31, 0xFF	; 255
     478:	80 81       	ld	r24, Z
     47a:	db 01       	movw	r26, r22
     47c:	8c 93       	st	X, r24
			gl_bo_timeOut_flag[u8_timer_id] = FALSE;	
     47e:	10 82       	st	Z, r1
	return enu_time_error;	
}

enu_time_error_t timer_check_time_out_flag (uint8 u8_timer_id,uint8* ptr_u8_flag)
{
	enu_time_error_t enu_time_error = ENU_TIMER_VALID;
     480:	83 e0       	ldi	r24, 0x03	; 3
     482:	08 95       	ret
			enu_time_error = ENU_TIMER_INVALID_INPUT;
		}	
	}
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	08 95       	ret
			*ptr_u8_flag = gl_bo_timeOut_flag[u8_timer_id];
			gl_bo_timeOut_flag[u8_timer_id] = FALSE;	
		}
		else
		{
			enu_time_error = ENU_TIMER_INVALID_INPUT;
     488:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
	}
	return enu_time_error;
}
     48a:	08 95       	ret

0000048c <main>:
	timeOut_sec(2,4);
}


int main(void)
{
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	1f 92       	push	r1
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
	uint8 flag = 0,count_flag=0;
     496:	19 82       	std	Y+1, r1	; 0x01
	led_init(PORTD_ID,PIN7_ID);
     498:	67 e0       	ldi	r22, 0x07	; 7
     49a:	83 e0       	ldi	r24, 0x03	; 3
     49c:	0e 94 65 00 	call	0xca	; 0xca <led_init>
	led_init(PORTD_ID,PIN6_ID);
     4a0:	66 e0       	ldi	r22, 0x06	; 6
     4a2:	83 e0       	ldi	r24, 0x03	; 3
     4a4:	0e 94 65 00 	call	0xca	; 0xca <led_init>
	timeOut_sec(0,10);
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	60 e2       	ldi	r22, 0x20	; 32
     4ae:	71 e4       	ldi	r23, 0x41	; 65
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	0e 94 22 01 	call	0x244	; 0x244 <timeOut_sec>
	//timer_callEvent_ms(1,3000,fun);
	enable_global_interrupt();
     4b6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <enable_global_interrupt>
    /* Replace with your application code */
    while (1) 
    {
		timer_check_time_out_flag(0,&flag);
     4ba:	be 01       	movw	r22, r28
     4bc:	6f 5f       	subi	r22, 0xFF	; 255
     4be:	7f 4f       	sbci	r23, 0xFF	; 255
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	0e 94 33 02 	call	0x466	; 0x466 <timer_check_time_out_flag>
		if(flag == 1)
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	81 30       	cpi	r24, 0x01	; 1
     4ca:	b9 f7       	brne	.-18     	; 0x4ba <main+0x2e>
		{
			led_write(PORTD_ID,PIN7_ID,PIN_HIGH);
     4cc:	41 e0       	ldi	r20, 0x01	; 1
     4ce:	67 e0       	ldi	r22, 0x07	; 7
     4d0:	83 e0       	ldi	r24, 0x03	; 3
     4d2:	0e 94 76 00 	call	0xec	; 0xec <led_write>
     4d6:	f1 cf       	rjmp	.-30     	; 0x4ba <main+0x2e>

000004d8 <DIO_pinMode>:
/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
     4d8:	84 30       	cpi	r24, 0x04	; 4
     4da:	08 f0       	brcs	.+2      	; 0x4de <DIO_pinMode+0x6>
     4dc:	7b c0       	rjmp	.+246    	; 0x5d4 <DIO_pinMode+0xfc>
	{
		if((pin >= PIN0_ID) && (pin < MAX_PIN_ID))
     4de:	68 30       	cpi	r22, 0x08	; 8
     4e0:	08 f0       	brcs	.+2      	; 0x4e4 <DIO_pinMode+0xc>
     4e2:	7a c0       	rjmp	.+244    	; 0x5d8 <DIO_pinMode+0x100>
		{
			if((enu_pin_direction == PIN_INPUT) || (enu_pin_direction == PIN_OUTPUT))
     4e4:	42 30       	cpi	r20, 0x02	; 2
     4e6:	08 f0       	brcs	.+2      	; 0x4ea <DIO_pinMode+0x12>
     4e8:	79 c0       	rjmp	.+242    	; 0x5dc <DIO_pinMode+0x104>
			{
				switch(port)
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	11 f1       	breq	.+68     	; 0x532 <DIO_pinMode+0x5a>
     4ee:	30 f0       	brcs	.+12     	; 0x4fc <DIO_pinMode+0x24>
     4f0:	82 30       	cpi	r24, 0x02	; 2
     4f2:	d1 f1       	breq	.+116    	; 0x568 <DIO_pinMode+0x90>
     4f4:	83 30       	cpi	r24, 0x03	; 3
     4f6:	09 f4       	brne	.+2      	; 0x4fa <DIO_pinMode+0x22>
     4f8:	52 c0       	rjmp	.+164    	; 0x59e <DIO_pinMode+0xc6>
     4fa:	72 c0       	rjmp	.+228    	; 0x5e0 <DIO_pinMode+0x108>
				{
					case PORTA_ID:
					if(enu_pin_direction == PIN_OUTPUT)
     4fc:	41 30       	cpi	r20, 0x01	; 1
     4fe:	61 f4       	brne	.+24     	; 0x518 <DIO_pinMode+0x40>
					{
						SET_BIT(DDRA,pin);
     500:	2a b3       	in	r18, 0x1a	; 26
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_pinMode+0x34>
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	6a 95       	dec	r22
     50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_pinMode+0x30>
     510:	82 2b       	or	r24, r18
     512:	8a bb       	out	0x1a, r24	; 26

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	08 95       	ret
					{
						SET_BIT(DDRA,pin);
					}
					else
					{
						CLEAR_BIT(DDRA,pin);
     518:	2a b3       	in	r18, 0x1a	; 26
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_pinMode+0x4c>
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	6a 95       	dec	r22
     526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_pinMode+0x48>
     528:	80 95       	com	r24
     52a:	82 23       	and	r24, r18
     52c:	8a bb       	out	0x1a, r24	; 26

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	08 95       	ret
					{
						CLEAR_BIT(DDRA,pin);
					}
					break;
					case PORTB_ID:
					if(enu_pin_direction == PIN_OUTPUT)
     532:	41 30       	cpi	r20, 0x01	; 1
     534:	61 f4       	brne	.+24     	; 0x54e <DIO_pinMode+0x76>
					{
						SET_BIT(DDRB,pin);
     536:	27 b3       	in	r18, 0x17	; 23
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_pinMode+0x6a>
     53e:	88 0f       	add	r24, r24
     540:	99 1f       	adc	r25, r25
     542:	6a 95       	dec	r22
     544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_pinMode+0x66>
     546:	82 2b       	or	r24, r18
     548:	87 bb       	out	0x17, r24	; 23

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	08 95       	ret
					{
						SET_BIT(DDRB,pin);
					}
					else
					{
						CLEAR_BIT(DDRB,pin);
     54e:	27 b3       	in	r18, 0x17	; 23
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_pinMode+0x82>
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	6a 95       	dec	r22
     55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_pinMode+0x7e>
     55e:	80 95       	com	r24
     560:	82 23       	and	r24, r18
     562:	87 bb       	out	0x17, r24	; 23

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	08 95       	ret
					{
						CLEAR_BIT(DDRB,pin);
					}
					break;
					case PORTC_ID:
					if(enu_pin_direction == PIN_OUTPUT)
     568:	41 30       	cpi	r20, 0x01	; 1
     56a:	61 f4       	brne	.+24     	; 0x584 <DIO_pinMode+0xac>
					{
						SET_BIT(DDRC,pin);
     56c:	24 b3       	in	r18, 0x14	; 20
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_pinMode+0xa0>
     574:	88 0f       	add	r24, r24
     576:	99 1f       	adc	r25, r25
     578:	6a 95       	dec	r22
     57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_pinMode+0x9c>
     57c:	82 2b       	or	r24, r18
     57e:	84 bb       	out	0x14, r24	; 20

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	08 95       	ret
					{
						SET_BIT(DDRC,pin);
					}
					else
					{
						CLEAR_BIT(DDRC,pin);
     584:	24 b3       	in	r18, 0x14	; 20
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	02 c0       	rjmp	.+4      	; 0x590 <DIO_pinMode+0xb8>
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	6a 95       	dec	r22
     592:	e2 f7       	brpl	.-8      	; 0x58c <DIO_pinMode+0xb4>
     594:	80 95       	com	r24
     596:	82 23       	and	r24, r18
     598:	84 bb       	out	0x14, r24	; 20

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	08 95       	ret
					{
						CLEAR_BIT(DDRC,pin);
					}
					break;
					case PORTD_ID:
					if(enu_pin_direction == PIN_OUTPUT)
     59e:	41 30       	cpi	r20, 0x01	; 1
     5a0:	61 f4       	brne	.+24     	; 0x5ba <DIO_pinMode+0xe2>
					{
						SET_BIT(DDRD,pin);
     5a2:	21 b3       	in	r18, 0x11	; 17
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_pinMode+0xd6>
     5aa:	88 0f       	add	r24, r24
     5ac:	99 1f       	adc	r25, r25
     5ae:	6a 95       	dec	r22
     5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_pinMode+0xd2>
     5b2:	82 2b       	or	r24, r18
     5b4:	81 bb       	out	0x11, r24	; 17

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	08 95       	ret
					{
						SET_BIT(DDRD,pin);
					}
					else
					{
						CLEAR_BIT(DDRD,pin);
     5ba:	21 b3       	in	r18, 0x11	; 17
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_pinMode+0xee>
     5c2:	88 0f       	add	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	6a 95       	dec	r22
     5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_pinMode+0xea>
     5ca:	80 95       	com	r24
     5cc:	82 23       	and	r24, r18
     5ce:	81 bb       	out	0x11, r24	; 17

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	08 95       	ret
			enu_dio_error = DIO_INVALID_PIN_ID;
		}
	}
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
     5d4:	82 e0       	ldi	r24, 0x02	; 2
     5d6:	08 95       	ret
				enu_dio_error = DIO_INVALID_DIRECTION;
			}
		}
		else
		{
			enu_dio_error = DIO_INVALID_PIN_ID;
     5d8:	83 e0       	ldi	r24, 0x03	; 3
     5da:	08 95       	ret
					break;
				}
			}
			else
			{
				enu_dio_error = DIO_INVALID_DIRECTION;
     5dc:	84 e0       	ldi	r24, 0x04	; 4
     5de:	08 95       	ret

/*============= FUNCTION DEFINITIONS =============*/

enu_dio_error_t DIO_pinMode	(uint8 port,uint8 pin,enu_pin_direction_t enu_pin_direction)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
     5e2:	08 95       	ret

000005e4 <DIO_writePin>:
/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
     5e4:	84 30       	cpi	r24, 0x04	; 4
     5e6:	08 f0       	brcs	.+2      	; 0x5ea <DIO_writePin+0x6>
     5e8:	7b c0       	rjmp	.+246    	; 0x6e0 <DIO_writePin+0xfc>
	{
		if((pin >= PIN0_ID) && (pin < MAX_PIN_ID))
     5ea:	68 30       	cpi	r22, 0x08	; 8
     5ec:	08 f0       	brcs	.+2      	; 0x5f0 <DIO_writePin+0xc>
     5ee:	7a c0       	rjmp	.+244    	; 0x6e4 <DIO_writePin+0x100>
		{
			if((enu_pin_value == PIN_LOW) || (enu_pin_value == PIN_HIGH))
     5f0:	42 30       	cpi	r20, 0x02	; 2
     5f2:	08 f0       	brcs	.+2      	; 0x5f6 <DIO_writePin+0x12>
     5f4:	79 c0       	rjmp	.+242    	; 0x6e8 <DIO_writePin+0x104>
			{
				switch(port)
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	11 f1       	breq	.+68     	; 0x63e <DIO_writePin+0x5a>
     5fa:	30 f0       	brcs	.+12     	; 0x608 <DIO_writePin+0x24>
     5fc:	82 30       	cpi	r24, 0x02	; 2
     5fe:	d1 f1       	breq	.+116    	; 0x674 <DIO_writePin+0x90>
     600:	83 30       	cpi	r24, 0x03	; 3
     602:	09 f4       	brne	.+2      	; 0x606 <DIO_writePin+0x22>
     604:	52 c0       	rjmp	.+164    	; 0x6aa <DIO_writePin+0xc6>
     606:	72 c0       	rjmp	.+228    	; 0x6ec <DIO_writePin+0x108>
				{
					case PORTA_ID:
					if(enu_pin_value == LOGIC_HIGH)
     608:	41 30       	cpi	r20, 0x01	; 1
     60a:	61 f4       	brne	.+24     	; 0x624 <DIO_writePin+0x40>
					{
						SET_BIT(PORTA,pin);
     60c:	2b b3       	in	r18, 0x1b	; 27
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_writePin+0x34>
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	6a 95       	dec	r22
     61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_writePin+0x30>
     61c:	82 2b       	or	r24, r18
     61e:	8b bb       	out	0x1b, r24	; 27

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	08 95       	ret
					{
						SET_BIT(PORTA,pin);
					}
					else
					{
						CLEAR_BIT(PORTA,pin);
     624:	2b b3       	in	r18, 0x1b	; 27
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_writePin+0x4c>
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	6a 95       	dec	r22
     632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_writePin+0x48>
     634:	80 95       	com	r24
     636:	82 23       	and	r24, r18
     638:	8b bb       	out	0x1b, r24	; 27

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	08 95       	ret
					{
						CLEAR_BIT(PORTA,pin);
					}
					break;
					case PORTB_ID:
					if(enu_pin_value == LOGIC_HIGH)
     63e:	41 30       	cpi	r20, 0x01	; 1
     640:	61 f4       	brne	.+24     	; 0x65a <DIO_writePin+0x76>
					{
						SET_BIT(PORTB,pin);
     642:	28 b3       	in	r18, 0x18	; 24
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_writePin+0x6a>
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	6a 95       	dec	r22
     650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_writePin+0x66>
     652:	82 2b       	or	r24, r18
     654:	88 bb       	out	0x18, r24	; 24

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	08 95       	ret
					{
						SET_BIT(PORTB,pin);
					}
					else
					{
						CLEAR_BIT(PORTB,pin);
     65a:	28 b3       	in	r18, 0x18	; 24
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_writePin+0x82>
     662:	88 0f       	add	r24, r24
     664:	99 1f       	adc	r25, r25
     666:	6a 95       	dec	r22
     668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_writePin+0x7e>
     66a:	80 95       	com	r24
     66c:	82 23       	and	r24, r18
     66e:	88 bb       	out	0x18, r24	; 24

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	08 95       	ret
					{
						CLEAR_BIT(PORTB,pin);
					}
					break;
					case PORTC_ID:
					if(enu_pin_value == LOGIC_HIGH)
     674:	41 30       	cpi	r20, 0x01	; 1
     676:	61 f4       	brne	.+24     	; 0x690 <DIO_writePin+0xac>
					{
						SET_BIT(PORTC,pin);
     678:	25 b3       	in	r18, 0x15	; 21
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_writePin+0xa0>
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	6a 95       	dec	r22
     686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_writePin+0x9c>
     688:	82 2b       	or	r24, r18
     68a:	85 bb       	out	0x15, r24	; 21

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	08 95       	ret
					{
						SET_BIT(PORTC,pin);
					}
					else
					{
						CLEAR_BIT(PORTC,pin);
     690:	25 b3       	in	r18, 0x15	; 21
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_writePin+0xb8>
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	6a 95       	dec	r22
     69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_writePin+0xb4>
     6a0:	80 95       	com	r24
     6a2:	82 23       	and	r24, r18
     6a4:	85 bb       	out	0x15, r24	; 21

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	08 95       	ret
					{
						CLEAR_BIT(PORTC,pin);
					}
					break;
					case PORTD_ID:
					if(enu_pin_value == LOGIC_HIGH)
     6aa:	41 30       	cpi	r20, 0x01	; 1
     6ac:	61 f4       	brne	.+24     	; 0x6c6 <DIO_writePin+0xe2>
					{
						SET_BIT(PORTD,pin);
     6ae:	22 b3       	in	r18, 0x12	; 18
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <DIO_writePin+0xd6>
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	6a 95       	dec	r22
     6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <DIO_writePin+0xd2>
     6be:	82 2b       	or	r24, r18
     6c0:	82 bb       	out	0x12, r24	; 18

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	08 95       	ret
					{
						SET_BIT(PORTD,pin);
					}
					else
					{
						CLEAR_BIT(PORTD,pin);
     6c6:	22 b3       	in	r18, 0x12	; 18
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_writePin+0xee>
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	6a 95       	dec	r22
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_writePin+0xea>
     6d6:	80 95       	com	r24
     6d8:	82 23       	and	r24, r18
     6da:	82 bb       	out	0x12, r24	; 18

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	08 95       	ret
			enu_dio_error = DIO_INVALID_PIN_ID;
		}
	}
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	08 95       	ret
				enu_dio_error = DIO_INVALID_OPERATION;
			}
		}
		else
		{
			enu_dio_error = DIO_INVALID_PIN_ID;
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	08 95       	ret
					break;
				}
			}
			else
			{
				enu_dio_error = DIO_INVALID_OPERATION;
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	08 95       	ret

/*===========================================================================*/

enu_dio_error_t DIO_writePin	(uint8 port,uint8 pin,enu_pin_value_t enu_pin_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
     6ee:	08 95       	ret

000006f0 <__vector_1>:
	}
	return enu_interrupt_error ;
}

ISR_HANDLER(EXT_INT0)
{
     6f0:	1f 92       	push	r1
     6f2:	0f 92       	push	r0
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	0f 92       	push	r0
     6f8:	11 24       	eor	r1, r1
     6fa:	2f 93       	push	r18
     6fc:	3f 93       	push	r19
     6fe:	4f 93       	push	r20
     700:	5f 93       	push	r21
     702:	6f 93       	push	r22
     704:	7f 93       	push	r23
     706:	8f 93       	push	r24
     708:	9f 93       	push	r25
     70a:	af 93       	push	r26
     70c:	bf 93       	push	r27
     70e:	ef 93       	push	r30
     710:	ff 93       	push	r31
	if(gl_callbackptr_0 != NULL_PTR)
     712:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <gl_callbackptr_0>
     716:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <gl_callbackptr_0+0x1>
     71a:	30 97       	sbiw	r30, 0x00	; 0
     71c:	09 f0       	breq	.+2      	; 0x720 <__vector_1+0x30>
	{
		gl_callbackptr_0();
     71e:	09 95       	icall
	}
}
     720:	ff 91       	pop	r31
     722:	ef 91       	pop	r30
     724:	bf 91       	pop	r27
     726:	af 91       	pop	r26
     728:	9f 91       	pop	r25
     72a:	8f 91       	pop	r24
     72c:	7f 91       	pop	r23
     72e:	6f 91       	pop	r22
     730:	5f 91       	pop	r21
     732:	4f 91       	pop	r20
     734:	3f 91       	pop	r19
     736:	2f 91       	pop	r18
     738:	0f 90       	pop	r0
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	0f 90       	pop	r0
     73e:	1f 90       	pop	r1
     740:	18 95       	reti

00000742 <__vector_2>:

ISR_HANDLER(EXT_INT1)
{
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	2f 93       	push	r18
     74e:	3f 93       	push	r19
     750:	4f 93       	push	r20
     752:	5f 93       	push	r21
     754:	6f 93       	push	r22
     756:	7f 93       	push	r23
     758:	8f 93       	push	r24
     75a:	9f 93       	push	r25
     75c:	af 93       	push	r26
     75e:	bf 93       	push	r27
     760:	ef 93       	push	r30
     762:	ff 93       	push	r31
	if(gl_callbackptr_1 != NULL_PTR)
     764:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <gl_callbackptr_1>
     768:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <gl_callbackptr_1+0x1>
     76c:	30 97       	sbiw	r30, 0x00	; 0
     76e:	09 f0       	breq	.+2      	; 0x772 <__vector_2+0x30>
	{
		gl_callbackptr_1();
     770:	09 95       	icall
	}
}
     772:	ff 91       	pop	r31
     774:	ef 91       	pop	r30
     776:	bf 91       	pop	r27
     778:	af 91       	pop	r26
     77a:	9f 91       	pop	r25
     77c:	8f 91       	pop	r24
     77e:	7f 91       	pop	r23
     780:	6f 91       	pop	r22
     782:	5f 91       	pop	r21
     784:	4f 91       	pop	r20
     786:	3f 91       	pop	r19
     788:	2f 91       	pop	r18
     78a:	0f 90       	pop	r0
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	0f 90       	pop	r0
     790:	1f 90       	pop	r1
     792:	18 95       	reti

00000794 <__vector_3>:

ISR_HANDLER(EXT_INT2)
{
     794:	1f 92       	push	r1
     796:	0f 92       	push	r0
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	0f 92       	push	r0
     79c:	11 24       	eor	r1, r1
     79e:	2f 93       	push	r18
     7a0:	3f 93       	push	r19
     7a2:	4f 93       	push	r20
     7a4:	5f 93       	push	r21
     7a6:	6f 93       	push	r22
     7a8:	7f 93       	push	r23
     7aa:	8f 93       	push	r24
     7ac:	9f 93       	push	r25
     7ae:	af 93       	push	r26
     7b0:	bf 93       	push	r27
     7b2:	ef 93       	push	r30
     7b4:	ff 93       	push	r31
	if(gl_callbackptr_2 != NULL_PTR)
     7b6:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <gl_callbackptr_2>
     7ba:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <gl_callbackptr_2+0x1>
     7be:	30 97       	sbiw	r30, 0x00	; 0
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <__vector_3+0x30>
	{
		gl_callbackptr_2();
     7c2:	09 95       	icall
	}
}
     7c4:	ff 91       	pop	r31
     7c6:	ef 91       	pop	r30
     7c8:	bf 91       	pop	r27
     7ca:	af 91       	pop	r26
     7cc:	9f 91       	pop	r25
     7ce:	8f 91       	pop	r24
     7d0:	7f 91       	pop	r23
     7d2:	6f 91       	pop	r22
     7d4:	5f 91       	pop	r21
     7d6:	4f 91       	pop	r20
     7d8:	3f 91       	pop	r19
     7da:	2f 91       	pop	r18
     7dc:	0f 90       	pop	r0
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	0f 90       	pop	r0
     7e2:	1f 90       	pop	r1
     7e4:	18 95       	reti

000007e6 <enable_global_interrupt>:


/*================ APIS ================*/
void enable_global_interrupt (void)
{
	SET_BIT(SREG,PIN7);
     7e6:	8f b7       	in	r24, 0x3f	; 63
     7e8:	80 68       	ori	r24, 0x80	; 128
     7ea:	8f bf       	out	0x3f, r24	; 63
     7ec:	08 95       	ret

000007ee <timer_init>:
	else
	{
		enu_tmr_error = ENU_TMR_INVALID_ID;
	}
	return enu_tmr_error;
}
     7ee:	fc 01       	movw	r30, r24
     7f0:	89 2b       	or	r24, r25
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <timer_init+0x8>
     7f4:	95 c1       	rjmp	.+810    	; 0xb20 <__stack+0x2c1>
     7f6:	80 81       	ld	r24, Z
     7f8:	83 30       	cpi	r24, 0x03	; 3
     7fa:	08 f0       	brcs	.+2      	; 0x7fe <timer_init+0x10>
     7fc:	93 c1       	rjmp	.+806    	; 0xb24 <__stack+0x2c5>
     7fe:	91 81       	ldd	r25, Z+1	; 0x01
     800:	92 30       	cpi	r25, 0x02	; 2
     802:	08 f0       	brcs	.+2      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     804:	91 c1       	rjmp	.+802    	; 0xb28 <__stack+0x2c9>
     806:	92 81       	ldd	r25, Z+2	; 0x02
     808:	92 30       	cpi	r25, 0x02	; 2
     80a:	08 f0       	brcs	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80c:	8f c1       	rjmp	.+798    	; 0xb2c <__stack+0x2cd>
     80e:	93 81       	ldd	r25, Z+3	; 0x03
     810:	94 30       	cpi	r25, 0x04	; 4
     812:	08 f0       	brcs	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     814:	8d c1       	rjmp	.+794    	; 0xb30 <__stack+0x2d1>
     816:	94 81       	ldd	r25, Z+4	; 0x04
     818:	9a 30       	cpi	r25, 0x0A	; 10
     81a:	08 f0       	brcs	.+2      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     81c:	8b c1       	rjmp	.+790    	; 0xb34 <__stack+0x2d5>
     81e:	81 11       	cpse	r24, r1
     820:	7d c0       	rjmp	.+250    	; 0x91c <__stack+0xbd>
     822:	83 b7       	in	r24, 0x33	; 51
     824:	80 68       	ori	r24, 0x80	; 128
     826:	83 bf       	out	0x33, r24	; 51
     828:	81 81       	ldd	r24, Z+1	; 0x01
     82a:	88 23       	and	r24, r24
     82c:	19 f0       	breq	.+6      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     82e:	81 30       	cpi	r24, 0x01	; 1
     830:	41 f0       	breq	.+16     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     832:	0d c0       	rjmp	.+26     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     834:	83 b7       	in	r24, 0x33	; 51
     836:	8f 7b       	andi	r24, 0xBF	; 191
     838:	83 bf       	out	0x33, r24	; 51
     83a:	83 b7       	in	r24, 0x33	; 51
     83c:	87 7f       	andi	r24, 0xF7	; 247
     83e:	83 bf       	out	0x33, r24	; 51
     840:	06 c0       	rjmp	.+12     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     842:	83 b7       	in	r24, 0x33	; 51
     844:	8f 7b       	andi	r24, 0xBF	; 191
     846:	83 bf       	out	0x33, r24	; 51
     848:	83 b7       	in	r24, 0x33	; 51
     84a:	88 60       	ori	r24, 0x08	; 8
     84c:	83 bf       	out	0x33, r24	; 51
     84e:	83 81       	ldd	r24, Z+3	; 0x03
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	69 f0       	breq	.+26     	; 0x86e <__stack+0xf>
     854:	28 f0       	brcs	.+10     	; 0x860 <__stack+0x1>
     856:	82 30       	cpi	r24, 0x02	; 2
     858:	a1 f0       	breq	.+40     	; 0x882 <__stack+0x23>
     85a:	83 30       	cpi	r24, 0x03	; 3
     85c:	e1 f0       	breq	.+56     	; 0x896 <__stack+0x37>
     85e:	24 c0       	rjmp	.+72     	; 0x8a8 <__stack+0x49>
     860:	83 b7       	in	r24, 0x33	; 51
     862:	8f 7e       	andi	r24, 0xEF	; 239
     864:	83 bf       	out	0x33, r24	; 51
     866:	83 b7       	in	r24, 0x33	; 51
     868:	8f 7d       	andi	r24, 0xDF	; 223
     86a:	83 bf       	out	0x33, r24	; 51
     86c:	1d c0       	rjmp	.+58     	; 0x8a8 <__stack+0x49>
     86e:	87 b3       	in	r24, 0x17	; 23
     870:	88 60       	ori	r24, 0x08	; 8
     872:	87 bb       	out	0x17, r24	; 23
     874:	83 b7       	in	r24, 0x33	; 51
     876:	80 61       	ori	r24, 0x10	; 16
     878:	83 bf       	out	0x33, r24	; 51
     87a:	83 b7       	in	r24, 0x33	; 51
     87c:	8f 7d       	andi	r24, 0xDF	; 223
     87e:	83 bf       	out	0x33, r24	; 51
     880:	13 c0       	rjmp	.+38     	; 0x8a8 <__stack+0x49>
     882:	87 b3       	in	r24, 0x17	; 23
     884:	88 60       	ori	r24, 0x08	; 8
     886:	87 bb       	out	0x17, r24	; 23
     888:	83 b7       	in	r24, 0x33	; 51
     88a:	8f 7e       	andi	r24, 0xEF	; 239
     88c:	83 bf       	out	0x33, r24	; 51
     88e:	83 b7       	in	r24, 0x33	; 51
     890:	80 62       	ori	r24, 0x20	; 32
     892:	83 bf       	out	0x33, r24	; 51
     894:	09 c0       	rjmp	.+18     	; 0x8a8 <__stack+0x49>
     896:	87 b3       	in	r24, 0x17	; 23
     898:	88 60       	ori	r24, 0x08	; 8
     89a:	87 bb       	out	0x17, r24	; 23
     89c:	83 b7       	in	r24, 0x33	; 51
     89e:	80 61       	ori	r24, 0x10	; 16
     8a0:	83 bf       	out	0x33, r24	; 51
     8a2:	83 b7       	in	r24, 0x33	; 51
     8a4:	80 62       	ori	r24, 0x20	; 32
     8a6:	83 bf       	out	0x33, r24	; 51
     8a8:	84 81       	ldd	r24, Z+4	; 0x04
     8aa:	83 30       	cpi	r24, 0x03	; 3
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <__stack+0x51>
     8ae:	44 c1       	rjmp	.+648    	; 0xb38 <__stack+0x2d9>
     8b0:	85 30       	cpi	r24, 0x05	; 5
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <__stack+0x57>
     8b4:	43 c1       	rjmp	.+646    	; 0xb3c <__stack+0x2dd>
     8b6:	a0 81       	ld	r26, Z
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	af 59       	subi	r26, 0x9F	; 159
     8bc:	bf 4f       	sbci	r27, 0xFF	; 255
     8be:	8c 93       	st	X, r24
     8c0:	82 81       	ldd	r24, Z+2	; 0x02
     8c2:	81 11       	cpse	r24, r1
     8c4:	0b c0       	rjmp	.+22     	; 0x8dc <__stack+0x7d>
     8c6:	81 81       	ldd	r24, Z+1	; 0x01
     8c8:	81 11       	cpse	r24, r1
     8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <__stack+0x75>
     8cc:	89 b7       	in	r24, 0x39	; 57
     8ce:	81 60       	ori	r24, 0x01	; 1
     8d0:	89 bf       	out	0x39, r24	; 57
     8d2:	0a c0       	rjmp	.+20     	; 0x8e8 <__stack+0x89>
     8d4:	89 b7       	in	r24, 0x39	; 57
     8d6:	82 60       	ori	r24, 0x02	; 2
     8d8:	89 bf       	out	0x39, r24	; 57
     8da:	06 c0       	rjmp	.+12     	; 0x8e8 <__stack+0x89>
     8dc:	89 b7       	in	r24, 0x39	; 57
     8de:	8e 7f       	andi	r24, 0xFE	; 254
     8e0:	89 bf       	out	0x39, r24	; 57
     8e2:	89 b7       	in	r24, 0x39	; 57
     8e4:	8d 7f       	andi	r24, 0xFD	; 253
     8e6:	89 bf       	out	0x39, r24	; 57
     8e8:	85 81       	ldd	r24, Z+5	; 0x05
     8ea:	96 81       	ldd	r25, Z+6	; 0x06
     8ec:	8f 3f       	cpi	r24, 0xFF	; 255
     8ee:	91 05       	cpc	r25, r1
     8f0:	11 f0       	breq	.+4      	; 0x8f6 <__stack+0x97>
     8f2:	08 f0       	brcs	.+2      	; 0x8f6 <__stack+0x97>
     8f4:	25 c1       	rjmp	.+586    	; 0xb40 <__stack+0x2e1>
     8f6:	27 81       	ldd	r18, Z+7	; 0x07
     8f8:	30 85       	ldd	r19, Z+8	; 0x08
     8fa:	2f 3f       	cpi	r18, 0xFF	; 255
     8fc:	31 05       	cpc	r19, r1
     8fe:	11 f0       	breq	.+4      	; 0x904 <__stack+0xa5>
     900:	08 f0       	brcs	.+2      	; 0x904 <__stack+0xa5>
     902:	20 c1       	rjmp	.+576    	; 0xb44 <__stack+0x2e5>
     904:	21 81       	ldd	r18, Z+1	; 0x01
     906:	21 11       	cpse	r18, r1
     908:	04 c0       	rjmp	.+8      	; 0x912 <__stack+0xb3>
     90a:	82 bf       	out	0x32, r24	; 50
     90c:	1c be       	out	0x3c, r1	; 60
     90e:	86 e0       	ldi	r24, 0x06	; 6
     910:	24 c1       	rjmp	.+584    	; 0xb5a <__stack+0x2fb>
     912:	12 be       	out	0x32, r1	; 50
     914:	87 81       	ldd	r24, Z+7	; 0x07
     916:	8c bf       	out	0x3c, r24	; 60
     918:	86 e0       	ldi	r24, 0x06	; 6
     91a:	1f c1       	rjmp	.+574    	; 0xb5a <__stack+0x2fb>
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	09 f0       	breq	.+2      	; 0x922 <__stack+0xc3>
     920:	85 c0       	rjmp	.+266    	; 0xa2c <__stack+0x1cd>
     922:	8f b5       	in	r24, 0x2f	; 47
     924:	88 60       	ori	r24, 0x08	; 8
     926:	8f bd       	out	0x2f, r24	; 47
     928:	8f b5       	in	r24, 0x2f	; 47
     92a:	84 60       	ori	r24, 0x04	; 4
     92c:	8f bd       	out	0x2f, r24	; 47
     92e:	81 81       	ldd	r24, Z+1	; 0x01
     930:	88 23       	and	r24, r24
     932:	19 f0       	breq	.+6      	; 0x93a <__stack+0xdb>
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	71 f0       	breq	.+28     	; 0x954 <__stack+0xf5>
     938:	19 c0       	rjmp	.+50     	; 0x96c <__stack+0x10d>
     93a:	8f b5       	in	r24, 0x2f	; 47
     93c:	8e 7f       	andi	r24, 0xFE	; 254
     93e:	8f bd       	out	0x2f, r24	; 47
     940:	8f b5       	in	r24, 0x2f	; 47
     942:	8d 7f       	andi	r24, 0xFD	; 253
     944:	8f bd       	out	0x2f, r24	; 47
     946:	8e b5       	in	r24, 0x2e	; 46
     948:	87 7f       	andi	r24, 0xF7	; 247
     94a:	8e bd       	out	0x2e, r24	; 46
     94c:	8e b5       	in	r24, 0x2e	; 46
     94e:	8f 7e       	andi	r24, 0xEF	; 239
     950:	8e bd       	out	0x2e, r24	; 46
     952:	0c c0       	rjmp	.+24     	; 0x96c <__stack+0x10d>
     954:	8f b5       	in	r24, 0x2f	; 47
     956:	8e 7f       	andi	r24, 0xFE	; 254
     958:	8f bd       	out	0x2f, r24	; 47
     95a:	8f b5       	in	r24, 0x2f	; 47
     95c:	8d 7f       	andi	r24, 0xFD	; 253
     95e:	8f bd       	out	0x2f, r24	; 47
     960:	8e b5       	in	r24, 0x2e	; 46
     962:	88 60       	ori	r24, 0x08	; 8
     964:	8e bd       	out	0x2e, r24	; 46
     966:	8e b5       	in	r24, 0x2e	; 46
     968:	8f 7e       	andi	r24, 0xEF	; 239
     96a:	8e bd       	out	0x2e, r24	; 46
     96c:	83 81       	ldd	r24, Z+3	; 0x03
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	69 f0       	breq	.+26     	; 0x98c <__stack+0x12d>
     972:	28 f0       	brcs	.+10     	; 0x97e <__stack+0x11f>
     974:	82 30       	cpi	r24, 0x02	; 2
     976:	a1 f0       	breq	.+40     	; 0x9a0 <__stack+0x141>
     978:	83 30       	cpi	r24, 0x03	; 3
     97a:	e1 f0       	breq	.+56     	; 0x9b4 <__stack+0x155>
     97c:	24 c0       	rjmp	.+72     	; 0x9c6 <__stack+0x167>
     97e:	8f b5       	in	r24, 0x2f	; 47
     980:	8f 7b       	andi	r24, 0xBF	; 191
     982:	8f bd       	out	0x2f, r24	; 47
     984:	8f b5       	in	r24, 0x2f	; 47
     986:	8f 77       	andi	r24, 0x7F	; 127
     988:	8f bd       	out	0x2f, r24	; 47
     98a:	1d c0       	rjmp	.+58     	; 0x9c6 <__stack+0x167>
     98c:	81 b3       	in	r24, 0x11	; 17
     98e:	80 62       	ori	r24, 0x20	; 32
     990:	81 bb       	out	0x11, r24	; 17
     992:	8f b5       	in	r24, 0x2f	; 47
     994:	80 64       	ori	r24, 0x40	; 64
     996:	8f bd       	out	0x2f, r24	; 47
     998:	8f b5       	in	r24, 0x2f	; 47
     99a:	8f 77       	andi	r24, 0x7F	; 127
     99c:	8f bd       	out	0x2f, r24	; 47
     99e:	13 c0       	rjmp	.+38     	; 0x9c6 <__stack+0x167>
     9a0:	81 b3       	in	r24, 0x11	; 17
     9a2:	80 62       	ori	r24, 0x20	; 32
     9a4:	81 bb       	out	0x11, r24	; 17
     9a6:	8f b5       	in	r24, 0x2f	; 47
     9a8:	8f 7b       	andi	r24, 0xBF	; 191
     9aa:	8f bd       	out	0x2f, r24	; 47
     9ac:	8f b5       	in	r24, 0x2f	; 47
     9ae:	80 68       	ori	r24, 0x80	; 128
     9b0:	8f bd       	out	0x2f, r24	; 47
     9b2:	09 c0       	rjmp	.+18     	; 0x9c6 <__stack+0x167>
     9b4:	81 b3       	in	r24, 0x11	; 17
     9b6:	80 62       	ori	r24, 0x20	; 32
     9b8:	81 bb       	out	0x11, r24	; 17
     9ba:	8f b5       	in	r24, 0x2f	; 47
     9bc:	80 64       	ori	r24, 0x40	; 64
     9be:	8f bd       	out	0x2f, r24	; 47
     9c0:	8f b5       	in	r24, 0x2f	; 47
     9c2:	80 68       	ori	r24, 0x80	; 128
     9c4:	8f bd       	out	0x2f, r24	; 47
     9c6:	84 81       	ldd	r24, Z+4	; 0x04
     9c8:	83 30       	cpi	r24, 0x03	; 3
     9ca:	09 f4       	brne	.+2      	; 0x9ce <__stack+0x16f>
     9cc:	bd c0       	rjmp	.+378    	; 0xb48 <__stack+0x2e9>
     9ce:	85 30       	cpi	r24, 0x05	; 5
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <__stack+0x175>
     9d2:	bc c0       	rjmp	.+376    	; 0xb4c <__stack+0x2ed>
     9d4:	a0 81       	ld	r26, Z
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	af 59       	subi	r26, 0x9F	; 159
     9da:	bf 4f       	sbci	r27, 0xFF	; 255
     9dc:	8c 93       	st	X, r24
     9de:	82 81       	ldd	r24, Z+2	; 0x02
     9e0:	81 11       	cpse	r24, r1
     9e2:	0b c0       	rjmp	.+22     	; 0x9fa <__stack+0x19b>
     9e4:	81 81       	ldd	r24, Z+1	; 0x01
     9e6:	81 11       	cpse	r24, r1
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__stack+0x193>
     9ea:	89 b7       	in	r24, 0x39	; 57
     9ec:	84 60       	ori	r24, 0x04	; 4
     9ee:	89 bf       	out	0x39, r24	; 57
     9f0:	0a c0       	rjmp	.+20     	; 0xa06 <__stack+0x1a7>
     9f2:	89 b7       	in	r24, 0x39	; 57
     9f4:	80 61       	ori	r24, 0x10	; 16
     9f6:	89 bf       	out	0x39, r24	; 57
     9f8:	06 c0       	rjmp	.+12     	; 0xa06 <__stack+0x1a7>
     9fa:	89 b7       	in	r24, 0x39	; 57
     9fc:	8b 7f       	andi	r24, 0xFB	; 251
     9fe:	89 bf       	out	0x39, r24	; 57
     a00:	89 b7       	in	r24, 0x39	; 57
     a02:	8f 7e       	andi	r24, 0xEF	; 239
     a04:	89 bf       	out	0x39, r24	; 57
     a06:	81 81       	ldd	r24, Z+1	; 0x01
     a08:	81 11       	cpse	r24, r1
     a0a:	08 c0       	rjmp	.+16     	; 0xa1c <__stack+0x1bd>
     a0c:	85 81       	ldd	r24, Z+5	; 0x05
     a0e:	96 81       	ldd	r25, Z+6	; 0x06
     a10:	9d bd       	out	0x2d, r25	; 45
     a12:	8c bd       	out	0x2c, r24	; 44
     a14:	1b bc       	out	0x2b, r1	; 43
     a16:	1a bc       	out	0x2a, r1	; 42
     a18:	86 e0       	ldi	r24, 0x06	; 6
     a1a:	9f c0       	rjmp	.+318    	; 0xb5a <__stack+0x2fb>
     a1c:	1d bc       	out	0x2d, r1	; 45
     a1e:	1c bc       	out	0x2c, r1	; 44
     a20:	87 81       	ldd	r24, Z+7	; 0x07
     a22:	90 85       	ldd	r25, Z+8	; 0x08
     a24:	9b bd       	out	0x2b, r25	; 43
     a26:	8a bd       	out	0x2a, r24	; 42
     a28:	86 e0       	ldi	r24, 0x06	; 6
     a2a:	97 c0       	rjmp	.+302    	; 0xb5a <__stack+0x2fb>
     a2c:	85 b5       	in	r24, 0x25	; 37
     a2e:	80 68       	ori	r24, 0x80	; 128
     a30:	85 bd       	out	0x25, r24	; 37
     a32:	81 81       	ldd	r24, Z+1	; 0x01
     a34:	88 23       	and	r24, r24
     a36:	19 f0       	breq	.+6      	; 0xa3e <__stack+0x1df>
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	41 f0       	breq	.+16     	; 0xa4c <__stack+0x1ed>
     a3c:	0d c0       	rjmp	.+26     	; 0xa58 <__stack+0x1f9>
     a3e:	85 b5       	in	r24, 0x25	; 37
     a40:	8f 7b       	andi	r24, 0xBF	; 191
     a42:	85 bd       	out	0x25, r24	; 37
     a44:	85 b5       	in	r24, 0x25	; 37
     a46:	87 7f       	andi	r24, 0xF7	; 247
     a48:	85 bd       	out	0x25, r24	; 37
     a4a:	06 c0       	rjmp	.+12     	; 0xa58 <__stack+0x1f9>
     a4c:	85 b5       	in	r24, 0x25	; 37
     a4e:	8f 7b       	andi	r24, 0xBF	; 191
     a50:	85 bd       	out	0x25, r24	; 37
     a52:	85 b5       	in	r24, 0x25	; 37
     a54:	88 60       	ori	r24, 0x08	; 8
     a56:	85 bd       	out	0x25, r24	; 37
     a58:	83 81       	ldd	r24, Z+3	; 0x03
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	69 f0       	breq	.+26     	; 0xa78 <__stack+0x219>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__stack+0x20b>
     a60:	82 30       	cpi	r24, 0x02	; 2
     a62:	a1 f0       	breq	.+40     	; 0xa8c <__stack+0x22d>
     a64:	83 30       	cpi	r24, 0x03	; 3
     a66:	e1 f0       	breq	.+56     	; 0xaa0 <__stack+0x241>
     a68:	24 c0       	rjmp	.+72     	; 0xab2 <__stack+0x253>
     a6a:	85 b5       	in	r24, 0x25	; 37
     a6c:	8f 7e       	andi	r24, 0xEF	; 239
     a6e:	85 bd       	out	0x25, r24	; 37
     a70:	85 b5       	in	r24, 0x25	; 37
     a72:	8f 7d       	andi	r24, 0xDF	; 223
     a74:	85 bd       	out	0x25, r24	; 37
     a76:	1d c0       	rjmp	.+58     	; 0xab2 <__stack+0x253>
     a78:	81 b3       	in	r24, 0x11	; 17
     a7a:	80 68       	ori	r24, 0x80	; 128
     a7c:	81 bb       	out	0x11, r24	; 17
     a7e:	85 b5       	in	r24, 0x25	; 37
     a80:	80 61       	ori	r24, 0x10	; 16
     a82:	85 bd       	out	0x25, r24	; 37
     a84:	85 b5       	in	r24, 0x25	; 37
     a86:	8f 7d       	andi	r24, 0xDF	; 223
     a88:	85 bd       	out	0x25, r24	; 37
     a8a:	13 c0       	rjmp	.+38     	; 0xab2 <__stack+0x253>
     a8c:	81 b3       	in	r24, 0x11	; 17
     a8e:	80 68       	ori	r24, 0x80	; 128
     a90:	81 bb       	out	0x11, r24	; 17
     a92:	85 b5       	in	r24, 0x25	; 37
     a94:	8f 7e       	andi	r24, 0xEF	; 239
     a96:	85 bd       	out	0x25, r24	; 37
     a98:	85 b5       	in	r24, 0x25	; 37
     a9a:	80 62       	ori	r24, 0x20	; 32
     a9c:	85 bd       	out	0x25, r24	; 37
     a9e:	09 c0       	rjmp	.+18     	; 0xab2 <__stack+0x253>
     aa0:	81 b3       	in	r24, 0x11	; 17
     aa2:	80 68       	ori	r24, 0x80	; 128
     aa4:	81 bb       	out	0x11, r24	; 17
     aa6:	85 b5       	in	r24, 0x25	; 37
     aa8:	80 61       	ori	r24, 0x10	; 16
     aaa:	85 bd       	out	0x25, r24	; 37
     aac:	85 b5       	in	r24, 0x25	; 37
     aae:	80 62       	ori	r24, 0x20	; 32
     ab0:	85 bd       	out	0x25, r24	; 37
     ab2:	84 81       	ldd	r24, Z+4	; 0x04
     ab4:	98 ef       	ldi	r25, 0xF8	; 248
     ab6:	98 0f       	add	r25, r24
     ab8:	92 30       	cpi	r25, 0x02	; 2
     aba:	08 f4       	brcc	.+2      	; 0xabe <__stack+0x25f>
     abc:	49 c0       	rjmp	.+146    	; 0xb50 <__stack+0x2f1>
     abe:	a0 81       	ld	r26, Z
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	af 59       	subi	r26, 0x9F	; 159
     ac4:	bf 4f       	sbci	r27, 0xFF	; 255
     ac6:	8c 93       	st	X, r24
     ac8:	82 81       	ldd	r24, Z+2	; 0x02
     aca:	81 11       	cpse	r24, r1
     acc:	0b c0       	rjmp	.+22     	; 0xae4 <__stack+0x285>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	81 11       	cpse	r24, r1
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <__stack+0x27d>
     ad4:	89 b7       	in	r24, 0x39	; 57
     ad6:	80 64       	ori	r24, 0x40	; 64
     ad8:	89 bf       	out	0x39, r24	; 57
     ada:	0a c0       	rjmp	.+20     	; 0xaf0 <__stack+0x291>
     adc:	89 b7       	in	r24, 0x39	; 57
     ade:	80 68       	ori	r24, 0x80	; 128
     ae0:	89 bf       	out	0x39, r24	; 57
     ae2:	06 c0       	rjmp	.+12     	; 0xaf0 <__stack+0x291>
     ae4:	89 b7       	in	r24, 0x39	; 57
     ae6:	8f 7b       	andi	r24, 0xBF	; 191
     ae8:	89 bf       	out	0x39, r24	; 57
     aea:	89 b7       	in	r24, 0x39	; 57
     aec:	8f 77       	andi	r24, 0x7F	; 127
     aee:	89 bf       	out	0x39, r24	; 57
     af0:	85 81       	ldd	r24, Z+5	; 0x05
     af2:	96 81       	ldd	r25, Z+6	; 0x06
     af4:	8f 3f       	cpi	r24, 0xFF	; 255
     af6:	91 05       	cpc	r25, r1
     af8:	09 f0       	breq	.+2      	; 0xafc <__stack+0x29d>
     afa:	60 f5       	brcc	.+88     	; 0xb54 <__stack+0x2f5>
     afc:	27 81       	ldd	r18, Z+7	; 0x07
     afe:	30 85       	ldd	r19, Z+8	; 0x08
     b00:	2f 3f       	cpi	r18, 0xFF	; 255
     b02:	31 05       	cpc	r19, r1
     b04:	09 f0       	breq	.+2      	; 0xb08 <__stack+0x2a9>
     b06:	40 f5       	brcc	.+80     	; 0xb58 <__stack+0x2f9>
     b08:	21 81       	ldd	r18, Z+1	; 0x01
     b0a:	21 11       	cpse	r18, r1
     b0c:	04 c0       	rjmp	.+8      	; 0xb16 <__stack+0x2b7>
     b0e:	84 bd       	out	0x24, r24	; 36
     b10:	13 bc       	out	0x23, r1	; 35
     b12:	86 e0       	ldi	r24, 0x06	; 6
     b14:	22 c0       	rjmp	.+68     	; 0xb5a <__stack+0x2fb>
     b16:	14 bc       	out	0x24, r1	; 36
     b18:	87 81       	ldd	r24, Z+7	; 0x07
     b1a:	83 bd       	out	0x23, r24	; 35
     b1c:	86 e0       	ldi	r24, 0x06	; 6
     b1e:	1d c0       	rjmp	.+58     	; 0xb5a <__stack+0x2fb>
     b20:	85 e0       	ldi	r24, 0x05	; 5
     b22:	1b c0       	rjmp	.+54     	; 0xb5a <__stack+0x2fb>
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	19 c0       	rjmp	.+50     	; 0xb5a <__stack+0x2fb>
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	17 c0       	rjmp	.+46     	; 0xb5a <__stack+0x2fb>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	15 c0       	rjmp	.+42     	; 0xb5a <__stack+0x2fb>
     b30:	83 e0       	ldi	r24, 0x03	; 3
     b32:	13 c0       	rjmp	.+38     	; 0xb5a <__stack+0x2fb>
     b34:	84 e0       	ldi	r24, 0x04	; 4
     b36:	11 c0       	rjmp	.+34     	; 0xb5a <__stack+0x2fb>
     b38:	84 e0       	ldi	r24, 0x04	; 4
     b3a:	0f c0       	rjmp	.+30     	; 0xb5a <__stack+0x2fb>
     b3c:	84 e0       	ldi	r24, 0x04	; 4
     b3e:	0d c0       	rjmp	.+26     	; 0xb5a <__stack+0x2fb>
     b40:	85 e0       	ldi	r24, 0x05	; 5
     b42:	0b c0       	rjmp	.+22     	; 0xb5a <__stack+0x2fb>
     b44:	85 e0       	ldi	r24, 0x05	; 5
     b46:	09 c0       	rjmp	.+18     	; 0xb5a <__stack+0x2fb>
     b48:	84 e0       	ldi	r24, 0x04	; 4
     b4a:	07 c0       	rjmp	.+14     	; 0xb5a <__stack+0x2fb>
     b4c:	84 e0       	ldi	r24, 0x04	; 4
     b4e:	05 c0       	rjmp	.+10     	; 0xb5a <__stack+0x2fb>
     b50:	84 e0       	ldi	r24, 0x04	; 4
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <__stack+0x2fb>
     b54:	85 e0       	ldi	r24, 0x05	; 5
     b56:	01 c0       	rjmp	.+2      	; 0xb5a <__stack+0x2fb>
     b58:	85 e0       	ldi	r24, 0x05	; 5
     b5a:	86 30       	cpi	r24, 0x06	; 6
     b5c:	31 f4       	brne	.+12     	; 0xb6a <__stack+0x30b>
     b5e:	e0 81       	ld	r30, Z
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	ee 55       	subi	r30, 0x5E	; 94
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	90 83       	st	Z, r25
     b6a:	08 95       	ret

00000b6c <timer_setInitialValue>:
     b6c:	83 30       	cpi	r24, 0x03	; 3
     b6e:	f8 f4       	brcc	.+62     	; 0xbae <timer_setInitialValue+0x42>
     b70:	e8 2f       	mov	r30, r24
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	ee 55       	subi	r30, 0x5E	; 94
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	90 81       	ld	r25, Z
     b7a:	91 30       	cpi	r25, 0x01	; 1
     b7c:	d1 f4       	brne	.+52     	; 0xbb2 <timer_setInitialValue+0x46>
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	59 f0       	breq	.+22     	; 0xb98 <timer_setInitialValue+0x2c>
     b82:	18 f0       	brcs	.+6      	; 0xb8a <timer_setInitialValue+0x1e>
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	61 f0       	breq	.+24     	; 0xba0 <timer_setInitialValue+0x34>
     b88:	16 c0       	rjmp	.+44     	; 0xbb6 <timer_setInitialValue+0x4a>
     b8a:	6f 3f       	cpi	r22, 0xFF	; 255
     b8c:	71 05       	cpc	r23, r1
     b8e:	09 f0       	breq	.+2      	; 0xb92 <timer_setInitialValue+0x26>
     b90:	a0 f4       	brcc	.+40     	; 0xbba <timer_setInitialValue+0x4e>
     b92:	62 bf       	out	0x32, r22	; 50
     b94:	86 e0       	ldi	r24, 0x06	; 6
     b96:	08 95       	ret
     b98:	7d bd       	out	0x2d, r23	; 45
     b9a:	6c bd       	out	0x2c, r22	; 44
     b9c:	86 e0       	ldi	r24, 0x06	; 6
     b9e:	08 95       	ret
     ba0:	6f 3f       	cpi	r22, 0xFF	; 255
     ba2:	71 05       	cpc	r23, r1
     ba4:	09 f0       	breq	.+2      	; 0xba8 <timer_setInitialValue+0x3c>
     ba6:	58 f4       	brcc	.+22     	; 0xbbe <timer_setInitialValue+0x52>
     ba8:	64 bd       	out	0x24, r22	; 36
     baa:	86 e0       	ldi	r24, 0x06	; 6
     bac:	08 95       	ret
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	08 95       	ret
     bb2:	88 e0       	ldi	r24, 0x08	; 8
     bb4:	08 95       	ret
     bb6:	86 e0       	ldi	r24, 0x06	; 6
     bb8:	08 95       	ret
     bba:	85 e0       	ldi	r24, 0x05	; 5
     bbc:	08 95       	ret
     bbe:	85 e0       	ldi	r24, 0x05	; 5
     bc0:	08 95       	ret

00000bc2 <timer_setClock>:
     bc2:	83 30       	cpi	r24, 0x03	; 3
     bc4:	70 f5       	brcc	.+92     	; 0xc22 <timer_setClock+0x60>
     bc6:	28 2f       	mov	r18, r24
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	f9 01       	movw	r30, r18
     bcc:	ee 55       	subi	r30, 0x5E	; 94
     bce:	ff 4f       	sbci	r31, 0xFF	; 255
     bd0:	90 81       	ld	r25, Z
     bd2:	91 30       	cpi	r25, 0x01	; 1
     bd4:	41 f5       	brne	.+80     	; 0xc26 <timer_setClock+0x64>
     bd6:	6a 30       	cpi	r22, 0x0A	; 10
     bd8:	40 f5       	brcc	.+80     	; 0xc2a <timer_setClock+0x68>
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	71 f0       	breq	.+28     	; 0xbfa <timer_setClock+0x38>
     bde:	18 f0       	brcs	.+6      	; 0xbe6 <timer_setClock+0x24>
     be0:	82 30       	cpi	r24, 0x02	; 2
     be2:	a9 f0       	breq	.+42     	; 0xc0e <timer_setClock+0x4c>
     be4:	24 c0       	rjmp	.+72     	; 0xc2e <timer_setClock+0x6c>
     be6:	63 30       	cpi	r22, 0x03	; 3
     be8:	21 f1       	breq	.+72     	; 0xc32 <timer_setClock+0x70>
     bea:	65 30       	cpi	r22, 0x05	; 5
     bec:	21 f1       	breq	.+72     	; 0xc36 <timer_setClock+0x74>
     bee:	f9 01       	movw	r30, r18
     bf0:	ef 59       	subi	r30, 0x9F	; 159
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	60 83       	st	Z, r22
     bf6:	86 e0       	ldi	r24, 0x06	; 6
     bf8:	08 95       	ret
     bfa:	63 30       	cpi	r22, 0x03	; 3
     bfc:	f1 f0       	breq	.+60     	; 0xc3a <timer_setClock+0x78>
     bfe:	65 30       	cpi	r22, 0x05	; 5
     c00:	f1 f0       	breq	.+60     	; 0xc3e <timer_setClock+0x7c>
     c02:	f9 01       	movw	r30, r18
     c04:	ef 59       	subi	r30, 0x9F	; 159
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	60 83       	st	Z, r22
     c0a:	86 e0       	ldi	r24, 0x06	; 6
     c0c:	08 95       	ret
     c0e:	88 ef       	ldi	r24, 0xF8	; 248
     c10:	86 0f       	add	r24, r22
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b0 f0       	brcs	.+44     	; 0xc42 <timer_setClock+0x80>
     c16:	f9 01       	movw	r30, r18
     c18:	ef 59       	subi	r30, 0x9F	; 159
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	60 83       	st	Z, r22
     c1e:	86 e0       	ldi	r24, 0x06	; 6
     c20:	08 95       	ret
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	08 95       	ret
     c26:	88 e0       	ldi	r24, 0x08	; 8
     c28:	08 95       	ret
     c2a:	84 e0       	ldi	r24, 0x04	; 4
     c2c:	08 95       	ret
     c2e:	86 e0       	ldi	r24, 0x06	; 6
     c30:	08 95       	ret
     c32:	84 e0       	ldi	r24, 0x04	; 4
     c34:	08 95       	ret
     c36:	84 e0       	ldi	r24, 0x04	; 4
     c38:	08 95       	ret
     c3a:	84 e0       	ldi	r24, 0x04	; 4
     c3c:	08 95       	ret
     c3e:	84 e0       	ldi	r24, 0x04	; 4
     c40:	08 95       	ret
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	08 95       	ret

00000c46 <timer_setCallBack>:
     c46:	83 30       	cpi	r24, 0x03	; 3
     c48:	d8 f5       	brcc	.+118    	; 0xcc0 <timer_setCallBack+0x7a>
     c4a:	42 30       	cpi	r20, 0x02	; 2
     c4c:	d8 f5       	brcc	.+118    	; 0xcc4 <timer_setCallBack+0x7e>
     c4e:	61 15       	cp	r22, r1
     c50:	71 05       	cpc	r23, r1
     c52:	d1 f1       	breq	.+116    	; 0xcc8 <timer_setCallBack+0x82>
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	a1 f0       	breq	.+40     	; 0xc80 <timer_setCallBack+0x3a>
     c58:	18 f0       	brcs	.+6      	; 0xc60 <timer_setCallBack+0x1a>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	09 f1       	breq	.+66     	; 0xca0 <timer_setCallBack+0x5a>
     c5e:	36 c0       	rjmp	.+108    	; 0xccc <timer_setCallBack+0x86>
     c60:	41 11       	cpse	r20, r1
     c62:	06 c0       	rjmp	.+12     	; 0xc70 <timer_setCallBack+0x2a>
     c64:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <gl_callBackPtr_timer0_OVF+0x1>
     c68:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <gl_callBackPtr_timer0_OVF>
     c6c:	86 e0       	ldi	r24, 0x06	; 6
     c6e:	08 95       	ret
     c70:	41 30       	cpi	r20, 0x01	; 1
     c72:	71 f5       	brne	.+92     	; 0xcd0 <timer_setCallBack+0x8a>
     c74:	70 93 9b 00 	sts	0x009B, r23	; 0x80009b <gl_callBackPtr_timer0_COMP+0x1>
     c78:	60 93 9a 00 	sts	0x009A, r22	; 0x80009a <gl_callBackPtr_timer0_COMP>
     c7c:	86 e0       	ldi	r24, 0x06	; 6
     c7e:	08 95       	ret
     c80:	41 11       	cpse	r20, r1
     c82:	06 c0       	rjmp	.+12     	; 0xc90 <timer_setCallBack+0x4a>
     c84:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <gl_callBackPtr_timer1_OVF+0x1>
     c88:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <gl_callBackPtr_timer1_OVF>
     c8c:	86 e0       	ldi	r24, 0x06	; 6
     c8e:	08 95       	ret
     c90:	41 30       	cpi	r20, 0x01	; 1
     c92:	01 f5       	brne	.+64     	; 0xcd4 <timer_setCallBack+0x8e>
     c94:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <gl_callBackPtr_timer1_COMP+0x1>
     c98:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <gl_callBackPtr_timer1_COMP>
     c9c:	86 e0       	ldi	r24, 0x06	; 6
     c9e:	08 95       	ret
     ca0:	41 11       	cpse	r20, r1
     ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <timer_setCallBack+0x6a>
     ca4:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <gl_callBackPtr_timer2_OVF+0x1>
     ca8:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <gl_callBackPtr_timer2_OVF>
     cac:	86 e0       	ldi	r24, 0x06	; 6
     cae:	08 95       	ret
     cb0:	41 30       	cpi	r20, 0x01	; 1
     cb2:	91 f4       	brne	.+36     	; 0xcd8 <timer_setCallBack+0x92>
     cb4:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <gl_callBackPtr_timer2_COMP+0x1>
     cb8:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <gl_callBackPtr_timer2_COMP>
     cbc:	86 e0       	ldi	r24, 0x06	; 6
     cbe:	08 95       	ret
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	08 95       	ret
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	08 95       	ret
     cc8:	85 e0       	ldi	r24, 0x05	; 5
     cca:	08 95       	ret
     ccc:	86 e0       	ldi	r24, 0x06	; 6
     cce:	08 95       	ret
     cd0:	86 e0       	ldi	r24, 0x06	; 6
     cd2:	08 95       	ret
     cd4:	86 e0       	ldi	r24, 0x06	; 6
     cd6:	08 95       	ret
     cd8:	86 e0       	ldi	r24, 0x06	; 6
     cda:	08 95       	ret

00000cdc <timer_start>:
     cdc:	83 30       	cpi	r24, 0x03	; 3
     cde:	08 f0       	brcs	.+2      	; 0xce2 <timer_start+0x6>
     ce0:	d4 c0       	rjmp	.+424    	; 0xe8a <timer_start+0x1ae>
     ce2:	e8 2f       	mov	r30, r24
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	ee 55       	subi	r30, 0x5E	; 94
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	90 81       	ld	r25, Z
     cec:	91 30       	cpi	r25, 0x01	; 1
     cee:	09 f0       	breq	.+2      	; 0xcf2 <timer_start+0x16>
     cf0:	ce c0       	rjmp	.+412    	; 0xe8e <timer_start+0x1b2>
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <timer_start+0x1c>
     cf6:	48 c0       	rjmp	.+144    	; 0xd88 <timer_start+0xac>
     cf8:	20 f0       	brcs	.+8      	; 0xd02 <timer_start+0x26>
     cfa:	82 30       	cpi	r24, 0x02	; 2
     cfc:	09 f4       	brne	.+2      	; 0xd00 <timer_start+0x24>
     cfe:	87 c0       	rjmp	.+270    	; 0xe0e <timer_start+0x132>
     d00:	c8 c0       	rjmp	.+400    	; 0xe92 <timer_start+0x1b6>
     d02:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <gl_enu_tmr_clk>
     d06:	8a 30       	cpi	r24, 0x0A	; 10
     d08:	08 f0       	brcs	.+2      	; 0xd0c <timer_start+0x30>
     d0a:	c5 c0       	rjmp	.+394    	; 0xe96 <timer_start+0x1ba>
     d0c:	83 30       	cpi	r24, 0x03	; 3
     d0e:	09 f4       	brne	.+2      	; 0xd12 <timer_start+0x36>
     d10:	c4 c0       	rjmp	.+392    	; 0xe9a <timer_start+0x1be>
     d12:	85 30       	cpi	r24, 0x05	; 5
     d14:	09 f4       	brne	.+2      	; 0xd18 <timer_start+0x3c>
     d16:	c3 c0       	rjmp	.+390    	; 0xe9e <timer_start+0x1c2>
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	8a 30       	cpi	r24, 0x0A	; 10
     d1c:	91 05       	cpc	r25, r1
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <timer_start+0x46>
     d20:	c0 c0       	rjmp	.+384    	; 0xea2 <timer_start+0x1c6>
     d22:	fc 01       	movw	r30, r24
     d24:	e6 5d       	subi	r30, 0xD6	; 214
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__tablejump2__>
     d2c:	83 b7       	in	r24, 0x33	; 51
     d2e:	88 7f       	andi	r24, 0xF8	; 248
     d30:	83 bf       	out	0x33, r24	; 51
     d32:	86 e0       	ldi	r24, 0x06	; 6
     d34:	08 95       	ret
     d36:	83 b7       	in	r24, 0x33	; 51
     d38:	88 7f       	andi	r24, 0xF8	; 248
     d3a:	81 60       	ori	r24, 0x01	; 1
     d3c:	83 bf       	out	0x33, r24	; 51
     d3e:	86 e0       	ldi	r24, 0x06	; 6
     d40:	08 95       	ret
     d42:	83 b7       	in	r24, 0x33	; 51
     d44:	88 7f       	andi	r24, 0xF8	; 248
     d46:	82 60       	ori	r24, 0x02	; 2
     d48:	83 bf       	out	0x33, r24	; 51
     d4a:	86 e0       	ldi	r24, 0x06	; 6
     d4c:	08 95       	ret
     d4e:	83 b7       	in	r24, 0x33	; 51
     d50:	88 7f       	andi	r24, 0xF8	; 248
     d52:	83 60       	ori	r24, 0x03	; 3
     d54:	83 bf       	out	0x33, r24	; 51
     d56:	86 e0       	ldi	r24, 0x06	; 6
     d58:	08 95       	ret
     d5a:	83 b7       	in	r24, 0x33	; 51
     d5c:	88 7f       	andi	r24, 0xF8	; 248
     d5e:	84 60       	ori	r24, 0x04	; 4
     d60:	83 bf       	out	0x33, r24	; 51
     d62:	86 e0       	ldi	r24, 0x06	; 6
     d64:	08 95       	ret
     d66:	83 b7       	in	r24, 0x33	; 51
     d68:	88 7f       	andi	r24, 0xF8	; 248
     d6a:	85 60       	ori	r24, 0x05	; 5
     d6c:	83 bf       	out	0x33, r24	; 51
     d6e:	86 e0       	ldi	r24, 0x06	; 6
     d70:	08 95       	ret
     d72:	83 b7       	in	r24, 0x33	; 51
     d74:	88 7f       	andi	r24, 0xF8	; 248
     d76:	86 60       	ori	r24, 0x06	; 6
     d78:	83 bf       	out	0x33, r24	; 51
     d7a:	86 e0       	ldi	r24, 0x06	; 6
     d7c:	08 95       	ret
     d7e:	83 b7       	in	r24, 0x33	; 51
     d80:	87 60       	ori	r24, 0x07	; 7
     d82:	83 bf       	out	0x33, r24	; 51
     d84:	86 e0       	ldi	r24, 0x06	; 6
     d86:	08 95       	ret
     d88:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gl_enu_tmr_clk+0x1>
     d8c:	8a 30       	cpi	r24, 0x0A	; 10
     d8e:	08 f0       	brcs	.+2      	; 0xd92 <timer_start+0xb6>
     d90:	8a c0       	rjmp	.+276    	; 0xea6 <timer_start+0x1ca>
     d92:	83 30       	cpi	r24, 0x03	; 3
     d94:	09 f4       	brne	.+2      	; 0xd98 <timer_start+0xbc>
     d96:	89 c0       	rjmp	.+274    	; 0xeaa <timer_start+0x1ce>
     d98:	85 30       	cpi	r24, 0x05	; 5
     d9a:	09 f4       	brne	.+2      	; 0xd9e <timer_start+0xc2>
     d9c:	88 c0       	rjmp	.+272    	; 0xeae <timer_start+0x1d2>
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	8a 30       	cpi	r24, 0x0A	; 10
     da2:	91 05       	cpc	r25, r1
     da4:	08 f0       	brcs	.+2      	; 0xda8 <timer_start+0xcc>
     da6:	85 c0       	rjmp	.+266    	; 0xeb2 <timer_start+0x1d6>
     da8:	fc 01       	movw	r30, r24
     daa:	ec 5c       	subi	r30, 0xCC	; 204
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__tablejump2__>
     db2:	8e b5       	in	r24, 0x2e	; 46
     db4:	88 7f       	andi	r24, 0xF8	; 248
     db6:	8e bd       	out	0x2e, r24	; 46
     db8:	86 e0       	ldi	r24, 0x06	; 6
     dba:	08 95       	ret
     dbc:	8e b5       	in	r24, 0x2e	; 46
     dbe:	88 7f       	andi	r24, 0xF8	; 248
     dc0:	81 60       	ori	r24, 0x01	; 1
     dc2:	8e bd       	out	0x2e, r24	; 46
     dc4:	86 e0       	ldi	r24, 0x06	; 6
     dc6:	08 95       	ret
     dc8:	8e b5       	in	r24, 0x2e	; 46
     dca:	88 7f       	andi	r24, 0xF8	; 248
     dcc:	82 60       	ori	r24, 0x02	; 2
     dce:	8e bd       	out	0x2e, r24	; 46
     dd0:	86 e0       	ldi	r24, 0x06	; 6
     dd2:	08 95       	ret
     dd4:	8e b5       	in	r24, 0x2e	; 46
     dd6:	88 7f       	andi	r24, 0xF8	; 248
     dd8:	83 60       	ori	r24, 0x03	; 3
     dda:	8e bd       	out	0x2e, r24	; 46
     ddc:	86 e0       	ldi	r24, 0x06	; 6
     dde:	08 95       	ret
     de0:	8e b5       	in	r24, 0x2e	; 46
     de2:	88 7f       	andi	r24, 0xF8	; 248
     de4:	84 60       	ori	r24, 0x04	; 4
     de6:	8e bd       	out	0x2e, r24	; 46
     de8:	86 e0       	ldi	r24, 0x06	; 6
     dea:	08 95       	ret
     dec:	8e b5       	in	r24, 0x2e	; 46
     dee:	88 7f       	andi	r24, 0xF8	; 248
     df0:	85 60       	ori	r24, 0x05	; 5
     df2:	8e bd       	out	0x2e, r24	; 46
     df4:	86 e0       	ldi	r24, 0x06	; 6
     df6:	08 95       	ret
     df8:	8e b5       	in	r24, 0x2e	; 46
     dfa:	88 7f       	andi	r24, 0xF8	; 248
     dfc:	86 60       	ori	r24, 0x06	; 6
     dfe:	8e bd       	out	0x2e, r24	; 46
     e00:	86 e0       	ldi	r24, 0x06	; 6
     e02:	08 95       	ret
     e04:	8e b5       	in	r24, 0x2e	; 46
     e06:	87 60       	ori	r24, 0x07	; 7
     e08:	8e bd       	out	0x2e, r24	; 46
     e0a:	86 e0       	ldi	r24, 0x06	; 6
     e0c:	08 95       	ret
     e0e:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <gl_enu_tmr_clk+0x2>
     e12:	e8 30       	cpi	r30, 0x08	; 8
     e14:	08 f0       	brcs	.+2      	; 0xe18 <timer_start+0x13c>
     e16:	4f c0       	rjmp	.+158    	; 0xeb6 <timer_start+0x1da>
     e18:	8e 2f       	mov	r24, r30
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	88 30       	cpi	r24, 0x08	; 8
     e1e:	91 05       	cpc	r25, r1
     e20:	08 f0       	brcs	.+2      	; 0xe24 <timer_start+0x148>
     e22:	4b c0       	rjmp	.+150    	; 0xeba <timer_start+0x1de>
     e24:	fc 01       	movw	r30, r24
     e26:	e2 5c       	subi	r30, 0xC2	; 194
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__tablejump2__>
     e2e:	85 b5       	in	r24, 0x25	; 37
     e30:	88 7f       	andi	r24, 0xF8	; 248
     e32:	85 bd       	out	0x25, r24	; 37
     e34:	86 e0       	ldi	r24, 0x06	; 6
     e36:	08 95       	ret
     e38:	85 b5       	in	r24, 0x25	; 37
     e3a:	88 7f       	andi	r24, 0xF8	; 248
     e3c:	81 60       	ori	r24, 0x01	; 1
     e3e:	85 bd       	out	0x25, r24	; 37
     e40:	86 e0       	ldi	r24, 0x06	; 6
     e42:	08 95       	ret
     e44:	85 b5       	in	r24, 0x25	; 37
     e46:	88 7f       	andi	r24, 0xF8	; 248
     e48:	82 60       	ori	r24, 0x02	; 2
     e4a:	85 bd       	out	0x25, r24	; 37
     e4c:	86 e0       	ldi	r24, 0x06	; 6
     e4e:	08 95       	ret
     e50:	85 b5       	in	r24, 0x25	; 37
     e52:	88 7f       	andi	r24, 0xF8	; 248
     e54:	83 60       	ori	r24, 0x03	; 3
     e56:	85 bd       	out	0x25, r24	; 37
     e58:	86 e0       	ldi	r24, 0x06	; 6
     e5a:	08 95       	ret
     e5c:	85 b5       	in	r24, 0x25	; 37
     e5e:	88 7f       	andi	r24, 0xF8	; 248
     e60:	84 60       	ori	r24, 0x04	; 4
     e62:	85 bd       	out	0x25, r24	; 37
     e64:	86 e0       	ldi	r24, 0x06	; 6
     e66:	08 95       	ret
     e68:	85 b5       	in	r24, 0x25	; 37
     e6a:	88 7f       	andi	r24, 0xF8	; 248
     e6c:	85 60       	ori	r24, 0x05	; 5
     e6e:	85 bd       	out	0x25, r24	; 37
     e70:	86 e0       	ldi	r24, 0x06	; 6
     e72:	08 95       	ret
     e74:	85 b5       	in	r24, 0x25	; 37
     e76:	88 7f       	andi	r24, 0xF8	; 248
     e78:	86 60       	ori	r24, 0x06	; 6
     e7a:	85 bd       	out	0x25, r24	; 37
     e7c:	86 e0       	ldi	r24, 0x06	; 6
     e7e:	08 95       	ret
     e80:	85 b5       	in	r24, 0x25	; 37
     e82:	87 60       	ori	r24, 0x07	; 7
     e84:	85 bd       	out	0x25, r24	; 37
     e86:	86 e0       	ldi	r24, 0x06	; 6
     e88:	08 95       	ret
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	08 95       	ret
     e8e:	88 e0       	ldi	r24, 0x08	; 8
     e90:	08 95       	ret
     e92:	86 e0       	ldi	r24, 0x06	; 6
     e94:	08 95       	ret
     e96:	84 e0       	ldi	r24, 0x04	; 4
     e98:	08 95       	ret
     e9a:	84 e0       	ldi	r24, 0x04	; 4
     e9c:	08 95       	ret
     e9e:	84 e0       	ldi	r24, 0x04	; 4
     ea0:	08 95       	ret
     ea2:	86 e0       	ldi	r24, 0x06	; 6
     ea4:	08 95       	ret
     ea6:	84 e0       	ldi	r24, 0x04	; 4
     ea8:	08 95       	ret
     eaa:	84 e0       	ldi	r24, 0x04	; 4
     eac:	08 95       	ret
     eae:	84 e0       	ldi	r24, 0x04	; 4
     eb0:	08 95       	ret
     eb2:	86 e0       	ldi	r24, 0x06	; 6
     eb4:	08 95       	ret
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	08 95       	ret
     eba:	86 e0       	ldi	r24, 0x06	; 6
     ebc:	08 95       	ret

00000ebe <timer_stop>:
     ebe:	83 30       	cpi	r24, 0x03	; 3
     ec0:	e0 f4       	brcc	.+56     	; 0xefa <timer_stop+0x3c>
     ec2:	e8 2f       	mov	r30, r24
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	ee 55       	subi	r30, 0x5E	; 94
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	90 81       	ld	r25, Z
     ecc:	91 30       	cpi	r25, 0x01	; 1
     ece:	b9 f4       	brne	.+46     	; 0xefe <timer_stop+0x40>
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	49 f0       	breq	.+18     	; 0xee6 <timer_stop+0x28>
     ed4:	18 f0       	brcs	.+6      	; 0xedc <timer_stop+0x1e>
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	59 f0       	breq	.+22     	; 0xef0 <timer_stop+0x32>
     eda:	13 c0       	rjmp	.+38     	; 0xf02 <timer_stop+0x44>
     edc:	83 b7       	in	r24, 0x33	; 51
     ede:	88 7f       	andi	r24, 0xF8	; 248
     ee0:	83 bf       	out	0x33, r24	; 51
     ee2:	86 e0       	ldi	r24, 0x06	; 6
     ee4:	08 95       	ret
     ee6:	8e b5       	in	r24, 0x2e	; 46
     ee8:	88 7f       	andi	r24, 0xF8	; 248
     eea:	8e bd       	out	0x2e, r24	; 46
     eec:	86 e0       	ldi	r24, 0x06	; 6
     eee:	08 95       	ret
     ef0:	85 b5       	in	r24, 0x25	; 37
     ef2:	88 7f       	andi	r24, 0xF8	; 248
     ef4:	85 bd       	out	0x25, r24	; 37
     ef6:	86 e0       	ldi	r24, 0x06	; 6
     ef8:	08 95       	ret
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	08 95       	ret
     efe:	88 e0       	ldi	r24, 0x08	; 8
     f00:	08 95       	ret
     f02:	86 e0       	ldi	r24, 0x06	; 6
     f04:	08 95       	ret

00000f06 <__vector_11>:

/*===============ISR HANDLERS================*/
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR_HANDLER(TMR0_OVF)
{
     f06:	1f 92       	push	r1
     f08:	0f 92       	push	r0
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	0f 92       	push	r0
     f0e:	11 24       	eor	r1, r1
     f10:	2f 93       	push	r18
     f12:	3f 93       	push	r19
     f14:	4f 93       	push	r20
     f16:	5f 93       	push	r21
     f18:	6f 93       	push	r22
     f1a:	7f 93       	push	r23
     f1c:	8f 93       	push	r24
     f1e:	9f 93       	push	r25
     f20:	af 93       	push	r26
     f22:	bf 93       	push	r27
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
	if(gl_callBackPtr_timer0_OVF != NULL_PTR)
     f28:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <gl_callBackPtr_timer0_OVF>
     f2c:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <gl_callBackPtr_timer0_OVF+0x1>
     f30:	30 97       	sbiw	r30, 0x00	; 0
     f32:	09 f0       	breq	.+2      	; 0xf36 <__vector_11+0x30>
	{
		gl_callBackPtr_timer0_OVF();
     f34:	09 95       	icall
	}
}
     f36:	ff 91       	pop	r31
     f38:	ef 91       	pop	r30
     f3a:	bf 91       	pop	r27
     f3c:	af 91       	pop	r26
     f3e:	9f 91       	pop	r25
     f40:	8f 91       	pop	r24
     f42:	7f 91       	pop	r23
     f44:	6f 91       	pop	r22
     f46:	5f 91       	pop	r21
     f48:	4f 91       	pop	r20
     f4a:	3f 91       	pop	r19
     f4c:	2f 91       	pop	r18
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	0f 90       	pop	r0
     f54:	1f 90       	pop	r1
     f56:	18 95       	reti

00000f58 <__vector_9>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR_HANDLER(TMR1_OVF)
{
     f58:	1f 92       	push	r1
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	2f 93       	push	r18
     f64:	3f 93       	push	r19
     f66:	4f 93       	push	r20
     f68:	5f 93       	push	r21
     f6a:	6f 93       	push	r22
     f6c:	7f 93       	push	r23
     f6e:	8f 93       	push	r24
     f70:	9f 93       	push	r25
     f72:	af 93       	push	r26
     f74:	bf 93       	push	r27
     f76:	ef 93       	push	r30
     f78:	ff 93       	push	r31
	if(gl_callBackPtr_timer1_OVF != NULL_PTR)
     f7a:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <gl_callBackPtr_timer1_OVF>
     f7e:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <gl_callBackPtr_timer1_OVF+0x1>
     f82:	30 97       	sbiw	r30, 0x00	; 0
     f84:	09 f0       	breq	.+2      	; 0xf88 <__vector_9+0x30>
	{
		gl_callBackPtr_timer1_OVF();
     f86:	09 95       	icall
	}
}
     f88:	ff 91       	pop	r31
     f8a:	ef 91       	pop	r30
     f8c:	bf 91       	pop	r27
     f8e:	af 91       	pop	r26
     f90:	9f 91       	pop	r25
     f92:	8f 91       	pop	r24
     f94:	7f 91       	pop	r23
     f96:	6f 91       	pop	r22
     f98:	5f 91       	pop	r21
     f9a:	4f 91       	pop	r20
     f9c:	3f 91       	pop	r19
     f9e:	2f 91       	pop	r18
     fa0:	0f 90       	pop	r0
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	0f 90       	pop	r0
     fa6:	1f 90       	pop	r1
     fa8:	18 95       	reti

00000faa <__vector_5>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR_HANDLER(TMR2_OVF)
{
     faa:	1f 92       	push	r1
     fac:	0f 92       	push	r0
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	0f 92       	push	r0
     fb2:	11 24       	eor	r1, r1
     fb4:	2f 93       	push	r18
     fb6:	3f 93       	push	r19
     fb8:	4f 93       	push	r20
     fba:	5f 93       	push	r21
     fbc:	6f 93       	push	r22
     fbe:	7f 93       	push	r23
     fc0:	8f 93       	push	r24
     fc2:	9f 93       	push	r25
     fc4:	af 93       	push	r26
     fc6:	bf 93       	push	r27
     fc8:	ef 93       	push	r30
     fca:	ff 93       	push	r31
	if(gl_callBackPtr_timer2_OVF != NULL_PTR)
     fcc:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <gl_callBackPtr_timer2_OVF>
     fd0:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <gl_callBackPtr_timer2_OVF+0x1>
     fd4:	30 97       	sbiw	r30, 0x00	; 0
     fd6:	09 f0       	breq	.+2      	; 0xfda <__vector_5+0x30>
	{
		gl_callBackPtr_timer2_OVF();
     fd8:	09 95       	icall
	}
}
     fda:	ff 91       	pop	r31
     fdc:	ef 91       	pop	r30
     fde:	bf 91       	pop	r27
     fe0:	af 91       	pop	r26
     fe2:	9f 91       	pop	r25
     fe4:	8f 91       	pop	r24
     fe6:	7f 91       	pop	r23
     fe8:	6f 91       	pop	r22
     fea:	5f 91       	pop	r21
     fec:	4f 91       	pop	r20
     fee:	3f 91       	pop	r19
     ff0:	2f 91       	pop	r18
     ff2:	0f 90       	pop	r0
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	0f 90       	pop	r0
     ff8:	1f 90       	pop	r1
     ffa:	18 95       	reti

00000ffc <__vector_10>:
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR_HANDLER(TMR0_CMP)
{
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	2f 93       	push	r18
    1008:	3f 93       	push	r19
    100a:	4f 93       	push	r20
    100c:	5f 93       	push	r21
    100e:	6f 93       	push	r22
    1010:	7f 93       	push	r23
    1012:	8f 93       	push	r24
    1014:	9f 93       	push	r25
    1016:	af 93       	push	r26
    1018:	bf 93       	push	r27
    101a:	ef 93       	push	r30
    101c:	ff 93       	push	r31
	if(gl_callBackPtr_timer0_COMP != NULL_PTR)
    101e:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <gl_callBackPtr_timer0_COMP>
    1022:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <gl_callBackPtr_timer0_COMP+0x1>
    1026:	30 97       	sbiw	r30, 0x00	; 0
    1028:	09 f0       	breq	.+2      	; 0x102c <__vector_10+0x30>
	{
		gl_callBackPtr_timer0_COMP();
    102a:	09 95       	icall
	}
}
    102c:	ff 91       	pop	r31
    102e:	ef 91       	pop	r30
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti

0000104e <__vector_7>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR_HANDLER(TMR1_CMP_A)
{
    104e:	1f 92       	push	r1
    1050:	0f 92       	push	r0
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	0f 92       	push	r0
    1056:	11 24       	eor	r1, r1
    1058:	2f 93       	push	r18
    105a:	3f 93       	push	r19
    105c:	4f 93       	push	r20
    105e:	5f 93       	push	r21
    1060:	6f 93       	push	r22
    1062:	7f 93       	push	r23
    1064:	8f 93       	push	r24
    1066:	9f 93       	push	r25
    1068:	af 93       	push	r26
    106a:	bf 93       	push	r27
    106c:	ef 93       	push	r30
    106e:	ff 93       	push	r31
	if(gl_callBackPtr_timer1_COMP != NULL_PTR)
    1070:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <gl_callBackPtr_timer1_COMP>
    1074:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <gl_callBackPtr_timer1_COMP+0x1>
    1078:	30 97       	sbiw	r30, 0x00	; 0
    107a:	09 f0       	breq	.+2      	; 0x107e <__vector_7+0x30>
	{
		gl_callBackPtr_timer1_COMP();
    107c:	09 95       	icall
	}
}
    107e:	ff 91       	pop	r31
    1080:	ef 91       	pop	r30
    1082:	bf 91       	pop	r27
    1084:	af 91       	pop	r26
    1086:	9f 91       	pop	r25
    1088:	8f 91       	pop	r24
    108a:	7f 91       	pop	r23
    108c:	6f 91       	pop	r22
    108e:	5f 91       	pop	r21
    1090:	4f 91       	pop	r20
    1092:	3f 91       	pop	r19
    1094:	2f 91       	pop	r18
    1096:	0f 90       	pop	r0
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	0f 90       	pop	r0
    109c:	1f 90       	pop	r1
    109e:	18 95       	reti

000010a0 <__vector_4>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR_HANDLER(TMR2_CMP)
{
    10a0:	1f 92       	push	r1
    10a2:	0f 92       	push	r0
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	0f 92       	push	r0
    10a8:	11 24       	eor	r1, r1
    10aa:	2f 93       	push	r18
    10ac:	3f 93       	push	r19
    10ae:	4f 93       	push	r20
    10b0:	5f 93       	push	r21
    10b2:	6f 93       	push	r22
    10b4:	7f 93       	push	r23
    10b6:	8f 93       	push	r24
    10b8:	9f 93       	push	r25
    10ba:	af 93       	push	r26
    10bc:	bf 93       	push	r27
    10be:	ef 93       	push	r30
    10c0:	ff 93       	push	r31
	if(gl_callBackPtr_timer2_COMP != NULL_PTR)
    10c2:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <gl_callBackPtr_timer2_COMP>
    10c6:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <gl_callBackPtr_timer2_COMP+0x1>
    10ca:	30 97       	sbiw	r30, 0x00	; 0
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <__vector_4+0x30>
	{
		gl_callBackPtr_timer2_COMP(); 
    10ce:	09 95       	icall
	}
    10d0:	ff 91       	pop	r31
    10d2:	ef 91       	pop	r30
    10d4:	bf 91       	pop	r27
    10d6:	af 91       	pop	r26
    10d8:	9f 91       	pop	r25
    10da:	8f 91       	pop	r24
    10dc:	7f 91       	pop	r23
    10de:	6f 91       	pop	r22
    10e0:	5f 91       	pop	r21
    10e2:	4f 91       	pop	r20
    10e4:	3f 91       	pop	r19
    10e6:	2f 91       	pop	r18
    10e8:	0f 90       	pop	r0
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	0f 90       	pop	r0
    10ee:	1f 90       	pop	r1
    10f0:	18 95       	reti

000010f2 <calc_prescaler>:

/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
    10f2:	cf 92       	push	r12
    10f4:	df 92       	push	r13
    10f6:	ef 92       	push	r14
    10f8:	ff 92       	push	r15
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	6b 01       	movw	r12, r22
    1100:	7c 01       	movw	r14, r24
	BOOLEAN bo_return_value = TRUE;
	if(enu_time_unit == ENU_MICRO_SECOND)
    1102:	21 11       	cpse	r18, r1
    1104:	65 c1       	rjmp	.+714    	; 0x13d0 <calc_prescaler+0x2de>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    1106:	41 11       	cpse	r20, r1
    1108:	69 c0       	rjmp	.+210    	; 0x11dc <calc_prescaler+0xea>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	57 e4       	ldi	r21, 0x47	; 71
    1112:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1116:	18 16       	cp	r1, r24
    1118:	0c f4       	brge	.+2      	; 0x111c <calc_prescaler+0x2a>
    111a:	59 c0       	rjmp	.+178    	; 0x11ce <calc_prescaler+0xdc>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	52 e4       	ldi	r21, 0x42	; 66
    1124:	c7 01       	movw	r24, r14
    1126:	b6 01       	movw	r22, r12
    1128:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    112c:	18 16       	cp	r1, r24
    112e:	34 f0       	brlt	.+12     	; 0x113c <calc_prescaler+0x4a>
				*ptr_u16_prescale=P_1;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	f8 01       	movw	r30, r16
    1136:	91 83       	std	Z+1, r25	; 0x01
    1138:	80 83       	st	Z, r24
    113a:	21 c4       	rjmp	.+2114   	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e8       	ldi	r20, 0x80	; 128
    1142:	53 e4       	ldi	r21, 0x43	; 67
    1144:	c7 01       	movw	r24, r14
    1146:	b6 01       	movw	r22, r12
    1148:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    114c:	18 16       	cp	r1, r24
    114e:	3c f0       	brlt	.+14     	; 0x115e <calc_prescaler+0x6c>
				*ptr_u16_prescale=P_8;
    1150:	88 e0       	ldi	r24, 0x08	; 8
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	f8 01       	movw	r30, r16
    1156:	91 83       	std	Z+1, r25	; 0x01
    1158:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	10 c4       	rjmp	.+2080   	; 0x197e <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	55 e4       	ldi	r21, 0x45	; 69
    1166:	c7 01       	movw	r24, r14
    1168:	b6 01       	movw	r22, r12
    116a:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    116e:	18 16       	cp	r1, r24
    1170:	3c f0       	brlt	.+14     	; 0x1180 <calc_prescaler+0x8e>
				*ptr_u16_prescale=P_64;
    1172:	80 e4       	ldi	r24, 0x40	; 64
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	f8 01       	movw	r30, r16
    1178:	91 83       	std	Z+1, r25	; 0x01
    117a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	ff c3       	rjmp	.+2046   	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	56 e4       	ldi	r21, 0x46	; 70
    1188:	c7 01       	movw	r24, r14
    118a:	b6 01       	movw	r22, r12
    118c:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1190:	18 16       	cp	r1, r24
    1192:	3c f0       	brlt	.+14     	; 0x11a2 <calc_prescaler+0xb0>
				*ptr_u16_prescale=P_256;
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	f8 01       	movw	r30, r16
    119a:	91 83       	std	Z+1, r25	; 0x01
    119c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	ee c3       	rjmp	.+2012   	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024))
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	57 e4       	ldi	r21, 0x47	; 71
    11aa:	c7 01       	movw	r24, r14
    11ac:	b6 01       	movw	r22, r12
    11ae:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    11b2:	18 16       	cp	r1, r24
    11b4:	3c f0       	brlt	.+14     	; 0x11c4 <calc_prescaler+0xd2>
				*ptr_u16_prescale=P_1024;
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	94 e0       	ldi	r25, 0x04	; 4
    11ba:	f8 01       	movw	r30, r16
    11bc:	91 83       	std	Z+1, r25	; 0x01
    11be:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	dd c3       	rjmp	.+1978   	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    11c4:	f8 01       	movw	r30, r16
    11c6:	11 82       	std	Z+1, r1	; 0x01
    11c8:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	d8 c3       	rjmp	.+1968   	; 0x197e <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    11ce:	8c ed       	ldi	r24, 0xDC	; 220
    11d0:	95 e0       	ldi	r25, 0x05	; 5
    11d2:	f8 01       	movw	r30, r16
    11d4:	91 83       	std	Z+1, r25	; 0x01
    11d6:	80 83       	st	Z, r24
				bo_return_value = TRUE;	
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	d1 c3       	rjmp	.+1954   	; 0x197e <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    11dc:	41 30       	cpi	r20, 0x01	; 1
    11de:	09 f0       	breq	.+2      	; 0x11e2 <calc_prescaler+0xf0>
    11e0:	69 c0       	rjmp	.+210    	; 0x12b4 <calc_prescaler+0x1c2>
		{
			if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024) )
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	5b e4       	ldi	r21, 0x4B	; 75
    11ea:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    11ee:	18 16       	cp	r1, r24
    11f0:	0c f4       	brge	.+2      	; 0x11f4 <calc_prescaler+0x102>
    11f2:	59 c0       	rjmp	.+178    	; 0x12a6 <calc_prescaler+0x1b4>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_US(P_1))
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	56 e4       	ldi	r21, 0x46	; 70
    11fc:	c7 01       	movw	r24, r14
    11fe:	b6 01       	movw	r22, r12
    1200:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1204:	18 16       	cp	r1, r24
    1206:	34 f0       	brlt	.+12     	; 0x1214 <calc_prescaler+0x122>
				*ptr_u16_prescale=P_1;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	f8 01       	movw	r30, r16
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	80 83       	st	Z, r24
    1212:	b5 c3       	rjmp	.+1898   	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e8       	ldi	r20, 0x80	; 128
    121a:	57 e4       	ldi	r21, 0x47	; 71
    121c:	c7 01       	movw	r24, r14
    121e:	b6 01       	movw	r22, r12
    1220:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1224:	18 16       	cp	r1, r24
    1226:	3c f0       	brlt	.+14     	; 0x1236 <calc_prescaler+0x144>
				*ptr_u16_prescale=P_8;
    1228:	88 e0       	ldi	r24, 0x08	; 8
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	f8 01       	movw	r30, r16
    122e:	91 83       	std	Z+1, r25	; 0x01
    1230:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	a4 c3       	rjmp	.+1864   	; 0x197e <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	59 e4       	ldi	r21, 0x49	; 73
    123e:	c7 01       	movw	r24, r14
    1240:	b6 01       	movw	r22, r12
    1242:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1246:	18 16       	cp	r1, r24
    1248:	3c f0       	brlt	.+14     	; 0x1258 <calc_prescaler+0x166>
				*ptr_u16_prescale=P_64;
    124a:	80 e4       	ldi	r24, 0x40	; 64
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	f8 01       	movw	r30, r16
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	93 c3       	rjmp	.+1830   	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	5a e4       	ldi	r21, 0x4A	; 74
    1260:	c7 01       	movw	r24, r14
    1262:	b6 01       	movw	r22, r12
    1264:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1268:	18 16       	cp	r1, r24
    126a:	3c f0       	brlt	.+14     	; 0x127a <calc_prescaler+0x188>
				*ptr_u16_prescale=P_256;
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	f8 01       	movw	r30, r16
    1272:	91 83       	std	Z+1, r25	; 0x01
    1274:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	82 c3       	rjmp	.+1796   	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024))
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	5b e4       	ldi	r21, 0x4B	; 75
    1282:	c7 01       	movw	r24, r14
    1284:	b6 01       	movw	r22, r12
    1286:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    128a:	18 16       	cp	r1, r24
    128c:	3c f0       	brlt	.+14     	; 0x129c <calc_prescaler+0x1aa>
				*ptr_u16_prescale=P_1024;
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	94 e0       	ldi	r25, 0x04	; 4
    1292:	f8 01       	movw	r30, r16
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	71 c3       	rjmp	.+1762   	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    129c:	f8 01       	movw	r30, r16
    129e:	11 82       	std	Z+1, r1	; 0x01
    12a0:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	6c c3       	rjmp	.+1752   	; 0x197e <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    12a6:	8c ed       	ldi	r24, 0xDC	; 220
    12a8:	95 e0       	ldi	r25, 0x05	; 5
    12aa:	f8 01       	movw	r30, r16
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	65 c3       	rjmp	.+1738   	; 0x197e <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    12b4:	42 30       	cpi	r20, 0x02	; 2
    12b6:	09 f0       	breq	.+2      	; 0x12ba <calc_prescaler+0x1c8>
    12b8:	5b c3       	rjmp	.+1718   	; 0x1970 <calc_prescaler+0x87e>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	57 e4       	ldi	r21, 0x47	; 71
    12c2:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    12c6:	18 16       	cp	r1, r24
    12c8:	0c f4       	brge	.+2      	; 0x12cc <calc_prescaler+0x1da>
    12ca:	7b c0       	rjmp	.+246    	; 0x13c2 <calc_prescaler+0x2d0>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e0       	ldi	r20, 0x00	; 0
    12d2:	52 e4       	ldi	r21, 0x42	; 66
    12d4:	c7 01       	movw	r24, r14
    12d6:	b6 01       	movw	r22, r12
    12d8:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    12dc:	18 16       	cp	r1, r24
    12de:	34 f0       	brlt	.+12     	; 0x12ec <calc_prescaler+0x1fa>
				*ptr_u16_prescale=P_1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	f8 01       	movw	r30, r16
    12e6:	91 83       	std	Z+1, r25	; 0x01
    12e8:	80 83       	st	Z, r24
    12ea:	49 c3       	rjmp	.+1682   	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e8       	ldi	r20, 0x80	; 128
    12f2:	53 e4       	ldi	r21, 0x43	; 67
    12f4:	c7 01       	movw	r24, r14
    12f6:	b6 01       	movw	r22, r12
    12f8:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    12fc:	18 16       	cp	r1, r24
    12fe:	3c f0       	brlt	.+14     	; 0x130e <calc_prescaler+0x21c>
				*ptr_u16_prescale=P_8;
    1300:	88 e0       	ldi	r24, 0x08	; 8
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	f8 01       	movw	r30, r16
    1306:	91 83       	std	Z+1, r25	; 0x01
    1308:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	38 c3       	rjmp	.+1648   	; 0x197e <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e8       	ldi	r20, 0x80	; 128
    1314:	54 e4       	ldi	r21, 0x44	; 68
    1316:	c7 01       	movw	r24, r14
    1318:	b6 01       	movw	r22, r12
    131a:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    131e:	18 16       	cp	r1, r24
    1320:	3c f0       	brlt	.+14     	; 0x1330 <calc_prescaler+0x23e>
				*ptr_u16_prescale=P_32;
    1322:	80 e2       	ldi	r24, 0x20	; 32
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	f8 01       	movw	r30, r16
    1328:	91 83       	std	Z+1, r25	; 0x01
    132a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	27 c3       	rjmp	.+1614   	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	55 e4       	ldi	r21, 0x45	; 69
    1338:	c7 01       	movw	r24, r14
    133a:	b6 01       	movw	r22, r12
    133c:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1340:	18 16       	cp	r1, r24
    1342:	3c f0       	brlt	.+14     	; 0x1352 <calc_prescaler+0x260>
				*ptr_u16_prescale=P_64;
    1344:	80 e4       	ldi	r24, 0x40	; 64
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	f8 01       	movw	r30, r16
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	16 c3       	rjmp	.+1580   	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	55 e4       	ldi	r21, 0x45	; 69
    135a:	c7 01       	movw	r24, r14
    135c:	b6 01       	movw	r22, r12
    135e:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1362:	18 16       	cp	r1, r24
    1364:	3c f0       	brlt	.+14     	; 0x1374 <calc_prescaler+0x282>
				*ptr_u16_prescale=P_128;
    1366:	80 e8       	ldi	r24, 0x80	; 128
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	f8 01       	movw	r30, r16
    136c:	91 83       	std	Z+1, r25	; 0x01
    136e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	05 c3       	rjmp	.+1546   	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	56 e4       	ldi	r21, 0x46	; 70
    137c:	c7 01       	movw	r24, r14
    137e:	b6 01       	movw	r22, r12
    1380:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1384:	18 16       	cp	r1, r24
    1386:	3c f0       	brlt	.+14     	; 0x1396 <calc_prescaler+0x2a4>
				*ptr_u16_prescale=P_256;
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	f8 01       	movw	r30, r16
    138e:	91 83       	std	Z+1, r25	; 0x01
    1390:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	f4 c2       	rjmp	.+1512   	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_US(P_1024))
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	57 e4       	ldi	r21, 0x47	; 71
    139e:	c7 01       	movw	r24, r14
    13a0:	b6 01       	movw	r22, r12
    13a2:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    13a6:	18 16       	cp	r1, r24
    13a8:	3c f0       	brlt	.+14     	; 0x13b8 <calc_prescaler+0x2c6>
				*ptr_u16_prescale=P_1024;
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	94 e0       	ldi	r25, 0x04	; 4
    13ae:	f8 01       	movw	r30, r16
    13b0:	91 83       	std	Z+1, r25	; 0x01
    13b2:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	e3 c2       	rjmp	.+1478   	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    13b8:	f8 01       	movw	r30, r16
    13ba:	11 82       	std	Z+1, r1	; 0x01
    13bc:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	de c2       	rjmp	.+1468   	; 0x197e <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    13c2:	8c ed       	ldi	r24, 0xDC	; 220
    13c4:	95 e0       	ldi	r25, 0x05	; 5
    13c6:	f8 01       	movw	r30, r16
    13c8:	91 83       	std	Z+1, r25	; 0x01
    13ca:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	d7 c2       	rjmp	.+1454   	; 0x197e <calc_prescaler+0x88c>
		else
		{
			bo_return_value = FALSE;
		}
	}
	else if (enu_time_unit == ENU_MILLI_SECOND)
    13d0:	21 30       	cpi	r18, 0x01	; 1
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <calc_prescaler+0x2e4>
    13d4:	65 c1       	rjmp	.+714    	; 0x16a0 <calc_prescaler+0x5ae>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    13d6:	41 11       	cpse	r20, r1
    13d8:	69 c0       	rjmp	.+210    	; 0x14ac <calc_prescaler+0x3ba>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024) )
    13da:	2f e6       	ldi	r18, 0x6F	; 111
    13dc:	32 e1       	ldi	r19, 0x12	; 18
    13de:	43 e0       	ldi	r20, 0x03	; 3
    13e0:	52 e4       	ldi	r21, 0x42	; 66
    13e2:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    13e6:	18 16       	cp	r1, r24
    13e8:	0c f4       	brge	.+2      	; 0x13ec <calc_prescaler+0x2fa>
    13ea:	59 c0       	rjmp	.+178    	; 0x149e <calc_prescaler+0x3ac>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
    13ec:	2f e6       	ldi	r18, 0x6F	; 111
    13ee:	32 e1       	ldi	r19, 0x12	; 18
    13f0:	43 e0       	ldi	r20, 0x03	; 3
    13f2:	5d e3       	ldi	r21, 0x3D	; 61
    13f4:	c7 01       	movw	r24, r14
    13f6:	b6 01       	movw	r22, r12
    13f8:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    13fc:	18 16       	cp	r1, r24
    13fe:	34 f0       	brlt	.+12     	; 0x140c <calc_prescaler+0x31a>
				*ptr_u16_prescale=P_1;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	f8 01       	movw	r30, r16
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
    140a:	b9 c2       	rjmp	.+1394   	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
    140c:	2f e6       	ldi	r18, 0x6F	; 111
    140e:	32 e1       	ldi	r19, 0x12	; 18
    1410:	43 e8       	ldi	r20, 0x83	; 131
    1412:	5e e3       	ldi	r21, 0x3E	; 62
    1414:	c7 01       	movw	r24, r14
    1416:	b6 01       	movw	r22, r12
    1418:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    141c:	18 16       	cp	r1, r24
    141e:	3c f0       	brlt	.+14     	; 0x142e <calc_prescaler+0x33c>
				*ptr_u16_prescale=P_8;
    1420:	88 e0       	ldi	r24, 0x08	; 8
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	f8 01       	movw	r30, r16
    1426:	91 83       	std	Z+1, r25	; 0x01
    1428:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	a8 c2       	rjmp	.+1360   	; 0x197e <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
    142e:	2f e6       	ldi	r18, 0x6F	; 111
    1430:	32 e1       	ldi	r19, 0x12	; 18
    1432:	43 e0       	ldi	r20, 0x03	; 3
    1434:	50 e4       	ldi	r21, 0x40	; 64
    1436:	c7 01       	movw	r24, r14
    1438:	b6 01       	movw	r22, r12
    143a:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    143e:	18 16       	cp	r1, r24
    1440:	3c f0       	brlt	.+14     	; 0x1450 <calc_prescaler+0x35e>
				*ptr_u16_prescale=P_64;
    1442:	80 e4       	ldi	r24, 0x40	; 64
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	f8 01       	movw	r30, r16
    1448:	91 83       	std	Z+1, r25	; 0x01
    144a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	97 c2       	rjmp	.+1326   	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
    1450:	2f e6       	ldi	r18, 0x6F	; 111
    1452:	32 e1       	ldi	r19, 0x12	; 18
    1454:	43 e0       	ldi	r20, 0x03	; 3
    1456:	51 e4       	ldi	r21, 0x41	; 65
    1458:	c7 01       	movw	r24, r14
    145a:	b6 01       	movw	r22, r12
    145c:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1460:	18 16       	cp	r1, r24
    1462:	3c f0       	brlt	.+14     	; 0x1472 <calc_prescaler+0x380>
				*ptr_u16_prescale=P_256;
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	91 e0       	ldi	r25, 0x01	; 1
    1468:	f8 01       	movw	r30, r16
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	86 c2       	rjmp	.+1292   	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024))
    1472:	2f e6       	ldi	r18, 0x6F	; 111
    1474:	32 e1       	ldi	r19, 0x12	; 18
    1476:	43 e0       	ldi	r20, 0x03	; 3
    1478:	52 e4       	ldi	r21, 0x42	; 66
    147a:	c7 01       	movw	r24, r14
    147c:	b6 01       	movw	r22, r12
    147e:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1482:	18 16       	cp	r1, r24
    1484:	3c f0       	brlt	.+14     	; 0x1494 <calc_prescaler+0x3a2>
				*ptr_u16_prescale=P_1024;
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	94 e0       	ldi	r25, 0x04	; 4
    148a:	f8 01       	movw	r30, r16
    148c:	91 83       	std	Z+1, r25	; 0x01
    148e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	75 c2       	rjmp	.+1258   	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1494:	f8 01       	movw	r30, r16
    1496:	11 82       	std	Z+1, r1	; 0x01
    1498:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	70 c2       	rjmp	.+1248   	; 0x197e <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    149e:	8c ed       	ldi	r24, 0xDC	; 220
    14a0:	95 e0       	ldi	r25, 0x05	; 5
    14a2:	f8 01       	movw	r30, r16
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	69 c2       	rjmp	.+1234   	; 0x197e <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    14ac:	41 30       	cpi	r20, 0x01	; 1
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <calc_prescaler+0x3c0>
    14b0:	69 c0       	rjmp	.+210    	; 0x1584 <calc_prescaler+0x492>
		{

			if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024) )
    14b2:	2f e6       	ldi	r18, 0x6F	; 111
    14b4:	32 e1       	ldi	r19, 0x12	; 18
    14b6:	43 e0       	ldi	r20, 0x03	; 3
    14b8:	56 e4       	ldi	r21, 0x46	; 70
    14ba:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    14be:	18 16       	cp	r1, r24
    14c0:	0c f4       	brge	.+2      	; 0x14c4 <calc_prescaler+0x3d2>
    14c2:	59 c0       	rjmp	.+178    	; 0x1576 <calc_prescaler+0x484>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1))
    14c4:	2f e6       	ldi	r18, 0x6F	; 111
    14c6:	32 e1       	ldi	r19, 0x12	; 18
    14c8:	43 e0       	ldi	r20, 0x03	; 3
    14ca:	51 e4       	ldi	r21, 0x41	; 65
    14cc:	c7 01       	movw	r24, r14
    14ce:	b6 01       	movw	r22, r12
    14d0:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    14d4:	18 16       	cp	r1, r24
    14d6:	34 f0       	brlt	.+12     	; 0x14e4 <calc_prescaler+0x3f2>
				*ptr_u16_prescale=P_1;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	f8 01       	movw	r30, r16
    14de:	91 83       	std	Z+1, r25	; 0x01
    14e0:	80 83       	st	Z, r24
    14e2:	4d c2       	rjmp	.+1178   	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
    14e4:	2f e6       	ldi	r18, 0x6F	; 111
    14e6:	32 e1       	ldi	r19, 0x12	; 18
    14e8:	43 e8       	ldi	r20, 0x83	; 131
    14ea:	52 e4       	ldi	r21, 0x42	; 66
    14ec:	c7 01       	movw	r24, r14
    14ee:	b6 01       	movw	r22, r12
    14f0:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    14f4:	18 16       	cp	r1, r24
    14f6:	3c f0       	brlt	.+14     	; 0x1506 <calc_prescaler+0x414>
				*ptr_u16_prescale=P_8;
    14f8:	88 e0       	ldi	r24, 0x08	; 8
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	f8 01       	movw	r30, r16
    14fe:	91 83       	std	Z+1, r25	; 0x01
    1500:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	3c c2       	rjmp	.+1144   	; 0x197e <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
    1506:	2f e6       	ldi	r18, 0x6F	; 111
    1508:	32 e1       	ldi	r19, 0x12	; 18
    150a:	43 e0       	ldi	r20, 0x03	; 3
    150c:	54 e4       	ldi	r21, 0x44	; 68
    150e:	c7 01       	movw	r24, r14
    1510:	b6 01       	movw	r22, r12
    1512:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1516:	18 16       	cp	r1, r24
    1518:	3c f0       	brlt	.+14     	; 0x1528 <calc_prescaler+0x436>
				*ptr_u16_prescale=P_64;
    151a:	80 e4       	ldi	r24, 0x40	; 64
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	f8 01       	movw	r30, r16
    1520:	91 83       	std	Z+1, r25	; 0x01
    1522:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	2b c2       	rjmp	.+1110   	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
    1528:	2f e6       	ldi	r18, 0x6F	; 111
    152a:	32 e1       	ldi	r19, 0x12	; 18
    152c:	43 e0       	ldi	r20, 0x03	; 3
    152e:	55 e4       	ldi	r21, 0x45	; 69
    1530:	c7 01       	movw	r24, r14
    1532:	b6 01       	movw	r22, r12
    1534:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1538:	18 16       	cp	r1, r24
    153a:	3c f0       	brlt	.+14     	; 0x154a <calc_prescaler+0x458>
				*ptr_u16_prescale=P_256;
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	f8 01       	movw	r30, r16
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	1a c2       	rjmp	.+1076   	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024))
    154a:	2f e6       	ldi	r18, 0x6F	; 111
    154c:	32 e1       	ldi	r19, 0x12	; 18
    154e:	43 e0       	ldi	r20, 0x03	; 3
    1550:	56 e4       	ldi	r21, 0x46	; 70
    1552:	c7 01       	movw	r24, r14
    1554:	b6 01       	movw	r22, r12
    1556:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    155a:	18 16       	cp	r1, r24
    155c:	3c f0       	brlt	.+14     	; 0x156c <calc_prescaler+0x47a>
				*ptr_u16_prescale=P_1024;
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	94 e0       	ldi	r25, 0x04	; 4
    1562:	f8 01       	movw	r30, r16
    1564:	91 83       	std	Z+1, r25	; 0x01
    1566:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	09 c2       	rjmp	.+1042   	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale= P_0;
    156c:	f8 01       	movw	r30, r16
    156e:	11 82       	std	Z+1, r1	; 0x01
    1570:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	04 c2       	rjmp	.+1032   	; 0x197e <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale= P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1576:	8c ed       	ldi	r24, 0xDC	; 220
    1578:	95 e0       	ldi	r25, 0x05	; 5
    157a:	f8 01       	movw	r30, r16
    157c:	91 83       	std	Z+1, r25	; 0x01
    157e:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	fd c1       	rjmp	.+1018   	; 0x197e <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    1584:	42 30       	cpi	r20, 0x02	; 2
    1586:	09 f0       	breq	.+2      	; 0x158a <calc_prescaler+0x498>
    1588:	f5 c1       	rjmp	.+1002   	; 0x1974 <calc_prescaler+0x882>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	57 e4       	ldi	r21, 0x47	; 71
    1592:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1596:	18 16       	cp	r1, r24
    1598:	0c f4       	brge	.+2      	; 0x159c <calc_prescaler+0x4aa>
    159a:	7b c0       	rjmp	.+246    	; 0x1692 <calc_prescaler+0x5a0>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
    159c:	2f e6       	ldi	r18, 0x6F	; 111
    159e:	32 e1       	ldi	r19, 0x12	; 18
    15a0:	43 e0       	ldi	r20, 0x03	; 3
    15a2:	5d e3       	ldi	r21, 0x3D	; 61
    15a4:	c7 01       	movw	r24, r14
    15a6:	b6 01       	movw	r22, r12
    15a8:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    15ac:	18 16       	cp	r1, r24
    15ae:	34 f0       	brlt	.+12     	; 0x15bc <calc_prescaler+0x4ca>
				*ptr_u16_prescale=P_1;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	f8 01       	movw	r30, r16
    15b6:	91 83       	std	Z+1, r25	; 0x01
    15b8:	80 83       	st	Z, r24
    15ba:	e1 c1       	rjmp	.+962    	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
    15bc:	2f e6       	ldi	r18, 0x6F	; 111
    15be:	32 e1       	ldi	r19, 0x12	; 18
    15c0:	43 e8       	ldi	r20, 0x83	; 131
    15c2:	5e e3       	ldi	r21, 0x3E	; 62
    15c4:	c7 01       	movw	r24, r14
    15c6:	b6 01       	movw	r22, r12
    15c8:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    15cc:	18 16       	cp	r1, r24
    15ce:	3c f0       	brlt	.+14     	; 0x15de <calc_prescaler+0x4ec>
				*ptr_u16_prescale=P_8;
    15d0:	88 e0       	ldi	r24, 0x08	; 8
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	f8 01       	movw	r30, r16
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	d0 c1       	rjmp	.+928    	; 0x197e <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
    15de:	2f e6       	ldi	r18, 0x6F	; 111
    15e0:	32 e1       	ldi	r19, 0x12	; 18
    15e2:	43 e8       	ldi	r20, 0x83	; 131
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	c7 01       	movw	r24, r14
    15e8:	b6 01       	movw	r22, r12
    15ea:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	3c f0       	brlt	.+14     	; 0x1600 <calc_prescaler+0x50e>
				*ptr_u16_prescale=P_32;
    15f2:	80 e2       	ldi	r24, 0x20	; 32
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	f8 01       	movw	r30, r16
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	bf c1       	rjmp	.+894    	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
    1600:	2f e6       	ldi	r18, 0x6F	; 111
    1602:	32 e1       	ldi	r19, 0x12	; 18
    1604:	43 e0       	ldi	r20, 0x03	; 3
    1606:	50 e4       	ldi	r21, 0x40	; 64
    1608:	c7 01       	movw	r24, r14
    160a:	b6 01       	movw	r22, r12
    160c:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1610:	18 16       	cp	r1, r24
    1612:	3c f0       	brlt	.+14     	; 0x1622 <calc_prescaler+0x530>
				*ptr_u16_prescale=P_64;
    1614:	80 e4       	ldi	r24, 0x40	; 64
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	f8 01       	movw	r30, r16
    161a:	91 83       	std	Z+1, r25	; 0x01
    161c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	ae c1       	rjmp	.+860    	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
    1622:	2f e6       	ldi	r18, 0x6F	; 111
    1624:	32 e1       	ldi	r19, 0x12	; 18
    1626:	43 e8       	ldi	r20, 0x83	; 131
    1628:	50 e4       	ldi	r21, 0x40	; 64
    162a:	c7 01       	movw	r24, r14
    162c:	b6 01       	movw	r22, r12
    162e:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1632:	18 16       	cp	r1, r24
    1634:	3c f0       	brlt	.+14     	; 0x1644 <calc_prescaler+0x552>
				*ptr_u16_prescale=P_128;
    1636:	80 e8       	ldi	r24, 0x80	; 128
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	f8 01       	movw	r30, r16
    163c:	91 83       	std	Z+1, r25	; 0x01
    163e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	9d c1       	rjmp	.+826    	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
    1644:	2f e6       	ldi	r18, 0x6F	; 111
    1646:	32 e1       	ldi	r19, 0x12	; 18
    1648:	43 e0       	ldi	r20, 0x03	; 3
    164a:	51 e4       	ldi	r21, 0x41	; 65
    164c:	c7 01       	movw	r24, r14
    164e:	b6 01       	movw	r22, r12
    1650:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1654:	18 16       	cp	r1, r24
    1656:	3c f0       	brlt	.+14     	; 0x1666 <calc_prescaler+0x574>
				*ptr_u16_prescale=P_256;
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	f8 01       	movw	r30, r16
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	8c c1       	rjmp	.+792    	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_MS(P_1024))
    1666:	2f e6       	ldi	r18, 0x6F	; 111
    1668:	32 e1       	ldi	r19, 0x12	; 18
    166a:	43 e0       	ldi	r20, 0x03	; 3
    166c:	52 e4       	ldi	r21, 0x42	; 66
    166e:	c7 01       	movw	r24, r14
    1670:	b6 01       	movw	r22, r12
    1672:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1676:	18 16       	cp	r1, r24
    1678:	3c f0       	brlt	.+14     	; 0x1688 <calc_prescaler+0x596>
				*ptr_u16_prescale=P_1024;
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	94 e0       	ldi	r25, 0x04	; 4
    167e:	f8 01       	movw	r30, r16
    1680:	91 83       	std	Z+1, r25	; 0x01
    1682:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	7b c1       	rjmp	.+758    	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1688:	f8 01       	movw	r30, r16
    168a:	11 82       	std	Z+1, r1	; 0x01
    168c:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	76 c1       	rjmp	.+748    	; 0x197e <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1692:	8c ed       	ldi	r24, 0xDC	; 220
    1694:	95 e0       	ldi	r25, 0x05	; 5
    1696:	f8 01       	movw	r30, r16
    1698:	91 83       	std	Z+1, r25	; 0x01
    169a:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	6f c1       	rjmp	.+734    	; 0x197e <calc_prescaler+0x88c>
		{
			bo_return_value = FALSE;
			// do nothing
		}
	}
	else if (enu_time_unit == ENU_SECOND)
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <calc_prescaler+0x5b4>
    16a4:	69 c1       	rjmp	.+722    	; 0x1978 <calc_prescaler+0x886>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    16a6:	41 11       	cpse	r20, r1
    16a8:	69 c0       	rjmp	.+210    	; 0x177c <calc_prescaler+0x68a>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024) )
    16aa:	2d eb       	ldi	r18, 0xBD	; 189
    16ac:	37 e3       	ldi	r19, 0x37	; 55
    16ae:	46 e0       	ldi	r20, 0x06	; 6
    16b0:	5d e3       	ldi	r21, 0x3D	; 61
    16b2:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    16b6:	18 16       	cp	r1, r24
    16b8:	0c f4       	brge	.+2      	; 0x16bc <calc_prescaler+0x5ca>
    16ba:	59 c0       	rjmp	.+178    	; 0x176e <calc_prescaler+0x67c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
    16bc:	2d eb       	ldi	r18, 0xBD	; 189
    16be:	37 e3       	ldi	r19, 0x37	; 55
    16c0:	46 e0       	ldi	r20, 0x06	; 6
    16c2:	58 e3       	ldi	r21, 0x38	; 56
    16c4:	c7 01       	movw	r24, r14
    16c6:	b6 01       	movw	r22, r12
    16c8:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    16cc:	18 16       	cp	r1, r24
    16ce:	34 f0       	brlt	.+12     	; 0x16dc <calc_prescaler+0x5ea>
				*ptr_u16_prescale=P_1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	f8 01       	movw	r30, r16
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	80 83       	st	Z, r24
    16da:	51 c1       	rjmp	.+674    	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
    16dc:	2d eb       	ldi	r18, 0xBD	; 189
    16de:	37 e3       	ldi	r19, 0x37	; 55
    16e0:	46 e8       	ldi	r20, 0x86	; 134
    16e2:	59 e3       	ldi	r21, 0x39	; 57
    16e4:	c7 01       	movw	r24, r14
    16e6:	b6 01       	movw	r22, r12
    16e8:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	3c f0       	brlt	.+14     	; 0x16fe <calc_prescaler+0x60c>
				*ptr_u16_prescale=P_8;
    16f0:	88 e0       	ldi	r24, 0x08	; 8
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	f8 01       	movw	r30, r16
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	40 c1       	rjmp	.+640    	; 0x197e <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
    16fe:	2d eb       	ldi	r18, 0xBD	; 189
    1700:	37 e3       	ldi	r19, 0x37	; 55
    1702:	46 e0       	ldi	r20, 0x06	; 6
    1704:	5b e3       	ldi	r21, 0x3B	; 59
    1706:	c7 01       	movw	r24, r14
    1708:	b6 01       	movw	r22, r12
    170a:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    170e:	18 16       	cp	r1, r24
    1710:	3c f0       	brlt	.+14     	; 0x1720 <calc_prescaler+0x62e>
				*ptr_u16_prescale=P_64;
    1712:	80 e4       	ldi	r24, 0x40	; 64
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	f8 01       	movw	r30, r16
    1718:	91 83       	std	Z+1, r25	; 0x01
    171a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	2f c1       	rjmp	.+606    	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
    1720:	2d eb       	ldi	r18, 0xBD	; 189
    1722:	37 e3       	ldi	r19, 0x37	; 55
    1724:	46 e0       	ldi	r20, 0x06	; 6
    1726:	5c e3       	ldi	r21, 0x3C	; 60
    1728:	c7 01       	movw	r24, r14
    172a:	b6 01       	movw	r22, r12
    172c:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1730:	18 16       	cp	r1, r24
    1732:	3c f0       	brlt	.+14     	; 0x1742 <calc_prescaler+0x650>
				*ptr_u16_prescale=P_256;
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	91 e0       	ldi	r25, 0x01	; 1
    1738:	f8 01       	movw	r30, r16
    173a:	91 83       	std	Z+1, r25	; 0x01
    173c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	1e c1       	rjmp	.+572    	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024))
    1742:	2d eb       	ldi	r18, 0xBD	; 189
    1744:	37 e3       	ldi	r19, 0x37	; 55
    1746:	46 e0       	ldi	r20, 0x06	; 6
    1748:	5d e3       	ldi	r21, 0x3D	; 61
    174a:	c7 01       	movw	r24, r14
    174c:	b6 01       	movw	r22, r12
    174e:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1752:	18 16       	cp	r1, r24
    1754:	3c f0       	brlt	.+14     	; 0x1764 <calc_prescaler+0x672>
				*ptr_u16_prescale=P_1024;
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	94 e0       	ldi	r25, 0x04	; 4
    175a:	f8 01       	movw	r30, r16
    175c:	91 83       	std	Z+1, r25	; 0x01
    175e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	0d c1       	rjmp	.+538    	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1764:	f8 01       	movw	r30, r16
    1766:	11 82       	std	Z+1, r1	; 0x01
    1768:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	08 c1       	rjmp	.+528    	; 0x197e <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    176e:	8c ed       	ldi	r24, 0xDC	; 220
    1770:	95 e0       	ldi	r25, 0x05	; 5
    1772:	f8 01       	movw	r30, r16
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	01 c1       	rjmp	.+514    	; 0x197e <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    177c:	41 30       	cpi	r20, 0x01	; 1
    177e:	09 f0       	breq	.+2      	; 0x1782 <calc_prescaler+0x690>
    1780:	69 c0       	rjmp	.+210    	; 0x1854 <calc_prescaler+0x762>
		{
			if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024) )
    1782:	2d eb       	ldi	r18, 0xBD	; 189
    1784:	37 e3       	ldi	r19, 0x37	; 55
    1786:	46 e0       	ldi	r20, 0x06	; 6
    1788:	51 e4       	ldi	r21, 0x41	; 65
    178a:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    178e:	18 16       	cp	r1, r24
    1790:	0c f4       	brge	.+2      	; 0x1794 <calc_prescaler+0x6a2>
    1792:	59 c0       	rjmp	.+178    	; 0x1846 <calc_prescaler+0x754>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1))
    1794:	2d eb       	ldi	r18, 0xBD	; 189
    1796:	37 e3       	ldi	r19, 0x37	; 55
    1798:	46 e0       	ldi	r20, 0x06	; 6
    179a:	5c e3       	ldi	r21, 0x3C	; 60
    179c:	c7 01       	movw	r24, r14
    179e:	b6 01       	movw	r22, r12
    17a0:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    17a4:	18 16       	cp	r1, r24
    17a6:	34 f0       	brlt	.+12     	; 0x17b4 <calc_prescaler+0x6c2>
				*ptr_u16_prescale=P_1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	f8 01       	movw	r30, r16
    17ae:	91 83       	std	Z+1, r25	; 0x01
    17b0:	80 83       	st	Z, r24
    17b2:	e5 c0       	rjmp	.+458    	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
    17b4:	2d eb       	ldi	r18, 0xBD	; 189
    17b6:	37 e3       	ldi	r19, 0x37	; 55
    17b8:	46 e8       	ldi	r20, 0x86	; 134
    17ba:	5d e3       	ldi	r21, 0x3D	; 61
    17bc:	c7 01       	movw	r24, r14
    17be:	b6 01       	movw	r22, r12
    17c0:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    17c4:	18 16       	cp	r1, r24
    17c6:	3c f0       	brlt	.+14     	; 0x17d6 <calc_prescaler+0x6e4>
				*ptr_u16_prescale=P_8;
    17c8:	88 e0       	ldi	r24, 0x08	; 8
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	f8 01       	movw	r30, r16
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	d4 c0       	rjmp	.+424    	; 0x197e <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
    17d6:	2d eb       	ldi	r18, 0xBD	; 189
    17d8:	37 e3       	ldi	r19, 0x37	; 55
    17da:	46 e0       	ldi	r20, 0x06	; 6
    17dc:	5f e3       	ldi	r21, 0x3F	; 63
    17de:	c7 01       	movw	r24, r14
    17e0:	b6 01       	movw	r22, r12
    17e2:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    17e6:	18 16       	cp	r1, r24
    17e8:	3c f0       	brlt	.+14     	; 0x17f8 <calc_prescaler+0x706>
				*ptr_u16_prescale=P_64;
    17ea:	80 e4       	ldi	r24, 0x40	; 64
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	f8 01       	movw	r30, r16
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	c3 c0       	rjmp	.+390    	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
    17f8:	2d eb       	ldi	r18, 0xBD	; 189
    17fa:	37 e3       	ldi	r19, 0x37	; 55
    17fc:	46 e0       	ldi	r20, 0x06	; 6
    17fe:	50 e4       	ldi	r21, 0x40	; 64
    1800:	c7 01       	movw	r24, r14
    1802:	b6 01       	movw	r22, r12
    1804:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1808:	18 16       	cp	r1, r24
    180a:	3c f0       	brlt	.+14     	; 0x181a <calc_prescaler+0x728>
				*ptr_u16_prescale=P_256;
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	f8 01       	movw	r30, r16
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	b2 c0       	rjmp	.+356    	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024))
    181a:	2d eb       	ldi	r18, 0xBD	; 189
    181c:	37 e3       	ldi	r19, 0x37	; 55
    181e:	46 e0       	ldi	r20, 0x06	; 6
    1820:	51 e4       	ldi	r21, 0x41	; 65
    1822:	c7 01       	movw	r24, r14
    1824:	b6 01       	movw	r22, r12
    1826:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    182a:	18 16       	cp	r1, r24
    182c:	3c f0       	brlt	.+14     	; 0x183c <calc_prescaler+0x74a>
				*ptr_u16_prescale=P_1024;
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	94 e0       	ldi	r25, 0x04	; 4
    1832:	f8 01       	movw	r30, r16
    1834:	91 83       	std	Z+1, r25	; 0x01
    1836:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	a1 c0       	rjmp	.+322    	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    183c:	f8 01       	movw	r30, r16
    183e:	11 82       	std	Z+1, r1	; 0x01
    1840:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	9c c0       	rjmp	.+312    	; 0x197e <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1846:	8c ed       	ldi	r24, 0xDC	; 220
    1848:	95 e0       	ldi	r25, 0x05	; 5
    184a:	f8 01       	movw	r30, r16
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	95 c0       	rjmp	.+298    	; 0x197e <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    1854:	42 30       	cpi	r20, 0x02	; 2
    1856:	09 f0       	breq	.+2      	; 0x185a <calc_prescaler+0x768>
    1858:	91 c0       	rjmp	.+290    	; 0x197c <calc_prescaler+0x88a>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024) )
    185a:	2d eb       	ldi	r18, 0xBD	; 189
    185c:	37 e3       	ldi	r19, 0x37	; 55
    185e:	46 e0       	ldi	r20, 0x06	; 6
    1860:	5d e3       	ldi	r21, 0x3D	; 61
    1862:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1866:	18 16       	cp	r1, r24
    1868:	0c f4       	brge	.+2      	; 0x186c <calc_prescaler+0x77a>
    186a:	7b c0       	rjmp	.+246    	; 0x1962 <calc_prescaler+0x870>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
    186c:	2d eb       	ldi	r18, 0xBD	; 189
    186e:	37 e3       	ldi	r19, 0x37	; 55
    1870:	46 e0       	ldi	r20, 0x06	; 6
    1872:	58 e3       	ldi	r21, 0x38	; 56
    1874:	c7 01       	movw	r24, r14
    1876:	b6 01       	movw	r22, r12
    1878:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    187c:	18 16       	cp	r1, r24
    187e:	34 f0       	brlt	.+12     	; 0x188c <calc_prescaler+0x79a>
				*ptr_u16_prescale=P_1;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	f8 01       	movw	r30, r16
    1886:	91 83       	std	Z+1, r25	; 0x01
    1888:	80 83       	st	Z, r24
    188a:	79 c0       	rjmp	.+242    	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
    188c:	2d eb       	ldi	r18, 0xBD	; 189
    188e:	37 e3       	ldi	r19, 0x37	; 55
    1890:	46 e8       	ldi	r20, 0x86	; 134
    1892:	59 e3       	ldi	r21, 0x39	; 57
    1894:	c7 01       	movw	r24, r14
    1896:	b6 01       	movw	r22, r12
    1898:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    189c:	18 16       	cp	r1, r24
    189e:	3c f0       	brlt	.+14     	; 0x18ae <calc_prescaler+0x7bc>
				*ptr_u16_prescale=P_8;
    18a0:	88 e0       	ldi	r24, 0x08	; 8
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	f8 01       	movw	r30, r16
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	68 c0       	rjmp	.+208    	; 0x197e <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
    18ae:	2d eb       	ldi	r18, 0xBD	; 189
    18b0:	37 e3       	ldi	r19, 0x37	; 55
    18b2:	46 e8       	ldi	r20, 0x86	; 134
    18b4:	5a e3       	ldi	r21, 0x3A	; 58
    18b6:	c7 01       	movw	r24, r14
    18b8:	b6 01       	movw	r22, r12
    18ba:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    18be:	18 16       	cp	r1, r24
    18c0:	3c f0       	brlt	.+14     	; 0x18d0 <calc_prescaler+0x7de>
				*ptr_u16_prescale=P_32;
    18c2:	80 e2       	ldi	r24, 0x20	; 32
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	f8 01       	movw	r30, r16
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	57 c0       	rjmp	.+174    	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
    18d0:	2d eb       	ldi	r18, 0xBD	; 189
    18d2:	37 e3       	ldi	r19, 0x37	; 55
    18d4:	46 e0       	ldi	r20, 0x06	; 6
    18d6:	5b e3       	ldi	r21, 0x3B	; 59
    18d8:	c7 01       	movw	r24, r14
    18da:	b6 01       	movw	r22, r12
    18dc:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	3c f0       	brlt	.+14     	; 0x18f2 <calc_prescaler+0x800>
				*ptr_u16_prescale=P_64;
    18e4:	80 e4       	ldi	r24, 0x40	; 64
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	f8 01       	movw	r30, r16
    18ea:	91 83       	std	Z+1, r25	; 0x01
    18ec:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	46 c0       	rjmp	.+140    	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
    18f2:	2d eb       	ldi	r18, 0xBD	; 189
    18f4:	37 e3       	ldi	r19, 0x37	; 55
    18f6:	46 e8       	ldi	r20, 0x86	; 134
    18f8:	5b e3       	ldi	r21, 0x3B	; 59
    18fa:	c7 01       	movw	r24, r14
    18fc:	b6 01       	movw	r22, r12
    18fe:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1902:	18 16       	cp	r1, r24
    1904:	3c f0       	brlt	.+14     	; 0x1914 <calc_prescaler+0x822>
				*ptr_u16_prescale=P_128;
    1906:	80 e8       	ldi	r24, 0x80	; 128
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	f8 01       	movw	r30, r16
    190c:	91 83       	std	Z+1, r25	; 0x01
    190e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	35 c0       	rjmp	.+106    	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
    1914:	2d eb       	ldi	r18, 0xBD	; 189
    1916:	37 e3       	ldi	r19, 0x37	; 55
    1918:	46 e0       	ldi	r20, 0x06	; 6
    191a:	5c e3       	ldi	r21, 0x3C	; 60
    191c:	c7 01       	movw	r24, r14
    191e:	b6 01       	movw	r22, r12
    1920:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1924:	18 16       	cp	r1, r24
    1926:	3c f0       	brlt	.+14     	; 0x1936 <calc_prescaler+0x844>
				*ptr_u16_prescale=P_256;
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	f8 01       	movw	r30, r16
    192e:	91 83       	std	Z+1, r25	; 0x01
    1930:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	24 c0       	rjmp	.+72     	; 0x197e <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_SEC(P_1024))
    1936:	2d eb       	ldi	r18, 0xBD	; 189
    1938:	37 e3       	ldi	r19, 0x37	; 55
    193a:	46 e0       	ldi	r20, 0x06	; 6
    193c:	5d e3       	ldi	r21, 0x3D	; 61
    193e:	c7 01       	movw	r24, r14
    1940:	b6 01       	movw	r22, r12
    1942:	0e 94 86 12 	call	0x250c	; 0x250c <__cmpsf2>
    1946:	18 16       	cp	r1, r24
    1948:	3c f0       	brlt	.+14     	; 0x1958 <calc_prescaler+0x866>
				*ptr_u16_prescale=P_1024;
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	94 e0       	ldi	r25, 0x04	; 4
    194e:	f8 01       	movw	r30, r16
    1950:	91 83       	std	Z+1, r25	; 0x01
    1952:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	13 c0       	rjmp	.+38     	; 0x197e <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    1958:	f8 01       	movw	r30, r16
    195a:	11 82       	std	Z+1, r1	; 0x01
    195c:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	0e c0       	rjmp	.+28     	; 0x197e <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    1962:	8c ed       	ldi	r24, 0xDC	; 220
    1964:	95 e0       	ldi	r25, 0x05	; 5
    1966:	f8 01       	movw	r30, r16
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	07 c0       	rjmp	.+14     	; 0x197e <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	05 c0       	rjmp	.+10     	; 0x197e <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	03 c0       	rjmp	.+6      	; 0x197e <calc_prescaler+0x88c>
			// do nothing
		}
	}
	else
	{
		bo_return_value = FALSE;
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	01 c0       	rjmp	.+2      	; 0x197e <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    197c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		bo_return_value = FALSE;
	}
	return bo_return_value;
}
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	ff 90       	pop	r15
    1984:	ef 90       	pop	r14
    1986:	df 90       	pop	r13
    1988:	cf 90       	pop	r12
    198a:	08 95       	ret

0000198c <calc_initialValue>:

/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
    198c:	ef 92       	push	r14
    198e:	ff 92       	push	r15
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
	BOOLEAN bo_return_value = TRUE;
	if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    1994:	81 11       	cpse	r24, r1
    1996:	8a c1       	rjmp	.+788    	; 0x1cac <calc_initialValue+0x320>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    1998:	61 11       	cpse	r22, r1
    199a:	7c c0       	rjmp	.+248    	; 0x1a94 <calc_initialValue+0x108>
		{
			switch(prescaler)
    199c:	40 34       	cpi	r20, 0x40	; 64
    199e:	51 05       	cpc	r21, r1
    19a0:	a9 f1       	breq	.+106    	; 0x1a0c <calc_initialValue+0x80>
    19a2:	38 f4       	brcc	.+14     	; 0x19b2 <calc_initialValue+0x26>
    19a4:	41 30       	cpi	r20, 0x01	; 1
    19a6:	51 05       	cpc	r21, r1
    19a8:	69 f0       	breq	.+26     	; 0x19c4 <calc_initialValue+0x38>
    19aa:	48 30       	cpi	r20, 0x08	; 8
    19ac:	51 05       	cpc	r21, r1
    19ae:	f9 f0       	breq	.+62     	; 0x19ee <calc_initialValue+0x62>
    19b0:	6c c0       	rjmp	.+216    	; 0x1a8a <calc_initialValue+0xfe>
    19b2:	41 15       	cp	r20, r1
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	58 07       	cpc	r21, r24
    19b8:	f1 f1       	breq	.+124    	; 0x1a36 <calc_initialValue+0xaa>
    19ba:	41 15       	cp	r20, r1
    19bc:	54 40       	sbci	r21, 0x04	; 4
    19be:	09 f4       	brne	.+2      	; 0x19c2 <calc_initialValue+0x36>
    19c0:	4f c0       	rjmp	.+158    	; 0x1a60 <calc_initialValue+0xd4>
    19c2:	63 c0       	rjmp	.+198    	; 0x1a8a <calc_initialValue+0xfe>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    19c4:	a9 01       	movw	r20, r18
    19c6:	98 01       	movw	r18, r16
    19c8:	60 e0       	ldi	r22, 0x00	; 0
    19ca:	70 e0       	ldi	r23, 0x00	; 0
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	92 e4       	ldi	r25, 0x42	; 66
    19d0:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	51 e4       	ldi	r21, 0x41	; 65
    19dc:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
    19e0:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    19e4:	f7 01       	movw	r30, r14
    19e6:	71 83       	std	Z+1, r23	; 0x01
    19e8:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    19ec:	1d c5       	rjmp	.+2618   	; 0x2428 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    19ee:	a9 01       	movw	r20, r18
    19f0:	98 01       	movw	r18, r16
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	80 e8       	ldi	r24, 0x80	; 128
    19f8:	93 e4       	ldi	r25, 0x43	; 67
    19fa:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    19fe:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1a02:	f7 01       	movw	r30, r14
    1a04:	71 83       	std	Z+1, r23	; 0x01
    1a06:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    1a0a:	0e c5       	rjmp	.+2588   	; 0x2428 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    1a0c:	a9 01       	movw	r20, r18
    1a0e:	98 01       	movw	r18, r16
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	95 e4       	ldi	r25, 0x45	; 69
    1a18:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	5e e3       	ldi	r21, 0x3E	; 62
    1a24:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
    1a28:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1a2c:	f7 01       	movw	r30, r14
    1a2e:	71 83       	std	Z+1, r23	; 0x01
    1a30:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    1a34:	f9 c4       	rjmp	.+2546   	; 0x2428 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    1a36:	a9 01       	movw	r20, r18
    1a38:	98 01       	movw	r18, r16
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	96 e4       	ldi	r25, 0x46	; 70
    1a42:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	5d e3       	ldi	r21, 0x3D	; 61
    1a4e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
    1a52:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1a56:	f7 01       	movw	r30, r14
    1a58:	71 83       	std	Z+1, r23	; 0x01
    1a5a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    1a5e:	e4 c4       	rjmp	.+2504   	; 0x2428 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    1a60:	a9 01       	movw	r20, r18
    1a62:	98 01       	movw	r18, r16
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	97 e4       	ldi	r25, 0x47	; 71
    1a6c:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	5c e3       	ldi	r21, 0x3C	; 60
    1a78:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
    1a7c:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1a80:	f7 01       	movw	r30, r14
    1a82:	71 83       	std	Z+1, r23	; 0x01
    1a84:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    1a88:	cf c4       	rjmp	.+2462   	; 0x2428 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1a8a:	f7 01       	movw	r30, r14
    1a8c:	11 82       	std	Z+1, r1	; 0x01
    1a8e:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1a90:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1a92:	ca c4       	rjmp	.+2452   	; 0x2428 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    1a94:	61 30       	cpi	r22, 0x01	; 1
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <calc_initialValue+0x10e>
    1a98:	83 c0       	rjmp	.+262    	; 0x1ba0 <calc_initialValue+0x214>
		{
			switch(prescaler)
    1a9a:	40 34       	cpi	r20, 0x40	; 64
    1a9c:	51 05       	cpc	r21, r1
    1a9e:	e1 f1       	breq	.+120    	; 0x1b18 <calc_initialValue+0x18c>
    1aa0:	38 f4       	brcc	.+14     	; 0x1ab0 <calc_initialValue+0x124>
    1aa2:	41 30       	cpi	r20, 0x01	; 1
    1aa4:	51 05       	cpc	r21, r1
    1aa6:	71 f0       	breq	.+28     	; 0x1ac4 <calc_initialValue+0x138>
    1aa8:	48 30       	cpi	r20, 0x08	; 8
    1aaa:	51 05       	cpc	r21, r1
    1aac:	01 f1       	breq	.+64     	; 0x1aee <calc_initialValue+0x162>
    1aae:	73 c0       	rjmp	.+230    	; 0x1b96 <calc_initialValue+0x20a>
    1ab0:	41 15       	cp	r20, r1
    1ab2:	f1 e0       	ldi	r31, 0x01	; 1
    1ab4:	5f 07       	cpc	r21, r31
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <calc_initialValue+0x12e>
    1ab8:	44 c0       	rjmp	.+136    	; 0x1b42 <calc_initialValue+0x1b6>
    1aba:	41 15       	cp	r20, r1
    1abc:	54 40       	sbci	r21, 0x04	; 4
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <calc_initialValue+0x136>
    1ac0:	55 c0       	rjmp	.+170    	; 0x1b6c <calc_initialValue+0x1e0>
    1ac2:	69 c0       	rjmp	.+210    	; 0x1b96 <calc_initialValue+0x20a>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    1ac4:	a9 01       	movw	r20, r18
    1ac6:	98 01       	movw	r18, r16
    1ac8:	6f e6       	ldi	r22, 0x6F	; 111
    1aca:	72 e1       	ldi	r23, 0x12	; 18
    1acc:	83 e0       	ldi	r24, 0x03	; 3
    1ace:	9d e3       	ldi	r25, 0x3D	; 61
    1ad0:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1ad4:	2f e6       	ldi	r18, 0x6F	; 111
    1ad6:	32 e1       	ldi	r19, 0x12	; 18
    1ad8:	43 e0       	ldi	r20, 0x03	; 3
    1ada:	59 e3       	ldi	r21, 0x39	; 57
    1adc:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1ae0:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1ae4:	f7 01       	movw	r30, r14
    1ae6:	71 83       	std	Z+1, r23	; 0x01
    1ae8:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    1aec:	9d c4       	rjmp	.+2362   	; 0x2428 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    1aee:	a9 01       	movw	r20, r18
    1af0:	98 01       	movw	r18, r16
    1af2:	6f e6       	ldi	r22, 0x6F	; 111
    1af4:	72 e1       	ldi	r23, 0x12	; 18
    1af6:	83 e8       	ldi	r24, 0x83	; 131
    1af8:	9e e3       	ldi	r25, 0x3E	; 62
    1afa:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1afe:	2f e6       	ldi	r18, 0x6F	; 111
    1b00:	32 e1       	ldi	r19, 0x12	; 18
    1b02:	43 e8       	ldi	r20, 0x83	; 131
    1b04:	5a e3       	ldi	r21, 0x3A	; 58
    1b06:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1b0a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1b0e:	f7 01       	movw	r30, r14
    1b10:	71 83       	std	Z+1, r23	; 0x01
    1b12:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    1b16:	88 c4       	rjmp	.+2320   	; 0x2428 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    1b18:	a9 01       	movw	r20, r18
    1b1a:	98 01       	movw	r18, r16
    1b1c:	6f e6       	ldi	r22, 0x6F	; 111
    1b1e:	72 e1       	ldi	r23, 0x12	; 18
    1b20:	83 e0       	ldi	r24, 0x03	; 3
    1b22:	90 e4       	ldi	r25, 0x40	; 64
    1b24:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1b28:	2f e6       	ldi	r18, 0x6F	; 111
    1b2a:	32 e1       	ldi	r19, 0x12	; 18
    1b2c:	43 e0       	ldi	r20, 0x03	; 3
    1b2e:	5c e3       	ldi	r21, 0x3C	; 60
    1b30:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1b34:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1b38:	f7 01       	movw	r30, r14
    1b3a:	71 83       	std	Z+1, r23	; 0x01
    1b3c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    1b40:	73 c4       	rjmp	.+2278   	; 0x2428 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    1b42:	a9 01       	movw	r20, r18
    1b44:	98 01       	movw	r18, r16
    1b46:	6f e6       	ldi	r22, 0x6F	; 111
    1b48:	72 e1       	ldi	r23, 0x12	; 18
    1b4a:	83 e0       	ldi	r24, 0x03	; 3
    1b4c:	91 e4       	ldi	r25, 0x41	; 65
    1b4e:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1b52:	2f e6       	ldi	r18, 0x6F	; 111
    1b54:	32 e1       	ldi	r19, 0x12	; 18
    1b56:	43 e0       	ldi	r20, 0x03	; 3
    1b58:	5d e3       	ldi	r21, 0x3D	; 61
    1b5a:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1b5e:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1b62:	f7 01       	movw	r30, r14
    1b64:	71 83       	std	Z+1, r23	; 0x01
    1b66:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    1b6a:	5e c4       	rjmp	.+2236   	; 0x2428 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    1b6c:	a9 01       	movw	r20, r18
    1b6e:	98 01       	movw	r18, r16
    1b70:	6f e6       	ldi	r22, 0x6F	; 111
    1b72:	72 e1       	ldi	r23, 0x12	; 18
    1b74:	83 e0       	ldi	r24, 0x03	; 3
    1b76:	92 e4       	ldi	r25, 0x42	; 66
    1b78:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1b7c:	2f e6       	ldi	r18, 0x6F	; 111
    1b7e:	32 e1       	ldi	r19, 0x12	; 18
    1b80:	43 e0       	ldi	r20, 0x03	; 3
    1b82:	5e e3       	ldi	r21, 0x3E	; 62
    1b84:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1b88:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1b8c:	f7 01       	movw	r30, r14
    1b8e:	71 83       	std	Z+1, r23	; 0x01
    1b90:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    1b94:	49 c4       	rjmp	.+2194   	; 0x2428 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1b96:	f7 01       	movw	r30, r14
    1b98:	11 82       	std	Z+1, r1	; 0x01
    1b9a:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1b9e:	44 c4       	rjmp	.+2184   	; 0x2428 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    1ba0:	62 30       	cpi	r22, 0x02	; 2
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <calc_initialValue+0x21a>
    1ba4:	3a c4       	rjmp	.+2164   	; 0x241a <calc_initialValue+0xa8e>
		{
			switch(prescaler)
    1ba6:	40 34       	cpi	r20, 0x40	; 64
    1ba8:	51 05       	cpc	r21, r1
    1baa:	e1 f1       	breq	.+120    	; 0x1c24 <calc_initialValue+0x298>
    1bac:	38 f4       	brcc	.+14     	; 0x1bbc <calc_initialValue+0x230>
    1bae:	41 30       	cpi	r20, 0x01	; 1
    1bb0:	51 05       	cpc	r21, r1
    1bb2:	71 f0       	breq	.+28     	; 0x1bd0 <calc_initialValue+0x244>
    1bb4:	48 30       	cpi	r20, 0x08	; 8
    1bb6:	51 05       	cpc	r21, r1
    1bb8:	01 f1       	breq	.+64     	; 0x1bfa <calc_initialValue+0x26e>
    1bba:	73 c0       	rjmp	.+230    	; 0x1ca2 <calc_initialValue+0x316>
    1bbc:	41 15       	cp	r20, r1
    1bbe:	f1 e0       	ldi	r31, 0x01	; 1
    1bc0:	5f 07       	cpc	r21, r31
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <calc_initialValue+0x23a>
    1bc4:	44 c0       	rjmp	.+136    	; 0x1c4e <calc_initialValue+0x2c2>
    1bc6:	41 15       	cp	r20, r1
    1bc8:	54 40       	sbci	r21, 0x04	; 4
    1bca:	09 f4       	brne	.+2      	; 0x1bce <calc_initialValue+0x242>
    1bcc:	55 c0       	rjmp	.+170    	; 0x1c78 <calc_initialValue+0x2ec>
    1bce:	69 c0       	rjmp	.+210    	; 0x1ca2 <calc_initialValue+0x316>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    1bd0:	a9 01       	movw	r20, r18
    1bd2:	98 01       	movw	r18, r16
    1bd4:	6d eb       	ldi	r22, 0xBD	; 189
    1bd6:	77 e3       	ldi	r23, 0x37	; 55
    1bd8:	86 e0       	ldi	r24, 0x06	; 6
    1bda:	98 e3       	ldi	r25, 0x38	; 56
    1bdc:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1be0:	2d eb       	ldi	r18, 0xBD	; 189
    1be2:	37 e3       	ldi	r19, 0x37	; 55
    1be4:	46 e0       	ldi	r20, 0x06	; 6
    1be6:	54 e3       	ldi	r21, 0x34	; 52
    1be8:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1bec:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1bf0:	f7 01       	movw	r30, r14
    1bf2:	71 83       	std	Z+1, r23	; 0x01
    1bf4:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    1bf8:	17 c4       	rjmp	.+2094   	; 0x2428 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    1bfa:	a9 01       	movw	r20, r18
    1bfc:	98 01       	movw	r18, r16
    1bfe:	6d eb       	ldi	r22, 0xBD	; 189
    1c00:	77 e3       	ldi	r23, 0x37	; 55
    1c02:	86 e8       	ldi	r24, 0x86	; 134
    1c04:	99 e3       	ldi	r25, 0x39	; 57
    1c06:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1c0a:	2d eb       	ldi	r18, 0xBD	; 189
    1c0c:	37 e3       	ldi	r19, 0x37	; 55
    1c0e:	46 e8       	ldi	r20, 0x86	; 134
    1c10:	55 e3       	ldi	r21, 0x35	; 53
    1c12:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1c16:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1c1a:	f7 01       	movw	r30, r14
    1c1c:	71 83       	std	Z+1, r23	; 0x01
    1c1e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    1c22:	02 c4       	rjmp	.+2052   	; 0x2428 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    1c24:	a9 01       	movw	r20, r18
    1c26:	98 01       	movw	r18, r16
    1c28:	6d eb       	ldi	r22, 0xBD	; 189
    1c2a:	77 e3       	ldi	r23, 0x37	; 55
    1c2c:	86 e0       	ldi	r24, 0x06	; 6
    1c2e:	9b e3       	ldi	r25, 0x3B	; 59
    1c30:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1c34:	2d eb       	ldi	r18, 0xBD	; 189
    1c36:	37 e3       	ldi	r19, 0x37	; 55
    1c38:	46 e0       	ldi	r20, 0x06	; 6
    1c3a:	57 e3       	ldi	r21, 0x37	; 55
    1c3c:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1c40:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1c44:	f7 01       	movw	r30, r14
    1c46:	71 83       	std	Z+1, r23	; 0x01
    1c48:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    1c4c:	ed c3       	rjmp	.+2010   	; 0x2428 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    1c4e:	a9 01       	movw	r20, r18
    1c50:	98 01       	movw	r18, r16
    1c52:	6d eb       	ldi	r22, 0xBD	; 189
    1c54:	77 e3       	ldi	r23, 0x37	; 55
    1c56:	86 e0       	ldi	r24, 0x06	; 6
    1c58:	9c e3       	ldi	r25, 0x3C	; 60
    1c5a:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1c5e:	2d eb       	ldi	r18, 0xBD	; 189
    1c60:	37 e3       	ldi	r19, 0x37	; 55
    1c62:	46 e0       	ldi	r20, 0x06	; 6
    1c64:	58 e3       	ldi	r21, 0x38	; 56
    1c66:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1c6a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1c6e:	f7 01       	movw	r30, r14
    1c70:	71 83       	std	Z+1, r23	; 0x01
    1c72:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    1c76:	d8 c3       	rjmp	.+1968   	; 0x2428 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    1c78:	a9 01       	movw	r20, r18
    1c7a:	98 01       	movw	r18, r16
    1c7c:	6d eb       	ldi	r22, 0xBD	; 189
    1c7e:	77 e3       	ldi	r23, 0x37	; 55
    1c80:	86 e0       	ldi	r24, 0x06	; 6
    1c82:	9d e3       	ldi	r25, 0x3D	; 61
    1c84:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1c88:	2d eb       	ldi	r18, 0xBD	; 189
    1c8a:	37 e3       	ldi	r19, 0x37	; 55
    1c8c:	46 e0       	ldi	r20, 0x06	; 6
    1c8e:	59 e3       	ldi	r21, 0x39	; 57
    1c90:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1c94:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1c98:	f7 01       	movw	r30, r14
    1c9a:	71 83       	std	Z+1, r23	; 0x01
    1c9c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    1ca0:	c3 c3       	rjmp	.+1926   	; 0x2428 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1ca2:	f7 01       	movw	r30, r14
    1ca4:	11 82       	std	Z+1, r1	; 0x01
    1ca6:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1caa:	be c3       	rjmp	.+1916   	; 0x2428 <calc_initialValue+0xa9c>
		else
		{
			// do nothing
		}
	}
	else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	09 f0       	breq	.+2      	; 0x1cb2 <calc_initialValue+0x326>
    1cb0:	8a c1       	rjmp	.+788    	; 0x1fc6 <calc_initialValue+0x63a>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    1cb2:	61 11       	cpse	r22, r1
    1cb4:	7c c0       	rjmp	.+248    	; 0x1dae <calc_initialValue+0x422>
		{
			switch(prescaler)
    1cb6:	40 34       	cpi	r20, 0x40	; 64
    1cb8:	51 05       	cpc	r21, r1
    1cba:	a9 f1       	breq	.+106    	; 0x1d26 <calc_initialValue+0x39a>
    1cbc:	38 f4       	brcc	.+14     	; 0x1ccc <calc_initialValue+0x340>
    1cbe:	41 30       	cpi	r20, 0x01	; 1
    1cc0:	51 05       	cpc	r21, r1
    1cc2:	69 f0       	breq	.+26     	; 0x1cde <calc_initialValue+0x352>
    1cc4:	48 30       	cpi	r20, 0x08	; 8
    1cc6:	51 05       	cpc	r21, r1
    1cc8:	f9 f0       	breq	.+62     	; 0x1d08 <calc_initialValue+0x37c>
    1cca:	6c c0       	rjmp	.+216    	; 0x1da4 <calc_initialValue+0x418>
    1ccc:	41 15       	cp	r20, r1
    1cce:	f1 e0       	ldi	r31, 0x01	; 1
    1cd0:	5f 07       	cpc	r21, r31
    1cd2:	f1 f1       	breq	.+124    	; 0x1d50 <calc_initialValue+0x3c4>
    1cd4:	41 15       	cp	r20, r1
    1cd6:	54 40       	sbci	r21, 0x04	; 4
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <calc_initialValue+0x350>
    1cda:	4f c0       	rjmp	.+158    	; 0x1d7a <calc_initialValue+0x3ee>
    1cdc:	63 c0       	rjmp	.+198    	; 0x1da4 <calc_initialValue+0x418>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    1cde:	a9 01       	movw	r20, r18
    1ce0:	98 01       	movw	r18, r16
    1ce2:	60 e0       	ldi	r22, 0x00	; 0
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	96 e4       	ldi	r25, 0x46	; 70
    1cea:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
    1cfa:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1cfe:	f7 01       	movw	r30, r14
    1d00:	71 83       	std	Z+1, r23	; 0x01
    1d02:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    1d06:	90 c3       	rjmp	.+1824   	; 0x2428 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    1d08:	a9 01       	movw	r20, r18
    1d0a:	98 01       	movw	r18, r16
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	80 e8       	ldi	r24, 0x80	; 128
    1d12:	97 e4       	ldi	r25, 0x47	; 71
    1d14:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1d18:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1d1c:	f7 01       	movw	r30, r14
    1d1e:	71 83       	std	Z+1, r23	; 0x01
    1d20:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    1d24:	81 c3       	rjmp	.+1794   	; 0x2428 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    1d26:	a9 01       	movw	r20, r18
    1d28:	98 01       	movw	r18, r16
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	99 e4       	ldi	r25, 0x49	; 73
    1d32:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	5e e3       	ldi	r21, 0x3E	; 62
    1d3e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
    1d42:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1d46:	f7 01       	movw	r30, r14
    1d48:	71 83       	std	Z+1, r23	; 0x01
    1d4a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    1d4e:	6c c3       	rjmp	.+1752   	; 0x2428 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    1d50:	a9 01       	movw	r20, r18
    1d52:	98 01       	movw	r18, r16
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	9a e4       	ldi	r25, 0x4A	; 74
    1d5c:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	5d e3       	ldi	r21, 0x3D	; 61
    1d68:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
    1d6c:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1d70:	f7 01       	movw	r30, r14
    1d72:	71 83       	std	Z+1, r23	; 0x01
    1d74:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    1d78:	57 c3       	rjmp	.+1710   	; 0x2428 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    1d7a:	a9 01       	movw	r20, r18
    1d7c:	98 01       	movw	r18, r16
    1d7e:	60 e0       	ldi	r22, 0x00	; 0
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	9b e4       	ldi	r25, 0x4B	; 75
    1d86:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e0       	ldi	r20, 0x00	; 0
    1d90:	5c e3       	ldi	r21, 0x3C	; 60
    1d92:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
    1d96:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1d9a:	f7 01       	movw	r30, r14
    1d9c:	71 83       	std	Z+1, r23	; 0x01
    1d9e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    1da2:	42 c3       	rjmp	.+1668   	; 0x2428 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1da4:	f7 01       	movw	r30, r14
    1da6:	11 82       	std	Z+1, r1	; 0x01
    1da8:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1daa:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1dac:	3d c3       	rjmp	.+1658   	; 0x2428 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    1dae:	61 30       	cpi	r22, 0x01	; 1
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <calc_initialValue+0x428>
    1db2:	83 c0       	rjmp	.+262    	; 0x1eba <calc_initialValue+0x52e>
		{
			switch(prescaler)
    1db4:	40 34       	cpi	r20, 0x40	; 64
    1db6:	51 05       	cpc	r21, r1
    1db8:	e1 f1       	breq	.+120    	; 0x1e32 <calc_initialValue+0x4a6>
    1dba:	38 f4       	brcc	.+14     	; 0x1dca <calc_initialValue+0x43e>
    1dbc:	41 30       	cpi	r20, 0x01	; 1
    1dbe:	51 05       	cpc	r21, r1
    1dc0:	71 f0       	breq	.+28     	; 0x1dde <calc_initialValue+0x452>
    1dc2:	48 30       	cpi	r20, 0x08	; 8
    1dc4:	51 05       	cpc	r21, r1
    1dc6:	01 f1       	breq	.+64     	; 0x1e08 <calc_initialValue+0x47c>
    1dc8:	73 c0       	rjmp	.+230    	; 0x1eb0 <calc_initialValue+0x524>
    1dca:	41 15       	cp	r20, r1
    1dcc:	f1 e0       	ldi	r31, 0x01	; 1
    1dce:	5f 07       	cpc	r21, r31
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <calc_initialValue+0x448>
    1dd2:	44 c0       	rjmp	.+136    	; 0x1e5c <calc_initialValue+0x4d0>
    1dd4:	41 15       	cp	r20, r1
    1dd6:	54 40       	sbci	r21, 0x04	; 4
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <calc_initialValue+0x450>
    1dda:	55 c0       	rjmp	.+170    	; 0x1e86 <calc_initialValue+0x4fa>
    1ddc:	69 c0       	rjmp	.+210    	; 0x1eb0 <calc_initialValue+0x524>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    1dde:	a9 01       	movw	r20, r18
    1de0:	98 01       	movw	r18, r16
    1de2:	6f e6       	ldi	r22, 0x6F	; 111
    1de4:	72 e1       	ldi	r23, 0x12	; 18
    1de6:	83 e0       	ldi	r24, 0x03	; 3
    1de8:	91 e4       	ldi	r25, 0x41	; 65
    1dea:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1dee:	2f e6       	ldi	r18, 0x6F	; 111
    1df0:	32 e1       	ldi	r19, 0x12	; 18
    1df2:	43 e0       	ldi	r20, 0x03	; 3
    1df4:	59 e3       	ldi	r21, 0x39	; 57
    1df6:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1dfa:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1dfe:	f7 01       	movw	r30, r14
    1e00:	71 83       	std	Z+1, r23	; 0x01
    1e02:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    1e06:	10 c3       	rjmp	.+1568   	; 0x2428 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    1e08:	a9 01       	movw	r20, r18
    1e0a:	98 01       	movw	r18, r16
    1e0c:	6f e6       	ldi	r22, 0x6F	; 111
    1e0e:	72 e1       	ldi	r23, 0x12	; 18
    1e10:	83 e8       	ldi	r24, 0x83	; 131
    1e12:	92 e4       	ldi	r25, 0x42	; 66
    1e14:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1e18:	2f e6       	ldi	r18, 0x6F	; 111
    1e1a:	32 e1       	ldi	r19, 0x12	; 18
    1e1c:	43 e8       	ldi	r20, 0x83	; 131
    1e1e:	5a e3       	ldi	r21, 0x3A	; 58
    1e20:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1e24:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1e28:	f7 01       	movw	r30, r14
    1e2a:	71 83       	std	Z+1, r23	; 0x01
    1e2c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    1e30:	fb c2       	rjmp	.+1526   	; 0x2428 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    1e32:	a9 01       	movw	r20, r18
    1e34:	98 01       	movw	r18, r16
    1e36:	6f e6       	ldi	r22, 0x6F	; 111
    1e38:	72 e1       	ldi	r23, 0x12	; 18
    1e3a:	83 e0       	ldi	r24, 0x03	; 3
    1e3c:	94 e4       	ldi	r25, 0x44	; 68
    1e3e:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1e42:	2f e6       	ldi	r18, 0x6F	; 111
    1e44:	32 e1       	ldi	r19, 0x12	; 18
    1e46:	43 e0       	ldi	r20, 0x03	; 3
    1e48:	5c e3       	ldi	r21, 0x3C	; 60
    1e4a:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1e4e:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1e52:	f7 01       	movw	r30, r14
    1e54:	71 83       	std	Z+1, r23	; 0x01
    1e56:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    1e5a:	e6 c2       	rjmp	.+1484   	; 0x2428 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    1e5c:	a9 01       	movw	r20, r18
    1e5e:	98 01       	movw	r18, r16
    1e60:	6f e6       	ldi	r22, 0x6F	; 111
    1e62:	72 e1       	ldi	r23, 0x12	; 18
    1e64:	83 e0       	ldi	r24, 0x03	; 3
    1e66:	95 e4       	ldi	r25, 0x45	; 69
    1e68:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1e6c:	2f e6       	ldi	r18, 0x6F	; 111
    1e6e:	32 e1       	ldi	r19, 0x12	; 18
    1e70:	43 e0       	ldi	r20, 0x03	; 3
    1e72:	5d e3       	ldi	r21, 0x3D	; 61
    1e74:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1e78:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1e7c:	f7 01       	movw	r30, r14
    1e7e:	71 83       	std	Z+1, r23	; 0x01
    1e80:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    1e84:	d1 c2       	rjmp	.+1442   	; 0x2428 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    1e86:	a9 01       	movw	r20, r18
    1e88:	98 01       	movw	r18, r16
    1e8a:	6f e6       	ldi	r22, 0x6F	; 111
    1e8c:	72 e1       	ldi	r23, 0x12	; 18
    1e8e:	83 e0       	ldi	r24, 0x03	; 3
    1e90:	96 e4       	ldi	r25, 0x46	; 70
    1e92:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1e96:	2f e6       	ldi	r18, 0x6F	; 111
    1e98:	32 e1       	ldi	r19, 0x12	; 18
    1e9a:	43 e0       	ldi	r20, 0x03	; 3
    1e9c:	5e e3       	ldi	r21, 0x3E	; 62
    1e9e:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1ea2:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1ea6:	f7 01       	movw	r30, r14
    1ea8:	71 83       	std	Z+1, r23	; 0x01
    1eaa:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    1eae:	bc c2       	rjmp	.+1400   	; 0x2428 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1eb0:	f7 01       	movw	r30, r14
    1eb2:	11 82       	std	Z+1, r1	; 0x01
    1eb4:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1eb8:	b7 c2       	rjmp	.+1390   	; 0x2428 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    1eba:	62 30       	cpi	r22, 0x02	; 2
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <calc_initialValue+0x534>
    1ebe:	af c2       	rjmp	.+1374   	; 0x241e <calc_initialValue+0xa92>
		{
			switch(prescaler)
    1ec0:	40 34       	cpi	r20, 0x40	; 64
    1ec2:	51 05       	cpc	r21, r1
    1ec4:	e1 f1       	breq	.+120    	; 0x1f3e <calc_initialValue+0x5b2>
    1ec6:	38 f4       	brcc	.+14     	; 0x1ed6 <calc_initialValue+0x54a>
    1ec8:	41 30       	cpi	r20, 0x01	; 1
    1eca:	51 05       	cpc	r21, r1
    1ecc:	71 f0       	breq	.+28     	; 0x1eea <calc_initialValue+0x55e>
    1ece:	48 30       	cpi	r20, 0x08	; 8
    1ed0:	51 05       	cpc	r21, r1
    1ed2:	01 f1       	breq	.+64     	; 0x1f14 <calc_initialValue+0x588>
    1ed4:	73 c0       	rjmp	.+230    	; 0x1fbc <calc_initialValue+0x630>
    1ed6:	41 15       	cp	r20, r1
    1ed8:	f1 e0       	ldi	r31, 0x01	; 1
    1eda:	5f 07       	cpc	r21, r31
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <calc_initialValue+0x554>
    1ede:	44 c0       	rjmp	.+136    	; 0x1f68 <calc_initialValue+0x5dc>
    1ee0:	41 15       	cp	r20, r1
    1ee2:	54 40       	sbci	r21, 0x04	; 4
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <calc_initialValue+0x55c>
    1ee6:	55 c0       	rjmp	.+170    	; 0x1f92 <calc_initialValue+0x606>
    1ee8:	69 c0       	rjmp	.+210    	; 0x1fbc <calc_initialValue+0x630>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    1eea:	a9 01       	movw	r20, r18
    1eec:	98 01       	movw	r18, r16
    1eee:	6d eb       	ldi	r22, 0xBD	; 189
    1ef0:	77 e3       	ldi	r23, 0x37	; 55
    1ef2:	86 e0       	ldi	r24, 0x06	; 6
    1ef4:	9c e3       	ldi	r25, 0x3C	; 60
    1ef6:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1efa:	2d eb       	ldi	r18, 0xBD	; 189
    1efc:	37 e3       	ldi	r19, 0x37	; 55
    1efe:	46 e0       	ldi	r20, 0x06	; 6
    1f00:	54 e3       	ldi	r21, 0x34	; 52
    1f02:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1f06:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1f0a:	f7 01       	movw	r30, r14
    1f0c:	71 83       	std	Z+1, r23	; 0x01
    1f0e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    1f12:	8a c2       	rjmp	.+1300   	; 0x2428 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    1f14:	a9 01       	movw	r20, r18
    1f16:	98 01       	movw	r18, r16
    1f18:	6d eb       	ldi	r22, 0xBD	; 189
    1f1a:	77 e3       	ldi	r23, 0x37	; 55
    1f1c:	86 e8       	ldi	r24, 0x86	; 134
    1f1e:	9d e3       	ldi	r25, 0x3D	; 61
    1f20:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1f24:	2d eb       	ldi	r18, 0xBD	; 189
    1f26:	37 e3       	ldi	r19, 0x37	; 55
    1f28:	46 e8       	ldi	r20, 0x86	; 134
    1f2a:	55 e3       	ldi	r21, 0x35	; 53
    1f2c:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1f30:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1f34:	f7 01       	movw	r30, r14
    1f36:	71 83       	std	Z+1, r23	; 0x01
    1f38:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    1f3c:	75 c2       	rjmp	.+1258   	; 0x2428 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    1f3e:	a9 01       	movw	r20, r18
    1f40:	98 01       	movw	r18, r16
    1f42:	6d eb       	ldi	r22, 0xBD	; 189
    1f44:	77 e3       	ldi	r23, 0x37	; 55
    1f46:	86 e0       	ldi	r24, 0x06	; 6
    1f48:	9f e3       	ldi	r25, 0x3F	; 63
    1f4a:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1f4e:	2d eb       	ldi	r18, 0xBD	; 189
    1f50:	37 e3       	ldi	r19, 0x37	; 55
    1f52:	46 e0       	ldi	r20, 0x06	; 6
    1f54:	57 e3       	ldi	r21, 0x37	; 55
    1f56:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1f5a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1f5e:	f7 01       	movw	r30, r14
    1f60:	71 83       	std	Z+1, r23	; 0x01
    1f62:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    1f66:	60 c2       	rjmp	.+1216   	; 0x2428 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    1f68:	a9 01       	movw	r20, r18
    1f6a:	98 01       	movw	r18, r16
    1f6c:	6d eb       	ldi	r22, 0xBD	; 189
    1f6e:	77 e3       	ldi	r23, 0x37	; 55
    1f70:	86 e0       	ldi	r24, 0x06	; 6
    1f72:	90 e4       	ldi	r25, 0x40	; 64
    1f74:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1f78:	2d eb       	ldi	r18, 0xBD	; 189
    1f7a:	37 e3       	ldi	r19, 0x37	; 55
    1f7c:	46 e0       	ldi	r20, 0x06	; 6
    1f7e:	58 e3       	ldi	r21, 0x38	; 56
    1f80:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1f84:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1f88:	f7 01       	movw	r30, r14
    1f8a:	71 83       	std	Z+1, r23	; 0x01
    1f8c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    1f90:	4b c2       	rjmp	.+1174   	; 0x2428 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    1f92:	a9 01       	movw	r20, r18
    1f94:	98 01       	movw	r18, r16
    1f96:	6d eb       	ldi	r22, 0xBD	; 189
    1f98:	77 e3       	ldi	r23, 0x37	; 55
    1f9a:	86 e0       	ldi	r24, 0x06	; 6
    1f9c:	91 e4       	ldi	r25, 0x41	; 65
    1f9e:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1fa2:	2d eb       	ldi	r18, 0xBD	; 189
    1fa4:	37 e3       	ldi	r19, 0x37	; 55
    1fa6:	46 e0       	ldi	r20, 0x06	; 6
    1fa8:	59 e3       	ldi	r21, 0x39	; 57
    1faa:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    1fae:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    1fb2:	f7 01       	movw	r30, r14
    1fb4:	71 83       	std	Z+1, r23	; 0x01
    1fb6:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    1fba:	36 c2       	rjmp	.+1132   	; 0x2428 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    1fbc:	f7 01       	movw	r30, r14
    1fbe:	11 82       	std	Z+1, r1	; 0x01
    1fc0:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    1fc4:	31 c2       	rjmp	.+1122   	; 0x2428 <calc_initialValue+0xa9c>
		else
		{
			// do nothing
		}
	}
	else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    1fc6:	82 30       	cpi	r24, 0x02	; 2
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <calc_initialValue+0x640>
    1fca:	2b c2       	rjmp	.+1110   	; 0x2422 <calc_initialValue+0xa96>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    1fcc:	61 11       	cpse	r22, r1
    1fce:	b1 c0       	rjmp	.+354    	; 0x2132 <calc_initialValue+0x7a6>
		{
			switch(prescaler)
    1fd0:	40 34       	cpi	r20, 0x40	; 64
    1fd2:	51 05       	cpc	r21, r1
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <calc_initialValue+0x64c>
    1fd6:	54 c0       	rjmp	.+168    	; 0x2080 <calc_initialValue+0x6f4>
    1fd8:	58 f4       	brcc	.+22     	; 0x1ff0 <calc_initialValue+0x664>
    1fda:	48 30       	cpi	r20, 0x08	; 8
    1fdc:	51 05       	cpc	r21, r1
    1fde:	61 f1       	breq	.+88     	; 0x2038 <calc_initialValue+0x6ac>
    1fe0:	40 32       	cpi	r20, 0x20	; 32
    1fe2:	51 05       	cpc	r21, r1
    1fe4:	c1 f1       	breq	.+112    	; 0x2056 <calc_initialValue+0x6ca>
    1fe6:	41 30       	cpi	r20, 0x01	; 1
    1fe8:	51 05       	cpc	r21, r1
    1fea:	09 f0       	breq	.+2      	; 0x1fee <calc_initialValue+0x662>
    1fec:	9d c0       	rjmp	.+314    	; 0x2128 <calc_initialValue+0x79c>
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <calc_initialValue+0x682>
    1ff0:	41 15       	cp	r20, r1
    1ff2:	f1 e0       	ldi	r31, 0x01	; 1
    1ff4:	5f 07       	cpc	r21, r31
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <calc_initialValue+0x66e>
    1ff8:	6d c0       	rjmp	.+218    	; 0x20d4 <calc_initialValue+0x748>
    1ffa:	41 15       	cp	r20, r1
    1ffc:	84 e0       	ldi	r24, 0x04	; 4
    1ffe:	58 07       	cpc	r21, r24
    2000:	09 f4       	brne	.+2      	; 0x2004 <calc_initialValue+0x678>
    2002:	7d c0       	rjmp	.+250    	; 0x20fe <calc_initialValue+0x772>
    2004:	40 38       	cpi	r20, 0x80	; 128
    2006:	51 05       	cpc	r21, r1
    2008:	09 f0       	breq	.+2      	; 0x200c <calc_initialValue+0x680>
    200a:	8e c0       	rjmp	.+284    	; 0x2128 <calc_initialValue+0x79c>
    200c:	4e c0       	rjmp	.+156    	; 0x20aa <calc_initialValue+0x71e>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    200e:	a9 01       	movw	r20, r18
    2010:	98 01       	movw	r18, r16
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	92 e4       	ldi	r25, 0x42	; 66
    201a:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e0       	ldi	r20, 0x00	; 0
    2024:	51 e4       	ldi	r21, 0x41	; 65
    2026:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
    202a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    202e:	f7 01       	movw	r30, r14
    2030:	71 83       	std	Z+1, r23	; 0x01
    2032:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2034:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    2036:	f8 c1       	rjmp	.+1008   	; 0x2428 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    2038:	a9 01       	movw	r20, r18
    203a:	98 01       	movw	r18, r16
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	80 e8       	ldi	r24, 0x80	; 128
    2042:	93 e4       	ldi	r25, 0x43	; 67
    2044:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    2048:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    204c:	f7 01       	movw	r30, r14
    204e:	71 83       	std	Z+1, r23	; 0x01
    2050:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2052:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    2054:	e9 c1       	rjmp	.+978    	; 0x2428 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
    2056:	a9 01       	movw	r20, r18
    2058:	98 01       	movw	r18, r16
    205a:	60 e0       	ldi	r22, 0x00	; 0
    205c:	70 e0       	ldi	r23, 0x00	; 0
    205e:	80 e8       	ldi	r24, 0x80	; 128
    2060:	94 e4       	ldi	r25, 0x44	; 68
    2062:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e8       	ldi	r20, 0x80	; 128
    206c:	5e e3       	ldi	r21, 0x3E	; 62
    206e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
    2072:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    2076:	f7 01       	movw	r30, r14
    2078:	71 83       	std	Z+1, r23	; 0x01
    207a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    207c:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
				break;
    207e:	d4 c1       	rjmp	.+936    	; 0x2428 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    2080:	a9 01       	movw	r20, r18
    2082:	98 01       	movw	r18, r16
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	95 e4       	ldi	r25, 0x45	; 69
    208c:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	5e e3       	ldi	r21, 0x3E	; 62
    2098:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
    209c:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    20a0:	f7 01       	movw	r30, r14
    20a2:	71 83       	std	Z+1, r23	; 0x01
    20a4:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    20a8:	bf c1       	rjmp	.+894    	; 0x2428 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
    20aa:	a9 01       	movw	r20, r18
    20ac:	98 01       	movw	r18, r16
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	80 e8       	ldi	r24, 0x80	; 128
    20b4:	95 e4       	ldi	r25, 0x45	; 69
    20b6:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5d e3       	ldi	r21, 0x3D	; 61
    20c2:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
    20c6:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    20ca:	f7 01       	movw	r30, r14
    20cc:	71 83       	std	Z+1, r23	; 0x01
    20ce:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
				break;
    20d2:	aa c1       	rjmp	.+852    	; 0x2428 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    20d4:	a9 01       	movw	r20, r18
    20d6:	98 01       	movw	r18, r16
    20d8:	60 e0       	ldi	r22, 0x00	; 0
    20da:	70 e0       	ldi	r23, 0x00	; 0
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	96 e4       	ldi	r25, 0x46	; 70
    20e0:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e0       	ldi	r20, 0x00	; 0
    20ea:	5d e3       	ldi	r21, 0x3D	; 61
    20ec:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
    20f0:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    20f4:	f7 01       	movw	r30, r14
    20f6:	71 83       	std	Z+1, r23	; 0x01
    20f8:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    20fc:	95 c1       	rjmp	.+810    	; 0x2428 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    20fe:	a9 01       	movw	r20, r18
    2100:	98 01       	movw	r18, r16
    2102:	60 e0       	ldi	r22, 0x00	; 0
    2104:	70 e0       	ldi	r23, 0x00	; 0
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	97 e4       	ldi	r25, 0x47	; 71
    210a:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	5c e3       	ldi	r21, 0x3C	; 60
    2116:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__mulsf3>
    211a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    211e:	f7 01       	movw	r30, r14
    2120:	71 83       	std	Z+1, r23	; 0x01
    2122:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2124:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    2126:	80 c1       	rjmp	.+768    	; 0x2428 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2128:	f7 01       	movw	r30, r14
    212a:	11 82       	std	Z+1, r1	; 0x01
    212c:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    212e:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2130:	7b c1       	rjmp	.+758    	; 0x2428 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    2132:	61 30       	cpi	r22, 0x01	; 1
    2134:	09 f0       	breq	.+2      	; 0x2138 <calc_initialValue+0x7ac>
    2136:	b7 c0       	rjmp	.+366    	; 0x22a6 <calc_initialValue+0x91a>
		{
			switch(prescaler)
    2138:	40 34       	cpi	r20, 0x40	; 64
    213a:	51 05       	cpc	r21, r1
    213c:	09 f4       	brne	.+2      	; 0x2140 <calc_initialValue+0x7b4>
    213e:	5a c0       	rjmp	.+180    	; 0x21f4 <calc_initialValue+0x868>
    2140:	58 f4       	brcc	.+22     	; 0x2158 <calc_initialValue+0x7cc>
    2142:	48 30       	cpi	r20, 0x08	; 8
    2144:	51 05       	cpc	r21, r1
    2146:	61 f1       	breq	.+88     	; 0x21a0 <calc_initialValue+0x814>
    2148:	40 32       	cpi	r20, 0x20	; 32
    214a:	51 05       	cpc	r21, r1
    214c:	f1 f1       	breq	.+124    	; 0x21ca <calc_initialValue+0x83e>
    214e:	41 30       	cpi	r20, 0x01	; 1
    2150:	51 05       	cpc	r21, r1
    2152:	09 f0       	breq	.+2      	; 0x2156 <calc_initialValue+0x7ca>
    2154:	a3 c0       	rjmp	.+326    	; 0x229c <calc_initialValue+0x910>
    2156:	0f c0       	rjmp	.+30     	; 0x2176 <calc_initialValue+0x7ea>
    2158:	41 15       	cp	r20, r1
    215a:	f1 e0       	ldi	r31, 0x01	; 1
    215c:	5f 07       	cpc	r21, r31
    215e:	09 f4       	brne	.+2      	; 0x2162 <calc_initialValue+0x7d6>
    2160:	73 c0       	rjmp	.+230    	; 0x2248 <calc_initialValue+0x8bc>
    2162:	41 15       	cp	r20, r1
    2164:	84 e0       	ldi	r24, 0x04	; 4
    2166:	58 07       	cpc	r21, r24
    2168:	09 f4       	brne	.+2      	; 0x216c <calc_initialValue+0x7e0>
    216a:	83 c0       	rjmp	.+262    	; 0x2272 <calc_initialValue+0x8e6>
    216c:	40 38       	cpi	r20, 0x80	; 128
    216e:	51 05       	cpc	r21, r1
    2170:	09 f0       	breq	.+2      	; 0x2174 <calc_initialValue+0x7e8>
    2172:	94 c0       	rjmp	.+296    	; 0x229c <calc_initialValue+0x910>
    2174:	54 c0       	rjmp	.+168    	; 0x221e <calc_initialValue+0x892>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    2176:	a9 01       	movw	r20, r18
    2178:	98 01       	movw	r18, r16
    217a:	6f e6       	ldi	r22, 0x6F	; 111
    217c:	72 e1       	ldi	r23, 0x12	; 18
    217e:	83 e0       	ldi	r24, 0x03	; 3
    2180:	9d e3       	ldi	r25, 0x3D	; 61
    2182:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    2186:	2f e6       	ldi	r18, 0x6F	; 111
    2188:	32 e1       	ldi	r19, 0x12	; 18
    218a:	43 e0       	ldi	r20, 0x03	; 3
    218c:	59 e3       	ldi	r21, 0x39	; 57
    218e:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    2192:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    2196:	f7 01       	movw	r30, r14
    2198:	71 83       	std	Z+1, r23	; 0x01
    219a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    219c:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    219e:	44 c1       	rjmp	.+648    	; 0x2428 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    21a0:	a9 01       	movw	r20, r18
    21a2:	98 01       	movw	r18, r16
    21a4:	6f e6       	ldi	r22, 0x6F	; 111
    21a6:	72 e1       	ldi	r23, 0x12	; 18
    21a8:	83 e8       	ldi	r24, 0x83	; 131
    21aa:	9e e3       	ldi	r25, 0x3E	; 62
    21ac:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    21b0:	2f e6       	ldi	r18, 0x6F	; 111
    21b2:	32 e1       	ldi	r19, 0x12	; 18
    21b4:	43 e8       	ldi	r20, 0x83	; 131
    21b6:	5a e3       	ldi	r21, 0x3A	; 58
    21b8:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    21bc:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    21c0:	f7 01       	movw	r30, r14
    21c2:	71 83       	std	Z+1, r23	; 0x01
    21c4:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    21c6:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    21c8:	2f c1       	rjmp	.+606    	; 0x2428 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
    21ca:	a9 01       	movw	r20, r18
    21cc:	98 01       	movw	r18, r16
    21ce:	6f e6       	ldi	r22, 0x6F	; 111
    21d0:	72 e1       	ldi	r23, 0x12	; 18
    21d2:	83 e8       	ldi	r24, 0x83	; 131
    21d4:	9f e3       	ldi	r25, 0x3F	; 63
    21d6:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    21da:	2f e6       	ldi	r18, 0x6F	; 111
    21dc:	32 e1       	ldi	r19, 0x12	; 18
    21de:	43 e8       	ldi	r20, 0x83	; 131
    21e0:	5b e3       	ldi	r21, 0x3B	; 59
    21e2:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    21e6:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    21ea:	f7 01       	movw	r30, r14
    21ec:	71 83       	std	Z+1, r23	; 0x01
    21ee:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
				break;
    21f2:	1a c1       	rjmp	.+564    	; 0x2428 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    21f4:	a9 01       	movw	r20, r18
    21f6:	98 01       	movw	r18, r16
    21f8:	6f e6       	ldi	r22, 0x6F	; 111
    21fa:	72 e1       	ldi	r23, 0x12	; 18
    21fc:	83 e0       	ldi	r24, 0x03	; 3
    21fe:	90 e4       	ldi	r25, 0x40	; 64
    2200:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    2204:	2f e6       	ldi	r18, 0x6F	; 111
    2206:	32 e1       	ldi	r19, 0x12	; 18
    2208:	43 e0       	ldi	r20, 0x03	; 3
    220a:	5c e3       	ldi	r21, 0x3C	; 60
    220c:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    2210:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    2214:	f7 01       	movw	r30, r14
    2216:	71 83       	std	Z+1, r23	; 0x01
    2218:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    221a:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    221c:	05 c1       	rjmp	.+522    	; 0x2428 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
    221e:	a9 01       	movw	r20, r18
    2220:	98 01       	movw	r18, r16
    2222:	6f e6       	ldi	r22, 0x6F	; 111
    2224:	72 e1       	ldi	r23, 0x12	; 18
    2226:	83 e8       	ldi	r24, 0x83	; 131
    2228:	90 e4       	ldi	r25, 0x40	; 64
    222a:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    222e:	2f e6       	ldi	r18, 0x6F	; 111
    2230:	32 e1       	ldi	r19, 0x12	; 18
    2232:	43 e8       	ldi	r20, 0x83	; 131
    2234:	5c e3       	ldi	r21, 0x3C	; 60
    2236:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    223a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    223e:	f7 01       	movw	r30, r14
    2240:	71 83       	std	Z+1, r23	; 0x01
    2242:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2244:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
				break;
    2246:	f0 c0       	rjmp	.+480    	; 0x2428 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    2248:	a9 01       	movw	r20, r18
    224a:	98 01       	movw	r18, r16
    224c:	6f e6       	ldi	r22, 0x6F	; 111
    224e:	72 e1       	ldi	r23, 0x12	; 18
    2250:	83 e0       	ldi	r24, 0x03	; 3
    2252:	91 e4       	ldi	r25, 0x41	; 65
    2254:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    2258:	2f e6       	ldi	r18, 0x6F	; 111
    225a:	32 e1       	ldi	r19, 0x12	; 18
    225c:	43 e0       	ldi	r20, 0x03	; 3
    225e:	5d e3       	ldi	r21, 0x3D	; 61
    2260:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    2264:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    2268:	f7 01       	movw	r30, r14
    226a:	71 83       	std	Z+1, r23	; 0x01
    226c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    226e:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    2270:	db c0       	rjmp	.+438    	; 0x2428 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    2272:	a9 01       	movw	r20, r18
    2274:	98 01       	movw	r18, r16
    2276:	6f e6       	ldi	r22, 0x6F	; 111
    2278:	72 e1       	ldi	r23, 0x12	; 18
    227a:	83 e0       	ldi	r24, 0x03	; 3
    227c:	92 e4       	ldi	r25, 0x42	; 66
    227e:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    2282:	2f e6       	ldi	r18, 0x6F	; 111
    2284:	32 e1       	ldi	r19, 0x12	; 18
    2286:	43 e0       	ldi	r20, 0x03	; 3
    2288:	5e e3       	ldi	r21, 0x3E	; 62
    228a:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    228e:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    2292:	f7 01       	movw	r30, r14
    2294:	71 83       	std	Z+1, r23	; 0x01
    2296:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2298:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    229a:	c6 c0       	rjmp	.+396    	; 0x2428 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    229c:	f7 01       	movw	r30, r14
    229e:	11 82       	std	Z+1, r1	; 0x01
    22a0:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    22a2:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    22a4:	c1 c0       	rjmp	.+386    	; 0x2428 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    22a6:	62 30       	cpi	r22, 0x02	; 2
    22a8:	09 f0       	breq	.+2      	; 0x22ac <calc_initialValue+0x920>
    22aa:	bd c0       	rjmp	.+378    	; 0x2426 <calc_initialValue+0xa9a>
		{
			switch(prescaler)
    22ac:	40 34       	cpi	r20, 0x40	; 64
    22ae:	51 05       	cpc	r21, r1
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <calc_initialValue+0x928>
    22b2:	5a c0       	rjmp	.+180    	; 0x2368 <calc_initialValue+0x9dc>
    22b4:	58 f4       	brcc	.+22     	; 0x22cc <calc_initialValue+0x940>
    22b6:	48 30       	cpi	r20, 0x08	; 8
    22b8:	51 05       	cpc	r21, r1
    22ba:	61 f1       	breq	.+88     	; 0x2314 <calc_initialValue+0x988>
    22bc:	40 32       	cpi	r20, 0x20	; 32
    22be:	51 05       	cpc	r21, r1
    22c0:	f1 f1       	breq	.+124    	; 0x233e <calc_initialValue+0x9b2>
    22c2:	41 30       	cpi	r20, 0x01	; 1
    22c4:	51 05       	cpc	r21, r1
    22c6:	09 f0       	breq	.+2      	; 0x22ca <calc_initialValue+0x93e>
    22c8:	a3 c0       	rjmp	.+326    	; 0x2410 <calc_initialValue+0xa84>
    22ca:	0f c0       	rjmp	.+30     	; 0x22ea <calc_initialValue+0x95e>
    22cc:	41 15       	cp	r20, r1
    22ce:	f1 e0       	ldi	r31, 0x01	; 1
    22d0:	5f 07       	cpc	r21, r31
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <calc_initialValue+0x94a>
    22d4:	73 c0       	rjmp	.+230    	; 0x23bc <calc_initialValue+0xa30>
    22d6:	41 15       	cp	r20, r1
    22d8:	84 e0       	ldi	r24, 0x04	; 4
    22da:	58 07       	cpc	r21, r24
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <calc_initialValue+0x954>
    22de:	83 c0       	rjmp	.+262    	; 0x23e6 <calc_initialValue+0xa5a>
    22e0:	40 38       	cpi	r20, 0x80	; 128
    22e2:	51 05       	cpc	r21, r1
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <calc_initialValue+0x95c>
    22e6:	94 c0       	rjmp	.+296    	; 0x2410 <calc_initialValue+0xa84>
    22e8:	54 c0       	rjmp	.+168    	; 0x2392 <calc_initialValue+0xa06>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    22ea:	a9 01       	movw	r20, r18
    22ec:	98 01       	movw	r18, r16
    22ee:	6d eb       	ldi	r22, 0xBD	; 189
    22f0:	77 e3       	ldi	r23, 0x37	; 55
    22f2:	86 e0       	ldi	r24, 0x06	; 6
    22f4:	98 e3       	ldi	r25, 0x38	; 56
    22f6:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    22fa:	2d eb       	ldi	r18, 0xBD	; 189
    22fc:	37 e3       	ldi	r19, 0x37	; 55
    22fe:	46 e0       	ldi	r20, 0x06	; 6
    2300:	54 e3       	ldi	r21, 0x34	; 52
    2302:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    2306:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    230a:	f7 01       	movw	r30, r14
    230c:	71 83       	std	Z+1, r23	; 0x01
    230e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2310:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    2312:	8a c0       	rjmp	.+276    	; 0x2428 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    2314:	a9 01       	movw	r20, r18
    2316:	98 01       	movw	r18, r16
    2318:	6d eb       	ldi	r22, 0xBD	; 189
    231a:	77 e3       	ldi	r23, 0x37	; 55
    231c:	86 e8       	ldi	r24, 0x86	; 134
    231e:	99 e3       	ldi	r25, 0x39	; 57
    2320:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    2324:	2d eb       	ldi	r18, 0xBD	; 189
    2326:	37 e3       	ldi	r19, 0x37	; 55
    2328:	46 e8       	ldi	r20, 0x86	; 134
    232a:	55 e3       	ldi	r21, 0x35	; 53
    232c:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    2330:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    2334:	f7 01       	movw	r30, r14
    2336:	71 83       	std	Z+1, r23	; 0x01
    2338:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    233a:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    233c:	75 c0       	rjmp	.+234    	; 0x2428 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
    233e:	a9 01       	movw	r20, r18
    2340:	98 01       	movw	r18, r16
    2342:	6d eb       	ldi	r22, 0xBD	; 189
    2344:	77 e3       	ldi	r23, 0x37	; 55
    2346:	86 e8       	ldi	r24, 0x86	; 134
    2348:	9a e3       	ldi	r25, 0x3A	; 58
    234a:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    234e:	2d eb       	ldi	r18, 0xBD	; 189
    2350:	37 e3       	ldi	r19, 0x37	; 55
    2352:	46 e8       	ldi	r20, 0x86	; 134
    2354:	56 e3       	ldi	r21, 0x36	; 54
    2356:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    235a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    235e:	f7 01       	movw	r30, r14
    2360:	71 83       	std	Z+1, r23	; 0x01
    2362:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2364:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
				break;
    2366:	60 c0       	rjmp	.+192    	; 0x2428 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    2368:	a9 01       	movw	r20, r18
    236a:	98 01       	movw	r18, r16
    236c:	6d eb       	ldi	r22, 0xBD	; 189
    236e:	77 e3       	ldi	r23, 0x37	; 55
    2370:	86 e0       	ldi	r24, 0x06	; 6
    2372:	9b e3       	ldi	r25, 0x3B	; 59
    2374:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    2378:	2d eb       	ldi	r18, 0xBD	; 189
    237a:	37 e3       	ldi	r19, 0x37	; 55
    237c:	46 e0       	ldi	r20, 0x06	; 6
    237e:	57 e3       	ldi	r21, 0x37	; 55
    2380:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    2384:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    2388:	f7 01       	movw	r30, r14
    238a:	71 83       	std	Z+1, r23	; 0x01
    238c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    238e:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    2390:	4b c0       	rjmp	.+150    	; 0x2428 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
    2392:	a9 01       	movw	r20, r18
    2394:	98 01       	movw	r18, r16
    2396:	6d eb       	ldi	r22, 0xBD	; 189
    2398:	77 e3       	ldi	r23, 0x37	; 55
    239a:	86 e8       	ldi	r24, 0x86	; 134
    239c:	9b e3       	ldi	r25, 0x3B	; 59
    239e:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    23a2:	2d eb       	ldi	r18, 0xBD	; 189
    23a4:	37 e3       	ldi	r19, 0x37	; 55
    23a6:	46 e8       	ldi	r20, 0x86	; 134
    23a8:	57 e3       	ldi	r21, 0x37	; 55
    23aa:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    23ae:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    23b2:	f7 01       	movw	r30, r14
    23b4:	71 83       	std	Z+1, r23	; 0x01
    23b6:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
				break;
    23ba:	36 c0       	rjmp	.+108    	; 0x2428 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    23bc:	a9 01       	movw	r20, r18
    23be:	98 01       	movw	r18, r16
    23c0:	6d eb       	ldi	r22, 0xBD	; 189
    23c2:	77 e3       	ldi	r23, 0x37	; 55
    23c4:	86 e0       	ldi	r24, 0x06	; 6
    23c6:	9c e3       	ldi	r25, 0x3C	; 60
    23c8:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    23cc:	2d eb       	ldi	r18, 0xBD	; 189
    23ce:	37 e3       	ldi	r19, 0x37	; 55
    23d0:	46 e0       	ldi	r20, 0x06	; 6
    23d2:	58 e3       	ldi	r21, 0x38	; 56
    23d4:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    23d8:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    23dc:	f7 01       	movw	r30, r14
    23de:	71 83       	std	Z+1, r23	; 0x01
    23e0:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    23e4:	21 c0       	rjmp	.+66     	; 0x2428 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    23e6:	a9 01       	movw	r20, r18
    23e8:	98 01       	movw	r18, r16
    23ea:	6d eb       	ldi	r22, 0xBD	; 189
    23ec:	77 e3       	ldi	r23, 0x37	; 55
    23ee:	86 e0       	ldi	r24, 0x06	; 6
    23f0:	9d e3       	ldi	r25, 0x3D	; 61
    23f2:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    23f6:	2d eb       	ldi	r18, 0xBD	; 189
    23f8:	37 e3       	ldi	r19, 0x37	; 55
    23fa:	46 e0       	ldi	r20, 0x06	; 6
    23fc:	59 e3       	ldi	r21, 0x39	; 57
    23fe:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divsf3>
    2402:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__fixunssfsi>
    2406:	f7 01       	movw	r30, r14
    2408:	71 83       	std	Z+1, r23	; 0x01
    240a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    240c:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    240e:	0c c0       	rjmp	.+24     	; 0x2428 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2410:	f7 01       	movw	r30, r14
    2412:	11 82       	std	Z+1, r1	; 0x01
    2414:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2416:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2418:	07 c0       	rjmp	.+14     	; 0x2428 <calc_initialValue+0xa9c>
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	05 c0       	rjmp	.+10     	; 0x2428 <calc_initialValue+0xa9c>
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	03 c0       	rjmp	.+6      	; 0x2428 <calc_initialValue+0xa9c>
		}
		
	}
	else
	{
		bo_return_value = FALSE;
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	01 c0       	rjmp	.+2      	; 0x2428 <calc_initialValue+0xa9c>
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2426:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		bo_return_value = FALSE;
	}
	return bo_return_value;
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	ff 90       	pop	r15
    242e:	ef 90       	pop	r14
    2430:	08 95       	ret

00002432 <__subsf3>:
    2432:	50 58       	subi	r21, 0x80	; 128

00002434 <__addsf3>:
    2434:	bb 27       	eor	r27, r27
    2436:	aa 27       	eor	r26, r26
    2438:	0e 94 31 12 	call	0x2462	; 0x2462 <__addsf3x>
    243c:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <__fp_round>
    2440:	0e 94 96 13 	call	0x272c	; 0x272c <__fp_pscA>
    2444:	38 f0       	brcs	.+14     	; 0x2454 <__addsf3+0x20>
    2446:	0e 94 9d 13 	call	0x273a	; 0x273a <__fp_pscB>
    244a:	20 f0       	brcs	.+8      	; 0x2454 <__addsf3+0x20>
    244c:	39 f4       	brne	.+14     	; 0x245c <__addsf3+0x28>
    244e:	9f 3f       	cpi	r25, 0xFF	; 255
    2450:	19 f4       	brne	.+6      	; 0x2458 <__addsf3+0x24>
    2452:	26 f4       	brtc	.+8      	; 0x245c <__addsf3+0x28>
    2454:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__fp_nan>
    2458:	0e f4       	brtc	.+2      	; 0x245c <__addsf3+0x28>
    245a:	e0 95       	com	r30
    245c:	e7 fb       	bst	r30, 7
    245e:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__fp_inf>

00002462 <__addsf3x>:
    2462:	e9 2f       	mov	r30, r25
    2464:	0e 94 b5 13 	call	0x276a	; 0x276a <__fp_split3>
    2468:	58 f3       	brcs	.-42     	; 0x2440 <__addsf3+0xc>
    246a:	ba 17       	cp	r27, r26
    246c:	62 07       	cpc	r22, r18
    246e:	73 07       	cpc	r23, r19
    2470:	84 07       	cpc	r24, r20
    2472:	95 07       	cpc	r25, r21
    2474:	20 f0       	brcs	.+8      	; 0x247e <__addsf3x+0x1c>
    2476:	79 f4       	brne	.+30     	; 0x2496 <__addsf3x+0x34>
    2478:	a6 f5       	brtc	.+104    	; 0x24e2 <__addsf3x+0x80>
    247a:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__fp_zero>
    247e:	0e f4       	brtc	.+2      	; 0x2482 <__addsf3x+0x20>
    2480:	e0 95       	com	r30
    2482:	0b 2e       	mov	r0, r27
    2484:	ba 2f       	mov	r27, r26
    2486:	a0 2d       	mov	r26, r0
    2488:	0b 01       	movw	r0, r22
    248a:	b9 01       	movw	r22, r18
    248c:	90 01       	movw	r18, r0
    248e:	0c 01       	movw	r0, r24
    2490:	ca 01       	movw	r24, r20
    2492:	a0 01       	movw	r20, r0
    2494:	11 24       	eor	r1, r1
    2496:	ff 27       	eor	r31, r31
    2498:	59 1b       	sub	r21, r25
    249a:	99 f0       	breq	.+38     	; 0x24c2 <__addsf3x+0x60>
    249c:	59 3f       	cpi	r21, 0xF9	; 249
    249e:	50 f4       	brcc	.+20     	; 0x24b4 <__addsf3x+0x52>
    24a0:	50 3e       	cpi	r21, 0xE0	; 224
    24a2:	68 f1       	brcs	.+90     	; 0x24fe <__addsf3x+0x9c>
    24a4:	1a 16       	cp	r1, r26
    24a6:	f0 40       	sbci	r31, 0x00	; 0
    24a8:	a2 2f       	mov	r26, r18
    24aa:	23 2f       	mov	r18, r19
    24ac:	34 2f       	mov	r19, r20
    24ae:	44 27       	eor	r20, r20
    24b0:	58 5f       	subi	r21, 0xF8	; 248
    24b2:	f3 cf       	rjmp	.-26     	; 0x249a <__addsf3x+0x38>
    24b4:	46 95       	lsr	r20
    24b6:	37 95       	ror	r19
    24b8:	27 95       	ror	r18
    24ba:	a7 95       	ror	r26
    24bc:	f0 40       	sbci	r31, 0x00	; 0
    24be:	53 95       	inc	r21
    24c0:	c9 f7       	brne	.-14     	; 0x24b4 <__addsf3x+0x52>
    24c2:	7e f4       	brtc	.+30     	; 0x24e2 <__addsf3x+0x80>
    24c4:	1f 16       	cp	r1, r31
    24c6:	ba 0b       	sbc	r27, r26
    24c8:	62 0b       	sbc	r22, r18
    24ca:	73 0b       	sbc	r23, r19
    24cc:	84 0b       	sbc	r24, r20
    24ce:	ba f0       	brmi	.+46     	; 0x24fe <__addsf3x+0x9c>
    24d0:	91 50       	subi	r25, 0x01	; 1
    24d2:	a1 f0       	breq	.+40     	; 0x24fc <__addsf3x+0x9a>
    24d4:	ff 0f       	add	r31, r31
    24d6:	bb 1f       	adc	r27, r27
    24d8:	66 1f       	adc	r22, r22
    24da:	77 1f       	adc	r23, r23
    24dc:	88 1f       	adc	r24, r24
    24de:	c2 f7       	brpl	.-16     	; 0x24d0 <__addsf3x+0x6e>
    24e0:	0e c0       	rjmp	.+28     	; 0x24fe <__addsf3x+0x9c>
    24e2:	ba 0f       	add	r27, r26
    24e4:	62 1f       	adc	r22, r18
    24e6:	73 1f       	adc	r23, r19
    24e8:	84 1f       	adc	r24, r20
    24ea:	48 f4       	brcc	.+18     	; 0x24fe <__addsf3x+0x9c>
    24ec:	87 95       	ror	r24
    24ee:	77 95       	ror	r23
    24f0:	67 95       	ror	r22
    24f2:	b7 95       	ror	r27
    24f4:	f7 95       	ror	r31
    24f6:	9e 3f       	cpi	r25, 0xFE	; 254
    24f8:	08 f0       	brcs	.+2      	; 0x24fc <__addsf3x+0x9a>
    24fa:	b0 cf       	rjmp	.-160    	; 0x245c <__addsf3+0x28>
    24fc:	93 95       	inc	r25
    24fe:	88 0f       	add	r24, r24
    2500:	08 f0       	brcs	.+2      	; 0x2504 <__addsf3x+0xa2>
    2502:	99 27       	eor	r25, r25
    2504:	ee 0f       	add	r30, r30
    2506:	97 95       	ror	r25
    2508:	87 95       	ror	r24
    250a:	08 95       	ret

0000250c <__cmpsf2>:
    250c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__fp_cmp>
    2510:	08 f4       	brcc	.+2      	; 0x2514 <__cmpsf2+0x8>
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	08 95       	ret

00002516 <__divsf3>:
    2516:	0e 94 9f 12 	call	0x253e	; 0x253e <__divsf3x>
    251a:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <__fp_round>
    251e:	0e 94 9d 13 	call	0x273a	; 0x273a <__fp_pscB>
    2522:	58 f0       	brcs	.+22     	; 0x253a <__divsf3+0x24>
    2524:	0e 94 96 13 	call	0x272c	; 0x272c <__fp_pscA>
    2528:	40 f0       	brcs	.+16     	; 0x253a <__divsf3+0x24>
    252a:	29 f4       	brne	.+10     	; 0x2536 <__divsf3+0x20>
    252c:	5f 3f       	cpi	r21, 0xFF	; 255
    252e:	29 f0       	breq	.+10     	; 0x253a <__divsf3+0x24>
    2530:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__fp_inf>
    2534:	51 11       	cpse	r21, r1
    2536:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <__fp_szero>
    253a:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__fp_nan>

0000253e <__divsf3x>:
    253e:	0e 94 b5 13 	call	0x276a	; 0x276a <__fp_split3>
    2542:	68 f3       	brcs	.-38     	; 0x251e <__divsf3+0x8>

00002544 <__divsf3_pse>:
    2544:	99 23       	and	r25, r25
    2546:	b1 f3       	breq	.-20     	; 0x2534 <__divsf3+0x1e>
    2548:	55 23       	and	r21, r21
    254a:	91 f3       	breq	.-28     	; 0x2530 <__divsf3+0x1a>
    254c:	95 1b       	sub	r25, r21
    254e:	55 0b       	sbc	r21, r21
    2550:	bb 27       	eor	r27, r27
    2552:	aa 27       	eor	r26, r26
    2554:	62 17       	cp	r22, r18
    2556:	73 07       	cpc	r23, r19
    2558:	84 07       	cpc	r24, r20
    255a:	38 f0       	brcs	.+14     	; 0x256a <__divsf3_pse+0x26>
    255c:	9f 5f       	subi	r25, 0xFF	; 255
    255e:	5f 4f       	sbci	r21, 0xFF	; 255
    2560:	22 0f       	add	r18, r18
    2562:	33 1f       	adc	r19, r19
    2564:	44 1f       	adc	r20, r20
    2566:	aa 1f       	adc	r26, r26
    2568:	a9 f3       	breq	.-22     	; 0x2554 <__divsf3_pse+0x10>
    256a:	35 d0       	rcall	.+106    	; 0x25d6 <__divsf3_pse+0x92>
    256c:	0e 2e       	mov	r0, r30
    256e:	3a f0       	brmi	.+14     	; 0x257e <__divsf3_pse+0x3a>
    2570:	e0 e8       	ldi	r30, 0x80	; 128
    2572:	32 d0       	rcall	.+100    	; 0x25d8 <__divsf3_pse+0x94>
    2574:	91 50       	subi	r25, 0x01	; 1
    2576:	50 40       	sbci	r21, 0x00	; 0
    2578:	e6 95       	lsr	r30
    257a:	00 1c       	adc	r0, r0
    257c:	ca f7       	brpl	.-14     	; 0x2570 <__divsf3_pse+0x2c>
    257e:	2b d0       	rcall	.+86     	; 0x25d6 <__divsf3_pse+0x92>
    2580:	fe 2f       	mov	r31, r30
    2582:	29 d0       	rcall	.+82     	; 0x25d6 <__divsf3_pse+0x92>
    2584:	66 0f       	add	r22, r22
    2586:	77 1f       	adc	r23, r23
    2588:	88 1f       	adc	r24, r24
    258a:	bb 1f       	adc	r27, r27
    258c:	26 17       	cp	r18, r22
    258e:	37 07       	cpc	r19, r23
    2590:	48 07       	cpc	r20, r24
    2592:	ab 07       	cpc	r26, r27
    2594:	b0 e8       	ldi	r27, 0x80	; 128
    2596:	09 f0       	breq	.+2      	; 0x259a <__divsf3_pse+0x56>
    2598:	bb 0b       	sbc	r27, r27
    259a:	80 2d       	mov	r24, r0
    259c:	bf 01       	movw	r22, r30
    259e:	ff 27       	eor	r31, r31
    25a0:	93 58       	subi	r25, 0x83	; 131
    25a2:	5f 4f       	sbci	r21, 0xFF	; 255
    25a4:	3a f0       	brmi	.+14     	; 0x25b4 <__divsf3_pse+0x70>
    25a6:	9e 3f       	cpi	r25, 0xFE	; 254
    25a8:	51 05       	cpc	r21, r1
    25aa:	78 f0       	brcs	.+30     	; 0x25ca <__divsf3_pse+0x86>
    25ac:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__fp_inf>
    25b0:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <__fp_szero>
    25b4:	5f 3f       	cpi	r21, 0xFF	; 255
    25b6:	e4 f3       	brlt	.-8      	; 0x25b0 <__divsf3_pse+0x6c>
    25b8:	98 3e       	cpi	r25, 0xE8	; 232
    25ba:	d4 f3       	brlt	.-12     	; 0x25b0 <__divsf3_pse+0x6c>
    25bc:	86 95       	lsr	r24
    25be:	77 95       	ror	r23
    25c0:	67 95       	ror	r22
    25c2:	b7 95       	ror	r27
    25c4:	f7 95       	ror	r31
    25c6:	9f 5f       	subi	r25, 0xFF	; 255
    25c8:	c9 f7       	brne	.-14     	; 0x25bc <__divsf3_pse+0x78>
    25ca:	88 0f       	add	r24, r24
    25cc:	91 1d       	adc	r25, r1
    25ce:	96 95       	lsr	r25
    25d0:	87 95       	ror	r24
    25d2:	97 f9       	bld	r25, 7
    25d4:	08 95       	ret
    25d6:	e1 e0       	ldi	r30, 0x01	; 1
    25d8:	66 0f       	add	r22, r22
    25da:	77 1f       	adc	r23, r23
    25dc:	88 1f       	adc	r24, r24
    25de:	bb 1f       	adc	r27, r27
    25e0:	62 17       	cp	r22, r18
    25e2:	73 07       	cpc	r23, r19
    25e4:	84 07       	cpc	r24, r20
    25e6:	ba 07       	cpc	r27, r26
    25e8:	20 f0       	brcs	.+8      	; 0x25f2 <__divsf3_pse+0xae>
    25ea:	62 1b       	sub	r22, r18
    25ec:	73 0b       	sbc	r23, r19
    25ee:	84 0b       	sbc	r24, r20
    25f0:	ba 0b       	sbc	r27, r26
    25f2:	ee 1f       	adc	r30, r30
    25f4:	88 f7       	brcc	.-30     	; 0x25d8 <__divsf3_pse+0x94>
    25f6:	e0 95       	com	r30
    25f8:	08 95       	ret

000025fa <__fixunssfsi>:
    25fa:	0e 94 bd 13 	call	0x277a	; 0x277a <__fp_splitA>
    25fe:	88 f0       	brcs	.+34     	; 0x2622 <__fixunssfsi+0x28>
    2600:	9f 57       	subi	r25, 0x7F	; 127
    2602:	98 f0       	brcs	.+38     	; 0x262a <__fixunssfsi+0x30>
    2604:	b9 2f       	mov	r27, r25
    2606:	99 27       	eor	r25, r25
    2608:	b7 51       	subi	r27, 0x17	; 23
    260a:	b0 f0       	brcs	.+44     	; 0x2638 <__fixunssfsi+0x3e>
    260c:	e1 f0       	breq	.+56     	; 0x2646 <__fixunssfsi+0x4c>
    260e:	66 0f       	add	r22, r22
    2610:	77 1f       	adc	r23, r23
    2612:	88 1f       	adc	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	1a f0       	brmi	.+6      	; 0x261e <__fixunssfsi+0x24>
    2618:	ba 95       	dec	r27
    261a:	c9 f7       	brne	.-14     	; 0x260e <__fixunssfsi+0x14>
    261c:	14 c0       	rjmp	.+40     	; 0x2646 <__fixunssfsi+0x4c>
    261e:	b1 30       	cpi	r27, 0x01	; 1
    2620:	91 f0       	breq	.+36     	; 0x2646 <__fixunssfsi+0x4c>
    2622:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__fp_zero>
    2626:	b1 e0       	ldi	r27, 0x01	; 1
    2628:	08 95       	ret
    262a:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__fp_zero>
    262e:	67 2f       	mov	r22, r23
    2630:	78 2f       	mov	r23, r24
    2632:	88 27       	eor	r24, r24
    2634:	b8 5f       	subi	r27, 0xF8	; 248
    2636:	39 f0       	breq	.+14     	; 0x2646 <__fixunssfsi+0x4c>
    2638:	b9 3f       	cpi	r27, 0xF9	; 249
    263a:	cc f3       	brlt	.-14     	; 0x262e <__fixunssfsi+0x34>
    263c:	86 95       	lsr	r24
    263e:	77 95       	ror	r23
    2640:	67 95       	ror	r22
    2642:	b3 95       	inc	r27
    2644:	d9 f7       	brne	.-10     	; 0x263c <__fixunssfsi+0x42>
    2646:	3e f4       	brtc	.+14     	; 0x2656 <__fixunssfsi+0x5c>
    2648:	90 95       	com	r25
    264a:	80 95       	com	r24
    264c:	70 95       	com	r23
    264e:	61 95       	neg	r22
    2650:	7f 4f       	sbci	r23, 0xFF	; 255
    2652:	8f 4f       	sbci	r24, 0xFF	; 255
    2654:	9f 4f       	sbci	r25, 0xFF	; 255
    2656:	08 95       	ret

00002658 <__floatunsisf>:
    2658:	e8 94       	clt
    265a:	09 c0       	rjmp	.+18     	; 0x266e <__floatsisf+0x12>

0000265c <__floatsisf>:
    265c:	97 fb       	bst	r25, 7
    265e:	3e f4       	brtc	.+14     	; 0x266e <__floatsisf+0x12>
    2660:	90 95       	com	r25
    2662:	80 95       	com	r24
    2664:	70 95       	com	r23
    2666:	61 95       	neg	r22
    2668:	7f 4f       	sbci	r23, 0xFF	; 255
    266a:	8f 4f       	sbci	r24, 0xFF	; 255
    266c:	9f 4f       	sbci	r25, 0xFF	; 255
    266e:	99 23       	and	r25, r25
    2670:	a9 f0       	breq	.+42     	; 0x269c <__floatsisf+0x40>
    2672:	f9 2f       	mov	r31, r25
    2674:	96 e9       	ldi	r25, 0x96	; 150
    2676:	bb 27       	eor	r27, r27
    2678:	93 95       	inc	r25
    267a:	f6 95       	lsr	r31
    267c:	87 95       	ror	r24
    267e:	77 95       	ror	r23
    2680:	67 95       	ror	r22
    2682:	b7 95       	ror	r27
    2684:	f1 11       	cpse	r31, r1
    2686:	f8 cf       	rjmp	.-16     	; 0x2678 <__floatsisf+0x1c>
    2688:	fa f4       	brpl	.+62     	; 0x26c8 <__floatsisf+0x6c>
    268a:	bb 0f       	add	r27, r27
    268c:	11 f4       	brne	.+4      	; 0x2692 <__floatsisf+0x36>
    268e:	60 ff       	sbrs	r22, 0
    2690:	1b c0       	rjmp	.+54     	; 0x26c8 <__floatsisf+0x6c>
    2692:	6f 5f       	subi	r22, 0xFF	; 255
    2694:	7f 4f       	sbci	r23, 0xFF	; 255
    2696:	8f 4f       	sbci	r24, 0xFF	; 255
    2698:	9f 4f       	sbci	r25, 0xFF	; 255
    269a:	16 c0       	rjmp	.+44     	; 0x26c8 <__floatsisf+0x6c>
    269c:	88 23       	and	r24, r24
    269e:	11 f0       	breq	.+4      	; 0x26a4 <__floatsisf+0x48>
    26a0:	96 e9       	ldi	r25, 0x96	; 150
    26a2:	11 c0       	rjmp	.+34     	; 0x26c6 <__floatsisf+0x6a>
    26a4:	77 23       	and	r23, r23
    26a6:	21 f0       	breq	.+8      	; 0x26b0 <__floatsisf+0x54>
    26a8:	9e e8       	ldi	r25, 0x8E	; 142
    26aa:	87 2f       	mov	r24, r23
    26ac:	76 2f       	mov	r23, r22
    26ae:	05 c0       	rjmp	.+10     	; 0x26ba <__floatsisf+0x5e>
    26b0:	66 23       	and	r22, r22
    26b2:	71 f0       	breq	.+28     	; 0x26d0 <__floatsisf+0x74>
    26b4:	96 e8       	ldi	r25, 0x86	; 134
    26b6:	86 2f       	mov	r24, r22
    26b8:	70 e0       	ldi	r23, 0x00	; 0
    26ba:	60 e0       	ldi	r22, 0x00	; 0
    26bc:	2a f0       	brmi	.+10     	; 0x26c8 <__floatsisf+0x6c>
    26be:	9a 95       	dec	r25
    26c0:	66 0f       	add	r22, r22
    26c2:	77 1f       	adc	r23, r23
    26c4:	88 1f       	adc	r24, r24
    26c6:	da f7       	brpl	.-10     	; 0x26be <__floatsisf+0x62>
    26c8:	88 0f       	add	r24, r24
    26ca:	96 95       	lsr	r25
    26cc:	87 95       	ror	r24
    26ce:	97 f9       	bld	r25, 7
    26d0:	08 95       	ret

000026d2 <__fp_cmp>:
    26d2:	99 0f       	add	r25, r25
    26d4:	00 08       	sbc	r0, r0
    26d6:	55 0f       	add	r21, r21
    26d8:	aa 0b       	sbc	r26, r26
    26da:	e0 e8       	ldi	r30, 0x80	; 128
    26dc:	fe ef       	ldi	r31, 0xFE	; 254
    26de:	16 16       	cp	r1, r22
    26e0:	17 06       	cpc	r1, r23
    26e2:	e8 07       	cpc	r30, r24
    26e4:	f9 07       	cpc	r31, r25
    26e6:	c0 f0       	brcs	.+48     	; 0x2718 <__fp_cmp+0x46>
    26e8:	12 16       	cp	r1, r18
    26ea:	13 06       	cpc	r1, r19
    26ec:	e4 07       	cpc	r30, r20
    26ee:	f5 07       	cpc	r31, r21
    26f0:	98 f0       	brcs	.+38     	; 0x2718 <__fp_cmp+0x46>
    26f2:	62 1b       	sub	r22, r18
    26f4:	73 0b       	sbc	r23, r19
    26f6:	84 0b       	sbc	r24, r20
    26f8:	95 0b       	sbc	r25, r21
    26fa:	39 f4       	brne	.+14     	; 0x270a <__fp_cmp+0x38>
    26fc:	0a 26       	eor	r0, r26
    26fe:	61 f0       	breq	.+24     	; 0x2718 <__fp_cmp+0x46>
    2700:	23 2b       	or	r18, r19
    2702:	24 2b       	or	r18, r20
    2704:	25 2b       	or	r18, r21
    2706:	21 f4       	brne	.+8      	; 0x2710 <__fp_cmp+0x3e>
    2708:	08 95       	ret
    270a:	0a 26       	eor	r0, r26
    270c:	09 f4       	brne	.+2      	; 0x2710 <__fp_cmp+0x3e>
    270e:	a1 40       	sbci	r26, 0x01	; 1
    2710:	a6 95       	lsr	r26
    2712:	8f ef       	ldi	r24, 0xFF	; 255
    2714:	81 1d       	adc	r24, r1
    2716:	81 1d       	adc	r24, r1
    2718:	08 95       	ret

0000271a <__fp_inf>:
    271a:	97 f9       	bld	r25, 7
    271c:	9f 67       	ori	r25, 0x7F	; 127
    271e:	80 e8       	ldi	r24, 0x80	; 128
    2720:	70 e0       	ldi	r23, 0x00	; 0
    2722:	60 e0       	ldi	r22, 0x00	; 0
    2724:	08 95       	ret

00002726 <__fp_nan>:
    2726:	9f ef       	ldi	r25, 0xFF	; 255
    2728:	80 ec       	ldi	r24, 0xC0	; 192
    272a:	08 95       	ret

0000272c <__fp_pscA>:
    272c:	00 24       	eor	r0, r0
    272e:	0a 94       	dec	r0
    2730:	16 16       	cp	r1, r22
    2732:	17 06       	cpc	r1, r23
    2734:	18 06       	cpc	r1, r24
    2736:	09 06       	cpc	r0, r25
    2738:	08 95       	ret

0000273a <__fp_pscB>:
    273a:	00 24       	eor	r0, r0
    273c:	0a 94       	dec	r0
    273e:	12 16       	cp	r1, r18
    2740:	13 06       	cpc	r1, r19
    2742:	14 06       	cpc	r1, r20
    2744:	05 06       	cpc	r0, r21
    2746:	08 95       	ret

00002748 <__fp_round>:
    2748:	09 2e       	mov	r0, r25
    274a:	03 94       	inc	r0
    274c:	00 0c       	add	r0, r0
    274e:	11 f4       	brne	.+4      	; 0x2754 <__fp_round+0xc>
    2750:	88 23       	and	r24, r24
    2752:	52 f0       	brmi	.+20     	; 0x2768 <__fp_round+0x20>
    2754:	bb 0f       	add	r27, r27
    2756:	40 f4       	brcc	.+16     	; 0x2768 <__fp_round+0x20>
    2758:	bf 2b       	or	r27, r31
    275a:	11 f4       	brne	.+4      	; 0x2760 <__fp_round+0x18>
    275c:	60 ff       	sbrs	r22, 0
    275e:	04 c0       	rjmp	.+8      	; 0x2768 <__fp_round+0x20>
    2760:	6f 5f       	subi	r22, 0xFF	; 255
    2762:	7f 4f       	sbci	r23, 0xFF	; 255
    2764:	8f 4f       	sbci	r24, 0xFF	; 255
    2766:	9f 4f       	sbci	r25, 0xFF	; 255
    2768:	08 95       	ret

0000276a <__fp_split3>:
    276a:	57 fd       	sbrc	r21, 7
    276c:	90 58       	subi	r25, 0x80	; 128
    276e:	44 0f       	add	r20, r20
    2770:	55 1f       	adc	r21, r21
    2772:	59 f0       	breq	.+22     	; 0x278a <__fp_splitA+0x10>
    2774:	5f 3f       	cpi	r21, 0xFF	; 255
    2776:	71 f0       	breq	.+28     	; 0x2794 <__fp_splitA+0x1a>
    2778:	47 95       	ror	r20

0000277a <__fp_splitA>:
    277a:	88 0f       	add	r24, r24
    277c:	97 fb       	bst	r25, 7
    277e:	99 1f       	adc	r25, r25
    2780:	61 f0       	breq	.+24     	; 0x279a <__fp_splitA+0x20>
    2782:	9f 3f       	cpi	r25, 0xFF	; 255
    2784:	79 f0       	breq	.+30     	; 0x27a4 <__fp_splitA+0x2a>
    2786:	87 95       	ror	r24
    2788:	08 95       	ret
    278a:	12 16       	cp	r1, r18
    278c:	13 06       	cpc	r1, r19
    278e:	14 06       	cpc	r1, r20
    2790:	55 1f       	adc	r21, r21
    2792:	f2 cf       	rjmp	.-28     	; 0x2778 <__fp_split3+0xe>
    2794:	46 95       	lsr	r20
    2796:	f1 df       	rcall	.-30     	; 0x277a <__fp_splitA>
    2798:	08 c0       	rjmp	.+16     	; 0x27aa <__fp_splitA+0x30>
    279a:	16 16       	cp	r1, r22
    279c:	17 06       	cpc	r1, r23
    279e:	18 06       	cpc	r1, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	f1 cf       	rjmp	.-30     	; 0x2786 <__fp_splitA+0xc>
    27a4:	86 95       	lsr	r24
    27a6:	71 05       	cpc	r23, r1
    27a8:	61 05       	cpc	r22, r1
    27aa:	08 94       	sec
    27ac:	08 95       	ret

000027ae <__fp_zero>:
    27ae:	e8 94       	clt

000027b0 <__fp_szero>:
    27b0:	bb 27       	eor	r27, r27
    27b2:	66 27       	eor	r22, r22
    27b4:	77 27       	eor	r23, r23
    27b6:	cb 01       	movw	r24, r22
    27b8:	97 f9       	bld	r25, 7
    27ba:	08 95       	ret

000027bc <__gesf2>:
    27bc:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__fp_cmp>
    27c0:	08 f4       	brcc	.+2      	; 0x27c4 <__gesf2+0x8>
    27c2:	8f ef       	ldi	r24, 0xFF	; 255
    27c4:	08 95       	ret

000027c6 <__mulsf3>:
    27c6:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__mulsf3x>
    27ca:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <__fp_round>
    27ce:	0e 94 96 13 	call	0x272c	; 0x272c <__fp_pscA>
    27d2:	38 f0       	brcs	.+14     	; 0x27e2 <__mulsf3+0x1c>
    27d4:	0e 94 9d 13 	call	0x273a	; 0x273a <__fp_pscB>
    27d8:	20 f0       	brcs	.+8      	; 0x27e2 <__mulsf3+0x1c>
    27da:	95 23       	and	r25, r21
    27dc:	11 f0       	breq	.+4      	; 0x27e2 <__mulsf3+0x1c>
    27de:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__fp_inf>
    27e2:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__fp_nan>
    27e6:	11 24       	eor	r1, r1
    27e8:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <__fp_szero>

000027ec <__mulsf3x>:
    27ec:	0e 94 b5 13 	call	0x276a	; 0x276a <__fp_split3>
    27f0:	70 f3       	brcs	.-36     	; 0x27ce <__mulsf3+0x8>

000027f2 <__mulsf3_pse>:
    27f2:	95 9f       	mul	r25, r21
    27f4:	c1 f3       	breq	.-16     	; 0x27e6 <__mulsf3+0x20>
    27f6:	95 0f       	add	r25, r21
    27f8:	50 e0       	ldi	r21, 0x00	; 0
    27fa:	55 1f       	adc	r21, r21
    27fc:	62 9f       	mul	r22, r18
    27fe:	f0 01       	movw	r30, r0
    2800:	72 9f       	mul	r23, r18
    2802:	bb 27       	eor	r27, r27
    2804:	f0 0d       	add	r31, r0
    2806:	b1 1d       	adc	r27, r1
    2808:	63 9f       	mul	r22, r19
    280a:	aa 27       	eor	r26, r26
    280c:	f0 0d       	add	r31, r0
    280e:	b1 1d       	adc	r27, r1
    2810:	aa 1f       	adc	r26, r26
    2812:	64 9f       	mul	r22, r20
    2814:	66 27       	eor	r22, r22
    2816:	b0 0d       	add	r27, r0
    2818:	a1 1d       	adc	r26, r1
    281a:	66 1f       	adc	r22, r22
    281c:	82 9f       	mul	r24, r18
    281e:	22 27       	eor	r18, r18
    2820:	b0 0d       	add	r27, r0
    2822:	a1 1d       	adc	r26, r1
    2824:	62 1f       	adc	r22, r18
    2826:	73 9f       	mul	r23, r19
    2828:	b0 0d       	add	r27, r0
    282a:	a1 1d       	adc	r26, r1
    282c:	62 1f       	adc	r22, r18
    282e:	83 9f       	mul	r24, r19
    2830:	a0 0d       	add	r26, r0
    2832:	61 1d       	adc	r22, r1
    2834:	22 1f       	adc	r18, r18
    2836:	74 9f       	mul	r23, r20
    2838:	33 27       	eor	r19, r19
    283a:	a0 0d       	add	r26, r0
    283c:	61 1d       	adc	r22, r1
    283e:	23 1f       	adc	r18, r19
    2840:	84 9f       	mul	r24, r20
    2842:	60 0d       	add	r22, r0
    2844:	21 1d       	adc	r18, r1
    2846:	82 2f       	mov	r24, r18
    2848:	76 2f       	mov	r23, r22
    284a:	6a 2f       	mov	r22, r26
    284c:	11 24       	eor	r1, r1
    284e:	9f 57       	subi	r25, 0x7F	; 127
    2850:	50 40       	sbci	r21, 0x00	; 0
    2852:	9a f0       	brmi	.+38     	; 0x287a <__mulsf3_pse+0x88>
    2854:	f1 f0       	breq	.+60     	; 0x2892 <__mulsf3_pse+0xa0>
    2856:	88 23       	and	r24, r24
    2858:	4a f0       	brmi	.+18     	; 0x286c <__mulsf3_pse+0x7a>
    285a:	ee 0f       	add	r30, r30
    285c:	ff 1f       	adc	r31, r31
    285e:	bb 1f       	adc	r27, r27
    2860:	66 1f       	adc	r22, r22
    2862:	77 1f       	adc	r23, r23
    2864:	88 1f       	adc	r24, r24
    2866:	91 50       	subi	r25, 0x01	; 1
    2868:	50 40       	sbci	r21, 0x00	; 0
    286a:	a9 f7       	brne	.-22     	; 0x2856 <__mulsf3_pse+0x64>
    286c:	9e 3f       	cpi	r25, 0xFE	; 254
    286e:	51 05       	cpc	r21, r1
    2870:	80 f0       	brcs	.+32     	; 0x2892 <__mulsf3_pse+0xa0>
    2872:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__fp_inf>
    2876:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <__fp_szero>
    287a:	5f 3f       	cpi	r21, 0xFF	; 255
    287c:	e4 f3       	brlt	.-8      	; 0x2876 <__mulsf3_pse+0x84>
    287e:	98 3e       	cpi	r25, 0xE8	; 232
    2880:	d4 f3       	brlt	.-12     	; 0x2876 <__mulsf3_pse+0x84>
    2882:	86 95       	lsr	r24
    2884:	77 95       	ror	r23
    2886:	67 95       	ror	r22
    2888:	b7 95       	ror	r27
    288a:	f7 95       	ror	r31
    288c:	e7 95       	ror	r30
    288e:	9f 5f       	subi	r25, 0xFF	; 255
    2890:	c1 f7       	brne	.-16     	; 0x2882 <__mulsf3_pse+0x90>
    2892:	fe 2b       	or	r31, r30
    2894:	88 0f       	add	r24, r24
    2896:	91 1d       	adc	r25, r1
    2898:	96 95       	lsr	r25
    289a:	87 95       	ror	r24
    289c:	97 f9       	bld	r25, 7
    289e:	08 95       	ret

000028a0 <__tablejump2__>:
    28a0:	ee 0f       	add	r30, r30
    28a2:	ff 1f       	adc	r31, r31
    28a4:	05 90       	lpm	r0, Z+
    28a6:	f4 91       	lpm	r31, Z
    28a8:	e0 2d       	mov	r30, r0
    28aa:	09 94       	ijmp

000028ac <_exit>:
    28ac:	f8 94       	cli

000028ae <__stop_program>:
    28ae:	ff cf       	rjmp	.-2      	; 0x28ae <__stop_program>
