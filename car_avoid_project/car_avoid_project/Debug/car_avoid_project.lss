
car_avoid_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  00003a1c  00003ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  008000e8  008000e8  00003b38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003b38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003b68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  00003ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006013  00000000  00000000  00003fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014fe  00000000  00000000  00009fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000422d  00000000  00000000  0000b4e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d70  00000000  00000000  0000f714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f1e  00000000  00000000  00010484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000672f  00000000  00000000  000123a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  00018ad1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__vector_1>
       8:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__vector_2>
       c:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <__vector_3>
      10:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__vector_4>
      14:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__vector_7>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 13 10 	jmp	0x2026	; 0x2026 <__vector_9>
      28:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <__vector_10>
      2c:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	50 0e       	add	r5, r16
      56:	55 0e       	add	r5, r21
      58:	5b 0e       	add	r5, r27
      5a:	0b 0f       	add	r16, r27
      5c:	61 0e       	add	r6, r17
      5e:	0b 0f       	add	r16, r27
      60:	67 0e       	add	r6, r23
      62:	6d 0e       	add	r6, r29
      64:	73 0e       	add	r7, r19
      66:	79 0e       	add	r7, r25
      68:	93 0e       	add	r9, r19
      6a:	98 0e       	add	r9, r24
      6c:	9e 0e       	add	r9, r30
      6e:	13 0f       	add	r17, r19
      70:	a4 0e       	add	r10, r20
      72:	13 0f       	add	r17, r19
      74:	aa 0e       	add	r10, r26
      76:	b0 0e       	add	r11, r16
      78:	b6 0e       	add	r11, r22
      7a:	bc 0e       	add	r11, r28
      7c:	d1 0e       	add	r13, r17
      7e:	d6 0e       	add	r13, r22
      80:	dc 0e       	add	r13, r28
      82:	e2 0e       	add	r14, r18
      84:	e8 0e       	add	r14, r24
      86:	ee 0e       	add	r14, r30
      88:	f4 0e       	add	r15, r20
      8a:	fa 0e       	add	r15, r26

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	ec e1       	ldi	r30, 0x1C	; 28
      a0:	fa e3       	ldi	r31, 0x3A	; 58
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a8 3e       	cpi	r26, 0xE8	; 232
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	21 e0       	ldi	r18, 0x01	; 1
      b0:	a8 ee       	ldi	r26, 0xE8	; 232
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ac 33       	cpi	r26, 0x3C	; 60
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 21 09 	call	0x1242	; 0x1242 <main>
      c2:	0c 94 0c 1d 	jmp	0x3a18	; 0x3a18 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <app_init>:
	}
	else
	{
		//do nothing
	}
}
      ca:	0e 94 ad 0b 	call	0x175a	; 0x175a <enable_global_interrupt>
      ce:	0e 94 e7 02 	call	0x5ce	; 0x5ce <LCD_init>
      d2:	67 e0       	ldi	r22, 0x07	; 7
      d4:	82 e0       	ldi	r24, 0x02	; 2
      d6:	0e 94 4e 01 	call	0x29c	; 0x29c <button_init>
      da:	64 e0       	ldi	r22, 0x04	; 4
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	0e 94 df 03 	call	0x7be	; 0x7be <led_init>
      e2:	42 e0       	ldi	r20, 0x02	; 2
      e4:	63 e0       	ldi	r22, 0x03	; 3
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	0e 94 ab 08 	call	0x1156	; 0x1156 <Ultrasonic_init>
      ec:	82 e7       	ldi	r24, 0x72	; 114
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <dcMotor_init>
      f4:	8c e6       	ldi	r24, 0x6C	; 108
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <dcMotor_init>
      fc:	86 e6       	ldi	r24, 0x66	; 102
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	0e 94 52 01 	call	0x2a4	; 0x2a4 <dcMotor_init>
     104:	80 e6       	ldi	r24, 0x60	; 96
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 52 01 	call	0x2a4	; 0x2a4 <dcMotor_init>
     10c:	08 95       	ret

0000010e <read_event>:

enu_carEvents_t read_event (uint16* value)
{
     10e:	0f 93       	push	r16
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	00 d0       	rcall	.+0      	; 0x118 <read_event+0xa>
     118:	1f 92       	push	r1
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
     11e:	8c 01       	movw	r16, r24
	enu_carEvents_t enu_carEvents				= ENU_MAX_EV;
	static BOOLEAN st_bo_l_event_flag			= FALSE;
	static BOOLEAN st_bo_l_timeout_active_flag	= FALSE;			//to control timeout function calling
	static uint8   st_u8_l_roatation_counter	= 0;				//to count number of car rotations
	uint16 u16_l_distance		= 0;
     120:	1a 82       	std	Y+2, r1	; 0x02
     122:	19 82       	std	Y+1, r1	; 0x01
	uint8 u8_l_timeout_state	= 0;	
     124:	1b 82       	std	Y+3, r1	; 0x03
	Ultrasonic_readDistance(&u16_l_distance);	
     126:	ce 01       	movw	r24, r28
     128:	01 96       	adiw	r24, 0x01	; 1
     12a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <Ultrasonic_readDistance>
	*value = u16_l_distance;						
     12e:	89 81       	ldd	r24, Y+1	; 0x01
     130:	9a 81       	ldd	r25, Y+2	; 0x02
     132:	f8 01       	movw	r30, r16
     134:	91 83       	std	Z+1, r25	; 0x01
     136:	80 83       	st	Z, r24
	//button_read(START_BUTTON_PORT,START_BUTTON_PIN,&gl_u8_start_btn);
	//button_read(STOP_BUTTON_PORT,STOP_BUTTON_PIN,&gl_u8_stop_btn);

		if((u16_l_distance >= 70) && (st_bo_l_event_flag == FALSE))
     138:	9c 01       	movw	r18, r24
     13a:	86 34       	cpi	r24, 0x46	; 70
     13c:	91 05       	cpc	r25, r1
     13e:	08 f1       	brcs	.+66     	; 0x182 <read_event+0x74>
     140:	40 91 ea 00 	lds	r20, 0x00EA	; 0x8000ea <st_bo_l_event_flag.2074>
     144:	41 11       	cpse	r20, r1
     146:	1d c0       	rjmp	.+58     	; 0x182 <read_event+0x74>
		{
			enu_carEvents				= ENU_EV1;
			st_u8_l_roatation_counter	= 0;
     148:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <st_u8_l_roatation_counter.2076>
			
			if(st_bo_l_timeout_active_flag == FALSE)
     14c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__data_end>
     150:	81 11       	cpse	r24, r1
     152:	09 c0       	rjmp	.+18     	; 0x166 <read_event+0x58>
			{
				timeOut_sec(0,5);
     154:	40 e0       	ldi	r20, 0x00	; 0
     156:	50 e0       	ldi	r21, 0x00	; 0
     158:	60 ea       	ldi	r22, 0xA0	; 160
     15a:	70 e4       	ldi	r23, 0x40	; 64
     15c:	0e 94 81 07 	call	0xf02	; 0xf02 <timeOut_sec>
				st_bo_l_timeout_active_flag = TRUE;
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__data_end>
			}
			timer_check_time_out_flag(0,&u8_l_timeout_state);
     166:	be 01       	movw	r22, r28
     168:	6d 5f       	subi	r22, 0xFD	; 253
     16a:	7f 4f       	sbci	r23, 0xFF	; 255
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	0e 94 a9 04 	call	0x952	; 0x952 <timer_check_time_out_flag>
			if(u8_l_timeout_state == TRUE)
     172:	8b 81       	ldd	r24, Y+3	; 0x03
     174:	81 30       	cpi	r24, 0x01	; 1
     176:	09 f0       	breq	.+2      	; 0x17a <read_event+0x6c>
     178:	43 c0       	rjmp	.+134    	; 0x200 <read_event+0xf2>
			{
				enu_carEvents		= ENU_EV6;
				//bo_l_timeout_flag	= FALSE;
				//u8_l_timeout_state= FALSE;
				st_bo_l_event_flag	= TRUE;
     17a:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <st_bo_l_event_flag.2074>
				st_bo_l_timeout_active_flag = TRUE;
			}
			timer_check_time_out_flag(0,&u8_l_timeout_state);
			if(u8_l_timeout_state == TRUE)
			{
				enu_carEvents		= ENU_EV6;
     17e:	85 e0       	ldi	r24, 0x05	; 5
     180:	42 c0       	rjmp	.+132    	; 0x206 <read_event+0xf8>
				//u8_l_timeout_state= FALSE;
				st_bo_l_event_flag	= TRUE;
			}
		
		}
		else if((u16_l_distance >= 70) && (st_bo_l_event_flag == TRUE))
     182:	26 34       	cpi	r18, 0x46	; 70
     184:	31 05       	cpc	r19, r1
     186:	50 f0       	brcs	.+20     	; 0x19c <read_event+0x8e>
     188:	40 91 ea 00 	lds	r20, 0x00EA	; 0x8000ea <st_bo_l_event_flag.2074>
     18c:	41 30       	cpi	r20, 0x01	; 1
     18e:	31 f4       	brne	.+12     	; 0x19c <read_event+0x8e>
		{
			enu_carEvents				= ENU_EV6;
			st_u8_l_roatation_counter	= 0;
     190:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <st_u8_l_roatation_counter.2076>
			st_bo_l_timeout_active_flag	= FALSE;
     194:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__data_end>
			}
		
		}
		else if((u16_l_distance >= 70) && (st_bo_l_event_flag == TRUE))
		{
			enu_carEvents				= ENU_EV6;
     198:	85 e0       	ldi	r24, 0x05	; 5
			st_u8_l_roatation_counter	= 0;
			st_bo_l_timeout_active_flag	= FALSE;
     19a:	35 c0       	rjmp	.+106    	; 0x206 <read_event+0xf8>
		}
		else if((u16_l_distance>=30) && (u16_l_distance<70))
     19c:	ac 01       	movw	r20, r24
     19e:	4e 51       	subi	r20, 0x1E	; 30
     1a0:	51 09       	sbc	r21, r1
     1a2:	48 32       	cpi	r20, 0x28	; 40
     1a4:	51 05       	cpc	r21, r1
     1a6:	40 f4       	brcc	.+16     	; 0x1b8 <read_event+0xaa>
		{
			enu_carEvents				= ENU_EV2;
			st_bo_l_timeout_active_flag	= FALSE;
     1a8:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__data_end>
			st_u8_l_roatation_counter	= 0;
     1ac:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <st_u8_l_roatation_counter.2076>
			st_bo_l_event_flag			= FALSE;
     1b0:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <st_bo_l_event_flag.2074>
			st_u8_l_roatation_counter	= 0;
			st_bo_l_timeout_active_flag	= FALSE;
		}
		else if((u16_l_distance>=30) && (u16_l_distance<70))
		{
			enu_carEvents				= ENU_EV2;
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	27 c0       	rjmp	.+78     	; 0x206 <read_event+0xf8>
			st_bo_l_timeout_active_flag	= FALSE;
			st_u8_l_roatation_counter	= 0;
			st_bo_l_event_flag			= FALSE;
		}
		else if((u16_l_distance>=20) && (u16_l_distance<30))
     1b8:	44 97       	sbiw	r24, 0x14	; 20
     1ba:	0a 97       	sbiw	r24, 0x0a	; 10
     1bc:	70 f4       	brcc	.+28     	; 0x1da <read_event+0xcc>
		{
			enu_carEvents				= ENU_EV3;
			st_bo_l_timeout_active_flag	= FALSE;
     1be:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__data_end>
			st_bo_l_event_flag			= FALSE;
     1c2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <st_bo_l_event_flag.2074>
			st_u8_l_roatation_counter++;
     1c6:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <st_u8_l_roatation_counter.2076>
     1ca:	8f 5f       	subi	r24, 0xFF	; 255
     1cc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <st_u8_l_roatation_counter.2076>
			if(st_u8_l_roatation_counter == 4)		//car rotate 360 degree sequentially
     1d0:	84 30       	cpi	r24, 0x04	; 4
     1d2:	c1 f4       	brne	.+48     	; 0x204 <read_event+0xf6>
			{
			 enu_carEvents = ENU_EV5;
			 st_u8_l_roatation_counter = 0;	
     1d4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <st_u8_l_roatation_counter.2076>
     1d8:	16 c0       	rjmp	.+44     	; 0x206 <read_event+0xf8>
			}
		}
		else if(u16_l_distance < 20)
     1da:	24 31       	cpi	r18, 0x14	; 20
     1dc:	31 05       	cpc	r19, r1
     1de:	40 f4       	brcc	.+16     	; 0x1f0 <read_event+0xe2>
		{
			enu_carEvents				= ENU_EV4;
			st_bo_l_event_flag			= FALSE;
     1e0:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <st_bo_l_event_flag.2074>
			st_u8_l_roatation_counter	= 0;
     1e4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <st_u8_l_roatation_counter.2076>
			st_bo_l_timeout_active_flag	= FALSE;
     1e8:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__data_end>
			 st_u8_l_roatation_counter = 0;	
			}
		}
		else if(u16_l_distance < 20)
		{
			enu_carEvents				= ENU_EV4;
     1ec:	83 e0       	ldi	r24, 0x03	; 3
     1ee:	0b c0       	rjmp	.+22     	; 0x206 <read_event+0xf8>
			st_bo_l_timeout_active_flag	= FALSE;
		}
		else
		{
			enu_carEvents				= ENU_MAX_EV;
			st_bo_l_event_flag			= FALSE;
     1f0:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <st_bo_l_event_flag.2074>
			st_u8_l_roatation_counter	= 0;
     1f4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <st_u8_l_roatation_counter.2076>
			st_bo_l_timeout_active_flag	= FALSE;
     1f8:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__data_end>
			st_u8_l_roatation_counter	= 0;
			st_bo_l_timeout_active_flag	= FALSE;
		}
		else
		{
			enu_carEvents				= ENU_MAX_EV;
     1fc:	86 e0       	ldi	r24, 0x06	; 6
     1fe:	03 c0       	rjmp	.+6      	; 0x206 <read_event+0xf8>
	//button_read(START_BUTTON_PORT,START_BUTTON_PIN,&gl_u8_start_btn);
	//button_read(STOP_BUTTON_PORT,STOP_BUTTON_PIN,&gl_u8_stop_btn);

		if((u16_l_distance >= 70) && (st_bo_l_event_flag == FALSE))
		{
			enu_carEvents				= ENU_EV1;
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	01 c0       	rjmp	.+2      	; 0x206 <read_event+0xf8>
			st_u8_l_roatation_counter	= 0;
			st_bo_l_event_flag			= FALSE;
		}
		else if((u16_l_distance>=20) && (u16_l_distance<30))
		{
			enu_carEvents				= ENU_EV3;
     204:	82 e0       	ldi	r24, 0x02	; 2
			st_bo_l_event_flag			= FALSE;
			st_u8_l_roatation_counter	= 0;
			st_bo_l_timeout_active_flag	= FALSE;
		}
	return enu_carEvents;
}
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	0f 90       	pop	r0
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	1f 91       	pop	r17
     212:	0f 91       	pop	r16
     214:	08 95       	ret

00000216 <display_event>:


void display_event (enu_carEvents_t enu_carEvents,uint16 distance)
{
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
     21a:	cf 93       	push	r28
     21c:	c8 2f       	mov	r28, r24
     21e:	8b 01       	movw	r16, r22
	LCD_clearScreen();
     220:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCD_clearScreen>
	switch(enu_carEvents)
     224:	c2 30       	cpi	r28, 0x02	; 2
     226:	b1 f0       	breq	.+44     	; 0x254 <display_event+0x3e>
     228:	28 f4       	brcc	.+10     	; 0x234 <display_event+0x1e>
     22a:	cc 23       	and	r28, r28
     22c:	49 f0       	breq	.+18     	; 0x240 <display_event+0x2a>
     22e:	c1 30       	cpi	r28, 0x01	; 1
     230:	61 f0       	breq	.+24     	; 0x24a <display_event+0x34>
     232:	23 c0       	rjmp	.+70     	; 0x27a <display_event+0x64>
     234:	c4 30       	cpi	r28, 0x04	; 4
     236:	c1 f0       	breq	.+48     	; 0x268 <display_event+0x52>
     238:	90 f0       	brcs	.+36     	; 0x25e <display_event+0x48>
     23a:	c5 30       	cpi	r28, 0x05	; 5
     23c:	d1 f0       	breq	.+52     	; 0x272 <display_event+0x5c>
     23e:	1d c0       	rjmp	.+58     	; 0x27a <display_event+0x64>
	{
		case ENU_EV1:
		{
			LCD_displayString("distance>70");
     240:	84 ea       	ldi	r24, 0xA4	; 164
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_displayString>
		}
		break;
     248:	18 c0       	rjmp	.+48     	; 0x27a <display_event+0x64>
		case ENU_EV2:
		{
			LCD_displayString("70>distance>30");
     24a:	80 eb       	ldi	r24, 0xB0	; 176
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_displayString>
		}
		break;
     252:	13 c0       	rjmp	.+38     	; 0x27a <display_event+0x64>
		case ENU_EV3:
		{
			LCD_displayString("30>distance>20");
     254:	8f eb       	ldi	r24, 0xBF	; 191
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_displayString>
		}
		break;
     25c:	0e c0       	rjmp	.+28     	; 0x27a <display_event+0x64>
		case ENU_EV4:
		{
			LCD_displayString("distance<20");
     25e:	8e ec       	ldi	r24, 0xCE	; 206
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_displayString>
		}
		break;
     266:	09 c0       	rjmp	.+18     	; 0x27a <display_event+0x64>
		case ENU_EV5:
		{
			LCD_displayString("STOP");
     268:	8f e9       	ldi	r24, 0x9F	; 159
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_displayString>
		}
		break;
     270:	04 c0       	rjmp	.+8      	; 0x27a <display_event+0x64>
		case ENU_EV6:
		{
			LCD_displayString("distance>>>70");
     272:	8a ed       	ldi	r24, 0xDA	; 218
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_displayString>
		{
			//do nothing
		}
		break;
	}
	LCD_displayStringRowColumn(1,0,"Dis= ");
     27a:	4e e7       	ldi	r20, 0x7E	; 126
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,4);
     286:	64 e0       	ldi	r22, 0x04	; 4
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	0e 94 9f 03 	call	0x73e	; 0x73e <LCD_moveCursor>
	LCD_intgerToString(distance);
     28e:	c8 01       	movw	r24, r16
     290:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_intgerToString>
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	0f 91       	pop	r16
     29a:	08 95       	ret

0000029c <button_init>:
/*============= FUNCTION DEFINITIONS =============*/

enu_button_error_t button_init(uint8 port,uint8 pin)
{
	enu_button_error_t enu_button_error = BTN_VALID_OPERATION;
	enu_button_error = (enu_button_error_t) DIO_pinMode(port,pin,PIN_INPUT);
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_pinMode>
	return enu_button_error;
}
     2a2:	08 95       	ret

000002a4 <dcMotor_init>:
/**
 * @brief       dcMotor_init        		: Function used to initialize the motor pin connections      
 */

enu_dcMotor_error_t dcMotor_init (str_dcMotor_config_t* str_dcMotor_config)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
	uint8 u8_l_returnValue = ZERO_VALUE;
	if(str_dcMotor_config != NULL_PTR)
     2a8:	00 97       	sbiw	r24, 0x00	; 0
     2aa:	11 f1       	breq	.+68     	; 0x2f0 <dcMotor_init+0x4c>
     2ac:	ec 01       	movw	r28, r24
	{
		u8_l_returnValue = DIO_pinMode(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_OUTPUT);
     2ae:	69 81       	ldd	r22, Y+1	; 0x01
     2b0:	41 e0       	ldi	r20, 0x01	; 1
     2b2:	88 81       	ld	r24, Y
     2b4:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_pinMode>
		if(u8_l_returnValue == VALID)
     2b8:	81 30       	cpi	r24, 0x01	; 1
     2ba:	e1 f4       	brne	.+56     	; 0x2f4 <dcMotor_init+0x50>
		{
			u8_l_returnValue = DIO_pinMode(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_OUTPUT);
     2bc:	6b 81       	ldd	r22, Y+3	; 0x03
     2be:	41 e0       	ldi	r20, 0x01	; 1
     2c0:	8a 81       	ldd	r24, Y+2	; 0x02
     2c2:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_pinMode>
			if(u8_l_returnValue == VALID)
     2c6:	81 30       	cpi	r24, 0x01	; 1
     2c8:	b9 f4       	brne	.+46     	; 0x2f8 <dcMotor_init+0x54>
			{
				u8_l_returnValue = PWM_Init(str_dcMotor_config->enable_terminal.port_id, str_dcMotor_config->enable_terminal.pin_id,PWM_TIMER_ID);
     2ca:	6d 81       	ldd	r22, Y+5	; 0x05
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	8c 81       	ldd	r24, Y+4	; 0x04
     2d0:	0e 94 5d 04 	call	0x8ba	; 0x8ba <PWM_Init>
				if(u8_l_returnValue == VALID)
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	91 f4       	brne	.+36     	; 0x2fc <dcMotor_init+0x58>
				{
					DIO_writePin(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_LOW);
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	69 81       	ldd	r22, Y+1	; 0x01
     2dc:	88 81       	ld	r24, Y
     2de:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
					DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_LOW);
     2e2:	40 e0       	ldi	r20, 0x00	; 0
     2e4:	6b 81       	ldd	r22, Y+3	; 0x03
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
 * @brief       dcMotor_init        		: Function used to initialize the motor pin connections      
 */

enu_dcMotor_error_t dcMotor_init (str_dcMotor_config_t* str_dcMotor_config)
{
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	07 c0       	rjmp	.+14     	; 0x2fe <dcMotor_init+0x5a>
			enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
		}
	}
	else
	{
		enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	05 c0       	rjmp	.+10     	; 0x2fe <dcMotor_init+0x5a>
				enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
			}
		}
		else
		{
			enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	03 c0       	rjmp	.+6      	; 0x2fe <dcMotor_init+0x5a>
					DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_LOW);
				}					
			}
			else
			{
				enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <dcMotor_init+0x5a>
 * @brief       dcMotor_init        		: Function used to initialize the motor pin connections      
 */

enu_dcMotor_error_t dcMotor_init (str_dcMotor_config_t* str_dcMotor_config)
{
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
     2fc:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
	}
	return enu_dcMotor_error;
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <Icu_init>:
 *				ENU_ICU_INVALID_INPUT		: in case of invalid passing argument Ex. timer channel id - null pointer - value out of range
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_init(const str_icu_configtype_t * str_icu_configtype)
{	
     304:	ef 92       	push	r14
     306:	ff 92       	push	r15
     308:	0f 93       	push	r16
     30a:	1f 93       	push	r17
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	29 97       	sbiw	r28, 0x09	; 9
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	cd bf       	out	0x3d, r28	; 61
	enu_intrrupt_id_t	enu_intrrupt_id		= ENU_MAX_INT_ID;
	enu_trigger_mode_t	enu_trigger_mode	= ENU_MAX_TRIGGER_MODE;
	enu_icu_error_t		enu_icu_error		= ENU_ICU_VALID;
	str_tmr_config_t	str_tmr_config;
	if(str_icu_configtype->enu_icu_clock < ENU_ICU_MAX_CLOCK)
     320:	fc 01       	movw	r30, r24
     322:	22 81       	ldd	r18, Z+2	; 0x02
     324:	28 30       	cpi	r18, 0x08	; 8
     326:	08 f0       	brcs	.+2      	; 0x32a <Icu_init+0x26>
     328:	4a c0       	rjmp	.+148    	; 0x3be <Icu_init+0xba>
	{
		if(str_icu_configtype->enu_icu_edgetype < ENU_ICU_MAX_EDGETYPE)
     32a:	23 81       	ldd	r18, Z+3	; 0x03
     32c:	22 30       	cpi	r18, 0x02	; 2
     32e:	08 f0       	brcs	.+2      	; 0x332 <Icu_init+0x2e>
     330:	48 c0       	rjmp	.+144    	; 0x3c2 <Icu_init+0xbe>
		{
			if (str_icu_configtype->enu_icu_channel_id < ENU_ICU_MAX_CHANNEL)
     332:	30 81       	ld	r19, Z
     334:	33 30       	cpi	r19, 0x03	; 3
     336:	08 f0       	brcs	.+2      	; 0x33a <Icu_init+0x36>
     338:	46 c0       	rjmp	.+140    	; 0x3c6 <Icu_init+0xc2>
			{
				if (str_icu_configtype->enu_timer_channel_id < ENU_TIMER_MAX_CHANNEL)
     33a:	41 81       	ldd	r20, Z+1	; 0x01
     33c:	43 30       	cpi	r20, 0x03	; 3
     33e:	08 f0       	brcs	.+2      	; 0x342 <Icu_init+0x3e>
     340:	44 c0       	rjmp	.+136    	; 0x3ca <Icu_init+0xc6>
				{
					if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID0)
     342:	31 11       	cpse	r19, r1
     344:	04 c0       	rjmp	.+8      	; 0x34e <Icu_init+0x4a>
					{
						enu_intrrupt_id = ENU_INT0_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_0;
     346:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <gl_u8_interrupt_id>
			{
				if (str_icu_configtype->enu_timer_channel_id < ENU_TIMER_MAX_CHANNEL)
				{
					if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID0)
					{
						enu_intrrupt_id = ENU_INT0_ID;
     34a:	f1 2c       	mov	r15, r1
     34c:	0d c0       	rjmp	.+26     	; 0x368 <Icu_init+0x64>
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_0;
					}
					else if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID1)
     34e:	31 30       	cpi	r19, 0x01	; 1
     350:	29 f4       	brne	.+10     	; 0x35c <Icu_init+0x58>
					{
						enu_intrrupt_id = ENU_INT1_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_1 ;
     352:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <gl_u8_interrupt_id>
						enu_intrrupt_id = ENU_INT0_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_0;
					}
					else if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID1)
					{
						enu_intrrupt_id = ENU_INT1_ID;
     356:	ff 24       	eor	r15, r15
     358:	f3 94       	inc	r15
     35a:	06 c0       	rjmp	.+12     	; 0x368 <Icu_init+0x64>
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_1 ;
					} 
					else
					{
						enu_intrrupt_id = ENU_INT2_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_2 ;
     35c:	32 e0       	ldi	r19, 0x02	; 2
     35e:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <gl_u8_interrupt_id>
						enu_intrrupt_id = ENU_INT1_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_1 ;
					} 
					else
					{
						enu_intrrupt_id = ENU_INT2_ID;
     362:	68 94       	set
     364:	ff 24       	eor	r15, r15
     366:	f1 f8       	bld	r15, 1
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_2 ;
					}
					if(str_icu_configtype->enu_icu_edgetype == ENU_ICU_FALLING )
     368:	21 11       	cpse	r18, r1
     36a:	04 c0       	rjmp	.+8      	; 0x374 <Icu_init+0x70>
					{
						enu_trigger_mode = ENU_FALLING;
     36c:	68 94       	set
     36e:	ee 24       	eor	r14, r14
     370:	e1 f8       	bld	r14, 1
     372:	04 c0       	rjmp	.+8      	; 0x37c <Icu_init+0x78>
					}
					else
					{
						enu_trigger_mode = ENU_RISING;
     374:	0f 2e       	mov	r0, r31
     376:	f3 e0       	ldi	r31, 0x03	; 3
     378:	ef 2e       	mov	r14, r31
     37a:	f0 2d       	mov	r31, r0
     37c:	8c 01       	movw	r16, r24
					}

					str_tmr_config.enu_tmr_channel_id		= str_icu_configtype->enu_timer_channel_id;
     37e:	49 83       	std	Y+1, r20	; 0x01
					str_tmr_config.enu_tmr_mode				= ENU_TMR_NORMAL_MODE;
     380:	1a 82       	std	Y+2, r1	; 0x02
					str_tmr_config.enu_tmr_cmp_mode			= ENU_TMR_CMP_DISCONNECT;
     382:	1c 82       	std	Y+4, r1	; 0x04
					str_tmr_config.enu_tmr_clk				= (enu_tmr_clk_t) str_icu_configtype->enu_icu_clock;
     384:	fc 01       	movw	r30, r24
     386:	82 81       	ldd	r24, Z+2	; 0x02
     388:	8d 83       	std	Y+5, r24	; 0x05
					str_tmr_config.enu_tmr_interrupt_state	= ENU_TMR_INT_DISABLE;
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	8b 83       	std	Y+3, r24	; 0x03
					str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
     38e:	19 86       	std	Y+9, r1	; 0x09
     390:	18 86       	std	Y+8, r1	; 0x08
					str_tmr_config.u16_tmr_initial_value	= ZERO_VALUE;
     392:	1f 82       	std	Y+7, r1	; 0x07
     394:	1e 82       	std	Y+6, r1	; 0x06
					gl_u8_timer_id = str_icu_configtype->enu_timer_channel_id;
     396:	81 81       	ldd	r24, Z+1	; 0x01
     398:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <gl_u8_timer_id>
					timer_init(&str_tmr_config);
     39c:	ce 01       	movw	r24, r28
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	0e 94 b1 0b 	call	0x1762	; 0x1762 <timer_init>
					timer_start(str_icu_configtype->enu_timer_channel_id);
     3a4:	f8 01       	movw	r30, r16
     3a6:	81 81       	ldd	r24, Z+1	; 0x01
     3a8:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <timer_start>
					Init_external_interrupt (enu_intrrupt_id,enu_trigger_mode);
     3ac:	6e 2d       	mov	r22, r14
     3ae:	8f 2d       	mov	r24, r15
     3b0:	0e 94 c7 0a 	call	0x158e	; 0x158e <Init_external_interrupt>
					enable_external_interrupt(enu_intrrupt_id);
     3b4:	8f 2d       	mov	r24, r15
     3b6:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <enable_external_interrupt>
 */
enu_icu_error_t Icu_init(const str_icu_configtype_t * str_icu_configtype)
{	
	enu_intrrupt_id_t	enu_intrrupt_id		= ENU_MAX_INT_ID;
	enu_trigger_mode_t	enu_trigger_mode	= ENU_MAX_TRIGGER_MODE;
	enu_icu_error_t		enu_icu_error		= ENU_ICU_VALID;
     3ba:	84 e0       	ldi	r24, 0x04	; 4
     3bc:	07 c0       	rjmp	.+14     	; 0x3cc <Icu_init+0xc8>
			enu_icu_error = ENU_ICU_INVALID_EDGETYP;
		}
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CLOCK;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	05 c0       	rjmp	.+10     	; 0x3cc <Icu_init+0xc8>
				enu_icu_error = ENU_ICU_MAX_CHANNEL;
			}
		}
		else
		{
			enu_icu_error = ENU_ICU_INVALID_EDGETYP;
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <Icu_init+0xc8>
					enu_icu_error = ENU_TIMER_MAX_CHANNEL;
				}
			}
			else
			{
				enu_icu_error = ENU_ICU_MAX_CHANNEL;
     3c6:	83 e0       	ldi	r24, 0x03	; 3
     3c8:	01 c0       	rjmp	.+2      	; 0x3cc <Icu_init+0xc8>
					Init_external_interrupt (enu_intrrupt_id,enu_trigger_mode);
					enable_external_interrupt(enu_intrrupt_id);
				}
				else
				{
					enu_icu_error = ENU_TIMER_MAX_CHANNEL;
     3ca:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CLOCK;
	}
	return enu_icu_error;
}
     3cc:	29 96       	adiw	r28, 0x09	; 9
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	cd bf       	out	0x3d, r28	; 61
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	1f 91       	pop	r17
     3de:	0f 91       	pop	r16
     3e0:	ff 90       	pop	r15
     3e2:	ef 90       	pop	r14
     3e4:	08 95       	ret

000003e6 <Icu_setCallBack>:
 *				ENU_ICU_INVALID_INPUT		: in case of invalid passing argument Ex. timer channel id - null pointer - value out of range
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
     3e6:	9c 01       	movw	r18, r24
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_0)
     3e8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <gl_u8_interrupt_id>
     3ec:	91 11       	cpse	r25, r1
     3ee:	05 c0       	rjmp	.+10     	; 0x3fa <Icu_setCallBack+0x14>
	{
		interrupt0_set_callback (a_ptr);
     3f0:	c9 01       	movw	r24, r18
     3f2:	0e 94 14 0b 	call	0x1628	; 0x1628 <interrupt0_set_callback>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     3f6:	84 e0       	ldi	r24, 0x04	; 4
     3f8:	08 95       	ret
	if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_0)
	{
		interrupt0_set_callback (a_ptr);
	}
	else if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_1)
     3fa:	91 30       	cpi	r25, 0x01	; 1
     3fc:	29 f4       	brne	.+10     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		interrupt1_set_callback (a_ptr);
     3fe:	c9 01       	movw	r24, r18
     400:	0e 94 1e 0b 	call	0x163c	; 0x163c <interrupt1_set_callback>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     404:	84 e0       	ldi	r24, 0x04	; 4
     406:	08 95       	ret
	}
	else if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_1)
	{
		interrupt1_set_callback (a_ptr);
	}
	else if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_2)
     408:	92 30       	cpi	r25, 0x02	; 2
     40a:	29 f4       	brne	.+10     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	{
		interrupt2_set_callback (a_ptr);
     40c:	c9 01       	movw	r24, r18
     40e:	0e 94 28 0b 	call	0x1650	; 0x1650 <interrupt2_set_callback>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     412:	84 e0       	ldi	r24, 0x04	; 4
     414:	08 95       	ret
	{
		interrupt2_set_callback (a_ptr);
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CHANNEL;
     416:	83 e0       	ldi	r24, 0x03	; 3
	}
	return enu_icu_error;
	
}
     418:	08 95       	ret

0000041a <Icu_setEdgeDetectionType>:
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setEdgeDetectionType(const enu_icu_edgetype_t enu_icu_edgetype)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	if (enu_icu_edgetype < ENU_ICU_MAX_EDGETYPE)
     41a:	82 30       	cpi	r24, 0x02	; 2
     41c:	90 f4       	brcc	.+36     	; 0x442 <Icu_setEdgeDetectionType+0x28>
	{
		if((gl_u8_interrupt_id < MAX_INTERRUPT_CHANNEL))
     41e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <gl_u8_interrupt_id>
     422:	23 30       	cpi	r18, 0x03	; 3
     424:	80 f4       	brcc	.+32     	; 0x446 <Icu_setEdgeDetectionType+0x2c>
		{
			if (enu_icu_edgetype == ENU_ICU_FALLING)
     426:	81 11       	cpse	r24, r1
     428:	06 c0       	rjmp	.+12     	; 0x436 <Icu_setEdgeDetectionType+0x1c>
			{
				Init_external_interrupt(gl_u8_interrupt_id,ENU_FALLING);
     42a:	62 e0       	ldi	r22, 0x02	; 2
     42c:	82 2f       	mov	r24, r18
     42e:	0e 94 c7 0a 	call	0x158e	; 0x158e <Init_external_interrupt>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setEdgeDetectionType(const enu_icu_edgetype_t enu_icu_edgetype)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     432:	84 e0       	ldi	r24, 0x04	; 4
     434:	08 95       	ret
			{
				Init_external_interrupt(gl_u8_interrupt_id,ENU_FALLING);
			}
			else
			{
				Init_external_interrupt(gl_u8_interrupt_id,ENU_RISING);
     436:	63 e0       	ldi	r22, 0x03	; 3
     438:	82 2f       	mov	r24, r18
     43a:	0e 94 c7 0a 	call	0x158e	; 0x158e <Init_external_interrupt>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setEdgeDetectionType(const enu_icu_edgetype_t enu_icu_edgetype)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     43e:	84 e0       	ldi	r24, 0x04	; 4
     440:	08 95       	ret
			enu_icu_error = ENU_ICU_INVALID_INPUT;
		}
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_EDGETYP ;
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	08 95       	ret
				Init_external_interrupt(gl_u8_interrupt_id,ENU_RISING);
			}	
		}
		else
		{
			enu_icu_error = ENU_ICU_INVALID_INPUT;
     446:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		enu_icu_error = ENU_ICU_INVALID_EDGETYP ;
	}
	return enu_icu_error;
}
     448:	08 95       	ret

0000044a <Icu_getTimerValue>:
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	//uint16 u16_l_timer_value = 0;
	if(ptr_u16_timer_value != NULL_PTR)
     44a:	00 97       	sbiw	r24, 0x00	; 0
     44c:	c1 f0       	breq	.+48     	; 0x47e <Icu_getTimerValue+0x34>
	{
		if(gl_u8_timer_id < MAX_TIMER_CHANNEL)
     44e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <gl_u8_timer_id>
     452:	23 30       	cpi	r18, 0x03	; 3
     454:	b0 f4       	brcc	.+44     	; 0x482 <Icu_getTimerValue+0x38>
     456:	bc 01       	movw	r22, r24
		{
			if(gl_u8_timer_id == TIMER_CHANNEL_0)
     458:	21 11       	cpse	r18, r1
     45a:	05 c0       	rjmp	.+10     	; 0x466 <Icu_getTimerValue+0x1c>
			{
				timer_getValue(ENU_TMR_CHANNEL_0,ptr_u16_timer_value);
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <timer_getValue>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     462:	84 e0       	ldi	r24, 0x04	; 4
     464:	08 95       	ret
		{
			if(gl_u8_timer_id == TIMER_CHANNEL_0)
			{
				timer_getValue(ENU_TMR_CHANNEL_0,ptr_u16_timer_value);
			}
			else if(gl_u8_timer_id == TIMER_CHANNEL_1)
     466:	21 30       	cpi	r18, 0x01	; 1
     468:	29 f4       	brne	.+10     	; 0x474 <Icu_getTimerValue+0x2a>
			{
				timer_getValue(ENU_TMR_CHANNEL_1,ptr_u16_timer_value);
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <timer_getValue>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     470:	84 e0       	ldi	r24, 0x04	; 4
     472:	08 95       	ret
			{
				timer_getValue(ENU_TMR_CHANNEL_1,ptr_u16_timer_value);
			}
			else
			{
				timer_getValue(ENU_TMR_CHANNEL_2,ptr_u16_timer_value);			
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <timer_getValue>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     47a:	84 e0       	ldi	r24, 0x04	; 4
     47c:	08 95       	ret
			enu_icu_error = ENU_ICU_INVALID_CHANNEL;
		}
	} 
	else
	{
		enu_icu_error = ENU_ICU_INVALID_INPUT;
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	08 95       	ret
				timer_getValue(ENU_TMR_CHANNEL_2,ptr_u16_timer_value);			
			}
		}
		else
		{
			enu_icu_error = ENU_ICU_INVALID_CHANNEL;
     482:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		enu_icu_error = ENU_ICU_INVALID_INPUT;
	}
	return enu_icu_error;
}
     484:	08 95       	ret

00000486 <Icu_clearTimerValue>:
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	if(gl_u8_timer_id < MAX_TIMER_CHANNEL)
     486:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gl_u8_timer_id>
     48a:	83 30       	cpi	r24, 0x03	; 3
     48c:	48 f5       	brcc	.+82     	; 0x4e0 <Icu_clearTimerValue+0x5a>
	{
		if(gl_u8_timer_id == TIMER_CHANNEL_0)
     48e:	81 11       	cpse	r24, r1
     490:	0c c0       	rjmp	.+24     	; 0x4aa <Icu_clearTimerValue+0x24>
		{
			//to do clear timer0 value
			timer_stop(ENU_TMR_CHANNEL_0);
     492:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <timer_stop>
			timer_setInitialValue(ENU_TMR_CHANNEL_0,ZERO_VALUE);
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <timer_setInitialValue>
			timer_start(ENU_TMR_CHANNEL_0);
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <timer_start>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	08 95       	ret
			//to do clear timer0 value
			timer_stop(ENU_TMR_CHANNEL_0);
			timer_setInitialValue(ENU_TMR_CHANNEL_0,ZERO_VALUE);
			timer_start(ENU_TMR_CHANNEL_0);
		}
		else if(gl_u8_timer_id == TIMER_CHANNEL_1)
     4aa:	81 30       	cpi	r24, 0x01	; 1
     4ac:	61 f4       	brne	.+24     	; 0x4c6 <Icu_clearTimerValue+0x40>
		{
			//to do clear timer1 value
			timer_stop(ENU_TMR_CHANNEL_1);
     4ae:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <timer_stop>
			timer_setInitialValue(ENU_TMR_CHANNEL_1,ZERO_VALUE);
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <timer_setInitialValue>
			timer_start(ENU_TMR_CHANNEL_1);
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <timer_start>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	08 95       	ret
			timer_start(ENU_TMR_CHANNEL_1);
		}
		else
		{
			//to do clear timer2 value
			timer_stop(ENU_TMR_CHANNEL_2);
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <timer_stop>
			timer_setInitialValue(ENU_TMR_CHANNEL_2,ZERO_VALUE);
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	82 e0       	ldi	r24, 0x02	; 2
     4d2:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <timer_setInitialValue>
			timer_start(ENU_TMR_CHANNEL_2);
     4d6:	82 e0       	ldi	r24, 0x02	; 2
     4d8:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <timer_start>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     4dc:	84 e0       	ldi	r24, 0x04	; 4
     4de:	08 95       	ret
			timer_start(ENU_TMR_CHANNEL_2);
		}
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CHANNEL;
     4e0:	83 e0       	ldi	r24, 0x03	; 3
	}
	return enu_icu_error;
}
     4e2:	08 95       	ret

000004e4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	1f 92       	push	r1
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     4f0:	18 2f       	mov	r17, r24
	uint8 lcd_port_value = 0;
     4f2:	19 82       	std	Y+1, r1	; 0x01
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_LOW); /* Instruction Mode RS=0 */
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
	DIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_LOW); /* write data to LCD so RW=0 */
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	62 e0       	ldi	r22, 0x02	; 2
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     508:	8f ec       	ldi	r24, 0xCF	; 207
     50a:	97 e0       	ldi	r25, 0x07	; 7
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <LCD_sendCommand+0x28>
     510:	00 c0       	rjmp	.+0      	; 0x512 <LCD_sendCommand+0x2e>
     512:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_HIGH); /* Enable LCD E=1 */
     514:	41 e0       	ldi	r20, 0x01	; 1
     516:	63 e0       	ldi	r22, 0x03	; 3
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
     51e:	8f ec       	ldi	r24, 0xCF	; 207
     520:	97 e0       	ldi	r25, 0x07	; 7
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <LCD_sendCommand+0x3e>
     526:	00 c0       	rjmp	.+0      	; 0x528 <LCD_sendCommand+0x44>
     528:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	DIO_readPort(LCD_DATA_PORT_ID,&lcd_port_value);
     52a:	be 01       	movw	r22, r28
     52c:	6f 5f       	subi	r22, 0xFF	; 255
     52e:	7f 4f       	sbci	r23, 0xFF	; 255
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_readPort>
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (command & 0xF0);
     536:	69 81       	ldd	r22, Y+1	; 0x01
     538:	6f 70       	andi	r22, 0x0F	; 15
     53a:	81 2f       	mov	r24, r17
     53c:	80 7f       	andi	r24, 0xF0	; 240
     53e:	68 2b       	or	r22, r24
     540:	69 83       	std	Y+1, r22	; 0x01
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((command & 0xF0) >> 4);
#endif
	DIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	0e 94 86 0a 	call	0x150c	; 0x150c <DIO_writePort>
     548:	8f ec       	ldi	r24, 0xCF	; 207
     54a:	97 e0       	ldi	r25, 0x07	; 7
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	f1 f7       	brne	.-4      	; 0x54c <LCD_sendCommand+0x68>
     550:	00 c0       	rjmp	.+0      	; 0x552 <LCD_sendCommand+0x6e>
     552:	00 00       	nop

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_LOW); /* Disable LCD E=0 */
     554:	40 e0       	ldi	r20, 0x00	; 0
     556:	63 e0       	ldi	r22, 0x03	; 3
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
     55e:	8f ec       	ldi	r24, 0xCF	; 207
     560:	97 e0       	ldi	r25, 0x07	; 7
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <LCD_sendCommand+0x7e>
     566:	00 c0       	rjmp	.+0      	; 0x568 <LCD_sendCommand+0x84>
     568:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_HIGH); /* Enable LCD E=1 */
     56a:	41 e0       	ldi	r20, 0x01	; 1
     56c:	63 e0       	ldi	r22, 0x03	; 3
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
     574:	8f ec       	ldi	r24, 0xCF	; 207
     576:	97 e0       	ldi	r25, 0x07	; 7
     578:	01 97       	sbiw	r24, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <LCD_sendCommand+0x94>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <LCD_sendCommand+0x9a>
     57e:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	DIO_readPort(LCD_DATA_PORT_ID,&lcd_port_value);
     580:	be 01       	movw	r22, r28
     582:	6f 5f       	subi	r22, 0xFF	; 255
     584:	7f 4f       	sbci	r23, 0xFF	; 255
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_readPort>
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((command & 0x0F) << 4);
     58c:	20 e1       	ldi	r18, 0x10	; 16
     58e:	12 9f       	mul	r17, r18
     590:	c0 01       	movw	r24, r0
     592:	11 24       	eor	r1, r1
     594:	69 81       	ldd	r22, Y+1	; 0x01
     596:	6f 70       	andi	r22, 0x0F	; 15
     598:	68 2b       	or	r22, r24
     59a:	69 83       	std	Y+1, r22	; 0x01
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (command & 0x0F);
#endif
	DIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0e 94 86 0a 	call	0x150c	; 0x150c <DIO_writePort>
     5a2:	8f ec       	ldi	r24, 0xCF	; 207
     5a4:	97 e0       	ldi	r25, 0x07	; 7
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <LCD_sendCommand+0xc2>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <LCD_sendCommand+0xc8>
     5ac:	00 00       	nop

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_LOW); /* Disable LCD E=0 */
     5ae:	40 e0       	ldi	r20, 0x00	; 0
     5b0:	63 e0       	ldi	r22, 0x03	; 3
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
     5b8:	8f ec       	ldi	r24, 0xCF	; 207
     5ba:	97 e0       	ldi	r25, 0x07	; 7
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <LCD_sendCommand+0xd8>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <LCD_sendCommand+0xde>
     5c2:	00 00       	nop
	DIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
     5c4:	0f 90       	pop	r0
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	08 95       	ret

000005ce <LCD_init>:
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
	/* Configure the direction for RS, RW and E pins as output pins */
	DIO_pinMode(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     5ce:	41 e0       	ldi	r20, 0x01	; 1
     5d0:	61 e0       	ldi	r22, 0x01	; 1
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_pinMode>
	DIO_pinMode(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
     5d8:	41 e0       	ldi	r20, 0x01	; 1
     5da:	62 e0       	ldi	r22, 0x02	; 2
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_pinMode>
	DIO_pinMode(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     5e2:	41 e0       	ldi	r20, 0x01	; 1
     5e4:	63 e0       	ldi	r22, 0x03	; 3
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_pinMode>

#if (LCD_DATA_BITS_MODE == 4)

	/* Configure 4 pins in the data port as output pins */
	DIO_pinMode(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID,PIN_OUTPUT);
     5ec:	41 e0       	ldi	r20, 0x01	; 1
     5ee:	64 e0       	ldi	r22, 0x04	; 4
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_pinMode>
	DIO_pinMode(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+1,PIN_OUTPUT);
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	65 e0       	ldi	r22, 0x05	; 5
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_pinMode>
	DIO_pinMode(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,PIN_OUTPUT);
     600:	41 e0       	ldi	r20, 0x01	; 1
     602:	66 e0       	ldi	r22, 0x06	; 6
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_pinMode>
	DIO_pinMode(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,PIN_OUTPUT);
     60a:	41 e0       	ldi	r20, 0x01	; 1
     60c:	67 e0       	ldi	r22, 0x07	; 7
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_pinMode>

	LCD_sendCommand(LCD_GO_TO_HOME);
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
     61a:	88 e2       	ldi	r24, 0x28	; 40
     61c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_sendCommand>
	/* Configure the data port as output port */
	DIO_portMode(LCD_DATA_PORT_ID,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     620:	8c e0       	ldi	r24, 0x0C	; 12
     622:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_sendCommand>
     62c:	08 95       	ret

0000062e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	1f 92       	push	r1
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	18 2f       	mov	r17, r24
	uint8 lcd_port_value = 0;
     63c:	19 82       	std	Y+1, r1	; 0x01
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
     63e:	41 e0       	ldi	r20, 0x01	; 1
     640:	61 e0       	ldi	r22, 0x01	; 1
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
	DIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	62 e0       	ldi	r22, 0x02	; 2
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
     652:	8f ec       	ldi	r24, 0xCF	; 207
     654:	97 e0       	ldi	r25, 0x07	; 7
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	f1 f7       	brne	.-4      	; 0x656 <LCD_displayCharacter+0x28>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <LCD_displayCharacter+0x2e>
     65c:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     65e:	41 e0       	ldi	r20, 0x01	; 1
     660:	63 e0       	ldi	r22, 0x03	; 3
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
     668:	8f ec       	ldi	r24, 0xCF	; 207
     66a:	97 e0       	ldi	r25, 0x07	; 7
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	f1 f7       	brne	.-4      	; 0x66c <LCD_displayCharacter+0x3e>
     670:	00 c0       	rjmp	.+0      	; 0x672 <LCD_displayCharacter+0x44>
     672:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required data to the data bus D4 --> D7 */
	DIO_readPort(LCD_DATA_PORT_ID,&lcd_port_value);
     674:	be 01       	movw	r22, r28
     676:	6f 5f       	subi	r22, 0xFF	; 255
     678:	7f 4f       	sbci	r23, 0xFF	; 255
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_readPort>
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (data & 0xF0);
     680:	69 81       	ldd	r22, Y+1	; 0x01
     682:	6f 70       	andi	r22, 0x0F	; 15
     684:	81 2f       	mov	r24, r17
     686:	80 7f       	andi	r24, 0xF0	; 240
     688:	68 2b       	or	r22, r24
     68a:	69 83       	std	Y+1, r22	; 0x01
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((data & 0xF0) >> 4);
#endif
	DIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	0e 94 86 0a 	call	0x150c	; 0x150c <DIO_writePort>
     692:	8f ec       	ldi	r24, 0xCF	; 207
     694:	97 e0       	ldi	r25, 0x07	; 7
     696:	01 97       	sbiw	r24, 0x01	; 1
     698:	f1 f7       	brne	.-4      	; 0x696 <LCD_displayCharacter+0x68>
     69a:	00 c0       	rjmp	.+0      	; 0x69c <LCD_displayCharacter+0x6e>
     69c:	00 00       	nop

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	63 e0       	ldi	r22, 0x03	; 3
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
     6a8:	8f ec       	ldi	r24, 0xCF	; 207
     6aa:	97 e0       	ldi	r25, 0x07	; 7
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <LCD_displayCharacter+0x7e>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <LCD_displayCharacter+0x84>
     6b2:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     6b4:	41 e0       	ldi	r20, 0x01	; 1
     6b6:	63 e0       	ldi	r22, 0x03	; 3
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
     6be:	8f ec       	ldi	r24, 0xCF	; 207
     6c0:	97 e0       	ldi	r25, 0x07	; 7
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <LCD_displayCharacter+0x94>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <LCD_displayCharacter+0x9a>
     6c8:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required data to the data bus D4 --> D7 */
	DIO_readPort(LCD_DATA_PORT_ID,&lcd_port_value);
     6ca:	be 01       	movw	r22, r28
     6cc:	6f 5f       	subi	r22, 0xFF	; 255
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 a0 0a 	call	0x1540	; 0x1540 <DIO_readPort>
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((data & 0x0F) << 4);
     6d6:	20 e1       	ldi	r18, 0x10	; 16
     6d8:	12 9f       	mul	r17, r18
     6da:	c0 01       	movw	r24, r0
     6dc:	11 24       	eor	r1, r1
     6de:	69 81       	ldd	r22, Y+1	; 0x01
     6e0:	6f 70       	andi	r22, 0x0F	; 15
     6e2:	68 2b       	or	r22, r24
     6e4:	69 83       	std	Y+1, r22	; 0x01
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (data & 0x0F);
#endif
	DIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	0e 94 86 0a 	call	0x150c	; 0x150c <DIO_writePort>
     6ec:	8f ec       	ldi	r24, 0xCF	; 207
     6ee:	97 e0       	ldi	r25, 0x07	; 7
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	f1 f7       	brne	.-4      	; 0x6f0 <LCD_displayCharacter+0xc2>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <LCD_displayCharacter+0xc8>
     6f6:	00 00       	nop

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     6f8:	40 e0       	ldi	r20, 0x00	; 0
     6fa:	63 e0       	ldi	r22, 0x03	; 3
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
     702:	8f ec       	ldi	r24, 0xCF	; 207
     704:	97 e0       	ldi	r25, 0x07	; 7
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <LCD_displayCharacter+0xd8>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <LCD_displayCharacter+0xde>
     70c:	00 00       	nop
	DIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
     70e:	0f 90       	pop	r0
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	08 95       	ret

00000718 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	8c 01       	movw	r16, r24
	uint8 i = 0;
     720:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
     722:	03 c0       	rjmp	.+6      	; 0x72a <LCD_displayString+0x12>
	{
		LCD_displayCharacter(Str[i]);
     724:	0e 94 17 03 	call	0x62e	; 0x62e <LCD_displayCharacter>
		i++;
     728:	cf 5f       	subi	r28, 0xFF	; 255
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
     72a:	f8 01       	movw	r30, r16
     72c:	ec 0f       	add	r30, r28
     72e:	f1 1d       	adc	r31, r1
     730:	80 81       	ld	r24, Z
     732:	81 11       	cpse	r24, r1
     734:	f7 cf       	rjmp	.-18     	; 0x724 <LCD_displayString+0xc>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	08 95       	ret

0000073e <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address = LOGIC_HIGH;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	39 f0       	breq	.+14     	; 0x750 <LCD_moveCursor+0x12>
     742:	58 f0       	brcs	.+22     	; 0x75a <LCD_moveCursor+0x1c>
     744:	82 30       	cpi	r24, 0x02	; 2
     746:	31 f0       	breq	.+12     	; 0x754 <LCD_moveCursor+0x16>
     748:	83 30       	cpi	r24, 0x03	; 3
     74a:	31 f0       	breq	.+12     	; 0x758 <LCD_moveCursor+0x1a>
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address = LOGIC_HIGH;
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	05 c0       	rjmp	.+10     	; 0x75a <LCD_moveCursor+0x1c>
	{
		case 0:
			lcd_memory_address=col;
				break;
		case 1:
			lcd_memory_address=col+0x40;
     750:	60 5c       	subi	r22, 0xC0	; 192
				break;
     752:	03 c0       	rjmp	.+6      	; 0x75a <LCD_moveCursor+0x1c>
		case 2:
			lcd_memory_address=col+0x10;
     754:	60 5f       	subi	r22, 0xF0	; 240
				break;
     756:	01 c0       	rjmp	.+2      	; 0x75a <LCD_moveCursor+0x1c>
		case 3:
			lcd_memory_address=col+0x50;
     758:	60 5b       	subi	r22, 0xB0	; 176
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
     75a:	86 2f       	mov	r24, r22
     75c:	80 68       	ori	r24, 0x80	; 128
     75e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_sendCommand>
     762:	08 95       	ret

00000764 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	ea 01       	movw	r28, r20
	LCD_moveCursor(row,col); /* go to to the required LCD position */
     76a:	0e 94 9f 03 	call	0x73e	; 0x73e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
     76e:	ce 01       	movw	r24, r28
     770:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_displayString>
}
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	60 97       	sbiw	r28, 0x10	; 16
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
     78e:	4a e0       	ldi	r20, 0x0A	; 10
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	be 01       	movw	r22, r28
     794:	6f 5f       	subi	r22, 0xFF	; 255
     796:	7f 4f       	sbci	r23, 0xFF	; 255
     798:	0e 94 cc 1c 	call	0x3998	; 0x3998 <itoa>
   LCD_displayString(buff); /* Display the string */
     79c:	ce 01       	movw	r24, r28
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_displayString>
}
     7a4:	60 96       	adiw	r28, 0x10	; 16
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <LCD_clearScreen>:
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_sendCommand>
     7bc:	08 95       	ret

000007be <led_init>:
#include "led.h"

/*============= FUNCTION DEFINITIONS =============*/

enu_led_error_t led_init(uint8 u8_port,uint8 u8_pin)
{
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	c8 2f       	mov	r28, r24
     7c4:	d6 2f       	mov	r29, r22
	enu_led_error_t enu_led_error = LED_VALID_OPERATION;
	enu_led_error = (enu_led_error_t) DIO_pinMode(u8_port,u8_pin,PIN_OUTPUT);
     7c6:	41 e0       	ldi	r20, 0x01	; 1
     7c8:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_pinMode>
	if(enu_led_error == LED_VALID_OPERATION)
     7cc:	81 30       	cpi	r24, 0x01	; 1
     7ce:	29 f4       	brne	.+10     	; 0x7da <led_init+0x1c>
	{
		enu_led_error = DIO_writePin(u8_port,u8_pin,PIN_LOW);
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	6d 2f       	mov	r22, r29
     7d4:	8c 2f       	mov	r24, r28
     7d6:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
	}
	return enu_led_error;
}
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <PWM_callback>:
}


/* ============= PWM CALLBACK FUNCTION =============*/
void PWM_callback (void)
{
     7e0:	cf 92       	push	r12
     7e2:	df 92       	push	r13
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	cf 93       	push	r28
	if((gs_u8_duty_cycle < MAX_DUTY_CYCLE) && ((gs_u8_duty_cycle > ZERO_VALUE)))
     7ea:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <gs_u8_duty_cycle>
     7ee:	6c 2f       	mov	r22, r28
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 95 1b 	call	0x372a	; 0x372a <__floatsisf>
     7fa:	6b 01       	movw	r12, r22
     7fc:	7c 01       	movw	r14, r24
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	48 ec       	ldi	r20, 0xC8	; 200
     804:	52 e4       	ldi	r21, 0x42	; 66
     806:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
     80a:	88 23       	and	r24, r24
     80c:	bc f5       	brge	.+110    	; 0x87c <__stack+0x1d>
     80e:	cc 23       	and	r28, r28
     810:	a9 f1       	breq	.+106    	; 0x87c <__stack+0x1d>
	{
		DIO_togglePin(gs_u8_gpio_port_id,gs_u8_gpio_pin_id);
     812:	60 91 f4 00 	lds	r22, 0x00F4	; 0x8000f4 <gs_u8_gpio_pin_id>
     816:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <gs_u8_gpio_port_id>
     81a:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_togglePin>
		timer_stop(gs_u8_timer_id);
     81e:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <gs_u8_timer_id>
     822:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <timer_stop>
		if(gs_bo_pwm_flag == FALSE)		
     826:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <gs_bo_pwm_flag>
     82a:	81 11       	cpse	r24, r1
     82c:	12 c0       	rjmp	.+36     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
		{
			timer_setClock(gs_u8_timer_id,gs_u8_offTime_prescale);
     82e:	60 91 f0 00 	lds	r22, 0x00F0	; 0x8000f0 <gs_u8_offTime_prescale>
     832:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <gs_u8_timer_id>
     836:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <timer_setClock>
			timer_setInitialValue(gs_u8_timer_id,gs_u16_offTime_initValue);
     83a:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <gs_u16_offTime_initValue>
     83e:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <gs_u16_offTime_initValue+0x1>
     842:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <gs_u8_timer_id>
     846:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <timer_setInitialValue>
			gs_bo_pwm_flag = TRUE;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <gs_bo_pwm_flag>
     850:	10 c0       	rjmp	.+32     	; 0x872 <__stack+0x13>
		}
		else
		{
			timer_setClock(gs_u8_timer_id,gs_u8_onTime_prescale);
     852:	60 91 ef 00 	lds	r22, 0x00EF	; 0x8000ef <gs_u8_onTime_prescale>
     856:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <gs_u8_timer_id>
     85a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <timer_setClock>
			timer_setInitialValue(gs_u8_timer_id,gs_u16_onTime_initValue);
     85e:	60 91 eb 00 	lds	r22, 0x00EB	; 0x8000eb <gs_u16_onTime_initValue>
     862:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <gs_u16_onTime_initValue+0x1>
     866:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <gs_u8_timer_id>
     86a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <timer_setInitialValue>
			gs_bo_pwm_flag = FALSE;
     86e:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <gs_bo_pwm_flag>
		}
		timer_start(gs_u8_timer_id);
     872:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <gs_u8_timer_id>
     876:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <timer_start>
     87a:	19 c0       	rjmp	.+50     	; 0x8ae <__stack+0x4f>
	}
	else if (gs_u8_duty_cycle == MAX_DUTY_CYCLE)
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	48 ec       	ldi	r20, 0xC8	; 200
     882:	52 e4       	ldi	r21, 0x42	; 66
     884:	c7 01       	movw	r24, r14
     886:	b6 01       	movw	r22, r12
     888:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
     88c:	81 11       	cpse	r24, r1
     88e:	08 c0       	rjmp	.+16     	; 0x8a0 <__stack+0x41>
	{
		DIO_writePin(gs_u8_gpio_port_id,gs_u8_gpio_pin_id,PIN_HIGH);
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	60 91 f4 00 	lds	r22, 0x00F4	; 0x8000f4 <gs_u8_gpio_pin_id>
     896:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <gs_u8_gpio_port_id>
     89a:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
     89e:	07 c0       	rjmp	.+14     	; 0x8ae <__stack+0x4f>
	}
	else
	{
		DIO_writePin(gs_u8_gpio_port_id,gs_u8_gpio_pin_id,PIN_LOW);
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	60 91 f4 00 	lds	r22, 0x00F4	; 0x8000f4 <gs_u8_gpio_pin_id>
     8a6:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <gs_u8_gpio_port_id>
     8aa:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
	}
}
     8ae:	cf 91       	pop	r28
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	08 95       	ret

000008ba <PWM_Init>:
 *
 * @return      ENU_PWM_VALID_OPERATION		: in case of successful operation     
 *				ENU_PWM_INVALID_OPERATION	:	in case of wrong value       
 */
enu_pwm_error_t PWM_Init(uint8 u8_pwm_port_id,uint8 u8_pwm_pin_id,uint8 u8_pwm_timer_id)
{
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	29 97       	sbiw	r28, 0x09	; 9
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
	enu_pwm_error_t enu_pwm_error = ENU_PWM_VALID_OPERATION;
	str_tmr_config_t str_tmr_config;
	//check the passing parameters
	if((u8_pwm_port_id < MAX_PORT_ID) && (u8_pwm_pin_id < MAX_PIN_ID) && (u8_pwm_timer_id < MAX_ENU_TMR_CHANNEL))
     8d4:	84 30       	cpi	r24, 0x04	; 4
     8d6:	60 f5       	brcc	.+88     	; 0x930 <PWM_Init+0x76>
     8d8:	68 30       	cpi	r22, 0x08	; 8
     8da:	60 f5       	brcc	.+88     	; 0x934 <PWM_Init+0x7a>
     8dc:	43 30       	cpi	r20, 0x03	; 3
     8de:	60 f5       	brcc	.+88     	; 0x938 <PWM_Init+0x7e>
     8e0:	f4 2e       	mov	r15, r20
     8e2:	06 2f       	mov	r16, r22
     8e4:	18 2f       	mov	r17, r24
	{
		//set global variables
		gs_u8_gpio_port_id	= u8_pwm_port_id;
     8e6:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <gs_u8_gpio_port_id>
		gs_u8_gpio_pin_id	= u8_pwm_pin_id;
     8ea:	60 93 f4 00 	sts	0x00F4, r22	; 0x8000f4 <gs_u8_gpio_pin_id>
		gs_u8_timer_id		= u8_pwm_timer_id;
     8ee:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <gs_u8_timer_id>
		//initialize TIMER
		str_tmr_config.enu_tmr_channel_id		= u8_pwm_timer_id;
     8f2:	49 83       	std	Y+1, r20	; 0x01
		str_tmr_config.enu_tmr_clk				= ENU_TMR_NO_CLK;
     8f4:	1d 82       	std	Y+5, r1	; 0x05
		str_tmr_config.enu_tmr_mode				= ENU_TMR_NORMAL_MODE;
     8f6:	1a 82       	std	Y+2, r1	; 0x02
		str_tmr_config.enu_tmr_cmp_mode			= ENU_TMR_CMP_DISCONNECT;
     8f8:	1c 82       	std	Y+4, r1	; 0x04
		str_tmr_config.enu_tmr_interrupt_state	= ENU_TMR_INT_ENABLE;
     8fa:	1b 82       	std	Y+3, r1	; 0x03
		str_tmr_config.u16_tmr_initial_value	= ZERO_VALUE;
     8fc:	1f 82       	std	Y+7, r1	; 0x07
     8fe:	1e 82       	std	Y+6, r1	; 0x06
		str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
     900:	19 86       	std	Y+9, r1	; 0x09
     902:	18 86       	std	Y+8, r1	; 0x08
		timer_init(&str_tmr_config);
     904:	ce 01       	movw	r24, r28
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	0e 94 b1 0b 	call	0x1762	; 0x1762 <timer_init>
		timer_setCallBack(u8_pwm_timer_id,PWM_callback,ENU_TMR_NORMAL_MODE);
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	60 ef       	ldi	r22, 0xF0	; 240
     910:	73 e0       	ldi	r23, 0x03	; 3
     912:	8f 2d       	mov	r24, r15
     914:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <timer_setCallBack>
		//initialize GPIO
		DIO_pinMode(u8_pwm_port_id,u8_pwm_pin_id,PIN_OUTPUT);
     918:	41 e0       	ldi	r20, 0x01	; 1
     91a:	60 2f       	mov	r22, r16
     91c:	81 2f       	mov	r24, r17
     91e:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_pinMode>
		DIO_writePin(u8_pwm_port_id,u8_pwm_pin_id,PIN_LOW);
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	60 2f       	mov	r22, r16
     926:	81 2f       	mov	r24, r17
     928:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
 * @return      ENU_PWM_VALID_OPERATION		: in case of successful operation     
 *				ENU_PWM_INVALID_OPERATION	:	in case of wrong value       
 */
enu_pwm_error_t PWM_Init(uint8 u8_pwm_port_id,uint8 u8_pwm_pin_id,uint8 u8_pwm_timer_id)
{
	enu_pwm_error_t enu_pwm_error = ENU_PWM_VALID_OPERATION;
     92c:	81 e0       	ldi	r24, 0x01	; 1
		str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
		timer_init(&str_tmr_config);
		timer_setCallBack(u8_pwm_timer_id,PWM_callback,ENU_TMR_NORMAL_MODE);
		//initialize GPIO
		DIO_pinMode(u8_pwm_port_id,u8_pwm_pin_id,PIN_OUTPUT);
		DIO_writePin(u8_pwm_port_id,u8_pwm_pin_id,PIN_LOW);
     92e:	05 c0       	rjmp	.+10     	; 0x93a <PWM_Init+0x80>
	}
	else
	{
		enu_pwm_error = ENU_PWM_INVALID_OPERATION;
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	03 c0       	rjmp	.+6      	; 0x93a <PWM_Init+0x80>
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	01 c0       	rjmp	.+2      	; 0x93a <PWM_Init+0x80>
     938:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enu_pwm_error;
}
     93a:	29 96       	adiw	r28, 0x09	; 9
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	08 95       	ret

00000952 <timer_check_time_out_flag>:
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
	}
	return enu_time_error;
}
     952:	83 30       	cpi	r24, 0x03	; 3
     954:	68 f4       	brcc	.+26     	; 0x970 <timer_check_time_out_flag+0x1e>
     956:	61 15       	cp	r22, r1
     958:	71 05       	cpc	r23, r1
     95a:	61 f0       	breq	.+24     	; 0x974 <timer_check_time_out_flag+0x22>
     95c:	e8 2f       	mov	r30, r24
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	e3 5f       	subi	r30, 0xF3	; 243
     962:	fe 4f       	sbci	r31, 0xFE	; 254
     964:	80 81       	ld	r24, Z
     966:	db 01       	movw	r26, r22
     968:	8c 93       	st	X, r24
     96a:	10 82       	st	Z, r1
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	08 95       	ret
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	08 95       	ret
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	08 95       	ret

00000978 <timer_clk_map>:
     978:	80 32       	cpi	r24, 0x20	; 32
     97a:	91 05       	cpc	r25, r1
     97c:	e1 f0       	breq	.+56     	; 0x9b6 <timer_clk_map+0x3e>
     97e:	38 f4       	brcc	.+14     	; 0x98e <timer_clk_map+0x16>
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	91 05       	cpc	r25, r1
     984:	21 f1       	breq	.+72     	; 0x9ce <timer_clk_map+0x56>
     986:	98 f0       	brcs	.+38     	; 0x9ae <timer_clk_map+0x36>
     988:	08 97       	sbiw	r24, 0x08	; 8
     98a:	99 f0       	breq	.+38     	; 0x9b2 <timer_clk_map+0x3a>
     98c:	1e c0       	rjmp	.+60     	; 0x9ca <timer_clk_map+0x52>
     98e:	80 38       	cpi	r24, 0x80	; 128
     990:	91 05       	cpc	r25, r1
     992:	a9 f0       	breq	.+42     	; 0x9be <timer_clk_map+0x46>
     994:	20 f4       	brcc	.+8      	; 0x99e <timer_clk_map+0x26>
     996:	80 34       	cpi	r24, 0x40	; 64
     998:	91 05       	cpc	r25, r1
     99a:	79 f0       	breq	.+30     	; 0x9ba <timer_clk_map+0x42>
     99c:	16 c0       	rjmp	.+44     	; 0x9ca <timer_clk_map+0x52>
     99e:	81 15       	cp	r24, r1
     9a0:	21 e0       	ldi	r18, 0x01	; 1
     9a2:	92 07       	cpc	r25, r18
     9a4:	71 f0       	breq	.+28     	; 0x9c2 <timer_clk_map+0x4a>
     9a6:	81 15       	cp	r24, r1
     9a8:	94 40       	sbci	r25, 0x04	; 4
     9aa:	69 f0       	breq	.+26     	; 0x9c6 <timer_clk_map+0x4e>
     9ac:	0e c0       	rjmp	.+28     	; 0x9ca <timer_clk_map+0x52>
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	08 95       	ret
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	08 95       	ret
     9b6:	83 e0       	ldi	r24, 0x03	; 3
     9b8:	08 95       	ret
     9ba:	84 e0       	ldi	r24, 0x04	; 4
     9bc:	08 95       	ret
     9be:	85 e0       	ldi	r24, 0x05	; 5
     9c0:	08 95       	ret
     9c2:	86 e0       	ldi	r24, 0x06	; 6
     9c4:	08 95       	ret
     9c6:	87 e0       	ldi	r24, 0x07	; 7
     9c8:	08 95       	ret
     9ca:	8a e0       	ldi	r24, 0x0A	; 10
     9cc:	08 95       	ret
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	08 95       	ret

000009d2 <delay_us>:
     9d2:	8f 92       	push	r8
     9d4:	9f 92       	push	r9
     9d6:	af 92       	push	r10
     9d8:	bf 92       	push	r11
     9da:	df 92       	push	r13
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
     9ec:	2e 97       	sbiw	r28, 0x0e	; 14
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	1a 82       	std	Y+2, r1	; 0x02
     9fa:	19 82       	std	Y+1, r1	; 0x01
     9fc:	1c 82       	std	Y+4, r1	; 0x04
     9fe:	1b 82       	std	Y+3, r1	; 0x03
     a00:	1d 82       	std	Y+5, r1	; 0x05
     a02:	8e 83       	std	Y+6, r24	; 0x06
     a04:	1f 82       	std	Y+7, r1	; 0x07
     a06:	19 86       	std	Y+9, r1	; 0x09
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	98 87       	std	Y+8, r25	; 0x08
     a0c:	1e 86       	std	Y+14, r1	; 0x0e
     a0e:	1d 86       	std	Y+13, r1	; 0x0d
     a10:	83 30       	cpi	r24, 0x03	; 3
     a12:	08 f0       	brcs	.+2      	; 0xa16 <delay_us+0x44>
     a14:	d5 c0       	rjmp	.+426    	; 0xbc0 <delay_us+0x1ee>
     a16:	4a 01       	movw	r8, r20
     a18:	5b 01       	movw	r10, r22
     a1a:	d8 2e       	mov	r13, r24
     a1c:	8e 01       	movw	r16, r28
     a1e:	0f 5f       	subi	r16, 0xFF	; 255
     a20:	1f 4f       	sbci	r17, 0xFF	; 255
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	48 2f       	mov	r20, r24
     a26:	c5 01       	movw	r24, r10
     a28:	b4 01       	movw	r22, r8
     a2a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <calc_prescaler>
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	09 f0       	breq	.+2      	; 0xa34 <delay_us+0x62>
     a32:	c8 c0       	rjmp	.+400    	; 0xbc4 <delay_us+0x1f2>
     a34:	49 81       	ldd	r20, Y+1	; 0x01
     a36:	5a 81       	ldd	r21, Y+2	; 0x02
     a38:	4c 3d       	cpi	r20, 0xDC	; 220
     a3a:	85 e0       	ldi	r24, 0x05	; 5
     a3c:	58 07       	cpc	r21, r24
     a3e:	29 f1       	breq	.+74     	; 0xa8a <delay_us+0xb8>
     a40:	ce 01       	movw	r24, r28
     a42:	03 96       	adiw	r24, 0x03	; 3
     a44:	7c 01       	movw	r14, r24
     a46:	95 01       	movw	r18, r10
     a48:	84 01       	movw	r16, r8
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	8d 2d       	mov	r24, r13
     a4e:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <calc_initialValue>
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	9a 81       	ldd	r25, Y+2	; 0x02
     a56:	0e 94 bc 04 	call	0x978	; 0x978 <timer_clk_map>
     a5a:	8a 87       	std	Y+10, r24	; 0x0a
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	9c 81       	ldd	r25, Y+4	; 0x04
     a60:	9c 87       	std	Y+12, r25	; 0x0c
     a62:	8b 87       	std	Y+11, r24	; 0x0b
     a64:	ce 01       	movw	r24, r28
     a66:	06 96       	adiw	r24, 0x06	; 6
     a68:	0e 94 b1 0b 	call	0x1762	; 0x1762 <timer_init>
     a6c:	8d 2d       	mov	r24, r13
     a6e:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <timer_start>
     a72:	ae 01       	movw	r20, r28
     a74:	4b 5f       	subi	r20, 0xFB	; 251
     a76:	5f 4f       	sbci	r21, 0xFF	; 255
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	8d 2d       	mov	r24, r13
     a7c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <timer_flag_notification>
     a80:	8d 81       	ldd	r24, Y+5	; 0x05
     a82:	88 23       	and	r24, r24
     a84:	b1 f3       	breq	.-20     	; 0xa72 <delay_us+0xa0>
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	a0 c0       	rjmp	.+320    	; 0xbca <delay_us+0x1f8>
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	94 e0       	ldi	r25, 0x04	; 4
     a8e:	0e 94 bc 04 	call	0x978	; 0x978 <timer_clk_map>
     a92:	8a 87       	std	Y+10, r24	; 0x0a
     a94:	1c 86       	std	Y+12, r1	; 0x0c
     a96:	1b 86       	std	Y+11, r1	; 0x0b
     a98:	dd 20       	and	r13, r13
     a9a:	19 f0       	breq	.+6      	; 0xaa2 <delay_us+0xd0>
     a9c:	92 e0       	ldi	r25, 0x02	; 2
     a9e:	d9 12       	cpse	r13, r25
     aa0:	20 c0       	rjmp	.+64     	; 0xae2 <delay_us+0x110>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	58 e3       	ldi	r21, 0x38	; 56
     aaa:	c5 01       	movw	r24, r10
     aac:	b4 01       	movw	r22, r8
     aae:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
     ab2:	4b 01       	movw	r8, r22
     ab4:	5c 01       	movw	r10, r24
     ab6:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
     aba:	8b 01       	movw	r16, r22
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 93 1b 	call	0x3726	; 0x3726 <__floatunsisf>
     ac4:	9b 01       	movw	r18, r22
     ac6:	ac 01       	movw	r20, r24
     ac8:	c5 01       	movw	r24, r10
     aca:	b4 01       	movw	r22, r8
     acc:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	57 e4       	ldi	r21, 0x47	; 71
     ad8:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
     adc:	4b 01       	movw	r8, r22
     ade:	5c 01       	movw	r10, r24
     ae0:	33 c0       	rjmp	.+102    	; 0xb48 <delay_us+0x176>
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	40 e0       	ldi	r20, 0x00	; 0
     ae8:	54 e3       	ldi	r21, 0x34	; 52
     aea:	c5 01       	movw	r24, r10
     aec:	b4 01       	movw	r22, r8
     aee:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
     af2:	4b 01       	movw	r8, r22
     af4:	5c 01       	movw	r10, r24
     af6:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
     afa:	8b 01       	movw	r16, r22
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 93 1b 	call	0x3726	; 0x3726 <__floatunsisf>
     b04:	9b 01       	movw	r18, r22
     b06:	ac 01       	movw	r20, r24
     b08:	c5 01       	movw	r24, r10
     b0a:	b4 01       	movw	r22, r8
     b0c:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	40 e0       	ldi	r20, 0x00	; 0
     b16:	5b e4       	ldi	r21, 0x4B	; 75
     b18:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
     b1c:	4b 01       	movw	r8, r22
     b1e:	5c 01       	movw	r10, r24
     b20:	13 c0       	rjmp	.+38     	; 0xb48 <delay_us+0x176>
     b22:	ce 01       	movw	r24, r28
     b24:	06 96       	adiw	r24, 0x06	; 6
     b26:	0e 94 b1 0b 	call	0x1762	; 0x1762 <timer_init>
     b2a:	8d 2d       	mov	r24, r13
     b2c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <timer_start>
     b30:	ae 01       	movw	r20, r28
     b32:	4b 5f       	subi	r20, 0xFB	; 251
     b34:	5f 4f       	sbci	r21, 0xFF	; 255
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	8d 2d       	mov	r24, r13
     b3a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <timer_flag_notification>
     b3e:	9d 81       	ldd	r25, Y+5	; 0x05
     b40:	99 23       	and	r25, r25
     b42:	b1 f3       	breq	.-20     	; 0xb30 <delay_us+0x15e>
     b44:	01 50       	subi	r16, 0x01	; 1
     b46:	11 09       	sbc	r17, r1
     b48:	01 15       	cp	r16, r1
     b4a:	11 05       	cpc	r17, r1
     b4c:	51 f7       	brne	.-44     	; 0xb22 <delay_us+0x150>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	a9 01       	movw	r20, r18
     b54:	c5 01       	movw	r24, r10
     b56:	b4 01       	movw	r22, r8
     b58:	0e 94 45 1c 	call	0x388a	; 0x388a <__gesf2>
     b5c:	18 16       	cp	r1, r24
     b5e:	a4 f5       	brge	.+104    	; 0xbc8 <delay_us+0x1f6>
     b60:	8e 01       	movw	r16, r28
     b62:	0f 5f       	subi	r16, 0xFF	; 255
     b64:	1f 4f       	sbci	r17, 0xFF	; 255
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	4d 2d       	mov	r20, r13
     b6a:	c5 01       	movw	r24, r10
     b6c:	b4 01       	movw	r22, r8
     b6e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <calc_prescaler>
     b72:	49 81       	ldd	r20, Y+1	; 0x01
     b74:	5a 81       	ldd	r21, Y+2	; 0x02
     b76:	ce 01       	movw	r24, r28
     b78:	03 96       	adiw	r24, 0x03	; 3
     b7a:	7c 01       	movw	r14, r24
     b7c:	95 01       	movw	r18, r10
     b7e:	84 01       	movw	r16, r8
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	8d 2d       	mov	r24, r13
     b84:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <calc_initialValue>
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	9a 81       	ldd	r25, Y+2	; 0x02
     b8c:	0e 94 bc 04 	call	0x978	; 0x978 <timer_clk_map>
     b90:	8a 87       	std	Y+10, r24	; 0x0a
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	9c 81       	ldd	r25, Y+4	; 0x04
     b96:	9c 87       	std	Y+12, r25	; 0x0c
     b98:	8b 87       	std	Y+11, r24	; 0x0b
     b9a:	ce 01       	movw	r24, r28
     b9c:	06 96       	adiw	r24, 0x06	; 6
     b9e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <timer_init>
     ba2:	8d 2d       	mov	r24, r13
     ba4:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <timer_start>
     ba8:	ae 01       	movw	r20, r28
     baa:	4b 5f       	subi	r20, 0xFB	; 251
     bac:	5f 4f       	sbci	r21, 0xFF	; 255
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	8d 2d       	mov	r24, r13
     bb2:	0e 94 67 0f 	call	0x1ece	; 0x1ece <timer_flag_notification>
     bb6:	8d 81       	ldd	r24, Y+5	; 0x05
     bb8:	88 23       	and	r24, r24
     bba:	b1 f3       	breq	.-20     	; 0xba8 <delay_us+0x1d6>
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	05 c0       	rjmp	.+10     	; 0xbca <delay_us+0x1f8>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	03 c0       	rjmp	.+6      	; 0xbca <delay_us+0x1f8>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <delay_us+0x1f8>
     bc8:	83 e0       	ldi	r24, 0x03	; 3
     bca:	2e 96       	adiw	r28, 0x0e	; 14
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	cd bf       	out	0x3d, r28	; 61
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	bf 90       	pop	r11
     be6:	af 90       	pop	r10
     be8:	9f 90       	pop	r9
     bea:	8f 90       	pop	r8
     bec:	08 95       	ret

00000bee <delay_ms>:
     bee:	8f 92       	push	r8
     bf0:	9f 92       	push	r9
     bf2:	af 92       	push	r10
     bf4:	bf 92       	push	r11
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	2e 97       	sbiw	r28, 0x0e	; 14
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	1a 82       	std	Y+2, r1	; 0x02
     c16:	19 82       	std	Y+1, r1	; 0x01
     c18:	1c 82       	std	Y+4, r1	; 0x04
     c1a:	1b 82       	std	Y+3, r1	; 0x03
     c1c:	1d 82       	std	Y+5, r1	; 0x05
     c1e:	8e 83       	std	Y+6, r24	; 0x06
     c20:	1f 82       	std	Y+7, r1	; 0x07
     c22:	19 86       	std	Y+9, r1	; 0x09
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	98 87       	std	Y+8, r25	; 0x08
     c28:	1e 86       	std	Y+14, r1	; 0x0e
     c2a:	1d 86       	std	Y+13, r1	; 0x0d
     c2c:	83 30       	cpi	r24, 0x03	; 3
     c2e:	08 f0       	brcs	.+2      	; 0xc32 <delay_ms+0x44>
     c30:	d5 c0       	rjmp	.+426    	; 0xddc <delay_ms+0x1ee>
     c32:	4a 01       	movw	r8, r20
     c34:	5b 01       	movw	r10, r22
     c36:	d8 2e       	mov	r13, r24
     c38:	8e 01       	movw	r16, r28
     c3a:	0f 5f       	subi	r16, 0xFF	; 255
     c3c:	1f 4f       	sbci	r17, 0xFF	; 255
     c3e:	21 e0       	ldi	r18, 0x01	; 1
     c40:	48 2f       	mov	r20, r24
     c42:	c5 01       	movw	r24, r10
     c44:	b4 01       	movw	r22, r8
     c46:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <calc_prescaler>
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	09 f0       	breq	.+2      	; 0xc50 <delay_ms+0x62>
     c4e:	c8 c0       	rjmp	.+400    	; 0xde0 <delay_ms+0x1f2>
     c50:	49 81       	ldd	r20, Y+1	; 0x01
     c52:	5a 81       	ldd	r21, Y+2	; 0x02
     c54:	4c 3d       	cpi	r20, 0xDC	; 220
     c56:	85 e0       	ldi	r24, 0x05	; 5
     c58:	58 07       	cpc	r21, r24
     c5a:	29 f1       	breq	.+74     	; 0xca6 <delay_ms+0xb8>
     c5c:	ce 01       	movw	r24, r28
     c5e:	03 96       	adiw	r24, 0x03	; 3
     c60:	7c 01       	movw	r14, r24
     c62:	95 01       	movw	r18, r10
     c64:	84 01       	movw	r16, r8
     c66:	61 e0       	ldi	r22, 0x01	; 1
     c68:	8d 2d       	mov	r24, r13
     c6a:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <calc_initialValue>
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	0e 94 bc 04 	call	0x978	; 0x978 <timer_clk_map>
     c76:	8a 87       	std	Y+10, r24	; 0x0a
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	9c 81       	ldd	r25, Y+4	; 0x04
     c7c:	9c 87       	std	Y+12, r25	; 0x0c
     c7e:	8b 87       	std	Y+11, r24	; 0x0b
     c80:	ce 01       	movw	r24, r28
     c82:	06 96       	adiw	r24, 0x06	; 6
     c84:	0e 94 b1 0b 	call	0x1762	; 0x1762 <timer_init>
     c88:	8d 2d       	mov	r24, r13
     c8a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <timer_start>
     c8e:	ae 01       	movw	r20, r28
     c90:	4b 5f       	subi	r20, 0xFB	; 251
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	8d 2d       	mov	r24, r13
     c98:	0e 94 67 0f 	call	0x1ece	; 0x1ece <timer_flag_notification>
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	88 23       	and	r24, r24
     ca0:	b1 f3       	breq	.-20     	; 0xc8e <delay_ms+0xa0>
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	a0 c0       	rjmp	.+320    	; 0xde6 <delay_ms+0x1f8>
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	94 e0       	ldi	r25, 0x04	; 4
     caa:	0e 94 bc 04 	call	0x978	; 0x978 <timer_clk_map>
     cae:	8a 87       	std	Y+10, r24	; 0x0a
     cb0:	1c 86       	std	Y+12, r1	; 0x0c
     cb2:	1b 86       	std	Y+11, r1	; 0x0b
     cb4:	dd 20       	and	r13, r13
     cb6:	19 f0       	breq	.+6      	; 0xcbe <delay_ms+0xd0>
     cb8:	92 e0       	ldi	r25, 0x02	; 2
     cba:	d9 12       	cpse	r13, r25
     cbc:	20 c0       	rjmp	.+64     	; 0xcfe <delay_ms+0x110>
     cbe:	2f e6       	ldi	r18, 0x6F	; 111
     cc0:	32 e1       	ldi	r19, 0x12	; 18
     cc2:	43 e0       	ldi	r20, 0x03	; 3
     cc4:	52 e4       	ldi	r21, 0x42	; 66
     cc6:	c5 01       	movw	r24, r10
     cc8:	b4 01       	movw	r22, r8
     cca:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
     cce:	4b 01       	movw	r8, r22
     cd0:	5c 01       	movw	r10, r24
     cd2:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
     cd6:	8b 01       	movw	r16, r22
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 93 1b 	call	0x3726	; 0x3726 <__floatunsisf>
     ce0:	9b 01       	movw	r18, r22
     ce2:	ac 01       	movw	r20, r24
     ce4:	c5 01       	movw	r24, r10
     ce6:	b4 01       	movw	r22, r8
     ce8:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
     cec:	2f e6       	ldi	r18, 0x6F	; 111
     cee:	32 e1       	ldi	r19, 0x12	; 18
     cf0:	43 e0       	ldi	r20, 0x03	; 3
     cf2:	52 e4       	ldi	r21, 0x42	; 66
     cf4:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
     cf8:	4b 01       	movw	r8, r22
     cfa:	5c 01       	movw	r10, r24
     cfc:	33 c0       	rjmp	.+102    	; 0xd64 <delay_ms+0x176>
     cfe:	2f e6       	ldi	r18, 0x6F	; 111
     d00:	32 e1       	ldi	r19, 0x12	; 18
     d02:	43 e0       	ldi	r20, 0x03	; 3
     d04:	56 e4       	ldi	r21, 0x46	; 70
     d06:	c5 01       	movw	r24, r10
     d08:	b4 01       	movw	r22, r8
     d0a:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
     d0e:	4b 01       	movw	r8, r22
     d10:	5c 01       	movw	r10, r24
     d12:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
     d16:	8b 01       	movw	r16, r22
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 93 1b 	call	0x3726	; 0x3726 <__floatunsisf>
     d20:	9b 01       	movw	r18, r22
     d22:	ac 01       	movw	r20, r24
     d24:	c5 01       	movw	r24, r10
     d26:	b4 01       	movw	r22, r8
     d28:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
     d2c:	2f e6       	ldi	r18, 0x6F	; 111
     d2e:	32 e1       	ldi	r19, 0x12	; 18
     d30:	43 e0       	ldi	r20, 0x03	; 3
     d32:	56 e4       	ldi	r21, 0x46	; 70
     d34:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
     d38:	4b 01       	movw	r8, r22
     d3a:	5c 01       	movw	r10, r24
     d3c:	13 c0       	rjmp	.+38     	; 0xd64 <delay_ms+0x176>
     d3e:	ce 01       	movw	r24, r28
     d40:	06 96       	adiw	r24, 0x06	; 6
     d42:	0e 94 b1 0b 	call	0x1762	; 0x1762 <timer_init>
     d46:	8d 2d       	mov	r24, r13
     d48:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <timer_start>
     d4c:	ae 01       	movw	r20, r28
     d4e:	4b 5f       	subi	r20, 0xFB	; 251
     d50:	5f 4f       	sbci	r21, 0xFF	; 255
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	8d 2d       	mov	r24, r13
     d56:	0e 94 67 0f 	call	0x1ece	; 0x1ece <timer_flag_notification>
     d5a:	9d 81       	ldd	r25, Y+5	; 0x05
     d5c:	99 23       	and	r25, r25
     d5e:	b1 f3       	breq	.-20     	; 0xd4c <delay_ms+0x15e>
     d60:	01 50       	subi	r16, 0x01	; 1
     d62:	11 09       	sbc	r17, r1
     d64:	01 15       	cp	r16, r1
     d66:	11 05       	cpc	r17, r1
     d68:	51 f7       	brne	.-44     	; 0xd3e <delay_ms+0x150>
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	a9 01       	movw	r20, r18
     d70:	c5 01       	movw	r24, r10
     d72:	b4 01       	movw	r22, r8
     d74:	0e 94 45 1c 	call	0x388a	; 0x388a <__gesf2>
     d78:	18 16       	cp	r1, r24
     d7a:	a4 f5       	brge	.+104    	; 0xde4 <delay_ms+0x1f6>
     d7c:	8e 01       	movw	r16, r28
     d7e:	0f 5f       	subi	r16, 0xFF	; 255
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
     d82:	21 e0       	ldi	r18, 0x01	; 1
     d84:	4d 2d       	mov	r20, r13
     d86:	c5 01       	movw	r24, r10
     d88:	b4 01       	movw	r22, r8
     d8a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <calc_prescaler>
     d8e:	49 81       	ldd	r20, Y+1	; 0x01
     d90:	5a 81       	ldd	r21, Y+2	; 0x02
     d92:	ce 01       	movw	r24, r28
     d94:	03 96       	adiw	r24, 0x03	; 3
     d96:	7c 01       	movw	r14, r24
     d98:	95 01       	movw	r18, r10
     d9a:	84 01       	movw	r16, r8
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	8d 2d       	mov	r24, r13
     da0:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <calc_initialValue>
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	0e 94 bc 04 	call	0x978	; 0x978 <timer_clk_map>
     dac:	8a 87       	std	Y+10, r24	; 0x0a
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	9c 81       	ldd	r25, Y+4	; 0x04
     db2:	9c 87       	std	Y+12, r25	; 0x0c
     db4:	8b 87       	std	Y+11, r24	; 0x0b
     db6:	ce 01       	movw	r24, r28
     db8:	06 96       	adiw	r24, 0x06	; 6
     dba:	0e 94 b1 0b 	call	0x1762	; 0x1762 <timer_init>
     dbe:	8d 2d       	mov	r24, r13
     dc0:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <timer_start>
     dc4:	ae 01       	movw	r20, r28
     dc6:	4b 5f       	subi	r20, 0xFB	; 251
     dc8:	5f 4f       	sbci	r21, 0xFF	; 255
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	8d 2d       	mov	r24, r13
     dce:	0e 94 67 0f 	call	0x1ece	; 0x1ece <timer_flag_notification>
     dd2:	8d 81       	ldd	r24, Y+5	; 0x05
     dd4:	88 23       	and	r24, r24
     dd6:	b1 f3       	breq	.-20     	; 0xdc4 <delay_ms+0x1d6>
     dd8:	83 e0       	ldi	r24, 0x03	; 3
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <delay_ms+0x1f8>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	03 c0       	rjmp	.+6      	; 0xde6 <delay_ms+0x1f8>
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	01 c0       	rjmp	.+2      	; 0xde6 <delay_ms+0x1f8>
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	2e 96       	adiw	r28, 0x0e	; 14
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	ff 90       	pop	r15
     dfc:	ef 90       	pop	r14
     dfe:	df 90       	pop	r13
     e00:	bf 90       	pop	r11
     e02:	af 90       	pop	r10
     e04:	9f 90       	pop	r9
     e06:	8f 90       	pop	r8
     e08:	08 95       	ret

00000e0a <timeOut_callBack>:
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gl_u8_timer_id>
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	f9 01       	movw	r30, r18
     e1a:	e2 50       	subi	r30, 0x02	; 2
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	90 81       	ld	r25, Z
     e20:	91 11       	cpse	r25, r1
     e22:	17 c0       	rjmp	.+46     	; 0xe52 <timeOut_callBack+0x48>
     e24:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <timer_stop>
     e28:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <gl_u8_timer_id>
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	ee 0f       	add	r30, r30
     e30:	ff 1f       	adc	r31, r31
     e32:	e8 50       	subi	r30, 0x08	; 8
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	01 90       	ld	r0, Z+
     e38:	f0 81       	ld	r31, Z
     e3a:	e0 2d       	mov	r30, r0
     e3c:	30 97       	sbiw	r30, 0x00	; 0
     e3e:	09 f0       	breq	.+2      	; 0xe42 <timeOut_callBack+0x38>
     e40:	09 95       	icall
     e42:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <gl_u8_timer_id>
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	e3 5f       	subi	r30, 0xF3	; 243
     e4a:	fe 4f       	sbci	r31, 0xFE	; 254
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 83       	st	Z, r24
     e50:	54 c0       	rjmp	.+168    	; 0xefa <timeOut_callBack+0xf0>
     e52:	40 91 f6 00 	lds	r20, 0x00F6	; 0x8000f6 <gl_u16_tick_count.1854>
     e56:	50 91 f7 00 	lds	r21, 0x00F7	; 0x8000f7 <gl_u16_tick_count.1854+0x1>
     e5a:	4f 5f       	subi	r20, 0xFF	; 255
     e5c:	5f 4f       	sbci	r21, 0xFF	; 255
     e5e:	50 93 f7 00 	sts	0x00F7, r21	; 0x8000f7 <gl_u16_tick_count.1854+0x1>
     e62:	40 93 f6 00 	sts	0x00F6, r20	; 0x8000f6 <gl_u16_tick_count.1854>
     e66:	22 0f       	add	r18, r18
     e68:	33 1f       	adc	r19, r19
     e6a:	f9 01       	movw	r30, r18
     e6c:	e4 5e       	subi	r30, 0xE4	; 228
     e6e:	fe 4f       	sbci	r31, 0xFE	; 254
     e70:	20 81       	ld	r18, Z
     e72:	31 81       	ldd	r19, Z+1	; 0x01
     e74:	42 17       	cp	r20, r18
     e76:	53 07       	cpc	r21, r19
     e78:	09 f0       	breq	.+2      	; 0xe7c <timeOut_callBack+0x72>
     e7a:	3f c0       	rjmp	.+126    	; 0xefa <timeOut_callBack+0xf0>
     e7c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <timer_stop>
     e80:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <gl_u16_tick_count.1854+0x1>
     e84:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gl_u16_tick_count.1854>
     e88:	10 91 7a 00 	lds	r17, 0x007A	; 0x80007a <gl_u8_timer_id>
     e8c:	c1 2f       	mov	r28, r17
     e8e:	d0 e0       	ldi	r29, 0x00	; 0
     e90:	fe 01       	movw	r30, r28
     e92:	ee 0f       	add	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	ee 0f       	add	r30, r30
     e98:	ff 1f       	adc	r31, r31
     e9a:	e0 5f       	subi	r30, 0xF0	; 240
     e9c:	fe 4f       	sbci	r31, 0xFE	; 254
     e9e:	60 81       	ld	r22, Z
     ea0:	71 81       	ldd	r23, Z+1	; 0x01
     ea2:	82 81       	ldd	r24, Z+2	; 0x02
     ea4:	93 81       	ldd	r25, Z+3	; 0x03
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	a9 01       	movw	r20, r18
     eac:	0e 94 45 1c 	call	0x388a	; 0x388a <__gesf2>
     eb0:	18 16       	cp	r1, r24
     eb2:	1c f5       	brge	.+70     	; 0xefa <timeOut_callBack+0xf0>
     eb4:	cc 0f       	add	r28, r28
     eb6:	dd 1f       	adc	r29, r29
     eb8:	cf 5f       	subi	r28, 0xFF	; 255
     eba:	de 4f       	sbci	r29, 0xFE	; 254
     ebc:	68 81       	ld	r22, Y
     ebe:	79 81       	ldd	r23, Y+1	; 0x01
     ec0:	81 2f       	mov	r24, r17
     ec2:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <timer_setInitialValue>
     ec6:	c0 91 7a 00 	lds	r28, 0x007A	; 0x80007a <gl_u8_timer_id>
     eca:	ec 2f       	mov	r30, r28
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	e9 5f       	subi	r30, 0xF9	; 249
     ed4:	fe 4f       	sbci	r31, 0xFE	; 254
     ed6:	80 81       	ld	r24, Z
     ed8:	91 81       	ldd	r25, Z+1	; 0x01
     eda:	0e 94 bc 04 	call	0x978	; 0x978 <timer_clk_map>
     ede:	68 2f       	mov	r22, r24
     ee0:	8c 2f       	mov	r24, r28
     ee2:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <timer_setClock>
     ee6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gl_u8_timer_id>
     eea:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <timer_start>
     eee:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <gl_u8_timer_id>
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	e2 50       	subi	r30, 0x02	; 2
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	10 82       	st	Z, r1
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	08 95       	ret

00000f02 <timeOut_sec>:

enu_time_error_t timeOut_sec(uint8 u8_timer_id,float32 f32_time_delay)
{
     f02:	8f 92       	push	r8
     f04:	9f 92       	push	r9
     f06:	af 92       	push	r10
     f08:	bf 92       	push	r11
     f0a:	df 92       	push	r13
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	2d 97       	sbiw	r28, 0x0d	; 13
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
	enu_time_error_t enu_time_error		= ENU_TIMER_VALID;
	uint16 u16_l_prescale				= ZERO_VALUE;
     f28:	1a 82       	std	Y+2, r1	; 0x02
     f2a:	19 82       	std	Y+1, r1	; 0x01
	uint16 u16_l_initialValue			= ZERO_VALUE;
     f2c:	1c 82       	std	Y+4, r1	; 0x04
     f2e:	1b 82       	std	Y+3, r1	; 0x03
	BOOLEAN bo_l_return_state			= FALSE ;
	float32 f32_l_overFlows				= ZERO_VALUE;
	gl_bo_timeOut_flag [gl_u8_timer_id] = FALSE;
     f30:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <gl_u8_timer_id>
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	e3 5f       	subi	r30, 0xF3	; 243
     f38:	fe 4f       	sbci	r31, 0xFE	; 254
     f3a:	10 82       	st	Z, r1
	str_tmr_config_t str_tmr_config ;
	str_tmr_config.enu_tmr_channel_id		= u8_timer_id;
     f3c:	8d 83       	std	Y+5, r24	; 0x05
	str_tmr_config.enu_tmr_mode				= ENU_TMR_NORMAL_MODE;
     f3e:	1e 82       	std	Y+6, r1	; 0x06
	str_tmr_config.enu_tmr_cmp_mode			= ENU_TMR_CMP_DISCONNECT;
     f40:	18 86       	std	Y+8, r1	; 0x08
	str_tmr_config.enu_tmr_interrupt_state	= ENU_TMR_INT_ENABLE;
     f42:	1f 82       	std	Y+7, r1	; 0x07
	str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
     f44:	1d 86       	std	Y+13, r1	; 0x0d
     f46:	1c 86       	std	Y+12, r1	; 0x0c
	gl_u8_timer_id							= u8_timer_id;
     f48:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <gl_u8_timer_id>
	
	if(u8_timer_id < MAX_ENU_TMR_CHANNEL)
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <timeOut_sec+0x50>
     f50:	d4 c0       	rjmp	.+424    	; 0x10fa <timeOut_sec+0x1f8>
     f52:	4a 01       	movw	r8, r20
     f54:	5b 01       	movw	r10, r22
     f56:	d8 2e       	mov	r13, r24
	{
		bo_l_return_state = calc_prescaler(f32_time_delay,u8_timer_id,ENU_SECOND,&u16_l_prescale);
     f58:	8e 01       	movw	r16, r28
     f5a:	0f 5f       	subi	r16, 0xFF	; 255
     f5c:	1f 4f       	sbci	r17, 0xFF	; 255
     f5e:	22 e0       	ldi	r18, 0x02	; 2
     f60:	48 2f       	mov	r20, r24
     f62:	c5 01       	movw	r24, r10
     f64:	b4 01       	movw	r22, r8
     f66:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <calc_prescaler>
		if(bo_l_return_state == TRUE)
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	09 f0       	breq	.+2      	; 0xf70 <timeOut_sec+0x6e>
     f6e:	c7 c0       	rjmp	.+398    	; 0x10fe <timeOut_sec+0x1fc>
		{
			if (u16_l_prescale != NO_FIT_PRESCALER)
     f70:	49 81       	ldd	r20, Y+1	; 0x01
     f72:	5a 81       	ldd	r21, Y+2	; 0x02
     f74:	4c 3d       	cpi	r20, 0xDC	; 220
     f76:	85 e0       	ldi	r24, 0x05	; 5
     f78:	58 07       	cpc	r21, r24
     f7a:	c1 f0       	breq	.+48     	; 0xfac <timeOut_sec+0xaa>
			{
				//use timer without overflows
				gl_bo_overFlow_flag[u8_timer_id] = FALSE; 
     f7c:	ed 2d       	mov	r30, r13
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	e2 50       	subi	r30, 0x02	; 2
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	10 82       	st	Z, r1
				//calculate initial value
				calc_initialValue(u8_timer_id,ENU_SECOND,u16_l_prescale,f32_time_delay,&u16_l_initialValue);
     f86:	fe 01       	movw	r30, r28
     f88:	33 96       	adiw	r30, 0x03	; 3
     f8a:	7f 01       	movw	r14, r30
     f8c:	95 01       	movw	r18, r10
     f8e:	84 01       	movw	r16, r8
     f90:	62 e0       	ldi	r22, 0x02	; 2
     f92:	8d 2d       	mov	r24, r13
     f94:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <calc_initialValue>
				str_tmr_config.enu_tmr_clk				= timer_clk_map(u16_l_prescale);
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	0e 94 bc 04 	call	0x978	; 0x978 <timer_clk_map>
     fa0:	89 87       	std	Y+9, r24	; 0x09
				str_tmr_config.u16_tmr_initial_value	= u16_l_initialValue;
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	9b 87       	std	Y+11, r25	; 0x0b
     fa8:	8a 87       	std	Y+10, r24	; 0x0a
     faa:	98 c0       	rjmp	.+304    	; 0x10dc <timeOut_sec+0x1da>
			}
			else
			{
				gl_bo_overFlow_flag[u8_timer_id]	= TRUE; 
     fac:	0d 2d       	mov	r16, r13
     fae:	10 e0       	ldi	r17, 0x00	; 0
     fb0:	f8 01       	movw	r30, r16
     fb2:	e2 50       	subi	r30, 0x02	; 2
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	80 83       	st	Z, r24
				str_tmr_config.enu_tmr_clk			= timer_clk_map(P_1024);
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	94 e0       	ldi	r25, 0x04	; 4
     fbe:	0e 94 bc 04 	call	0x978	; 0x978 <timer_clk_map>
     fc2:	89 87       	std	Y+9, r24	; 0x09
				str_tmr_config.u16_tmr_initial_value= ZERO_VALUE;
     fc4:	1b 86       	std	Y+11, r1	; 0x0b
     fc6:	1a 86       	std	Y+10, r1	; 0x0a
				//calculate number of overflows
				if(u8_timer_id == ENU_TMR_CHANNEL_0 || u8_timer_id == ENU_TMR_CHANNEL_2)
     fc8:	dd 20       	and	r13, r13
     fca:	19 f0       	breq	.+6      	; 0xfd2 <timeOut_sec+0xd0>
     fcc:	f2 e0       	ldi	r31, 0x02	; 2
     fce:	df 12       	cpse	r13, r31
     fd0:	2f c0       	rjmp	.+94     	; 0x1030 <timeOut_sec+0x12e>
				{
					f32_l_overFlows = f32_time_delay / MAX_8_BIT_DELAY_SEC(P_1024);
     fd2:	2d eb       	ldi	r18, 0xBD	; 189
     fd4:	37 e3       	ldi	r19, 0x37	; 55
     fd6:	46 e0       	ldi	r20, 0x06	; 6
     fd8:	5d e3       	ldi	r21, 0x3D	; 61
     fda:	c5 01       	movw	r24, r10
     fdc:	b4 01       	movw	r22, r8
     fde:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
     fe2:	4b 01       	movw	r8, r22
     fe4:	5c 01       	movw	r10, r24
					gl_u16_realPart[u8_timer_id] = (uint16)f32_l_overFlows;
     fe6:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
     fea:	f8 01       	movw	r30, r16
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	e4 5e       	subi	r30, 0xE4	; 228
     ff2:	fe 4f       	sbci	r31, 0xFE	; 254
     ff4:	71 83       	std	Z+1, r23	; 0x01
     ff6:	60 83       	st	Z, r22
					gl_f32_reminderPart[u8_timer_id] = ((f32_l_overFlows - gl_u16_realPart[u8_timer_id]) * MAX_8_BIT_DELAY_SEC(P_1024));
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 93 1b 	call	0x3726	; 0x3726 <__floatunsisf>
    1000:	9b 01       	movw	r18, r22
    1002:	ac 01       	movw	r20, r24
    1004:	c5 01       	movw	r24, r10
    1006:	b4 01       	movw	r22, r8
    1008:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    100c:	2d eb       	ldi	r18, 0xBD	; 189
    100e:	37 e3       	ldi	r19, 0x37	; 55
    1010:	46 e0       	ldi	r20, 0x06	; 6
    1012:	5d e3       	ldi	r21, 0x3D	; 61
    1014:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    1018:	f8 01       	movw	r30, r16
    101a:	ee 0f       	add	r30, r30
    101c:	ff 1f       	adc	r31, r31
    101e:	ee 0f       	add	r30, r30
    1020:	ff 1f       	adc	r31, r31
    1022:	e0 5f       	subi	r30, 0xF0	; 240
    1024:	fe 4f       	sbci	r31, 0xFE	; 254
    1026:	60 83       	st	Z, r22
    1028:	71 83       	std	Z+1, r23	; 0x01
    102a:	82 83       	std	Z+2, r24	; 0x02
    102c:	93 83       	std	Z+3, r25	; 0x03
    102e:	2e c0       	rjmp	.+92     	; 0x108c <timeOut_sec+0x18a>
				}
				else
				{
					f32_l_overFlows = f32_time_delay / MAX_16_BIT_DELAY_SEC(P_1024);
    1030:	2d eb       	ldi	r18, 0xBD	; 189
    1032:	37 e3       	ldi	r19, 0x37	; 55
    1034:	46 e0       	ldi	r20, 0x06	; 6
    1036:	51 e4       	ldi	r21, 0x41	; 65
    1038:	c5 01       	movw	r24, r10
    103a:	b4 01       	movw	r22, r8
    103c:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    1040:	4b 01       	movw	r8, r22
    1042:	5c 01       	movw	r10, r24
					gl_u16_realPart[u8_timer_id] = (uint16)f32_l_overFlows;
    1044:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    1048:	f8 01       	movw	r30, r16
    104a:	ee 0f       	add	r30, r30
    104c:	ff 1f       	adc	r31, r31
    104e:	e4 5e       	subi	r30, 0xE4	; 228
    1050:	fe 4f       	sbci	r31, 0xFE	; 254
    1052:	71 83       	std	Z+1, r23	; 0x01
    1054:	60 83       	st	Z, r22
					gl_f32_reminderPart[u8_timer_id] =((f32_l_overFlows - gl_u16_realPart[u8_timer_id]) * MAX_16_BIT_DELAY_SEC(P_1024));
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 93 1b 	call	0x3726	; 0x3726 <__floatunsisf>
    105e:	9b 01       	movw	r18, r22
    1060:	ac 01       	movw	r20, r24
    1062:	c5 01       	movw	r24, r10
    1064:	b4 01       	movw	r22, r8
    1066:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    106a:	2d eb       	ldi	r18, 0xBD	; 189
    106c:	37 e3       	ldi	r19, 0x37	; 55
    106e:	46 e0       	ldi	r20, 0x06	; 6
    1070:	51 e4       	ldi	r21, 0x41	; 65
    1072:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    1076:	f8 01       	movw	r30, r16
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	ee 0f       	add	r30, r30
    107e:	ff 1f       	adc	r31, r31
    1080:	e0 5f       	subi	r30, 0xF0	; 240
    1082:	fe 4f       	sbci	r31, 0xFE	; 254
    1084:	60 83       	st	Z, r22
    1086:	71 83       	std	Z+1, r23	; 0x01
    1088:	82 83       	std	Z+2, r24	; 0x02
    108a:	93 83       	std	Z+3, r25	; 0x03
				}
				calc_prescaler(gl_f32_reminderPart[u8_timer_id],u8_timer_id,ENU_SECOND,&gl_u16_prescale[u8_timer_id]);
    108c:	78 01       	movw	r14, r16
    108e:	ee 0c       	add	r14, r14
    1090:	ff 1c       	adc	r15, r15
    1092:	c7 01       	movw	r24, r14
    1094:	89 5f       	subi	r24, 0xF9	; 249
    1096:	9e 4f       	sbci	r25, 0xFE	; 254
    1098:	4c 01       	movw	r8, r24
    109a:	00 0f       	add	r16, r16
    109c:	11 1f       	adc	r17, r17
    109e:	00 0f       	add	r16, r16
    10a0:	11 1f       	adc	r17, r17
    10a2:	f8 01       	movw	r30, r16
    10a4:	e0 5f       	subi	r30, 0xF0	; 240
    10a6:	fe 4f       	sbci	r31, 0xFE	; 254
    10a8:	5f 01       	movw	r10, r30
    10aa:	60 81       	ld	r22, Z
    10ac:	71 81       	ldd	r23, Z+1	; 0x01
    10ae:	82 81       	ldd	r24, Z+2	; 0x02
    10b0:	93 81       	ldd	r25, Z+3	; 0x03
    10b2:	84 01       	movw	r16, r8
    10b4:	22 e0       	ldi	r18, 0x02	; 2
    10b6:	4d 2d       	mov	r20, r13
    10b8:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <calc_prescaler>
				calc_initialValue(u8_timer_id,ENU_SECOND,gl_u16_prescale[u8_timer_id],gl_f32_reminderPart[u8_timer_id],&gl_u16_initialValue[u8_timer_id]);
    10bc:	c7 01       	movw	r24, r14
    10be:	8f 5f       	subi	r24, 0xFF	; 255
    10c0:	9e 4f       	sbci	r25, 0xFE	; 254
    10c2:	7c 01       	movw	r14, r24
    10c4:	f5 01       	movw	r30, r10
    10c6:	00 81       	ld	r16, Z
    10c8:	11 81       	ldd	r17, Z+1	; 0x01
    10ca:	22 81       	ldd	r18, Z+2	; 0x02
    10cc:	33 81       	ldd	r19, Z+3	; 0x03
    10ce:	f4 01       	movw	r30, r8
    10d0:	40 81       	ld	r20, Z
    10d2:	51 81       	ldd	r21, Z+1	; 0x01
    10d4:	62 e0       	ldi	r22, 0x02	; 2
    10d6:	8d 2d       	mov	r24, r13
    10d8:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <calc_initialValue>
			}
			timer_init(&str_tmr_config);
    10dc:	ce 01       	movw	r24, r28
    10de:	05 96       	adiw	r24, 0x05	; 5
    10e0:	0e 94 b1 0b 	call	0x1762	; 0x1762 <timer_init>
			timer_setCallBack(u8_timer_id,timeOut_callBack,ENU_TMR_NORMAL_MODE);
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	65 e0       	ldi	r22, 0x05	; 5
    10e8:	77 e0       	ldi	r23, 0x07	; 7
    10ea:	8d 2d       	mov	r24, r13
    10ec:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <timer_setCallBack>
			timer_start(u8_timer_id);
    10f0:	8d 2d       	mov	r24, r13
    10f2:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <timer_start>
	return enu_time_error;
}

enu_time_error_t timeOut_sec(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error		= ENU_TIMER_VALID;
    10f6:	83 e0       	ldi	r24, 0x03	; 3
    10f8:	03 c0       	rjmp	.+6      	; 0x1100 <timeOut_sec+0x1fe>
			
		}
	}
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <timeOut_sec+0x1fe>
	return enu_time_error;
}

enu_time_error_t timeOut_sec(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error		= ENU_TIMER_VALID;
    10fe:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
	}
	return enu_time_error;
}
    1100:	2d 96       	adiw	r28, 0x0d	; 13
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	ef 90       	pop	r14
    1118:	df 90       	pop	r13
    111a:	bf 90       	pop	r11
    111c:	af 90       	pop	r10
    111e:	9f 90       	pop	r9
    1120:	8f 90       	pop	r8
    1122:	08 95       	ret

00001124 <Ultrasonic_edgeProcessing>:
/**
 * @brief       Ultrasonic_edgeProcessing		: callback function used to process the detection of echo signal 
 */
void Ultrasonic_edgeProcessing(void)
{
	gl_u8_edgeCount++;
    1124:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <gl_u8_edgeCount>
    1128:	8f 5f       	subi	r24, 0xFF	; 255
    112a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <gl_u8_edgeCount>
	if(gl_u8_edgeCount == FIREST_EDGE)
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	31 f4       	brne	.+12     	; 0x113e <Ultrasonic_edgeProcessing+0x1a>
	{
		Icu_clearTimerValue();
    1132:	0e 94 43 02 	call	0x486	; 0x486 <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(ENU_ICU_FALLING);
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	0e 94 0d 02 	call	0x41a	; 0x41a <Icu_setEdgeDetectionType>
    113c:	08 95       	ret
	}
	else if(gl_u8_edgeCount == SECOND_EDGE)
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	49 f4       	brne	.+18     	; 0x1154 <Ultrasonic_edgeProcessing+0x30>
	{
		Icu_getTimerValue(&gl_u16_timeHigh);
    1142:	84 e2       	ldi	r24, 0x24	; 36
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	0e 94 25 02 	call	0x44a	; 0x44a <Icu_getTimerValue>
		Icu_clearTimerValue();
    114a:	0e 94 43 02 	call	0x486	; 0x486 <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(ENU_ICU_RISING);
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	0e 94 0d 02 	call	0x41a	; 0x41a <Icu_setEdgeDetectionType>
    1154:	08 95       	ret

00001156 <Ultrasonic_init>:
 * @brief       Ultrasonic_init				: Function to initialize the ultrasonic driver
 *											  initialize ICU driver,set callback function,setup trigger pin direction as output
 *											  setup External interrupt source
 */
enu_usonic_state_t Ultrasonic_init(uint8 u8_triggerPort,uint8 u8_triggerPin,enu_echo_pin_id_t enu_echo_pin_id)
{
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	00 d0       	rcall	.+0      	; 0x1160 <Ultrasonic_init+0xa>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <Ultrasonic_init+0xc>
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
	str_icu_configtype_t str_icu_configtype;
	if((u8_triggerPort < MAX_PORT_ID) && (u8_triggerPin < MAX_PIN_ID) && (enu_echo_pin_id < ENU_MAX_ECHO))
    1166:	84 30       	cpi	r24, 0x04	; 4
    1168:	20 f5       	brcc	.+72     	; 0x11b2 <Ultrasonic_init+0x5c>
    116a:	68 30       	cpi	r22, 0x08	; 8
    116c:	20 f5       	brcc	.+72     	; 0x11b6 <Ultrasonic_init+0x60>
    116e:	43 30       	cpi	r20, 0x03	; 3
    1170:	20 f5       	brcc	.+72     	; 0x11ba <Ultrasonic_init+0x64>
    1172:	06 2f       	mov	r16, r22
    1174:	18 2f       	mov	r17, r24
	{
		str_icu_configtype.enu_icu_channel_id	= enu_echo_pin_id;
    1176:	49 83       	std	Y+1, r20	; 0x01
		str_icu_configtype.enu_timer_channel_id = ULTRASONIC_TIMER_ID;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	8a 83       	std	Y+2, r24	; 0x02
		str_icu_configtype.enu_icu_clock		= ENU_ICU_F_CPU_8;
    117c:	92 e0       	ldi	r25, 0x02	; 2
    117e:	9b 83       	std	Y+3, r25	; 0x03
		str_icu_configtype.enu_icu_edgetype		= ENU_ICU_RISING;
    1180:	8c 83       	std	Y+4, r24	; 0x04
		gl_u8_triggerPort						= u8_triggerPort;
    1182:	10 93 23 01 	sts	0x0123, r17	; 0x800123 <gl_u8_triggerPort>
		gl_u8_triggerPin						= u8_triggerPin;
    1186:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <gl_u8_triggerPin>
		Icu_init(&str_icu_configtype);
    118a:	ce 01       	movw	r24, r28
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	0e 94 82 01 	call	0x304	; 0x304 <Icu_init>
		Icu_setCallBack(Ultrasonic_edgeProcessing);
    1192:	82 e9       	ldi	r24, 0x92	; 146
    1194:	98 e0       	ldi	r25, 0x08	; 8
    1196:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Icu_setCallBack>
		DIO_pinMode(u8_triggerPort,u8_triggerPin,PIN_OUTPUT);		 //setup trigger pin direction as output
    119a:	41 e0       	ldi	r20, 0x01	; 1
    119c:	60 2f       	mov	r22, r16
    119e:	81 2f       	mov	r24, r17
    11a0:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_pinMode>
		DIO_writePin(u8_triggerPort,u8_triggerPin,PIN_LOW);
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	60 2f       	mov	r22, r16
    11a8:	81 2f       	mov	r24, r17
    11aa:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
 *											  initialize ICU driver,set callback function,setup trigger pin direction as output
 *											  setup External interrupt source
 */
enu_usonic_state_t Ultrasonic_init(uint8 u8_triggerPort,uint8 u8_triggerPin,enu_echo_pin_id_t enu_echo_pin_id)
{
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
    11ae:	80 e0       	ldi	r24, 0x00	; 0
		gl_u8_triggerPort						= u8_triggerPort;
		gl_u8_triggerPin						= u8_triggerPin;
		Icu_init(&str_icu_configtype);
		Icu_setCallBack(Ultrasonic_edgeProcessing);
		DIO_pinMode(u8_triggerPort,u8_triggerPin,PIN_OUTPUT);		 //setup trigger pin direction as output
		DIO_writePin(u8_triggerPort,u8_triggerPin,PIN_LOW);
    11b0:	05 c0       	rjmp	.+10     	; 0x11bc <Ultrasonic_init+0x66>
	}
	else
	{
		enu_usonic_state = ENU_USONIC_STATE_INVALID;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	03 c0       	rjmp	.+6      	; 0x11bc <Ultrasonic_init+0x66>
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <Ultrasonic_init+0x66>
    11ba:	81 e0       	ldi	r24, 0x01	; 1
	}
	return enu_usonic_state;
}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	08 95       	ret

000011ce <Ultrasonic_Trigger>:
/**
 * @brief       Ultrasonic_Trigger		: function used to send trigger pulse 10 microSEC
 */
void Ultrasonic_Trigger(void)
{
	DIO_writePin(gl_u8_triggerPort, gl_u8_triggerPin,PIN_HIGH);
    11ce:	41 e0       	ldi	r20, 0x01	; 1
    11d0:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <gl_u8_triggerPin>
    11d4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <gl_u8_triggerPort>
    11d8:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
	delay_us(DELAY_ID,TRIGGER_TIME);
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	60 e2       	ldi	r22, 0x20	; 32
    11e2:	71 e4       	ldi	r23, 0x41	; 65
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <delay_us>
	DIO_writePin(gl_u8_triggerPort, gl_u8_triggerPin,PIN_LOW);
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <gl_u8_triggerPin>
    11f0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <gl_u8_triggerPort>
    11f4:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_writePin>
    11f8:	08 95       	ret

000011fa <Ultrasonic_readDistance>:

/**
 * @brief       Ultrasonic_readDistance		: function to read distance of from the sensor
 */
enu_usonic_state_t Ultrasonic_readDistance(uint16* ptr_u16_distanceValue)
{
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
	if(ptr_u16_distanceValue != NULL_PTR)
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	e1 f0       	breq	.+56     	; 0x123a <Ultrasonic_readDistance+0x40>
    1202:	ec 01       	movw	r28, r24
	{
		Ultrasonic_Trigger();
    1204:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Ultrasonic_Trigger>
		while(gl_u8_edgeCount != NUM_OF_EDGES);			//wait until ultrasonic sound to travel towards the object and return.
    1208:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <gl_u8_edgeCount>
    120c:	92 30       	cpi	r25, 0x02	; 2
    120e:	e1 f7       	brne	.-8      	; 0x1208 <Ultrasonic_readDistance+0xe>
		*ptr_u16_distanceValue = CALC_DISTANCE(gl_u16_timeHigh);
    1210:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <gl_u16_timeHigh>
    1214:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <gl_u16_timeHigh+0x1>
    1218:	af e9       	ldi	r26, 0x9F	; 159
    121a:	b6 e4       	ldi	r27, 0x46	; 70
    121c:	0e 94 bd 1c 	call	0x397a	; 0x397a <__umulhisi3>
    1220:	92 95       	swap	r25
    1222:	82 95       	swap	r24
    1224:	8f 70       	andi	r24, 0x0F	; 15
    1226:	89 27       	eor	r24, r25
    1228:	9f 70       	andi	r25, 0x0F	; 15
    122a:	89 27       	eor	r24, r25
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	99 83       	std	Y+1, r25	; 0x01
    1230:	88 83       	st	Y, r24
		gl_u8_edgeCount=ZERO;							//clear edge count to be ready for new read
    1232:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <gl_u8_edgeCount>
/**
 * @brief       Ultrasonic_readDistance		: function to read distance of from the sensor
 */
enu_usonic_state_t Ultrasonic_readDistance(uint16* ptr_u16_distanceValue)
{
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	01 c0       	rjmp	.+2      	; 0x123c <Ultrasonic_readDistance+0x42>
		*ptr_u16_distanceValue = CALC_DISTANCE(gl_u16_timeHigh);
		gl_u8_edgeCount=ZERO;							//clear edge count to be ready for new read
	}
	else
	{
		enu_usonic_state = ENU_USONIC_STATE_INVALID;
    123a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return enu_usonic_state;
}
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <main>:
{
	
}

int main(void)
{
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	00 d0       	rcall	.+0      	; 0x1248 <main+0x6>
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
	uint16 distance;
	enu_carEvents_t enu_carEvents = ENU_MAX_EV;
	app_init();
    124c:	0e 94 65 00 	call	0xca	; 0xca <app_init>
	//car_directionInit();
	

	while(1)
	{
		enu_carEvents = read_event(&distance);
    1250:	ce 01       	movw	r24, r28
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	0e 94 87 00 	call	0x10e	; 0x10e <read_event>
		display_event(enu_carEvents,distance);
    1258:	69 81       	ldd	r22, Y+1	; 0x01
    125a:	7a 81       	ldd	r23, Y+2	; 0x02
    125c:	0e 94 0b 01 	call	0x216	; 0x216 <display_event>
		delay_ms(2,500);
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	6a ef       	ldi	r22, 0xFA	; 250
    1266:	73 e4       	ldi	r23, 0x43	; 67
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	0e 94 f7 05 	call	0xbee	; 0xbee <delay_ms>
    126e:	f0 cf       	rjmp	.-32     	; 0x1250 <main+0xe>

00001270 <DIO_pinMode>:
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
    1270:	84 30       	cpi	r24, 0x04	; 4
    1272:	08 f0       	brcs	.+2      	; 0x1276 <DIO_pinMode+0x6>
    1274:	7b c0       	rjmp	.+246    	; 0x136c <DIO_pinMode+0xfc>
    1276:	68 30       	cpi	r22, 0x08	; 8
    1278:	08 f0       	brcs	.+2      	; 0x127c <DIO_pinMode+0xc>
    127a:	7a c0       	rjmp	.+244    	; 0x1370 <DIO_pinMode+0x100>
    127c:	42 30       	cpi	r20, 0x02	; 2
    127e:	08 f0       	brcs	.+2      	; 0x1282 <DIO_pinMode+0x12>
    1280:	79 c0       	rjmp	.+242    	; 0x1374 <DIO_pinMode+0x104>
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	11 f1       	breq	.+68     	; 0x12ca <DIO_pinMode+0x5a>
    1286:	30 f0       	brcs	.+12     	; 0x1294 <DIO_pinMode+0x24>
    1288:	82 30       	cpi	r24, 0x02	; 2
    128a:	d1 f1       	breq	.+116    	; 0x1300 <DIO_pinMode+0x90>
    128c:	83 30       	cpi	r24, 0x03	; 3
    128e:	09 f4       	brne	.+2      	; 0x1292 <DIO_pinMode+0x22>
    1290:	52 c0       	rjmp	.+164    	; 0x1336 <DIO_pinMode+0xc6>
    1292:	72 c0       	rjmp	.+228    	; 0x1378 <DIO_pinMode+0x108>
    1294:	41 30       	cpi	r20, 0x01	; 1
    1296:	61 f4       	brne	.+24     	; 0x12b0 <DIO_pinMode+0x40>
    1298:	2a b3       	in	r18, 0x1a	; 26
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_pinMode+0x34>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	6a 95       	dec	r22
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_pinMode+0x30>
    12a8:	82 2b       	or	r24, r18
    12aa:	8a bb       	out	0x1a, r24	; 26
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	08 95       	ret
    12b0:	2a b3       	in	r18, 0x1a	; 26
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_pinMode+0x4c>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	6a 95       	dec	r22
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_pinMode+0x48>
    12c0:	80 95       	com	r24
    12c2:	82 23       	and	r24, r18
    12c4:	8a bb       	out	0x1a, r24	; 26
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	08 95       	ret
    12ca:	41 30       	cpi	r20, 0x01	; 1
    12cc:	61 f4       	brne	.+24     	; 0x12e6 <DIO_pinMode+0x76>
    12ce:	27 b3       	in	r18, 0x17	; 23
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <DIO_pinMode+0x6a>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	6a 95       	dec	r22
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <DIO_pinMode+0x66>
    12de:	82 2b       	or	r24, r18
    12e0:	87 bb       	out	0x17, r24	; 23
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	08 95       	ret
    12e6:	27 b3       	in	r18, 0x17	; 23
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_pinMode+0x82>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	6a 95       	dec	r22
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_pinMode+0x7e>
    12f6:	80 95       	com	r24
    12f8:	82 23       	and	r24, r18
    12fa:	87 bb       	out	0x17, r24	; 23
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	08 95       	ret
    1300:	41 30       	cpi	r20, 0x01	; 1
    1302:	61 f4       	brne	.+24     	; 0x131c <DIO_pinMode+0xac>
    1304:	24 b3       	in	r18, 0x14	; 20
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_pinMode+0xa0>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	6a 95       	dec	r22
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_pinMode+0x9c>
    1314:	82 2b       	or	r24, r18
    1316:	84 bb       	out	0x14, r24	; 20
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	08 95       	ret
    131c:	24 b3       	in	r18, 0x14	; 20
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_pinMode+0xb8>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	6a 95       	dec	r22
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_pinMode+0xb4>
    132c:	80 95       	com	r24
    132e:	82 23       	and	r24, r18
    1330:	84 bb       	out	0x14, r24	; 20
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	08 95       	ret
    1336:	41 30       	cpi	r20, 0x01	; 1
    1338:	61 f4       	brne	.+24     	; 0x1352 <DIO_pinMode+0xe2>
    133a:	21 b3       	in	r18, 0x11	; 17
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_pinMode+0xd6>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	6a 95       	dec	r22
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_pinMode+0xd2>
    134a:	82 2b       	or	r24, r18
    134c:	81 bb       	out	0x11, r24	; 17
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	08 95       	ret
    1352:	21 b3       	in	r18, 0x11	; 17
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_pinMode+0xee>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	6a 95       	dec	r22
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_pinMode+0xea>
    1362:	80 95       	com	r24
    1364:	82 23       	and	r24, r18
    1366:	81 bb       	out	0x11, r24	; 17
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	08 95       	ret
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	08 95       	ret
    1370:	83 e0       	ldi	r24, 0x03	; 3
    1372:	08 95       	ret
    1374:	84 e0       	ldi	r24, 0x04	; 4
    1376:	08 95       	ret
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	08 95       	ret

0000137c <DIO_writePin>:
    137c:	84 30       	cpi	r24, 0x04	; 4
    137e:	08 f0       	brcs	.+2      	; 0x1382 <DIO_writePin+0x6>
    1380:	7b c0       	rjmp	.+246    	; 0x1478 <DIO_writePin+0xfc>
    1382:	68 30       	cpi	r22, 0x08	; 8
    1384:	08 f0       	brcs	.+2      	; 0x1388 <DIO_writePin+0xc>
    1386:	7a c0       	rjmp	.+244    	; 0x147c <DIO_writePin+0x100>
    1388:	42 30       	cpi	r20, 0x02	; 2
    138a:	08 f0       	brcs	.+2      	; 0x138e <DIO_writePin+0x12>
    138c:	79 c0       	rjmp	.+242    	; 0x1480 <DIO_writePin+0x104>
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	11 f1       	breq	.+68     	; 0x13d6 <DIO_writePin+0x5a>
    1392:	30 f0       	brcs	.+12     	; 0x13a0 <DIO_writePin+0x24>
    1394:	82 30       	cpi	r24, 0x02	; 2
    1396:	d1 f1       	breq	.+116    	; 0x140c <DIO_writePin+0x90>
    1398:	83 30       	cpi	r24, 0x03	; 3
    139a:	09 f4       	brne	.+2      	; 0x139e <DIO_writePin+0x22>
    139c:	52 c0       	rjmp	.+164    	; 0x1442 <DIO_writePin+0xc6>
    139e:	72 c0       	rjmp	.+228    	; 0x1484 <DIO_writePin+0x108>
    13a0:	41 30       	cpi	r20, 0x01	; 1
    13a2:	61 f4       	brne	.+24     	; 0x13bc <DIO_writePin+0x40>
    13a4:	2b b3       	in	r18, 0x1b	; 27
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_writePin+0x34>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	6a 95       	dec	r22
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_writePin+0x30>
    13b4:	82 2b       	or	r24, r18
    13b6:	8b bb       	out	0x1b, r24	; 27
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	08 95       	ret
    13bc:	2b b3       	in	r18, 0x1b	; 27
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_writePin+0x4c>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	6a 95       	dec	r22
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_writePin+0x48>
    13cc:	80 95       	com	r24
    13ce:	82 23       	and	r24, r18
    13d0:	8b bb       	out	0x1b, r24	; 27
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	08 95       	ret
    13d6:	41 30       	cpi	r20, 0x01	; 1
    13d8:	61 f4       	brne	.+24     	; 0x13f2 <DIO_writePin+0x76>
    13da:	28 b3       	in	r18, 0x18	; 24
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <DIO_writePin+0x6a>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	6a 95       	dec	r22
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <DIO_writePin+0x66>
    13ea:	82 2b       	or	r24, r18
    13ec:	88 bb       	out	0x18, r24	; 24
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	08 95       	ret
    13f2:	28 b3       	in	r18, 0x18	; 24
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_writePin+0x82>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	6a 95       	dec	r22
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_writePin+0x7e>
    1402:	80 95       	com	r24
    1404:	82 23       	and	r24, r18
    1406:	88 bb       	out	0x18, r24	; 24
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	08 95       	ret
    140c:	41 30       	cpi	r20, 0x01	; 1
    140e:	61 f4       	brne	.+24     	; 0x1428 <DIO_writePin+0xac>
    1410:	25 b3       	in	r18, 0x15	; 21
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_writePin+0xa0>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	6a 95       	dec	r22
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_writePin+0x9c>
    1420:	82 2b       	or	r24, r18
    1422:	85 bb       	out	0x15, r24	; 21
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	08 95       	ret
    1428:	25 b3       	in	r18, 0x15	; 21
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_writePin+0xb8>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	6a 95       	dec	r22
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_writePin+0xb4>
    1438:	80 95       	com	r24
    143a:	82 23       	and	r24, r18
    143c:	85 bb       	out	0x15, r24	; 21
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	08 95       	ret
    1442:	41 30       	cpi	r20, 0x01	; 1
    1444:	61 f4       	brne	.+24     	; 0x145e <DIO_writePin+0xe2>
    1446:	22 b3       	in	r18, 0x12	; 18
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <DIO_writePin+0xd6>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	6a 95       	dec	r22
    1454:	e2 f7       	brpl	.-8      	; 0x144e <DIO_writePin+0xd2>
    1456:	82 2b       	or	r24, r18
    1458:	82 bb       	out	0x12, r24	; 18
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	08 95       	ret
    145e:	22 b3       	in	r18, 0x12	; 18
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 c0       	rjmp	.+4      	; 0x146a <DIO_writePin+0xee>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	6a 95       	dec	r22
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <DIO_writePin+0xea>
    146e:	80 95       	com	r24
    1470:	82 23       	and	r24, r18
    1472:	82 bb       	out	0x12, r24	; 18
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	08 95       	ret
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	08 95       	ret
    147c:	83 e0       	ldi	r24, 0x03	; 3
    147e:	08 95       	ret
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	08 95       	ret
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	08 95       	ret

00001488 <DIO_togglePin>:
    1488:	84 30       	cpi	r24, 0x04	; 4
    148a:	d0 f5       	brcc	.+116    	; 0x1500 <DIO_togglePin+0x78>
    148c:	68 30       	cpi	r22, 0x08	; 8
    148e:	d0 f5       	brcc	.+116    	; 0x1504 <DIO_togglePin+0x7c>
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	91 f0       	breq	.+36     	; 0x14b8 <DIO_togglePin+0x30>
    1494:	28 f0       	brcs	.+10     	; 0x14a0 <DIO_togglePin+0x18>
    1496:	82 30       	cpi	r24, 0x02	; 2
    1498:	d9 f0       	breq	.+54     	; 0x14d0 <DIO_togglePin+0x48>
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	29 f1       	breq	.+74     	; 0x14e8 <DIO_togglePin+0x60>
    149e:	34 c0       	rjmp	.+104    	; 0x1508 <DIO_togglePin+0x80>
    14a0:	2b b3       	in	r18, 0x1b	; 27
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_togglePin+0x24>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	6a 95       	dec	r22
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_togglePin+0x20>
    14b0:	82 27       	eor	r24, r18
    14b2:	8b bb       	out	0x1b, r24	; 27
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	08 95       	ret
    14b8:	28 b3       	in	r18, 0x18	; 24
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_togglePin+0x3c>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	6a 95       	dec	r22
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_togglePin+0x38>
    14c8:	82 27       	eor	r24, r18
    14ca:	88 bb       	out	0x18, r24	; 24
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	08 95       	ret
    14d0:	25 b3       	in	r18, 0x15	; 21
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_togglePin+0x54>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	6a 95       	dec	r22
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_togglePin+0x50>
    14e0:	82 27       	eor	r24, r18
    14e2:	85 bb       	out	0x15, r24	; 21
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	08 95       	ret
    14e8:	22 b3       	in	r18, 0x12	; 18
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <DIO_togglePin+0x6c>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	6a 95       	dec	r22
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <DIO_togglePin+0x68>
    14f8:	82 27       	eor	r24, r18
    14fa:	82 bb       	out	0x12, r24	; 18
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	08 95       	ret
    1500:	82 e0       	ldi	r24, 0x02	; 2
    1502:	08 95       	ret
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	08 95       	ret
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	08 95       	ret

0000150c <DIO_writePort>:
/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
    150c:	84 30       	cpi	r24, 0x04	; 4
    150e:	a0 f4       	brcc	.+40     	; 0x1538 <DIO_writePort+0x2c>
	{
			switch(port)
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	49 f0       	breq	.+18     	; 0x1526 <DIO_writePort+0x1a>
    1514:	28 f0       	brcs	.+10     	; 0x1520 <DIO_writePort+0x14>
    1516:	82 30       	cpi	r24, 0x02	; 2
    1518:	49 f0       	breq	.+18     	; 0x152c <DIO_writePort+0x20>
    151a:	83 30       	cpi	r24, 0x03	; 3
    151c:	51 f0       	breq	.+20     	; 0x1532 <DIO_writePort+0x26>
    151e:	0e c0       	rjmp	.+28     	; 0x153c <DIO_writePort+0x30>
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
    1520:	6b bb       	out	0x1b, r22	; 27

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1522:	81 e0       	ldi	r24, 0x01	; 1
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
	{
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
    1524:	08 95       	ret
				case PORTB_ID:	PORTB = enu_port_value;		break;
    1526:	68 bb       	out	0x18, r22	; 24

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1528:	81 e0       	ldi	r24, 0x01	; 1
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
	{
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
				case PORTB_ID:	PORTB = enu_port_value;		break;
    152a:	08 95       	ret
				case PORTC_ID:	PORTC = enu_port_value;		break;
    152c:	65 bb       	out	0x15, r22	; 21

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    152e:	81 e0       	ldi	r24, 0x01	; 1
	{
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
				case PORTB_ID:	PORTB = enu_port_value;		break;
				case PORTC_ID:	PORTC = enu_port_value;		break;
    1530:	08 95       	ret
				case PORTD_ID:	PORTD = enu_port_value;		break;
    1532:	62 bb       	out	0x12, r22	; 18

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1534:	81 e0       	ldi	r24, 0x01	; 1
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
				case PORTB_ID:	PORTB = enu_port_value;		break;
				case PORTC_ID:	PORTC = enu_port_value;		break;
				case PORTD_ID:	PORTD = enu_port_value;		break;
    1536:	08 95       	ret
					break;
			}
	}
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
    1538:	82 e0       	ldi	r24, 0x02	; 2
    153a:	08 95       	ret

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    153c:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
    153e:	08 95       	ret

00001540 <DIO_readPort>:
/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
    1540:	84 30       	cpi	r24, 0x04	; 4
    1542:	f8 f4       	brcc	.+62     	; 0x1582 <DIO_readPort+0x42>
	{
		if(pptr_value != NULL_PTR)
    1544:	61 15       	cp	r22, r1
    1546:	71 05       	cpc	r23, r1
    1548:	f1 f0       	breq	.+60     	; 0x1586 <DIO_readPort+0x46>
		{
			switch(port)
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	59 f0       	breq	.+22     	; 0x1564 <DIO_readPort+0x24>
    154e:	28 f0       	brcs	.+10     	; 0x155a <DIO_readPort+0x1a>
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	69 f0       	breq	.+26     	; 0x156e <DIO_readPort+0x2e>
    1554:	83 30       	cpi	r24, 0x03	; 3
    1556:	81 f0       	breq	.+32     	; 0x1578 <DIO_readPort+0x38>
    1558:	18 c0       	rjmp	.+48     	; 0x158a <DIO_readPort+0x4a>
			{
				case PORTA_ID:	*pptr_value = PINA;	break;
    155a:	89 b3       	in	r24, 0x19	; 25
    155c:	fb 01       	movw	r30, r22
    155e:	80 83       	st	Z, r24

/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1560:	81 e0       	ldi	r24, 0x01	; 1
	{
		if(pptr_value != NULL_PTR)
		{
			switch(port)
			{
				case PORTA_ID:	*pptr_value = PINA;	break;
    1562:	08 95       	ret
				case PORTB_ID:	*pptr_value = PINB;	break;
    1564:	86 b3       	in	r24, 0x16	; 22
    1566:	fb 01       	movw	r30, r22
    1568:	80 83       	st	Z, r24

/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    156a:	81 e0       	ldi	r24, 0x01	; 1
		if(pptr_value != NULL_PTR)
		{
			switch(port)
			{
				case PORTA_ID:	*pptr_value = PINA;	break;
				case PORTB_ID:	*pptr_value = PINB;	break;
    156c:	08 95       	ret
				case PORTC_ID:	*pptr_value = PINC;	break;
    156e:	83 b3       	in	r24, 0x13	; 19
    1570:	fb 01       	movw	r30, r22
    1572:	80 83       	st	Z, r24

/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1574:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(port)
			{
				case PORTA_ID:	*pptr_value = PINA;	break;
				case PORTB_ID:	*pptr_value = PINB;	break;
				case PORTC_ID:	*pptr_value = PINC;	break;
    1576:	08 95       	ret
				case PORTD_ID:	*pptr_value = PIND;	break;
    1578:	80 b3       	in	r24, 0x10	; 16
    157a:	fb 01       	movw	r30, r22
    157c:	80 83       	st	Z, r24

/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    157e:	81 e0       	ldi	r24, 0x01	; 1
			switch(port)
			{
				case PORTA_ID:	*pptr_value = PINA;	break;
				case PORTB_ID:	*pptr_value = PINB;	break;
				case PORTC_ID:	*pptr_value = PINC;	break;
				case PORTD_ID:	*pptr_value = PIND;	break;
    1580:	08 95       	ret
			enu_dio_error = DIO_INVALID_OPERATION;
		}
	}
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	08 95       	ret
			}

		}
		else
		{
			enu_dio_error = DIO_INVALID_OPERATION;
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	08 95       	ret

/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    158a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
    158c:	08 95       	ret

0000158e <Init_external_interrupt>:
	 else
	 {
		 enu_interrupt_error = ENU_INT_INVALID_ID;
	 }
	 return enu_interrupt_error;
 }
    158e:	83 30       	cpi	r24, 0x03	; 3
    1590:	40 f5       	brcc	.+80     	; 0x15e2 <Init_external_interrupt+0x54>
    1592:	64 30       	cpi	r22, 0x04	; 4
    1594:	40 f5       	brcc	.+80     	; 0x15e6 <Init_external_interrupt+0x58>
    1596:	81 11       	cpse	r24, r1
    1598:	06 c0       	rjmp	.+12     	; 0x15a6 <Init_external_interrupt+0x18>
    159a:	85 b7       	in	r24, 0x35	; 53
    159c:	8c 7f       	andi	r24, 0xFC	; 252
    159e:	68 2b       	or	r22, r24
    15a0:	65 bf       	out	0x35, r22	; 53
    15a2:	83 e0       	ldi	r24, 0x03	; 3
    15a4:	08 95       	ret
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	59 f4       	brne	.+22     	; 0x15c0 <Init_external_interrupt+0x32>
    15aa:	85 b7       	in	r24, 0x35	; 53
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	66 0f       	add	r22, r22
    15b0:	77 1f       	adc	r23, r23
    15b2:	66 0f       	add	r22, r22
    15b4:	77 1f       	adc	r23, r23
    15b6:	83 7f       	andi	r24, 0xF3	; 243
    15b8:	68 2b       	or	r22, r24
    15ba:	65 bf       	out	0x35, r22	; 53
    15bc:	83 e0       	ldi	r24, 0x03	; 3
    15be:	08 95       	ret
    15c0:	82 30       	cpi	r24, 0x02	; 2
    15c2:	99 f4       	brne	.+38     	; 0x15ea <Init_external_interrupt+0x5c>
    15c4:	8e ef       	ldi	r24, 0xFE	; 254
    15c6:	86 0f       	add	r24, r22
    15c8:	82 30       	cpi	r24, 0x02	; 2
    15ca:	88 f4       	brcc	.+34     	; 0x15ee <Init_external_interrupt+0x60>
    15cc:	24 b7       	in	r18, 0x34	; 52
    15ce:	30 e4       	ldi	r19, 0x40	; 64
    15d0:	63 9f       	mul	r22, r19
    15d2:	c0 01       	movw	r24, r0
    15d4:	11 24       	eor	r1, r1
    15d6:	92 2f       	mov	r25, r18
    15d8:	9f 7b       	andi	r25, 0xBF	; 191
    15da:	89 2b       	or	r24, r25
    15dc:	84 bf       	out	0x34, r24	; 52
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	08 95       	ret
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	08 95       	ret
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	08 95       	ret
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	08 95       	ret
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	08 95       	ret

000015f2 <enable_external_interrupt>:
    15f2:	83 30       	cpi	r24, 0x03	; 3
    15f4:	a8 f4       	brcc	.+42     	; 0x1620 <enable_external_interrupt+0x2e>
    15f6:	81 11       	cpse	r24, r1
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <enable_external_interrupt+0x12>
    15fa:	8b b7       	in	r24, 0x3b	; 59
    15fc:	80 64       	ori	r24, 0x40	; 64
    15fe:	8b bf       	out	0x3b, r24	; 59
    1600:	83 e0       	ldi	r24, 0x03	; 3
    1602:	08 95       	ret
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	29 f4       	brne	.+10     	; 0x1612 <enable_external_interrupt+0x20>
    1608:	8b b7       	in	r24, 0x3b	; 59
    160a:	80 68       	ori	r24, 0x80	; 128
    160c:	8b bf       	out	0x3b, r24	; 59
    160e:	83 e0       	ldi	r24, 0x03	; 3
    1610:	08 95       	ret
    1612:	82 30       	cpi	r24, 0x02	; 2
    1614:	39 f4       	brne	.+14     	; 0x1624 <enable_external_interrupt+0x32>
    1616:	8b b7       	in	r24, 0x3b	; 59
    1618:	80 62       	ori	r24, 0x20	; 32
    161a:	8b bf       	out	0x3b, r24	; 59
    161c:	83 e0       	ldi	r24, 0x03	; 3
    161e:	08 95       	ret
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	08 95       	ret
    1624:	83 e0       	ldi	r24, 0x03	; 3
    1626:	08 95       	ret

00001628 <interrupt0_set_callback>:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt0_set_callback (void(*f_ptr)(void))
{
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
	if (f_ptr != NULL_PTR)
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	31 f0       	breq	.+12     	; 0x1638 <interrupt0_set_callback+0x10>
	{
		gl_callbackptr_0 = f_ptr;
    162c:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <gl_callbackptr_0+0x1>
    1630:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <gl_callbackptr_0>
 *				INVALID_PIN_ID				:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt0_set_callback (void(*f_ptr)(void))
{
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
    1634:	83 e0       	ldi	r24, 0x03	; 3
    1636:	08 95       	ret
		gl_callbackptr_0 = f_ptr;
		
	}
	else
	{
		enu_interrupt_error = ENU_INT_INVALID_INPUT ;
    1638:	82 e0       	ldi	r24, 0x02	; 2
	}
	return enu_interrupt_error ;
}
    163a:	08 95       	ret

0000163c <interrupt1_set_callback>:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt1_set_callback (void(*f_ptr)(void))
{
		enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
		if (f_ptr != NULL_PTR)
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	31 f0       	breq	.+12     	; 0x164c <interrupt1_set_callback+0x10>
		{
			gl_callbackptr_1 = f_ptr;
    1640:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <gl_callbackptr_1+0x1>
    1644:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <gl_callbackptr_1>
 *				INVALID_PIN_ID				:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt1_set_callback (void(*f_ptr)(void))
{
		enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
    1648:	83 e0       	ldi	r24, 0x03	; 3
    164a:	08 95       	ret
			gl_callbackptr_1 = f_ptr;
			
		}
		else
		{
			enu_interrupt_error = ENU_INT_INVALID_INPUT ;
    164c:	82 e0       	ldi	r24, 0x02	; 2
		}
		return enu_interrupt_error ;
}
    164e:	08 95       	ret

00001650 <interrupt2_set_callback>:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt2_set_callback (void(*f_ptr)(void))
{	
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
	if (f_ptr != NULL_PTR)
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	31 f0       	breq	.+12     	; 0x1660 <interrupt2_set_callback+0x10>
	{
		gl_callbackptr_2 = f_ptr;
    1654:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <gl_callbackptr_2+0x1>
    1658:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <gl_callbackptr_2>
 *				INVALID_PIN_ID				:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt2_set_callback (void(*f_ptr)(void))
{	
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	08 95       	ret
		gl_callbackptr_2 = f_ptr;
		
	}
	else
	{
		enu_interrupt_error = ENU_INT_INVALID_INPUT ;
    1660:	82 e0       	ldi	r24, 0x02	; 2
	}
	return enu_interrupt_error ;
}
    1662:	08 95       	ret

00001664 <__vector_1>:

ISR_HANDLER(EXT_INT0)
{
    1664:	1f 92       	push	r1
    1666:	0f 92       	push	r0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	0f 92       	push	r0
    166c:	11 24       	eor	r1, r1
    166e:	2f 93       	push	r18
    1670:	3f 93       	push	r19
    1672:	4f 93       	push	r20
    1674:	5f 93       	push	r21
    1676:	6f 93       	push	r22
    1678:	7f 93       	push	r23
    167a:	8f 93       	push	r24
    167c:	9f 93       	push	r25
    167e:	af 93       	push	r26
    1680:	bf 93       	push	r27
    1682:	ef 93       	push	r30
    1684:	ff 93       	push	r31
	if(gl_callbackptr_0 != NULL_PTR)
    1686:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <gl_callbackptr_0>
    168a:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <gl_callbackptr_0+0x1>
    168e:	30 97       	sbiw	r30, 0x00	; 0
    1690:	09 f0       	breq	.+2      	; 0x1694 <__vector_1+0x30>
	{
		gl_callbackptr_0();
    1692:	09 95       	icall
	}
}
    1694:	ff 91       	pop	r31
    1696:	ef 91       	pop	r30
    1698:	bf 91       	pop	r27
    169a:	af 91       	pop	r26
    169c:	9f 91       	pop	r25
    169e:	8f 91       	pop	r24
    16a0:	7f 91       	pop	r23
    16a2:	6f 91       	pop	r22
    16a4:	5f 91       	pop	r21
    16a6:	4f 91       	pop	r20
    16a8:	3f 91       	pop	r19
    16aa:	2f 91       	pop	r18
    16ac:	0f 90       	pop	r0
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	0f 90       	pop	r0
    16b2:	1f 90       	pop	r1
    16b4:	18 95       	reti

000016b6 <__vector_2>:

ISR_HANDLER(EXT_INT1)
{
    16b6:	1f 92       	push	r1
    16b8:	0f 92       	push	r0
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	0f 92       	push	r0
    16be:	11 24       	eor	r1, r1
    16c0:	2f 93       	push	r18
    16c2:	3f 93       	push	r19
    16c4:	4f 93       	push	r20
    16c6:	5f 93       	push	r21
    16c8:	6f 93       	push	r22
    16ca:	7f 93       	push	r23
    16cc:	8f 93       	push	r24
    16ce:	9f 93       	push	r25
    16d0:	af 93       	push	r26
    16d2:	bf 93       	push	r27
    16d4:	ef 93       	push	r30
    16d6:	ff 93       	push	r31
	if(gl_callbackptr_1 != NULL_PTR)
    16d8:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <gl_callbackptr_1>
    16dc:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <gl_callbackptr_1+0x1>
    16e0:	30 97       	sbiw	r30, 0x00	; 0
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <__vector_2+0x30>
	{
		gl_callbackptr_1();
    16e4:	09 95       	icall
	}
}
    16e6:	ff 91       	pop	r31
    16e8:	ef 91       	pop	r30
    16ea:	bf 91       	pop	r27
    16ec:	af 91       	pop	r26
    16ee:	9f 91       	pop	r25
    16f0:	8f 91       	pop	r24
    16f2:	7f 91       	pop	r23
    16f4:	6f 91       	pop	r22
    16f6:	5f 91       	pop	r21
    16f8:	4f 91       	pop	r20
    16fa:	3f 91       	pop	r19
    16fc:	2f 91       	pop	r18
    16fe:	0f 90       	pop	r0
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	0f 90       	pop	r0
    1704:	1f 90       	pop	r1
    1706:	18 95       	reti

00001708 <__vector_3>:

ISR_HANDLER(EXT_INT2)
{
    1708:	1f 92       	push	r1
    170a:	0f 92       	push	r0
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	0f 92       	push	r0
    1710:	11 24       	eor	r1, r1
    1712:	2f 93       	push	r18
    1714:	3f 93       	push	r19
    1716:	4f 93       	push	r20
    1718:	5f 93       	push	r21
    171a:	6f 93       	push	r22
    171c:	7f 93       	push	r23
    171e:	8f 93       	push	r24
    1720:	9f 93       	push	r25
    1722:	af 93       	push	r26
    1724:	bf 93       	push	r27
    1726:	ef 93       	push	r30
    1728:	ff 93       	push	r31
	if(gl_callbackptr_2 != NULL_PTR)
    172a:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <gl_callbackptr_2>
    172e:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <gl_callbackptr_2+0x1>
    1732:	30 97       	sbiw	r30, 0x00	; 0
    1734:	09 f0       	breq	.+2      	; 0x1738 <__vector_3+0x30>
	{
		gl_callbackptr_2();
    1736:	09 95       	icall
	}
}
    1738:	ff 91       	pop	r31
    173a:	ef 91       	pop	r30
    173c:	bf 91       	pop	r27
    173e:	af 91       	pop	r26
    1740:	9f 91       	pop	r25
    1742:	8f 91       	pop	r24
    1744:	7f 91       	pop	r23
    1746:	6f 91       	pop	r22
    1748:	5f 91       	pop	r21
    174a:	4f 91       	pop	r20
    174c:	3f 91       	pop	r19
    174e:	2f 91       	pop	r18
    1750:	0f 90       	pop	r0
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	0f 90       	pop	r0
    1756:	1f 90       	pop	r1
    1758:	18 95       	reti

0000175a <enable_global_interrupt>:


/*================ APIS ================*/
void enable_global_interrupt (void)
{
	SET_BIT(SREG,PIN7);
    175a:	8f b7       	in	r24, 0x3f	; 63
    175c:	80 68       	ori	r24, 0x80	; 128
    175e:	8f bf       	out	0x3f, r24	; 63
    1760:	08 95       	ret

00001762 <timer_init>:
	else
	{
		enu_tmr_error = ENU_TMR_INVALID_ID;
	}
	return ENU_TMR_INVALID_ID;
}
    1762:	fc 01       	movw	r30, r24
    1764:	89 2b       	or	r24, r25
    1766:	09 f4       	brne	.+2      	; 0x176a <timer_init+0x8>
    1768:	95 c1       	rjmp	.+810    	; 0x1a94 <timer_init+0x332>
    176a:	80 81       	ld	r24, Z
    176c:	83 30       	cpi	r24, 0x03	; 3
    176e:	08 f0       	brcs	.+2      	; 0x1772 <timer_init+0x10>
    1770:	93 c1       	rjmp	.+806    	; 0x1a98 <timer_init+0x336>
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	92 30       	cpi	r25, 0x02	; 2
    1776:	08 f0       	brcs	.+2      	; 0x177a <timer_init+0x18>
    1778:	91 c1       	rjmp	.+802    	; 0x1a9c <timer_init+0x33a>
    177a:	92 81       	ldd	r25, Z+2	; 0x02
    177c:	92 30       	cpi	r25, 0x02	; 2
    177e:	08 f0       	brcs	.+2      	; 0x1782 <timer_init+0x20>
    1780:	8f c1       	rjmp	.+798    	; 0x1aa0 <timer_init+0x33e>
    1782:	93 81       	ldd	r25, Z+3	; 0x03
    1784:	94 30       	cpi	r25, 0x04	; 4
    1786:	08 f0       	brcs	.+2      	; 0x178a <timer_init+0x28>
    1788:	8d c1       	rjmp	.+794    	; 0x1aa4 <timer_init+0x342>
    178a:	94 81       	ldd	r25, Z+4	; 0x04
    178c:	9a 30       	cpi	r25, 0x0A	; 10
    178e:	08 f0       	brcs	.+2      	; 0x1792 <timer_init+0x30>
    1790:	8b c1       	rjmp	.+790    	; 0x1aa8 <timer_init+0x346>
    1792:	81 11       	cpse	r24, r1
    1794:	7d c0       	rjmp	.+250    	; 0x1890 <timer_init+0x12e>
    1796:	83 b7       	in	r24, 0x33	; 51
    1798:	80 68       	ori	r24, 0x80	; 128
    179a:	83 bf       	out	0x33, r24	; 51
    179c:	81 81       	ldd	r24, Z+1	; 0x01
    179e:	88 23       	and	r24, r24
    17a0:	19 f0       	breq	.+6      	; 0x17a8 <timer_init+0x46>
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	41 f0       	breq	.+16     	; 0x17b6 <timer_init+0x54>
    17a6:	0d c0       	rjmp	.+26     	; 0x17c2 <timer_init+0x60>
    17a8:	83 b7       	in	r24, 0x33	; 51
    17aa:	8f 7b       	andi	r24, 0xBF	; 191
    17ac:	83 bf       	out	0x33, r24	; 51
    17ae:	83 b7       	in	r24, 0x33	; 51
    17b0:	87 7f       	andi	r24, 0xF7	; 247
    17b2:	83 bf       	out	0x33, r24	; 51
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <timer_init+0x60>
    17b6:	83 b7       	in	r24, 0x33	; 51
    17b8:	8f 7b       	andi	r24, 0xBF	; 191
    17ba:	83 bf       	out	0x33, r24	; 51
    17bc:	83 b7       	in	r24, 0x33	; 51
    17be:	88 60       	ori	r24, 0x08	; 8
    17c0:	83 bf       	out	0x33, r24	; 51
    17c2:	83 81       	ldd	r24, Z+3	; 0x03
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	69 f0       	breq	.+26     	; 0x17e2 <timer_init+0x80>
    17c8:	28 f0       	brcs	.+10     	; 0x17d4 <timer_init+0x72>
    17ca:	82 30       	cpi	r24, 0x02	; 2
    17cc:	a1 f0       	breq	.+40     	; 0x17f6 <timer_init+0x94>
    17ce:	83 30       	cpi	r24, 0x03	; 3
    17d0:	e1 f0       	breq	.+56     	; 0x180a <timer_init+0xa8>
    17d2:	24 c0       	rjmp	.+72     	; 0x181c <timer_init+0xba>
    17d4:	83 b7       	in	r24, 0x33	; 51
    17d6:	8f 7e       	andi	r24, 0xEF	; 239
    17d8:	83 bf       	out	0x33, r24	; 51
    17da:	83 b7       	in	r24, 0x33	; 51
    17dc:	8f 7d       	andi	r24, 0xDF	; 223
    17de:	83 bf       	out	0x33, r24	; 51
    17e0:	1d c0       	rjmp	.+58     	; 0x181c <timer_init+0xba>
    17e2:	87 b3       	in	r24, 0x17	; 23
    17e4:	88 60       	ori	r24, 0x08	; 8
    17e6:	87 bb       	out	0x17, r24	; 23
    17e8:	83 b7       	in	r24, 0x33	; 51
    17ea:	80 61       	ori	r24, 0x10	; 16
    17ec:	83 bf       	out	0x33, r24	; 51
    17ee:	83 b7       	in	r24, 0x33	; 51
    17f0:	8f 7d       	andi	r24, 0xDF	; 223
    17f2:	83 bf       	out	0x33, r24	; 51
    17f4:	13 c0       	rjmp	.+38     	; 0x181c <timer_init+0xba>
    17f6:	87 b3       	in	r24, 0x17	; 23
    17f8:	88 60       	ori	r24, 0x08	; 8
    17fa:	87 bb       	out	0x17, r24	; 23
    17fc:	83 b7       	in	r24, 0x33	; 51
    17fe:	8f 7e       	andi	r24, 0xEF	; 239
    1800:	83 bf       	out	0x33, r24	; 51
    1802:	83 b7       	in	r24, 0x33	; 51
    1804:	80 62       	ori	r24, 0x20	; 32
    1806:	83 bf       	out	0x33, r24	; 51
    1808:	09 c0       	rjmp	.+18     	; 0x181c <timer_init+0xba>
    180a:	87 b3       	in	r24, 0x17	; 23
    180c:	88 60       	ori	r24, 0x08	; 8
    180e:	87 bb       	out	0x17, r24	; 23
    1810:	83 b7       	in	r24, 0x33	; 51
    1812:	80 61       	ori	r24, 0x10	; 16
    1814:	83 bf       	out	0x33, r24	; 51
    1816:	83 b7       	in	r24, 0x33	; 51
    1818:	80 62       	ori	r24, 0x20	; 32
    181a:	83 bf       	out	0x33, r24	; 51
    181c:	84 81       	ldd	r24, Z+4	; 0x04
    181e:	83 30       	cpi	r24, 0x03	; 3
    1820:	09 f4       	brne	.+2      	; 0x1824 <timer_init+0xc2>
    1822:	44 c1       	rjmp	.+648    	; 0x1aac <timer_init+0x34a>
    1824:	85 30       	cpi	r24, 0x05	; 5
    1826:	09 f4       	brne	.+2      	; 0x182a <timer_init+0xc8>
    1828:	43 c1       	rjmp	.+646    	; 0x1ab0 <timer_init+0x34e>
    182a:	a0 81       	ld	r26, Z
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	a5 58       	subi	r26, 0x85	; 133
    1830:	bf 4f       	sbci	r27, 0xFF	; 255
    1832:	8c 93       	st	X, r24
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	81 11       	cpse	r24, r1
    1838:	0b c0       	rjmp	.+22     	; 0x1850 <timer_init+0xee>
    183a:	81 81       	ldd	r24, Z+1	; 0x01
    183c:	81 11       	cpse	r24, r1
    183e:	04 c0       	rjmp	.+8      	; 0x1848 <timer_init+0xe6>
    1840:	89 b7       	in	r24, 0x39	; 57
    1842:	81 60       	ori	r24, 0x01	; 1
    1844:	89 bf       	out	0x39, r24	; 57
    1846:	0a c0       	rjmp	.+20     	; 0x185c <timer_init+0xfa>
    1848:	89 b7       	in	r24, 0x39	; 57
    184a:	82 60       	ori	r24, 0x02	; 2
    184c:	89 bf       	out	0x39, r24	; 57
    184e:	06 c0       	rjmp	.+12     	; 0x185c <timer_init+0xfa>
    1850:	89 b7       	in	r24, 0x39	; 57
    1852:	8e 7f       	andi	r24, 0xFE	; 254
    1854:	89 bf       	out	0x39, r24	; 57
    1856:	89 b7       	in	r24, 0x39	; 57
    1858:	8d 7f       	andi	r24, 0xFD	; 253
    185a:	89 bf       	out	0x39, r24	; 57
    185c:	85 81       	ldd	r24, Z+5	; 0x05
    185e:	96 81       	ldd	r25, Z+6	; 0x06
    1860:	8f 3f       	cpi	r24, 0xFF	; 255
    1862:	91 05       	cpc	r25, r1
    1864:	11 f0       	breq	.+4      	; 0x186a <timer_init+0x108>
    1866:	08 f0       	brcs	.+2      	; 0x186a <timer_init+0x108>
    1868:	25 c1       	rjmp	.+586    	; 0x1ab4 <timer_init+0x352>
    186a:	27 81       	ldd	r18, Z+7	; 0x07
    186c:	30 85       	ldd	r19, Z+8	; 0x08
    186e:	2f 3f       	cpi	r18, 0xFF	; 255
    1870:	31 05       	cpc	r19, r1
    1872:	11 f0       	breq	.+4      	; 0x1878 <timer_init+0x116>
    1874:	08 f0       	brcs	.+2      	; 0x1878 <timer_init+0x116>
    1876:	20 c1       	rjmp	.+576    	; 0x1ab8 <timer_init+0x356>
    1878:	21 81       	ldd	r18, Z+1	; 0x01
    187a:	21 11       	cpse	r18, r1
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <timer_init+0x124>
    187e:	82 bf       	out	0x32, r24	; 50
    1880:	1c be       	out	0x3c, r1	; 60
    1882:	86 e0       	ldi	r24, 0x06	; 6
    1884:	24 c1       	rjmp	.+584    	; 0x1ace <timer_init+0x36c>
    1886:	12 be       	out	0x32, r1	; 50
    1888:	87 81       	ldd	r24, Z+7	; 0x07
    188a:	8c bf       	out	0x3c, r24	; 60
    188c:	86 e0       	ldi	r24, 0x06	; 6
    188e:	1f c1       	rjmp	.+574    	; 0x1ace <timer_init+0x36c>
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	09 f0       	breq	.+2      	; 0x1896 <timer_init+0x134>
    1894:	85 c0       	rjmp	.+266    	; 0x19a0 <timer_init+0x23e>
    1896:	8f b5       	in	r24, 0x2f	; 47
    1898:	88 60       	ori	r24, 0x08	; 8
    189a:	8f bd       	out	0x2f, r24	; 47
    189c:	8f b5       	in	r24, 0x2f	; 47
    189e:	84 60       	ori	r24, 0x04	; 4
    18a0:	8f bd       	out	0x2f, r24	; 47
    18a2:	81 81       	ldd	r24, Z+1	; 0x01
    18a4:	88 23       	and	r24, r24
    18a6:	19 f0       	breq	.+6      	; 0x18ae <timer_init+0x14c>
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	71 f0       	breq	.+28     	; 0x18c8 <timer_init+0x166>
    18ac:	19 c0       	rjmp	.+50     	; 0x18e0 <timer_init+0x17e>
    18ae:	8f b5       	in	r24, 0x2f	; 47
    18b0:	8e 7f       	andi	r24, 0xFE	; 254
    18b2:	8f bd       	out	0x2f, r24	; 47
    18b4:	8f b5       	in	r24, 0x2f	; 47
    18b6:	8d 7f       	andi	r24, 0xFD	; 253
    18b8:	8f bd       	out	0x2f, r24	; 47
    18ba:	8e b5       	in	r24, 0x2e	; 46
    18bc:	87 7f       	andi	r24, 0xF7	; 247
    18be:	8e bd       	out	0x2e, r24	; 46
    18c0:	8e b5       	in	r24, 0x2e	; 46
    18c2:	8f 7e       	andi	r24, 0xEF	; 239
    18c4:	8e bd       	out	0x2e, r24	; 46
    18c6:	0c c0       	rjmp	.+24     	; 0x18e0 <timer_init+0x17e>
    18c8:	8f b5       	in	r24, 0x2f	; 47
    18ca:	8e 7f       	andi	r24, 0xFE	; 254
    18cc:	8f bd       	out	0x2f, r24	; 47
    18ce:	8f b5       	in	r24, 0x2f	; 47
    18d0:	8d 7f       	andi	r24, 0xFD	; 253
    18d2:	8f bd       	out	0x2f, r24	; 47
    18d4:	8e b5       	in	r24, 0x2e	; 46
    18d6:	88 60       	ori	r24, 0x08	; 8
    18d8:	8e bd       	out	0x2e, r24	; 46
    18da:	8e b5       	in	r24, 0x2e	; 46
    18dc:	8f 7e       	andi	r24, 0xEF	; 239
    18de:	8e bd       	out	0x2e, r24	; 46
    18e0:	83 81       	ldd	r24, Z+3	; 0x03
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	69 f0       	breq	.+26     	; 0x1900 <timer_init+0x19e>
    18e6:	28 f0       	brcs	.+10     	; 0x18f2 <timer_init+0x190>
    18e8:	82 30       	cpi	r24, 0x02	; 2
    18ea:	a1 f0       	breq	.+40     	; 0x1914 <timer_init+0x1b2>
    18ec:	83 30       	cpi	r24, 0x03	; 3
    18ee:	e1 f0       	breq	.+56     	; 0x1928 <timer_init+0x1c6>
    18f0:	24 c0       	rjmp	.+72     	; 0x193a <timer_init+0x1d8>
    18f2:	8f b5       	in	r24, 0x2f	; 47
    18f4:	8f 7b       	andi	r24, 0xBF	; 191
    18f6:	8f bd       	out	0x2f, r24	; 47
    18f8:	8f b5       	in	r24, 0x2f	; 47
    18fa:	8f 77       	andi	r24, 0x7F	; 127
    18fc:	8f bd       	out	0x2f, r24	; 47
    18fe:	1d c0       	rjmp	.+58     	; 0x193a <timer_init+0x1d8>
    1900:	81 b3       	in	r24, 0x11	; 17
    1902:	80 62       	ori	r24, 0x20	; 32
    1904:	81 bb       	out	0x11, r24	; 17
    1906:	8f b5       	in	r24, 0x2f	; 47
    1908:	80 64       	ori	r24, 0x40	; 64
    190a:	8f bd       	out	0x2f, r24	; 47
    190c:	8f b5       	in	r24, 0x2f	; 47
    190e:	8f 77       	andi	r24, 0x7F	; 127
    1910:	8f bd       	out	0x2f, r24	; 47
    1912:	13 c0       	rjmp	.+38     	; 0x193a <timer_init+0x1d8>
    1914:	81 b3       	in	r24, 0x11	; 17
    1916:	80 62       	ori	r24, 0x20	; 32
    1918:	81 bb       	out	0x11, r24	; 17
    191a:	8f b5       	in	r24, 0x2f	; 47
    191c:	8f 7b       	andi	r24, 0xBF	; 191
    191e:	8f bd       	out	0x2f, r24	; 47
    1920:	8f b5       	in	r24, 0x2f	; 47
    1922:	80 68       	ori	r24, 0x80	; 128
    1924:	8f bd       	out	0x2f, r24	; 47
    1926:	09 c0       	rjmp	.+18     	; 0x193a <timer_init+0x1d8>
    1928:	81 b3       	in	r24, 0x11	; 17
    192a:	80 62       	ori	r24, 0x20	; 32
    192c:	81 bb       	out	0x11, r24	; 17
    192e:	8f b5       	in	r24, 0x2f	; 47
    1930:	80 64       	ori	r24, 0x40	; 64
    1932:	8f bd       	out	0x2f, r24	; 47
    1934:	8f b5       	in	r24, 0x2f	; 47
    1936:	80 68       	ori	r24, 0x80	; 128
    1938:	8f bd       	out	0x2f, r24	; 47
    193a:	84 81       	ldd	r24, Z+4	; 0x04
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	09 f4       	brne	.+2      	; 0x1942 <timer_init+0x1e0>
    1940:	bd c0       	rjmp	.+378    	; 0x1abc <timer_init+0x35a>
    1942:	85 30       	cpi	r24, 0x05	; 5
    1944:	09 f4       	brne	.+2      	; 0x1948 <timer_init+0x1e6>
    1946:	bc c0       	rjmp	.+376    	; 0x1ac0 <timer_init+0x35e>
    1948:	a0 81       	ld	r26, Z
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	a5 58       	subi	r26, 0x85	; 133
    194e:	bf 4f       	sbci	r27, 0xFF	; 255
    1950:	8c 93       	st	X, r24
    1952:	82 81       	ldd	r24, Z+2	; 0x02
    1954:	81 11       	cpse	r24, r1
    1956:	0b c0       	rjmp	.+22     	; 0x196e <timer_init+0x20c>
    1958:	81 81       	ldd	r24, Z+1	; 0x01
    195a:	81 11       	cpse	r24, r1
    195c:	04 c0       	rjmp	.+8      	; 0x1966 <timer_init+0x204>
    195e:	89 b7       	in	r24, 0x39	; 57
    1960:	84 60       	ori	r24, 0x04	; 4
    1962:	89 bf       	out	0x39, r24	; 57
    1964:	0a c0       	rjmp	.+20     	; 0x197a <timer_init+0x218>
    1966:	89 b7       	in	r24, 0x39	; 57
    1968:	80 61       	ori	r24, 0x10	; 16
    196a:	89 bf       	out	0x39, r24	; 57
    196c:	06 c0       	rjmp	.+12     	; 0x197a <timer_init+0x218>
    196e:	89 b7       	in	r24, 0x39	; 57
    1970:	8b 7f       	andi	r24, 0xFB	; 251
    1972:	89 bf       	out	0x39, r24	; 57
    1974:	89 b7       	in	r24, 0x39	; 57
    1976:	8f 7e       	andi	r24, 0xEF	; 239
    1978:	89 bf       	out	0x39, r24	; 57
    197a:	81 81       	ldd	r24, Z+1	; 0x01
    197c:	81 11       	cpse	r24, r1
    197e:	08 c0       	rjmp	.+16     	; 0x1990 <timer_init+0x22e>
    1980:	85 81       	ldd	r24, Z+5	; 0x05
    1982:	96 81       	ldd	r25, Z+6	; 0x06
    1984:	9d bd       	out	0x2d, r25	; 45
    1986:	8c bd       	out	0x2c, r24	; 44
    1988:	1b bc       	out	0x2b, r1	; 43
    198a:	1a bc       	out	0x2a, r1	; 42
    198c:	86 e0       	ldi	r24, 0x06	; 6
    198e:	9f c0       	rjmp	.+318    	; 0x1ace <timer_init+0x36c>
    1990:	1d bc       	out	0x2d, r1	; 45
    1992:	1c bc       	out	0x2c, r1	; 44
    1994:	87 81       	ldd	r24, Z+7	; 0x07
    1996:	90 85       	ldd	r25, Z+8	; 0x08
    1998:	9b bd       	out	0x2b, r25	; 43
    199a:	8a bd       	out	0x2a, r24	; 42
    199c:	86 e0       	ldi	r24, 0x06	; 6
    199e:	97 c0       	rjmp	.+302    	; 0x1ace <timer_init+0x36c>
    19a0:	85 b5       	in	r24, 0x25	; 37
    19a2:	80 68       	ori	r24, 0x80	; 128
    19a4:	85 bd       	out	0x25, r24	; 37
    19a6:	81 81       	ldd	r24, Z+1	; 0x01
    19a8:	88 23       	and	r24, r24
    19aa:	19 f0       	breq	.+6      	; 0x19b2 <timer_init+0x250>
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	41 f0       	breq	.+16     	; 0x19c0 <timer_init+0x25e>
    19b0:	0d c0       	rjmp	.+26     	; 0x19cc <timer_init+0x26a>
    19b2:	85 b5       	in	r24, 0x25	; 37
    19b4:	8f 7b       	andi	r24, 0xBF	; 191
    19b6:	85 bd       	out	0x25, r24	; 37
    19b8:	85 b5       	in	r24, 0x25	; 37
    19ba:	87 7f       	andi	r24, 0xF7	; 247
    19bc:	85 bd       	out	0x25, r24	; 37
    19be:	06 c0       	rjmp	.+12     	; 0x19cc <timer_init+0x26a>
    19c0:	85 b5       	in	r24, 0x25	; 37
    19c2:	8f 7b       	andi	r24, 0xBF	; 191
    19c4:	85 bd       	out	0x25, r24	; 37
    19c6:	85 b5       	in	r24, 0x25	; 37
    19c8:	88 60       	ori	r24, 0x08	; 8
    19ca:	85 bd       	out	0x25, r24	; 37
    19cc:	83 81       	ldd	r24, Z+3	; 0x03
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	69 f0       	breq	.+26     	; 0x19ec <timer_init+0x28a>
    19d2:	28 f0       	brcs	.+10     	; 0x19de <timer_init+0x27c>
    19d4:	82 30       	cpi	r24, 0x02	; 2
    19d6:	a1 f0       	breq	.+40     	; 0x1a00 <timer_init+0x29e>
    19d8:	83 30       	cpi	r24, 0x03	; 3
    19da:	e1 f0       	breq	.+56     	; 0x1a14 <timer_init+0x2b2>
    19dc:	24 c0       	rjmp	.+72     	; 0x1a26 <timer_init+0x2c4>
    19de:	85 b5       	in	r24, 0x25	; 37
    19e0:	8f 7e       	andi	r24, 0xEF	; 239
    19e2:	85 bd       	out	0x25, r24	; 37
    19e4:	85 b5       	in	r24, 0x25	; 37
    19e6:	8f 7d       	andi	r24, 0xDF	; 223
    19e8:	85 bd       	out	0x25, r24	; 37
    19ea:	1d c0       	rjmp	.+58     	; 0x1a26 <timer_init+0x2c4>
    19ec:	81 b3       	in	r24, 0x11	; 17
    19ee:	80 68       	ori	r24, 0x80	; 128
    19f0:	81 bb       	out	0x11, r24	; 17
    19f2:	85 b5       	in	r24, 0x25	; 37
    19f4:	80 61       	ori	r24, 0x10	; 16
    19f6:	85 bd       	out	0x25, r24	; 37
    19f8:	85 b5       	in	r24, 0x25	; 37
    19fa:	8f 7d       	andi	r24, 0xDF	; 223
    19fc:	85 bd       	out	0x25, r24	; 37
    19fe:	13 c0       	rjmp	.+38     	; 0x1a26 <timer_init+0x2c4>
    1a00:	81 b3       	in	r24, 0x11	; 17
    1a02:	80 68       	ori	r24, 0x80	; 128
    1a04:	81 bb       	out	0x11, r24	; 17
    1a06:	85 b5       	in	r24, 0x25	; 37
    1a08:	8f 7e       	andi	r24, 0xEF	; 239
    1a0a:	85 bd       	out	0x25, r24	; 37
    1a0c:	85 b5       	in	r24, 0x25	; 37
    1a0e:	80 62       	ori	r24, 0x20	; 32
    1a10:	85 bd       	out	0x25, r24	; 37
    1a12:	09 c0       	rjmp	.+18     	; 0x1a26 <timer_init+0x2c4>
    1a14:	81 b3       	in	r24, 0x11	; 17
    1a16:	80 68       	ori	r24, 0x80	; 128
    1a18:	81 bb       	out	0x11, r24	; 17
    1a1a:	85 b5       	in	r24, 0x25	; 37
    1a1c:	80 61       	ori	r24, 0x10	; 16
    1a1e:	85 bd       	out	0x25, r24	; 37
    1a20:	85 b5       	in	r24, 0x25	; 37
    1a22:	80 62       	ori	r24, 0x20	; 32
    1a24:	85 bd       	out	0x25, r24	; 37
    1a26:	84 81       	ldd	r24, Z+4	; 0x04
    1a28:	98 ef       	ldi	r25, 0xF8	; 248
    1a2a:	98 0f       	add	r25, r24
    1a2c:	92 30       	cpi	r25, 0x02	; 2
    1a2e:	08 f4       	brcc	.+2      	; 0x1a32 <timer_init+0x2d0>
    1a30:	49 c0       	rjmp	.+146    	; 0x1ac4 <timer_init+0x362>
    1a32:	a0 81       	ld	r26, Z
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	a5 58       	subi	r26, 0x85	; 133
    1a38:	bf 4f       	sbci	r27, 0xFF	; 255
    1a3a:	8c 93       	st	X, r24
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	81 11       	cpse	r24, r1
    1a40:	0b c0       	rjmp	.+22     	; 0x1a58 <timer_init+0x2f6>
    1a42:	81 81       	ldd	r24, Z+1	; 0x01
    1a44:	81 11       	cpse	r24, r1
    1a46:	04 c0       	rjmp	.+8      	; 0x1a50 <timer_init+0x2ee>
    1a48:	89 b7       	in	r24, 0x39	; 57
    1a4a:	80 64       	ori	r24, 0x40	; 64
    1a4c:	89 bf       	out	0x39, r24	; 57
    1a4e:	0a c0       	rjmp	.+20     	; 0x1a64 <timer_init+0x302>
    1a50:	89 b7       	in	r24, 0x39	; 57
    1a52:	80 68       	ori	r24, 0x80	; 128
    1a54:	89 bf       	out	0x39, r24	; 57
    1a56:	06 c0       	rjmp	.+12     	; 0x1a64 <timer_init+0x302>
    1a58:	89 b7       	in	r24, 0x39	; 57
    1a5a:	8f 7b       	andi	r24, 0xBF	; 191
    1a5c:	89 bf       	out	0x39, r24	; 57
    1a5e:	89 b7       	in	r24, 0x39	; 57
    1a60:	8f 77       	andi	r24, 0x7F	; 127
    1a62:	89 bf       	out	0x39, r24	; 57
    1a64:	85 81       	ldd	r24, Z+5	; 0x05
    1a66:	96 81       	ldd	r25, Z+6	; 0x06
    1a68:	8f 3f       	cpi	r24, 0xFF	; 255
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	09 f0       	breq	.+2      	; 0x1a70 <timer_init+0x30e>
    1a6e:	60 f5       	brcc	.+88     	; 0x1ac8 <timer_init+0x366>
    1a70:	27 81       	ldd	r18, Z+7	; 0x07
    1a72:	30 85       	ldd	r19, Z+8	; 0x08
    1a74:	2f 3f       	cpi	r18, 0xFF	; 255
    1a76:	31 05       	cpc	r19, r1
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <timer_init+0x31a>
    1a7a:	40 f5       	brcc	.+80     	; 0x1acc <timer_init+0x36a>
    1a7c:	21 81       	ldd	r18, Z+1	; 0x01
    1a7e:	21 11       	cpse	r18, r1
    1a80:	04 c0       	rjmp	.+8      	; 0x1a8a <timer_init+0x328>
    1a82:	84 bd       	out	0x24, r24	; 36
    1a84:	13 bc       	out	0x23, r1	; 35
    1a86:	86 e0       	ldi	r24, 0x06	; 6
    1a88:	22 c0       	rjmp	.+68     	; 0x1ace <timer_init+0x36c>
    1a8a:	14 bc       	out	0x24, r1	; 36
    1a8c:	87 81       	ldd	r24, Z+7	; 0x07
    1a8e:	83 bd       	out	0x23, r24	; 35
    1a90:	86 e0       	ldi	r24, 0x06	; 6
    1a92:	1d c0       	rjmp	.+58     	; 0x1ace <timer_init+0x36c>
    1a94:	85 e0       	ldi	r24, 0x05	; 5
    1a96:	1b c0       	rjmp	.+54     	; 0x1ace <timer_init+0x36c>
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	19 c0       	rjmp	.+50     	; 0x1ace <timer_init+0x36c>
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	17 c0       	rjmp	.+46     	; 0x1ace <timer_init+0x36c>
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	15 c0       	rjmp	.+42     	; 0x1ace <timer_init+0x36c>
    1aa4:	83 e0       	ldi	r24, 0x03	; 3
    1aa6:	13 c0       	rjmp	.+38     	; 0x1ace <timer_init+0x36c>
    1aa8:	84 e0       	ldi	r24, 0x04	; 4
    1aaa:	11 c0       	rjmp	.+34     	; 0x1ace <timer_init+0x36c>
    1aac:	84 e0       	ldi	r24, 0x04	; 4
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <timer_init+0x36c>
    1ab0:	84 e0       	ldi	r24, 0x04	; 4
    1ab2:	0d c0       	rjmp	.+26     	; 0x1ace <timer_init+0x36c>
    1ab4:	85 e0       	ldi	r24, 0x05	; 5
    1ab6:	0b c0       	rjmp	.+22     	; 0x1ace <timer_init+0x36c>
    1ab8:	85 e0       	ldi	r24, 0x05	; 5
    1aba:	09 c0       	rjmp	.+18     	; 0x1ace <timer_init+0x36c>
    1abc:	84 e0       	ldi	r24, 0x04	; 4
    1abe:	07 c0       	rjmp	.+14     	; 0x1ace <timer_init+0x36c>
    1ac0:	84 e0       	ldi	r24, 0x04	; 4
    1ac2:	05 c0       	rjmp	.+10     	; 0x1ace <timer_init+0x36c>
    1ac4:	84 e0       	ldi	r24, 0x04	; 4
    1ac6:	03 c0       	rjmp	.+6      	; 0x1ace <timer_init+0x36c>
    1ac8:	85 e0       	ldi	r24, 0x05	; 5
    1aca:	01 c0       	rjmp	.+2      	; 0x1ace <timer_init+0x36c>
    1acc:	85 e0       	ldi	r24, 0x05	; 5
    1ace:	86 30       	cpi	r24, 0x06	; 6
    1ad0:	31 f4       	brne	.+12     	; 0x1ade <timer_init+0x37c>
    1ad2:	e0 81       	ld	r30, Z
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	e7 5c       	subi	r30, 0xC7	; 199
    1ad8:	fe 4f       	sbci	r31, 0xFE	; 254
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	90 83       	st	Z, r25
    1ade:	08 95       	ret

00001ae0 <timer_setInitialValue>:
    1ae0:	83 30       	cpi	r24, 0x03	; 3
    1ae2:	f8 f4       	brcc	.+62     	; 0x1b22 <timer_setInitialValue+0x42>
    1ae4:	e8 2f       	mov	r30, r24
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	e7 5c       	subi	r30, 0xC7	; 199
    1aea:	fe 4f       	sbci	r31, 0xFE	; 254
    1aec:	90 81       	ld	r25, Z
    1aee:	91 30       	cpi	r25, 0x01	; 1
    1af0:	d1 f4       	brne	.+52     	; 0x1b26 <timer_setInitialValue+0x46>
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	59 f0       	breq	.+22     	; 0x1b0c <timer_setInitialValue+0x2c>
    1af6:	18 f0       	brcs	.+6      	; 0x1afe <timer_setInitialValue+0x1e>
    1af8:	82 30       	cpi	r24, 0x02	; 2
    1afa:	61 f0       	breq	.+24     	; 0x1b14 <timer_setInitialValue+0x34>
    1afc:	16 c0       	rjmp	.+44     	; 0x1b2a <timer_setInitialValue+0x4a>
    1afe:	6f 3f       	cpi	r22, 0xFF	; 255
    1b00:	71 05       	cpc	r23, r1
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <timer_setInitialValue+0x26>
    1b04:	a0 f4       	brcc	.+40     	; 0x1b2e <timer_setInitialValue+0x4e>
    1b06:	62 bf       	out	0x32, r22	; 50
    1b08:	86 e0       	ldi	r24, 0x06	; 6
    1b0a:	08 95       	ret
    1b0c:	7d bd       	out	0x2d, r23	; 45
    1b0e:	6c bd       	out	0x2c, r22	; 44
    1b10:	86 e0       	ldi	r24, 0x06	; 6
    1b12:	08 95       	ret
    1b14:	6f 3f       	cpi	r22, 0xFF	; 255
    1b16:	71 05       	cpc	r23, r1
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <timer_setInitialValue+0x3c>
    1b1a:	58 f4       	brcc	.+22     	; 0x1b32 <timer_setInitialValue+0x52>
    1b1c:	64 bd       	out	0x24, r22	; 36
    1b1e:	86 e0       	ldi	r24, 0x06	; 6
    1b20:	08 95       	ret
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	08 95       	ret
    1b26:	88 e0       	ldi	r24, 0x08	; 8
    1b28:	08 95       	ret
    1b2a:	86 e0       	ldi	r24, 0x06	; 6
    1b2c:	08 95       	ret
    1b2e:	85 e0       	ldi	r24, 0x05	; 5
    1b30:	08 95       	ret
    1b32:	85 e0       	ldi	r24, 0x05	; 5
    1b34:	08 95       	ret

00001b36 <timer_setClock>:
    1b36:	83 30       	cpi	r24, 0x03	; 3
    1b38:	70 f5       	brcc	.+92     	; 0x1b96 <timer_setClock+0x60>
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	f9 01       	movw	r30, r18
    1b40:	e7 5c       	subi	r30, 0xC7	; 199
    1b42:	fe 4f       	sbci	r31, 0xFE	; 254
    1b44:	90 81       	ld	r25, Z
    1b46:	91 30       	cpi	r25, 0x01	; 1
    1b48:	41 f5       	brne	.+80     	; 0x1b9a <timer_setClock+0x64>
    1b4a:	6a 30       	cpi	r22, 0x0A	; 10
    1b4c:	40 f5       	brcc	.+80     	; 0x1b9e <timer_setClock+0x68>
    1b4e:	81 30       	cpi	r24, 0x01	; 1
    1b50:	71 f0       	breq	.+28     	; 0x1b6e <timer_setClock+0x38>
    1b52:	18 f0       	brcs	.+6      	; 0x1b5a <timer_setClock+0x24>
    1b54:	82 30       	cpi	r24, 0x02	; 2
    1b56:	a9 f0       	breq	.+42     	; 0x1b82 <timer_setClock+0x4c>
    1b58:	24 c0       	rjmp	.+72     	; 0x1ba2 <timer_setClock+0x6c>
    1b5a:	63 30       	cpi	r22, 0x03	; 3
    1b5c:	21 f1       	breq	.+72     	; 0x1ba6 <timer_setClock+0x70>
    1b5e:	65 30       	cpi	r22, 0x05	; 5
    1b60:	21 f1       	breq	.+72     	; 0x1baa <timer_setClock+0x74>
    1b62:	f9 01       	movw	r30, r18
    1b64:	e5 58       	subi	r30, 0x85	; 133
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	60 83       	st	Z, r22
    1b6a:	86 e0       	ldi	r24, 0x06	; 6
    1b6c:	08 95       	ret
    1b6e:	63 30       	cpi	r22, 0x03	; 3
    1b70:	f1 f0       	breq	.+60     	; 0x1bae <timer_setClock+0x78>
    1b72:	65 30       	cpi	r22, 0x05	; 5
    1b74:	f1 f0       	breq	.+60     	; 0x1bb2 <timer_setClock+0x7c>
    1b76:	f9 01       	movw	r30, r18
    1b78:	e5 58       	subi	r30, 0x85	; 133
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	60 83       	st	Z, r22
    1b7e:	86 e0       	ldi	r24, 0x06	; 6
    1b80:	08 95       	ret
    1b82:	88 ef       	ldi	r24, 0xF8	; 248
    1b84:	86 0f       	add	r24, r22
    1b86:	82 30       	cpi	r24, 0x02	; 2
    1b88:	b0 f0       	brcs	.+44     	; 0x1bb6 <timer_setClock+0x80>
    1b8a:	f9 01       	movw	r30, r18
    1b8c:	e5 58       	subi	r30, 0x85	; 133
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	60 83       	st	Z, r22
    1b92:	86 e0       	ldi	r24, 0x06	; 6
    1b94:	08 95       	ret
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	08 95       	ret
    1b9a:	88 e0       	ldi	r24, 0x08	; 8
    1b9c:	08 95       	ret
    1b9e:	84 e0       	ldi	r24, 0x04	; 4
    1ba0:	08 95       	ret
    1ba2:	86 e0       	ldi	r24, 0x06	; 6
    1ba4:	08 95       	ret
    1ba6:	84 e0       	ldi	r24, 0x04	; 4
    1ba8:	08 95       	ret
    1baa:	84 e0       	ldi	r24, 0x04	; 4
    1bac:	08 95       	ret
    1bae:	84 e0       	ldi	r24, 0x04	; 4
    1bb0:	08 95       	ret
    1bb2:	84 e0       	ldi	r24, 0x04	; 4
    1bb4:	08 95       	ret
    1bb6:	84 e0       	ldi	r24, 0x04	; 4
    1bb8:	08 95       	ret

00001bba <timer_setCallBack>:
    1bba:	83 30       	cpi	r24, 0x03	; 3
    1bbc:	d8 f5       	brcc	.+118    	; 0x1c34 <timer_setCallBack+0x7a>
    1bbe:	42 30       	cpi	r20, 0x02	; 2
    1bc0:	d8 f5       	brcc	.+118    	; 0x1c38 <timer_setCallBack+0x7e>
    1bc2:	61 15       	cp	r22, r1
    1bc4:	71 05       	cpc	r23, r1
    1bc6:	d1 f1       	breq	.+116    	; 0x1c3c <timer_setCallBack+0x82>
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	a1 f0       	breq	.+40     	; 0x1bf4 <timer_setCallBack+0x3a>
    1bcc:	18 f0       	brcs	.+6      	; 0x1bd4 <timer_setCallBack+0x1a>
    1bce:	82 30       	cpi	r24, 0x02	; 2
    1bd0:	09 f1       	breq	.+66     	; 0x1c14 <timer_setCallBack+0x5a>
    1bd2:	36 c0       	rjmp	.+108    	; 0x1c40 <timer_setCallBack+0x86>
    1bd4:	41 11       	cpse	r20, r1
    1bd6:	06 c0       	rjmp	.+12     	; 0x1be4 <timer_setCallBack+0x2a>
    1bd8:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <gl_callBackPtr_timer0_OVF+0x1>
    1bdc:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <gl_callBackPtr_timer0_OVF>
    1be0:	86 e0       	ldi	r24, 0x06	; 6
    1be2:	08 95       	ret
    1be4:	41 30       	cpi	r20, 0x01	; 1
    1be6:	71 f5       	brne	.+92     	; 0x1c44 <timer_setCallBack+0x8a>
    1be8:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <gl_callBackPtr_timer0_COMP+0x1>
    1bec:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <gl_callBackPtr_timer0_COMP>
    1bf0:	86 e0       	ldi	r24, 0x06	; 6
    1bf2:	08 95       	ret
    1bf4:	41 11       	cpse	r20, r1
    1bf6:	06 c0       	rjmp	.+12     	; 0x1c04 <timer_setCallBack+0x4a>
    1bf8:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <gl_callBackPtr_timer1_OVF+0x1>
    1bfc:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <gl_callBackPtr_timer1_OVF>
    1c00:	86 e0       	ldi	r24, 0x06	; 6
    1c02:	08 95       	ret
    1c04:	41 30       	cpi	r20, 0x01	; 1
    1c06:	01 f5       	brne	.+64     	; 0x1c48 <timer_setCallBack+0x8e>
    1c08:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <gl_callBackPtr_timer1_COMP+0x1>
    1c0c:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <gl_callBackPtr_timer1_COMP>
    1c10:	86 e0       	ldi	r24, 0x06	; 6
    1c12:	08 95       	ret
    1c14:	41 11       	cpse	r20, r1
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <timer_setCallBack+0x6a>
    1c18:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <gl_callBackPtr_timer2_OVF+0x1>
    1c1c:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <gl_callBackPtr_timer2_OVF>
    1c20:	86 e0       	ldi	r24, 0x06	; 6
    1c22:	08 95       	ret
    1c24:	41 30       	cpi	r20, 0x01	; 1
    1c26:	91 f4       	brne	.+36     	; 0x1c4c <timer_setCallBack+0x92>
    1c28:	70 93 2e 01 	sts	0x012E, r23	; 0x80012e <gl_callBackPtr_timer2_COMP+0x1>
    1c2c:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <gl_callBackPtr_timer2_COMP>
    1c30:	86 e0       	ldi	r24, 0x06	; 6
    1c32:	08 95       	ret
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	08 95       	ret
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	08 95       	ret
    1c3c:	85 e0       	ldi	r24, 0x05	; 5
    1c3e:	08 95       	ret
    1c40:	86 e0       	ldi	r24, 0x06	; 6
    1c42:	08 95       	ret
    1c44:	86 e0       	ldi	r24, 0x06	; 6
    1c46:	08 95       	ret
    1c48:	86 e0       	ldi	r24, 0x06	; 6
    1c4a:	08 95       	ret
    1c4c:	86 e0       	ldi	r24, 0x06	; 6
    1c4e:	08 95       	ret

00001c50 <timer_start>:
    1c50:	83 30       	cpi	r24, 0x03	; 3
    1c52:	08 f0       	brcs	.+2      	; 0x1c56 <timer_start+0x6>
    1c54:	d4 c0       	rjmp	.+424    	; 0x1dfe <timer_start+0x1ae>
    1c56:	e8 2f       	mov	r30, r24
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	e7 5c       	subi	r30, 0xC7	; 199
    1c5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c5e:	90 81       	ld	r25, Z
    1c60:	91 30       	cpi	r25, 0x01	; 1
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <timer_start+0x16>
    1c64:	ce c0       	rjmp	.+412    	; 0x1e02 <timer_start+0x1b2>
    1c66:	81 30       	cpi	r24, 0x01	; 1
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <timer_start+0x1c>
    1c6a:	48 c0       	rjmp	.+144    	; 0x1cfc <timer_start+0xac>
    1c6c:	20 f0       	brcs	.+8      	; 0x1c76 <timer_start+0x26>
    1c6e:	82 30       	cpi	r24, 0x02	; 2
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <timer_start+0x24>
    1c72:	87 c0       	rjmp	.+270    	; 0x1d82 <timer_start+0x132>
    1c74:	c8 c0       	rjmp	.+400    	; 0x1e06 <timer_start+0x1b6>
    1c76:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <gl_enu_tmr_clk>
    1c7a:	8a 30       	cpi	r24, 0x0A	; 10
    1c7c:	08 f0       	brcs	.+2      	; 0x1c80 <timer_start+0x30>
    1c7e:	c5 c0       	rjmp	.+394    	; 0x1e0a <timer_start+0x1ba>
    1c80:	83 30       	cpi	r24, 0x03	; 3
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <timer_start+0x36>
    1c84:	c4 c0       	rjmp	.+392    	; 0x1e0e <timer_start+0x1be>
    1c86:	85 30       	cpi	r24, 0x05	; 5
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <timer_start+0x3c>
    1c8a:	c3 c0       	rjmp	.+390    	; 0x1e12 <timer_start+0x1c2>
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	8a 30       	cpi	r24, 0x0A	; 10
    1c90:	91 05       	cpc	r25, r1
    1c92:	08 f0       	brcs	.+2      	; 0x1c96 <timer_start+0x46>
    1c94:	c0 c0       	rjmp	.+384    	; 0x1e16 <timer_start+0x1c6>
    1c96:	fc 01       	movw	r30, r24
    1c98:	e6 5d       	subi	r30, 0xD6	; 214
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	0c 94 b7 1c 	jmp	0x396e	; 0x396e <__tablejump2__>
    1ca0:	83 b7       	in	r24, 0x33	; 51
    1ca2:	88 7f       	andi	r24, 0xF8	; 248
    1ca4:	83 bf       	out	0x33, r24	; 51
    1ca6:	86 e0       	ldi	r24, 0x06	; 6
    1ca8:	08 95       	ret
    1caa:	83 b7       	in	r24, 0x33	; 51
    1cac:	88 7f       	andi	r24, 0xF8	; 248
    1cae:	81 60       	ori	r24, 0x01	; 1
    1cb0:	83 bf       	out	0x33, r24	; 51
    1cb2:	86 e0       	ldi	r24, 0x06	; 6
    1cb4:	08 95       	ret
    1cb6:	83 b7       	in	r24, 0x33	; 51
    1cb8:	88 7f       	andi	r24, 0xF8	; 248
    1cba:	82 60       	ori	r24, 0x02	; 2
    1cbc:	83 bf       	out	0x33, r24	; 51
    1cbe:	86 e0       	ldi	r24, 0x06	; 6
    1cc0:	08 95       	ret
    1cc2:	83 b7       	in	r24, 0x33	; 51
    1cc4:	88 7f       	andi	r24, 0xF8	; 248
    1cc6:	83 60       	ori	r24, 0x03	; 3
    1cc8:	83 bf       	out	0x33, r24	; 51
    1cca:	86 e0       	ldi	r24, 0x06	; 6
    1ccc:	08 95       	ret
    1cce:	83 b7       	in	r24, 0x33	; 51
    1cd0:	88 7f       	andi	r24, 0xF8	; 248
    1cd2:	84 60       	ori	r24, 0x04	; 4
    1cd4:	83 bf       	out	0x33, r24	; 51
    1cd6:	86 e0       	ldi	r24, 0x06	; 6
    1cd8:	08 95       	ret
    1cda:	83 b7       	in	r24, 0x33	; 51
    1cdc:	88 7f       	andi	r24, 0xF8	; 248
    1cde:	85 60       	ori	r24, 0x05	; 5
    1ce0:	83 bf       	out	0x33, r24	; 51
    1ce2:	86 e0       	ldi	r24, 0x06	; 6
    1ce4:	08 95       	ret
    1ce6:	83 b7       	in	r24, 0x33	; 51
    1ce8:	88 7f       	andi	r24, 0xF8	; 248
    1cea:	86 60       	ori	r24, 0x06	; 6
    1cec:	83 bf       	out	0x33, r24	; 51
    1cee:	86 e0       	ldi	r24, 0x06	; 6
    1cf0:	08 95       	ret
    1cf2:	83 b7       	in	r24, 0x33	; 51
    1cf4:	87 60       	ori	r24, 0x07	; 7
    1cf6:	83 bf       	out	0x33, r24	; 51
    1cf8:	86 e0       	ldi	r24, 0x06	; 6
    1cfa:	08 95       	ret
    1cfc:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gl_enu_tmr_clk+0x1>
    1d00:	8a 30       	cpi	r24, 0x0A	; 10
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <timer_start+0xb6>
    1d04:	8a c0       	rjmp	.+276    	; 0x1e1a <timer_start+0x1ca>
    1d06:	83 30       	cpi	r24, 0x03	; 3
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <timer_start+0xbc>
    1d0a:	89 c0       	rjmp	.+274    	; 0x1e1e <timer_start+0x1ce>
    1d0c:	85 30       	cpi	r24, 0x05	; 5
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <timer_start+0xc2>
    1d10:	88 c0       	rjmp	.+272    	; 0x1e22 <timer_start+0x1d2>
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	8a 30       	cpi	r24, 0x0A	; 10
    1d16:	91 05       	cpc	r25, r1
    1d18:	08 f0       	brcs	.+2      	; 0x1d1c <timer_start+0xcc>
    1d1a:	85 c0       	rjmp	.+266    	; 0x1e26 <timer_start+0x1d6>
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	ec 5c       	subi	r30, 0xCC	; 204
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	0c 94 b7 1c 	jmp	0x396e	; 0x396e <__tablejump2__>
    1d26:	8e b5       	in	r24, 0x2e	; 46
    1d28:	88 7f       	andi	r24, 0xF8	; 248
    1d2a:	8e bd       	out	0x2e, r24	; 46
    1d2c:	86 e0       	ldi	r24, 0x06	; 6
    1d2e:	08 95       	ret
    1d30:	8e b5       	in	r24, 0x2e	; 46
    1d32:	88 7f       	andi	r24, 0xF8	; 248
    1d34:	81 60       	ori	r24, 0x01	; 1
    1d36:	8e bd       	out	0x2e, r24	; 46
    1d38:	86 e0       	ldi	r24, 0x06	; 6
    1d3a:	08 95       	ret
    1d3c:	8e b5       	in	r24, 0x2e	; 46
    1d3e:	88 7f       	andi	r24, 0xF8	; 248
    1d40:	82 60       	ori	r24, 0x02	; 2
    1d42:	8e bd       	out	0x2e, r24	; 46
    1d44:	86 e0       	ldi	r24, 0x06	; 6
    1d46:	08 95       	ret
    1d48:	8e b5       	in	r24, 0x2e	; 46
    1d4a:	88 7f       	andi	r24, 0xF8	; 248
    1d4c:	83 60       	ori	r24, 0x03	; 3
    1d4e:	8e bd       	out	0x2e, r24	; 46
    1d50:	86 e0       	ldi	r24, 0x06	; 6
    1d52:	08 95       	ret
    1d54:	8e b5       	in	r24, 0x2e	; 46
    1d56:	88 7f       	andi	r24, 0xF8	; 248
    1d58:	84 60       	ori	r24, 0x04	; 4
    1d5a:	8e bd       	out	0x2e, r24	; 46
    1d5c:	86 e0       	ldi	r24, 0x06	; 6
    1d5e:	08 95       	ret
    1d60:	8e b5       	in	r24, 0x2e	; 46
    1d62:	88 7f       	andi	r24, 0xF8	; 248
    1d64:	85 60       	ori	r24, 0x05	; 5
    1d66:	8e bd       	out	0x2e, r24	; 46
    1d68:	86 e0       	ldi	r24, 0x06	; 6
    1d6a:	08 95       	ret
    1d6c:	8e b5       	in	r24, 0x2e	; 46
    1d6e:	88 7f       	andi	r24, 0xF8	; 248
    1d70:	86 60       	ori	r24, 0x06	; 6
    1d72:	8e bd       	out	0x2e, r24	; 46
    1d74:	86 e0       	ldi	r24, 0x06	; 6
    1d76:	08 95       	ret
    1d78:	8e b5       	in	r24, 0x2e	; 46
    1d7a:	87 60       	ori	r24, 0x07	; 7
    1d7c:	8e bd       	out	0x2e, r24	; 46
    1d7e:	86 e0       	ldi	r24, 0x06	; 6
    1d80:	08 95       	ret
    1d82:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <gl_enu_tmr_clk+0x2>
    1d86:	e8 30       	cpi	r30, 0x08	; 8
    1d88:	08 f0       	brcs	.+2      	; 0x1d8c <timer_start+0x13c>
    1d8a:	4f c0       	rjmp	.+158    	; 0x1e2a <timer_start+0x1da>
    1d8c:	8e 2f       	mov	r24, r30
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	88 30       	cpi	r24, 0x08	; 8
    1d92:	91 05       	cpc	r25, r1
    1d94:	08 f0       	brcs	.+2      	; 0x1d98 <timer_start+0x148>
    1d96:	4b c0       	rjmp	.+150    	; 0x1e2e <timer_start+0x1de>
    1d98:	fc 01       	movw	r30, r24
    1d9a:	e2 5c       	subi	r30, 0xC2	; 194
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	0c 94 b7 1c 	jmp	0x396e	; 0x396e <__tablejump2__>
    1da2:	85 b5       	in	r24, 0x25	; 37
    1da4:	88 7f       	andi	r24, 0xF8	; 248
    1da6:	85 bd       	out	0x25, r24	; 37
    1da8:	86 e0       	ldi	r24, 0x06	; 6
    1daa:	08 95       	ret
    1dac:	85 b5       	in	r24, 0x25	; 37
    1dae:	88 7f       	andi	r24, 0xF8	; 248
    1db0:	81 60       	ori	r24, 0x01	; 1
    1db2:	85 bd       	out	0x25, r24	; 37
    1db4:	86 e0       	ldi	r24, 0x06	; 6
    1db6:	08 95       	ret
    1db8:	85 b5       	in	r24, 0x25	; 37
    1dba:	88 7f       	andi	r24, 0xF8	; 248
    1dbc:	82 60       	ori	r24, 0x02	; 2
    1dbe:	85 bd       	out	0x25, r24	; 37
    1dc0:	86 e0       	ldi	r24, 0x06	; 6
    1dc2:	08 95       	ret
    1dc4:	85 b5       	in	r24, 0x25	; 37
    1dc6:	88 7f       	andi	r24, 0xF8	; 248
    1dc8:	83 60       	ori	r24, 0x03	; 3
    1dca:	85 bd       	out	0x25, r24	; 37
    1dcc:	86 e0       	ldi	r24, 0x06	; 6
    1dce:	08 95       	ret
    1dd0:	85 b5       	in	r24, 0x25	; 37
    1dd2:	88 7f       	andi	r24, 0xF8	; 248
    1dd4:	84 60       	ori	r24, 0x04	; 4
    1dd6:	85 bd       	out	0x25, r24	; 37
    1dd8:	86 e0       	ldi	r24, 0x06	; 6
    1dda:	08 95       	ret
    1ddc:	85 b5       	in	r24, 0x25	; 37
    1dde:	88 7f       	andi	r24, 0xF8	; 248
    1de0:	85 60       	ori	r24, 0x05	; 5
    1de2:	85 bd       	out	0x25, r24	; 37
    1de4:	86 e0       	ldi	r24, 0x06	; 6
    1de6:	08 95       	ret
    1de8:	85 b5       	in	r24, 0x25	; 37
    1dea:	88 7f       	andi	r24, 0xF8	; 248
    1dec:	86 60       	ori	r24, 0x06	; 6
    1dee:	85 bd       	out	0x25, r24	; 37
    1df0:	86 e0       	ldi	r24, 0x06	; 6
    1df2:	08 95       	ret
    1df4:	85 b5       	in	r24, 0x25	; 37
    1df6:	87 60       	ori	r24, 0x07	; 7
    1df8:	85 bd       	out	0x25, r24	; 37
    1dfa:	86 e0       	ldi	r24, 0x06	; 6
    1dfc:	08 95       	ret
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	08 95       	ret
    1e02:	88 e0       	ldi	r24, 0x08	; 8
    1e04:	08 95       	ret
    1e06:	86 e0       	ldi	r24, 0x06	; 6
    1e08:	08 95       	ret
    1e0a:	84 e0       	ldi	r24, 0x04	; 4
    1e0c:	08 95       	ret
    1e0e:	84 e0       	ldi	r24, 0x04	; 4
    1e10:	08 95       	ret
    1e12:	84 e0       	ldi	r24, 0x04	; 4
    1e14:	08 95       	ret
    1e16:	86 e0       	ldi	r24, 0x06	; 6
    1e18:	08 95       	ret
    1e1a:	84 e0       	ldi	r24, 0x04	; 4
    1e1c:	08 95       	ret
    1e1e:	84 e0       	ldi	r24, 0x04	; 4
    1e20:	08 95       	ret
    1e22:	84 e0       	ldi	r24, 0x04	; 4
    1e24:	08 95       	ret
    1e26:	86 e0       	ldi	r24, 0x06	; 6
    1e28:	08 95       	ret
    1e2a:	84 e0       	ldi	r24, 0x04	; 4
    1e2c:	08 95       	ret
    1e2e:	86 e0       	ldi	r24, 0x06	; 6
    1e30:	08 95       	ret

00001e32 <timer_stop>:
    1e32:	83 30       	cpi	r24, 0x03	; 3
    1e34:	e0 f4       	brcc	.+56     	; 0x1e6e <timer_stop+0x3c>
    1e36:	e8 2f       	mov	r30, r24
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	e7 5c       	subi	r30, 0xC7	; 199
    1e3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e3e:	90 81       	ld	r25, Z
    1e40:	91 30       	cpi	r25, 0x01	; 1
    1e42:	b9 f4       	brne	.+46     	; 0x1e72 <timer_stop+0x40>
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	49 f0       	breq	.+18     	; 0x1e5a <timer_stop+0x28>
    1e48:	18 f0       	brcs	.+6      	; 0x1e50 <timer_stop+0x1e>
    1e4a:	82 30       	cpi	r24, 0x02	; 2
    1e4c:	59 f0       	breq	.+22     	; 0x1e64 <timer_stop+0x32>
    1e4e:	13 c0       	rjmp	.+38     	; 0x1e76 <timer_stop+0x44>
    1e50:	83 b7       	in	r24, 0x33	; 51
    1e52:	88 7f       	andi	r24, 0xF8	; 248
    1e54:	83 bf       	out	0x33, r24	; 51
    1e56:	86 e0       	ldi	r24, 0x06	; 6
    1e58:	08 95       	ret
    1e5a:	8e b5       	in	r24, 0x2e	; 46
    1e5c:	88 7f       	andi	r24, 0xF8	; 248
    1e5e:	8e bd       	out	0x2e, r24	; 46
    1e60:	86 e0       	ldi	r24, 0x06	; 6
    1e62:	08 95       	ret
    1e64:	85 b5       	in	r24, 0x25	; 37
    1e66:	88 7f       	andi	r24, 0xF8	; 248
    1e68:	85 bd       	out	0x25, r24	; 37
    1e6a:	86 e0       	ldi	r24, 0x06	; 6
    1e6c:	08 95       	ret
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	08 95       	ret
    1e72:	88 e0       	ldi	r24, 0x08	; 8
    1e74:	08 95       	ret
    1e76:	86 e0       	ldi	r24, 0x06	; 6
    1e78:	08 95       	ret

00001e7a <timer_getValue>:
    1e7a:	83 30       	cpi	r24, 0x03	; 3
    1e7c:	10 f5       	brcc	.+68     	; 0x1ec2 <timer_getValue+0x48>
    1e7e:	e8 2f       	mov	r30, r24
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	e7 5c       	subi	r30, 0xC7	; 199
    1e84:	fe 4f       	sbci	r31, 0xFE	; 254
    1e86:	90 81       	ld	r25, Z
    1e88:	91 30       	cpi	r25, 0x01	; 1
    1e8a:	e9 f4       	brne	.+58     	; 0x1ec6 <timer_getValue+0x4c>
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	59 f0       	breq	.+22     	; 0x1ea6 <timer_getValue+0x2c>
    1e90:	18 f0       	brcs	.+6      	; 0x1e98 <timer_getValue+0x1e>
    1e92:	82 30       	cpi	r24, 0x02	; 2
    1e94:	79 f0       	breq	.+30     	; 0x1eb4 <timer_getValue+0x3a>
    1e96:	19 c0       	rjmp	.+50     	; 0x1eca <timer_getValue+0x50>
    1e98:	82 b7       	in	r24, 0x32	; 50
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	fb 01       	movw	r30, r22
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	80 83       	st	Z, r24
    1ea2:	86 e0       	ldi	r24, 0x06	; 6
    1ea4:	08 95       	ret
    1ea6:	8c b5       	in	r24, 0x2c	; 44
    1ea8:	9d b5       	in	r25, 0x2d	; 45
    1eaa:	fb 01       	movw	r30, r22
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
    1eb0:	86 e0       	ldi	r24, 0x06	; 6
    1eb2:	08 95       	ret
    1eb4:	84 b5       	in	r24, 0x24	; 36
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	fb 01       	movw	r30, r22
    1eba:	91 83       	std	Z+1, r25	; 0x01
    1ebc:	80 83       	st	Z, r24
    1ebe:	86 e0       	ldi	r24, 0x06	; 6
    1ec0:	08 95       	ret
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	08 95       	ret
    1ec6:	88 e0       	ldi	r24, 0x08	; 8
    1ec8:	08 95       	ret
    1eca:	86 e0       	ldi	r24, 0x06	; 6
    1ecc:	08 95       	ret

00001ece <timer_flag_notification>:
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
	if(enu_tmr_channel_id < MAX_ENU_TMR_CHANNEL)
    1ece:	83 30       	cpi	r24, 0x03	; 3
    1ed0:	08 f0       	brcs	.+2      	; 0x1ed4 <timer_flag_notification+0x6>
    1ed2:	76 c0       	rjmp	.+236    	; 0x1fc0 <timer_flag_notification+0xf2>
	{
		if(enu_tmr_mode < ENU_MAX_TMR_MODE)
    1ed4:	62 30       	cpi	r22, 0x02	; 2
    1ed6:	08 f0       	brcs	.+2      	; 0x1eda <timer_flag_notification+0xc>
    1ed8:	75 c0       	rjmp	.+234    	; 0x1fc4 <timer_flag_notification+0xf6>
		{
			if(ptr_u8_flag_status != NULL_PTR)
    1eda:	41 15       	cp	r20, r1
    1edc:	51 05       	cpc	r21, r1
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <timer_flag_notification+0x14>
    1ee0:	73 c0       	rjmp	.+230    	; 0x1fc8 <timer_flag_notification+0xfa>
			{
				if(gl_bo_timer_init_flag[enu_tmr_channel_id] == TRUE)
    1ee2:	e8 2f       	mov	r30, r24
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	e7 5c       	subi	r30, 0xC7	; 199
    1ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eea:	90 81       	ld	r25, Z
    1eec:	91 30       	cpi	r25, 0x01	; 1
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <timer_flag_notification+0x24>
    1ef0:	6d c0       	rjmp	.+218    	; 0x1fcc <timer_flag_notification+0xfe>
				{
					switch (enu_tmr_channel_id)
    1ef2:	81 30       	cpi	r24, 0x01	; 1
    1ef4:	29 f1       	breq	.+74     	; 0x1f40 <timer_flag_notification+0x72>
    1ef6:	20 f0       	brcs	.+8      	; 0x1f00 <timer_flag_notification+0x32>
    1ef8:	82 30       	cpi	r24, 0x02	; 2
    1efa:	09 f4       	brne	.+2      	; 0x1efe <timer_flag_notification+0x30>
    1efc:	41 c0       	rjmp	.+130    	; 0x1f80 <timer_flag_notification+0xb2>
    1efe:	68 c0       	rjmp	.+208    	; 0x1fd0 <timer_flag_notification+0x102>
					{
						case ENU_TMR_CHANNEL_0:
						{
							if(enu_tmr_mode == ENU_TMR_NORMAL_MODE)
    1f00:	61 11       	cpse	r22, r1
    1f02:	0f c0       	rjmp	.+30     	; 0x1f22 <timer_flag_notification+0x54>
							{
								if(BIT_IS_SET(TIFR,TOV0))
    1f04:	08 b6       	in	r0, 0x38	; 56
    1f06:	00 fe       	sbrs	r0, 0
    1f08:	08 c0       	rjmp	.+16     	; 0x1f1a <timer_flag_notification+0x4c>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	fa 01       	movw	r30, r20
    1f0e:	80 83       	st	Z, r24
									SET_BIT(TIFR,TOV0);	//TOV0 is cleared by writing a logic one to the flag
    1f10:	88 b7       	in	r24, 0x38	; 56
    1f12:	81 60       	ori	r24, 0x01	; 1
    1f14:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1f16:	86 e0       	ldi	r24, 0x06	; 6
    1f18:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,TOV0);	//TOV0 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    1f1a:	fa 01       	movw	r30, r20
    1f1c:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1f1e:	86 e0       	ldi	r24, 0x06	; 6
    1f20:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_FALSE;
								}
							}
							else
							{
								if(BIT_IS_SET(TIFR,OCF0))	// in case compare flag
    1f22:	08 b6       	in	r0, 0x38	; 56
    1f24:	01 fe       	sbrs	r0, 1
    1f26:	08 c0       	rjmp	.+16     	; 0x1f38 <timer_flag_notification+0x6a>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	fa 01       	movw	r30, r20
    1f2c:	80 83       	st	Z, r24
									SET_BIT(TIFR,OCF0);	//OCF0 is cleared by writing a logic one to the flag
    1f2e:	88 b7       	in	r24, 0x38	; 56
    1f30:	82 60       	ori	r24, 0x02	; 2
    1f32:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1f34:	86 e0       	ldi	r24, 0x06	; 6
    1f36:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,OCF0);	//OCF0 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    1f38:	fa 01       	movw	r30, r20
    1f3a:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1f3c:	86 e0       	ldi	r24, 0x06	; 6
    1f3e:	08 95       	ret
							}
						}
						break;
						case ENU_TMR_CHANNEL_1:
						{
							if(enu_tmr_mode == ENU_TMR_NORMAL_MODE)
    1f40:	61 11       	cpse	r22, r1
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <timer_flag_notification+0x94>
							{
								if(BIT_IS_SET(TIFR,TOV1))
    1f44:	08 b6       	in	r0, 0x38	; 56
    1f46:	02 fe       	sbrs	r0, 2
    1f48:	08 c0       	rjmp	.+16     	; 0x1f5a <timer_flag_notification+0x8c>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	fa 01       	movw	r30, r20
    1f4e:	80 83       	st	Z, r24
									SET_BIT(TIFR,TOV1);	//TOV1 is cleared by writing a logic one to the flag
    1f50:	88 b7       	in	r24, 0x38	; 56
    1f52:	84 60       	ori	r24, 0x04	; 4
    1f54:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1f56:	86 e0       	ldi	r24, 0x06	; 6
    1f58:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,TOV1);	//TOV1 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    1f5a:	fa 01       	movw	r30, r20
    1f5c:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1f5e:	86 e0       	ldi	r24, 0x06	; 6
    1f60:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_FALSE;
								}
							}
							else
							{
								if(BIT_IS_SET(TIFR,OCF1A))
    1f62:	08 b6       	in	r0, 0x38	; 56
    1f64:	04 fe       	sbrs	r0, 4
    1f66:	08 c0       	rjmp	.+16     	; 0x1f78 <timer_flag_notification+0xaa>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	fa 01       	movw	r30, r20
    1f6c:	80 83       	st	Z, r24
									SET_BIT(TIFR,OCF1A);	//OCF1A is cleared by writing a logic one to the flag
    1f6e:	88 b7       	in	r24, 0x38	; 56
    1f70:	80 61       	ori	r24, 0x10	; 16
    1f72:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1f74:	86 e0       	ldi	r24, 0x06	; 6
    1f76:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,OCF1A);	//OCF1A is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    1f78:	fa 01       	movw	r30, r20
    1f7a:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1f7c:	86 e0       	ldi	r24, 0x06	; 6
    1f7e:	08 95       	ret
							}
						}
						break;
						case ENU_TMR_CHANNEL_2:
						{
							if(enu_tmr_mode == ENU_TMR_NORMAL_MODE)
    1f80:	61 11       	cpse	r22, r1
    1f82:	0f c0       	rjmp	.+30     	; 0x1fa2 <timer_flag_notification+0xd4>
							{
								if(BIT_IS_SET(TIFR,TOV2))
    1f84:	08 b6       	in	r0, 0x38	; 56
    1f86:	06 fe       	sbrs	r0, 6
    1f88:	08 c0       	rjmp	.+16     	; 0x1f9a <timer_flag_notification+0xcc>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	fa 01       	movw	r30, r20
    1f8e:	80 83       	st	Z, r24
									SET_BIT(TIFR,TOV2);	//TOV2 is cleared by writing a logic one to the flag
    1f90:	88 b7       	in	r24, 0x38	; 56
    1f92:	80 64       	ori	r24, 0x40	; 64
    1f94:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1f96:	86 e0       	ldi	r24, 0x06	; 6
    1f98:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,TOV2);	//TOV2 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    1f9a:	fa 01       	movw	r30, r20
    1f9c:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1f9e:	86 e0       	ldi	r24, 0x06	; 6
    1fa0:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_FALSE;
								}
							}
							else
							{
								if(BIT_IS_SET(TIFR,OCF2))
    1fa2:	08 b6       	in	r0, 0x38	; 56
    1fa4:	07 fe       	sbrs	r0, 7
    1fa6:	08 c0       	rjmp	.+16     	; 0x1fb8 <timer_flag_notification+0xea>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	fa 01       	movw	r30, r20
    1fac:	80 83       	st	Z, r24
									SET_BIT(TIFR,OCF2);	//OCF2 is cleared by writing a logic one to the flag
    1fae:	88 b7       	in	r24, 0x38	; 56
    1fb0:	80 68       	ori	r24, 0x80	; 128
    1fb2:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1fb4:	86 e0       	ldi	r24, 0x06	; 6
    1fb6:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,OCF2);	//OCF2 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    1fb8:	fa 01       	movw	r30, r20
    1fba:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1fbc:	86 e0       	ldi	r24, 0x06	; 6
    1fbe:	08 95       	ret
			enu_tmr_error = ENU_TMR_INVALID_MODE;
		}
	}
	else
	{
		enu_tmr_error = ENU_TMR_INVALID_ID;
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	08 95       	ret
				enu_tmr_error = ENU_TMR_INVALID_INPUT;
			}
		}
		else
		{
			enu_tmr_error = ENU_TMR_INVALID_MODE;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	08 95       	ret
					enu_tmr_error = ENU_TMR_NOT_INITIALIZED;
				}
			}
			else
			{
				enu_tmr_error = ENU_TMR_INVALID_INPUT;
    1fc8:	85 e0       	ldi	r24, 0x05	; 5
    1fca:	08 95       	ret
						}
					}
				}
				else
				{
					enu_tmr_error = ENU_TMR_NOT_INITIALIZED;
    1fcc:	88 e0       	ldi	r24, 0x08	; 8
    1fce:	08 95       	ret
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    1fd0:	86 e0       	ldi	r24, 0x06	; 6
	else
	{
		enu_tmr_error = ENU_TMR_INVALID_ID;
	}
	return enu_tmr_error;
}
    1fd2:	08 95       	ret

00001fd4 <__vector_11>:

/*===============ISR HANDLERS================*/
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR_HANDLER(TMR0_OVF)
{
    1fd4:	1f 92       	push	r1
    1fd6:	0f 92       	push	r0
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	0f 92       	push	r0
    1fdc:	11 24       	eor	r1, r1
    1fde:	2f 93       	push	r18
    1fe0:	3f 93       	push	r19
    1fe2:	4f 93       	push	r20
    1fe4:	5f 93       	push	r21
    1fe6:	6f 93       	push	r22
    1fe8:	7f 93       	push	r23
    1fea:	8f 93       	push	r24
    1fec:	9f 93       	push	r25
    1fee:	af 93       	push	r26
    1ff0:	bf 93       	push	r27
    1ff2:	ef 93       	push	r30
    1ff4:	ff 93       	push	r31
	if(gl_callBackPtr_timer0_OVF != NULL_PTR)
    1ff6:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <gl_callBackPtr_timer0_OVF>
    1ffa:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <gl_callBackPtr_timer0_OVF+0x1>
    1ffe:	30 97       	sbiw	r30, 0x00	; 0
    2000:	09 f0       	breq	.+2      	; 0x2004 <__vector_11+0x30>
	{
		gl_callBackPtr_timer0_OVF();
    2002:	09 95       	icall
	}
}
    2004:	ff 91       	pop	r31
    2006:	ef 91       	pop	r30
    2008:	bf 91       	pop	r27
    200a:	af 91       	pop	r26
    200c:	9f 91       	pop	r25
    200e:	8f 91       	pop	r24
    2010:	7f 91       	pop	r23
    2012:	6f 91       	pop	r22
    2014:	5f 91       	pop	r21
    2016:	4f 91       	pop	r20
    2018:	3f 91       	pop	r19
    201a:	2f 91       	pop	r18
    201c:	0f 90       	pop	r0
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	0f 90       	pop	r0
    2022:	1f 90       	pop	r1
    2024:	18 95       	reti

00002026 <__vector_9>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR_HANDLER(TMR1_OVF)
{
    2026:	1f 92       	push	r1
    2028:	0f 92       	push	r0
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	0f 92       	push	r0
    202e:	11 24       	eor	r1, r1
    2030:	2f 93       	push	r18
    2032:	3f 93       	push	r19
    2034:	4f 93       	push	r20
    2036:	5f 93       	push	r21
    2038:	6f 93       	push	r22
    203a:	7f 93       	push	r23
    203c:	8f 93       	push	r24
    203e:	9f 93       	push	r25
    2040:	af 93       	push	r26
    2042:	bf 93       	push	r27
    2044:	ef 93       	push	r30
    2046:	ff 93       	push	r31
	if(gl_callBackPtr_timer1_OVF != NULL_PTR)
    2048:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <gl_callBackPtr_timer1_OVF>
    204c:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <gl_callBackPtr_timer1_OVF+0x1>
    2050:	30 97       	sbiw	r30, 0x00	; 0
    2052:	09 f0       	breq	.+2      	; 0x2056 <__vector_9+0x30>
	{
		gl_callBackPtr_timer1_OVF();
    2054:	09 95       	icall
	}
}
    2056:	ff 91       	pop	r31
    2058:	ef 91       	pop	r30
    205a:	bf 91       	pop	r27
    205c:	af 91       	pop	r26
    205e:	9f 91       	pop	r25
    2060:	8f 91       	pop	r24
    2062:	7f 91       	pop	r23
    2064:	6f 91       	pop	r22
    2066:	5f 91       	pop	r21
    2068:	4f 91       	pop	r20
    206a:	3f 91       	pop	r19
    206c:	2f 91       	pop	r18
    206e:	0f 90       	pop	r0
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	0f 90       	pop	r0
    2074:	1f 90       	pop	r1
    2076:	18 95       	reti

00002078 <__vector_5>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR_HANDLER(TMR2_OVF)
{
    2078:	1f 92       	push	r1
    207a:	0f 92       	push	r0
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	0f 92       	push	r0
    2080:	11 24       	eor	r1, r1
    2082:	2f 93       	push	r18
    2084:	3f 93       	push	r19
    2086:	4f 93       	push	r20
    2088:	5f 93       	push	r21
    208a:	6f 93       	push	r22
    208c:	7f 93       	push	r23
    208e:	8f 93       	push	r24
    2090:	9f 93       	push	r25
    2092:	af 93       	push	r26
    2094:	bf 93       	push	r27
    2096:	ef 93       	push	r30
    2098:	ff 93       	push	r31
	if(gl_callBackPtr_timer2_OVF != NULL_PTR)
    209a:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <gl_callBackPtr_timer2_OVF>
    209e:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <gl_callBackPtr_timer2_OVF+0x1>
    20a2:	30 97       	sbiw	r30, 0x00	; 0
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <__vector_5+0x30>
	{
		gl_callBackPtr_timer2_OVF();
    20a6:	09 95       	icall
	}
}
    20a8:	ff 91       	pop	r31
    20aa:	ef 91       	pop	r30
    20ac:	bf 91       	pop	r27
    20ae:	af 91       	pop	r26
    20b0:	9f 91       	pop	r25
    20b2:	8f 91       	pop	r24
    20b4:	7f 91       	pop	r23
    20b6:	6f 91       	pop	r22
    20b8:	5f 91       	pop	r21
    20ba:	4f 91       	pop	r20
    20bc:	3f 91       	pop	r19
    20be:	2f 91       	pop	r18
    20c0:	0f 90       	pop	r0
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	0f 90       	pop	r0
    20c6:	1f 90       	pop	r1
    20c8:	18 95       	reti

000020ca <__vector_10>:
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR_HANDLER(TMR0_CMP)
{
    20ca:	1f 92       	push	r1
    20cc:	0f 92       	push	r0
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	0f 92       	push	r0
    20d2:	11 24       	eor	r1, r1
    20d4:	2f 93       	push	r18
    20d6:	3f 93       	push	r19
    20d8:	4f 93       	push	r20
    20da:	5f 93       	push	r21
    20dc:	6f 93       	push	r22
    20de:	7f 93       	push	r23
    20e0:	8f 93       	push	r24
    20e2:	9f 93       	push	r25
    20e4:	af 93       	push	r26
    20e6:	bf 93       	push	r27
    20e8:	ef 93       	push	r30
    20ea:	ff 93       	push	r31
	if(gl_callBackPtr_timer0_COMP != NULL_PTR)
    20ec:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <gl_callBackPtr_timer0_COMP>
    20f0:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <gl_callBackPtr_timer0_COMP+0x1>
    20f4:	30 97       	sbiw	r30, 0x00	; 0
    20f6:	09 f0       	breq	.+2      	; 0x20fa <__vector_10+0x30>
	{
		gl_callBackPtr_timer0_COMP();
    20f8:	09 95       	icall
	}
}
    20fa:	ff 91       	pop	r31
    20fc:	ef 91       	pop	r30
    20fe:	bf 91       	pop	r27
    2100:	af 91       	pop	r26
    2102:	9f 91       	pop	r25
    2104:	8f 91       	pop	r24
    2106:	7f 91       	pop	r23
    2108:	6f 91       	pop	r22
    210a:	5f 91       	pop	r21
    210c:	4f 91       	pop	r20
    210e:	3f 91       	pop	r19
    2110:	2f 91       	pop	r18
    2112:	0f 90       	pop	r0
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	0f 90       	pop	r0
    2118:	1f 90       	pop	r1
    211a:	18 95       	reti

0000211c <__vector_7>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR_HANDLER(TMR1_CMP_A)
{
    211c:	1f 92       	push	r1
    211e:	0f 92       	push	r0
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	0f 92       	push	r0
    2124:	11 24       	eor	r1, r1
    2126:	2f 93       	push	r18
    2128:	3f 93       	push	r19
    212a:	4f 93       	push	r20
    212c:	5f 93       	push	r21
    212e:	6f 93       	push	r22
    2130:	7f 93       	push	r23
    2132:	8f 93       	push	r24
    2134:	9f 93       	push	r25
    2136:	af 93       	push	r26
    2138:	bf 93       	push	r27
    213a:	ef 93       	push	r30
    213c:	ff 93       	push	r31
	if(gl_callBackPtr_timer1_COMP != NULL_PTR)
    213e:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <gl_callBackPtr_timer1_COMP>
    2142:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <gl_callBackPtr_timer1_COMP+0x1>
    2146:	30 97       	sbiw	r30, 0x00	; 0
    2148:	09 f0       	breq	.+2      	; 0x214c <__vector_7+0x30>
	{
		gl_callBackPtr_timer1_COMP();
    214a:	09 95       	icall
	}
}
    214c:	ff 91       	pop	r31
    214e:	ef 91       	pop	r30
    2150:	bf 91       	pop	r27
    2152:	af 91       	pop	r26
    2154:	9f 91       	pop	r25
    2156:	8f 91       	pop	r24
    2158:	7f 91       	pop	r23
    215a:	6f 91       	pop	r22
    215c:	5f 91       	pop	r21
    215e:	4f 91       	pop	r20
    2160:	3f 91       	pop	r19
    2162:	2f 91       	pop	r18
    2164:	0f 90       	pop	r0
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	0f 90       	pop	r0
    216a:	1f 90       	pop	r1
    216c:	18 95       	reti

0000216e <__vector_4>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR_HANDLER(TMR2_CMP)
{
    216e:	1f 92       	push	r1
    2170:	0f 92       	push	r0
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	0f 92       	push	r0
    2176:	11 24       	eor	r1, r1
    2178:	2f 93       	push	r18
    217a:	3f 93       	push	r19
    217c:	4f 93       	push	r20
    217e:	5f 93       	push	r21
    2180:	6f 93       	push	r22
    2182:	7f 93       	push	r23
    2184:	8f 93       	push	r24
    2186:	9f 93       	push	r25
    2188:	af 93       	push	r26
    218a:	bf 93       	push	r27
    218c:	ef 93       	push	r30
    218e:	ff 93       	push	r31
	if(gl_callBackPtr_timer2_COMP != NULL_PTR)
    2190:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <gl_callBackPtr_timer2_COMP>
    2194:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <gl_callBackPtr_timer2_COMP+0x1>
    2198:	30 97       	sbiw	r30, 0x00	; 0
    219a:	09 f0       	breq	.+2      	; 0x219e <__vector_4+0x30>
	{
		gl_callBackPtr_timer2_COMP(); 
    219c:	09 95       	icall
	}
    219e:	ff 91       	pop	r31
    21a0:	ef 91       	pop	r30
    21a2:	bf 91       	pop	r27
    21a4:	af 91       	pop	r26
    21a6:	9f 91       	pop	r25
    21a8:	8f 91       	pop	r24
    21aa:	7f 91       	pop	r23
    21ac:	6f 91       	pop	r22
    21ae:	5f 91       	pop	r21
    21b0:	4f 91       	pop	r20
    21b2:	3f 91       	pop	r19
    21b4:	2f 91       	pop	r18
    21b6:	0f 90       	pop	r0
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	0f 90       	pop	r0
    21bc:	1f 90       	pop	r1
    21be:	18 95       	reti

000021c0 <calc_prescaler>:

/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
    21c0:	cf 92       	push	r12
    21c2:	df 92       	push	r13
    21c4:	ef 92       	push	r14
    21c6:	ff 92       	push	r15
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	6b 01       	movw	r12, r22
    21ce:	7c 01       	movw	r14, r24
	BOOLEAN bo_return_value = TRUE;
	if(enu_time_unit == ENU_MICRO_SECOND)
    21d0:	21 11       	cpse	r18, r1
    21d2:	65 c1       	rjmp	.+714    	; 0x249e <calc_prescaler+0x2de>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    21d4:	41 11       	cpse	r20, r1
    21d6:	69 c0       	rjmp	.+210    	; 0x22aa <calc_prescaler+0xea>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	57 e4       	ldi	r21, 0x47	; 71
    21e0:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    21e4:	18 16       	cp	r1, r24
    21e6:	0c f4       	brge	.+2      	; 0x21ea <calc_prescaler+0x2a>
    21e8:	59 c0       	rjmp	.+178    	; 0x229c <calc_prescaler+0xdc>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e0       	ldi	r20, 0x00	; 0
    21f0:	52 e4       	ldi	r21, 0x42	; 66
    21f2:	c7 01       	movw	r24, r14
    21f4:	b6 01       	movw	r22, r12
    21f6:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    21fa:	18 16       	cp	r1, r24
    21fc:	34 f0       	brlt	.+12     	; 0x220a <calc_prescaler+0x4a>
				*ptr_u16_prescale=P_1;
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	f8 01       	movw	r30, r16
    2204:	91 83       	std	Z+1, r25	; 0x01
    2206:	80 83       	st	Z, r24
    2208:	21 c4       	rjmp	.+2114   	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e8       	ldi	r20, 0x80	; 128
    2210:	53 e4       	ldi	r21, 0x43	; 67
    2212:	c7 01       	movw	r24, r14
    2214:	b6 01       	movw	r22, r12
    2216:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    221a:	18 16       	cp	r1, r24
    221c:	3c f0       	brlt	.+14     	; 0x222c <calc_prescaler+0x6c>
				*ptr_u16_prescale=P_8;
    221e:	88 e0       	ldi	r24, 0x08	; 8
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	f8 01       	movw	r30, r16
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	10 c4       	rjmp	.+2080   	; 0x2a4c <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	55 e4       	ldi	r21, 0x45	; 69
    2234:	c7 01       	movw	r24, r14
    2236:	b6 01       	movw	r22, r12
    2238:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    223c:	18 16       	cp	r1, r24
    223e:	3c f0       	brlt	.+14     	; 0x224e <calc_prescaler+0x8e>
				*ptr_u16_prescale=P_64;
    2240:	80 e4       	ldi	r24, 0x40	; 64
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	f8 01       	movw	r30, r16
    2246:	91 83       	std	Z+1, r25	; 0x01
    2248:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	ff c3       	rjmp	.+2046   	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e0       	ldi	r20, 0x00	; 0
    2254:	56 e4       	ldi	r21, 0x46	; 70
    2256:	c7 01       	movw	r24, r14
    2258:	b6 01       	movw	r22, r12
    225a:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    225e:	18 16       	cp	r1, r24
    2260:	3c f0       	brlt	.+14     	; 0x2270 <calc_prescaler+0xb0>
				*ptr_u16_prescale=P_256;
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	f8 01       	movw	r30, r16
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	ee c3       	rjmp	.+2012   	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024))
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e0       	ldi	r20, 0x00	; 0
    2276:	57 e4       	ldi	r21, 0x47	; 71
    2278:	c7 01       	movw	r24, r14
    227a:	b6 01       	movw	r22, r12
    227c:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2280:	18 16       	cp	r1, r24
    2282:	3c f0       	brlt	.+14     	; 0x2292 <calc_prescaler+0xd2>
				*ptr_u16_prescale=P_1024;
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	94 e0       	ldi	r25, 0x04	; 4
    2288:	f8 01       	movw	r30, r16
    228a:	91 83       	std	Z+1, r25	; 0x01
    228c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	dd c3       	rjmp	.+1978   	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    2292:	f8 01       	movw	r30, r16
    2294:	11 82       	std	Z+1, r1	; 0x01
    2296:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	d8 c3       	rjmp	.+1968   	; 0x2a4c <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    229c:	8c ed       	ldi	r24, 0xDC	; 220
    229e:	95 e0       	ldi	r25, 0x05	; 5
    22a0:	f8 01       	movw	r30, r16
    22a2:	91 83       	std	Z+1, r25	; 0x01
    22a4:	80 83       	st	Z, r24
				bo_return_value = TRUE;	
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	d1 c3       	rjmp	.+1954   	; 0x2a4c <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    22aa:	41 30       	cpi	r20, 0x01	; 1
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <calc_prescaler+0xf0>
    22ae:	69 c0       	rjmp	.+210    	; 0x2382 <calc_prescaler+0x1c2>
		{
			if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024) )
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	5b e4       	ldi	r21, 0x4B	; 75
    22b8:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    22bc:	18 16       	cp	r1, r24
    22be:	0c f4       	brge	.+2      	; 0x22c2 <calc_prescaler+0x102>
    22c0:	59 c0       	rjmp	.+178    	; 0x2374 <calc_prescaler+0x1b4>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_US(P_1))
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	56 e4       	ldi	r21, 0x46	; 70
    22ca:	c7 01       	movw	r24, r14
    22cc:	b6 01       	movw	r22, r12
    22ce:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    22d2:	18 16       	cp	r1, r24
    22d4:	34 f0       	brlt	.+12     	; 0x22e2 <calc_prescaler+0x122>
				*ptr_u16_prescale=P_1;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	f8 01       	movw	r30, r16
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	80 83       	st	Z, r24
    22e0:	b5 c3       	rjmp	.+1898   	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e8       	ldi	r20, 0x80	; 128
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	c7 01       	movw	r24, r14
    22ec:	b6 01       	movw	r22, r12
    22ee:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	3c f0       	brlt	.+14     	; 0x2304 <calc_prescaler+0x144>
				*ptr_u16_prescale=P_8;
    22f6:	88 e0       	ldi	r24, 0x08	; 8
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	f8 01       	movw	r30, r16
    22fc:	91 83       	std	Z+1, r25	; 0x01
    22fe:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	a4 c3       	rjmp	.+1864   	; 0x2a4c <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e0       	ldi	r20, 0x00	; 0
    230a:	59 e4       	ldi	r21, 0x49	; 73
    230c:	c7 01       	movw	r24, r14
    230e:	b6 01       	movw	r22, r12
    2310:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2314:	18 16       	cp	r1, r24
    2316:	3c f0       	brlt	.+14     	; 0x2326 <calc_prescaler+0x166>
				*ptr_u16_prescale=P_64;
    2318:	80 e4       	ldi	r24, 0x40	; 64
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	f8 01       	movw	r30, r16
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	93 c3       	rjmp	.+1830   	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	5a e4       	ldi	r21, 0x4A	; 74
    232e:	c7 01       	movw	r24, r14
    2330:	b6 01       	movw	r22, r12
    2332:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2336:	18 16       	cp	r1, r24
    2338:	3c f0       	brlt	.+14     	; 0x2348 <calc_prescaler+0x188>
				*ptr_u16_prescale=P_256;
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	91 e0       	ldi	r25, 0x01	; 1
    233e:	f8 01       	movw	r30, r16
    2340:	91 83       	std	Z+1, r25	; 0x01
    2342:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	82 c3       	rjmp	.+1796   	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024))
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e0       	ldi	r20, 0x00	; 0
    234e:	5b e4       	ldi	r21, 0x4B	; 75
    2350:	c7 01       	movw	r24, r14
    2352:	b6 01       	movw	r22, r12
    2354:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2358:	18 16       	cp	r1, r24
    235a:	3c f0       	brlt	.+14     	; 0x236a <calc_prescaler+0x1aa>
				*ptr_u16_prescale=P_1024;
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	94 e0       	ldi	r25, 0x04	; 4
    2360:	f8 01       	movw	r30, r16
    2362:	91 83       	std	Z+1, r25	; 0x01
    2364:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	71 c3       	rjmp	.+1762   	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    236a:	f8 01       	movw	r30, r16
    236c:	11 82       	std	Z+1, r1	; 0x01
    236e:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	6c c3       	rjmp	.+1752   	; 0x2a4c <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    2374:	8c ed       	ldi	r24, 0xDC	; 220
    2376:	95 e0       	ldi	r25, 0x05	; 5
    2378:	f8 01       	movw	r30, r16
    237a:	91 83       	std	Z+1, r25	; 0x01
    237c:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	65 c3       	rjmp	.+1738   	; 0x2a4c <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    2382:	42 30       	cpi	r20, 0x02	; 2
    2384:	09 f0       	breq	.+2      	; 0x2388 <calc_prescaler+0x1c8>
    2386:	5b c3       	rjmp	.+1718   	; 0x2a3e <calc_prescaler+0x87e>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e0       	ldi	r20, 0x00	; 0
    238e:	57 e4       	ldi	r21, 0x47	; 71
    2390:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2394:	18 16       	cp	r1, r24
    2396:	0c f4       	brge	.+2      	; 0x239a <calc_prescaler+0x1da>
    2398:	7b c0       	rjmp	.+246    	; 0x2490 <calc_prescaler+0x2d0>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	52 e4       	ldi	r21, 0x42	; 66
    23a2:	c7 01       	movw	r24, r14
    23a4:	b6 01       	movw	r22, r12
    23a6:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    23aa:	18 16       	cp	r1, r24
    23ac:	34 f0       	brlt	.+12     	; 0x23ba <calc_prescaler+0x1fa>
				*ptr_u16_prescale=P_1;
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	f8 01       	movw	r30, r16
    23b4:	91 83       	std	Z+1, r25	; 0x01
    23b6:	80 83       	st	Z, r24
    23b8:	49 c3       	rjmp	.+1682   	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e8       	ldi	r20, 0x80	; 128
    23c0:	53 e4       	ldi	r21, 0x43	; 67
    23c2:	c7 01       	movw	r24, r14
    23c4:	b6 01       	movw	r22, r12
    23c6:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	3c f0       	brlt	.+14     	; 0x23dc <calc_prescaler+0x21c>
				*ptr_u16_prescale=P_8;
    23ce:	88 e0       	ldi	r24, 0x08	; 8
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	f8 01       	movw	r30, r16
    23d4:	91 83       	std	Z+1, r25	; 0x01
    23d6:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	38 c3       	rjmp	.+1648   	; 0x2a4c <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e8       	ldi	r20, 0x80	; 128
    23e2:	54 e4       	ldi	r21, 0x44	; 68
    23e4:	c7 01       	movw	r24, r14
    23e6:	b6 01       	movw	r22, r12
    23e8:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    23ec:	18 16       	cp	r1, r24
    23ee:	3c f0       	brlt	.+14     	; 0x23fe <calc_prescaler+0x23e>
				*ptr_u16_prescale=P_32;
    23f0:	80 e2       	ldi	r24, 0x20	; 32
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	f8 01       	movw	r30, r16
    23f6:	91 83       	std	Z+1, r25	; 0x01
    23f8:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	27 c3       	rjmp	.+1614   	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	55 e4       	ldi	r21, 0x45	; 69
    2406:	c7 01       	movw	r24, r14
    2408:	b6 01       	movw	r22, r12
    240a:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    240e:	18 16       	cp	r1, r24
    2410:	3c f0       	brlt	.+14     	; 0x2420 <calc_prescaler+0x260>
				*ptr_u16_prescale=P_64;
    2412:	80 e4       	ldi	r24, 0x40	; 64
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	f8 01       	movw	r30, r16
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	16 c3       	rjmp	.+1580   	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e8       	ldi	r20, 0x80	; 128
    2426:	55 e4       	ldi	r21, 0x45	; 69
    2428:	c7 01       	movw	r24, r14
    242a:	b6 01       	movw	r22, r12
    242c:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2430:	18 16       	cp	r1, r24
    2432:	3c f0       	brlt	.+14     	; 0x2442 <calc_prescaler+0x282>
				*ptr_u16_prescale=P_128;
    2434:	80 e8       	ldi	r24, 0x80	; 128
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	f8 01       	movw	r30, r16
    243a:	91 83       	std	Z+1, r25	; 0x01
    243c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	05 c3       	rjmp	.+1546   	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	56 e4       	ldi	r21, 0x46	; 70
    244a:	c7 01       	movw	r24, r14
    244c:	b6 01       	movw	r22, r12
    244e:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2452:	18 16       	cp	r1, r24
    2454:	3c f0       	brlt	.+14     	; 0x2464 <calc_prescaler+0x2a4>
				*ptr_u16_prescale=P_256;
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	f8 01       	movw	r30, r16
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	f4 c2       	rjmp	.+1512   	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_US(P_1024))
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e0       	ldi	r20, 0x00	; 0
    246a:	57 e4       	ldi	r21, 0x47	; 71
    246c:	c7 01       	movw	r24, r14
    246e:	b6 01       	movw	r22, r12
    2470:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2474:	18 16       	cp	r1, r24
    2476:	3c f0       	brlt	.+14     	; 0x2486 <calc_prescaler+0x2c6>
				*ptr_u16_prescale=P_1024;
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	94 e0       	ldi	r25, 0x04	; 4
    247c:	f8 01       	movw	r30, r16
    247e:	91 83       	std	Z+1, r25	; 0x01
    2480:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	e3 c2       	rjmp	.+1478   	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    2486:	f8 01       	movw	r30, r16
    2488:	11 82       	std	Z+1, r1	; 0x01
    248a:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	de c2       	rjmp	.+1468   	; 0x2a4c <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    2490:	8c ed       	ldi	r24, 0xDC	; 220
    2492:	95 e0       	ldi	r25, 0x05	; 5
    2494:	f8 01       	movw	r30, r16
    2496:	91 83       	std	Z+1, r25	; 0x01
    2498:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	d7 c2       	rjmp	.+1454   	; 0x2a4c <calc_prescaler+0x88c>
		else
		{
			bo_return_value = FALSE;
		}
	}
	else if (enu_time_unit == ENU_MILLI_SECOND)
    249e:	21 30       	cpi	r18, 0x01	; 1
    24a0:	09 f0       	breq	.+2      	; 0x24a4 <calc_prescaler+0x2e4>
    24a2:	65 c1       	rjmp	.+714    	; 0x276e <calc_prescaler+0x5ae>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    24a4:	41 11       	cpse	r20, r1
    24a6:	69 c0       	rjmp	.+210    	; 0x257a <calc_prescaler+0x3ba>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024) )
    24a8:	2f e6       	ldi	r18, 0x6F	; 111
    24aa:	32 e1       	ldi	r19, 0x12	; 18
    24ac:	43 e0       	ldi	r20, 0x03	; 3
    24ae:	52 e4       	ldi	r21, 0x42	; 66
    24b0:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    24b4:	18 16       	cp	r1, r24
    24b6:	0c f4       	brge	.+2      	; 0x24ba <calc_prescaler+0x2fa>
    24b8:	59 c0       	rjmp	.+178    	; 0x256c <calc_prescaler+0x3ac>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
    24ba:	2f e6       	ldi	r18, 0x6F	; 111
    24bc:	32 e1       	ldi	r19, 0x12	; 18
    24be:	43 e0       	ldi	r20, 0x03	; 3
    24c0:	5d e3       	ldi	r21, 0x3D	; 61
    24c2:	c7 01       	movw	r24, r14
    24c4:	b6 01       	movw	r22, r12
    24c6:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    24ca:	18 16       	cp	r1, r24
    24cc:	34 f0       	brlt	.+12     	; 0x24da <calc_prescaler+0x31a>
				*ptr_u16_prescale=P_1;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	f8 01       	movw	r30, r16
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	80 83       	st	Z, r24
    24d8:	b9 c2       	rjmp	.+1394   	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
    24da:	2f e6       	ldi	r18, 0x6F	; 111
    24dc:	32 e1       	ldi	r19, 0x12	; 18
    24de:	43 e8       	ldi	r20, 0x83	; 131
    24e0:	5e e3       	ldi	r21, 0x3E	; 62
    24e2:	c7 01       	movw	r24, r14
    24e4:	b6 01       	movw	r22, r12
    24e6:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    24ea:	18 16       	cp	r1, r24
    24ec:	3c f0       	brlt	.+14     	; 0x24fc <calc_prescaler+0x33c>
				*ptr_u16_prescale=P_8;
    24ee:	88 e0       	ldi	r24, 0x08	; 8
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	f8 01       	movw	r30, r16
    24f4:	91 83       	std	Z+1, r25	; 0x01
    24f6:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	a8 c2       	rjmp	.+1360   	; 0x2a4c <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
    24fc:	2f e6       	ldi	r18, 0x6F	; 111
    24fe:	32 e1       	ldi	r19, 0x12	; 18
    2500:	43 e0       	ldi	r20, 0x03	; 3
    2502:	50 e4       	ldi	r21, 0x40	; 64
    2504:	c7 01       	movw	r24, r14
    2506:	b6 01       	movw	r22, r12
    2508:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    250c:	18 16       	cp	r1, r24
    250e:	3c f0       	brlt	.+14     	; 0x251e <calc_prescaler+0x35e>
				*ptr_u16_prescale=P_64;
    2510:	80 e4       	ldi	r24, 0x40	; 64
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	f8 01       	movw	r30, r16
    2516:	91 83       	std	Z+1, r25	; 0x01
    2518:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	97 c2       	rjmp	.+1326   	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
    251e:	2f e6       	ldi	r18, 0x6F	; 111
    2520:	32 e1       	ldi	r19, 0x12	; 18
    2522:	43 e0       	ldi	r20, 0x03	; 3
    2524:	51 e4       	ldi	r21, 0x41	; 65
    2526:	c7 01       	movw	r24, r14
    2528:	b6 01       	movw	r22, r12
    252a:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    252e:	18 16       	cp	r1, r24
    2530:	3c f0       	brlt	.+14     	; 0x2540 <calc_prescaler+0x380>
				*ptr_u16_prescale=P_256;
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	91 e0       	ldi	r25, 0x01	; 1
    2536:	f8 01       	movw	r30, r16
    2538:	91 83       	std	Z+1, r25	; 0x01
    253a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	86 c2       	rjmp	.+1292   	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024))
    2540:	2f e6       	ldi	r18, 0x6F	; 111
    2542:	32 e1       	ldi	r19, 0x12	; 18
    2544:	43 e0       	ldi	r20, 0x03	; 3
    2546:	52 e4       	ldi	r21, 0x42	; 66
    2548:	c7 01       	movw	r24, r14
    254a:	b6 01       	movw	r22, r12
    254c:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2550:	18 16       	cp	r1, r24
    2552:	3c f0       	brlt	.+14     	; 0x2562 <calc_prescaler+0x3a2>
				*ptr_u16_prescale=P_1024;
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	94 e0       	ldi	r25, 0x04	; 4
    2558:	f8 01       	movw	r30, r16
    255a:	91 83       	std	Z+1, r25	; 0x01
    255c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	75 c2       	rjmp	.+1258   	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    2562:	f8 01       	movw	r30, r16
    2564:	11 82       	std	Z+1, r1	; 0x01
    2566:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	70 c2       	rjmp	.+1248   	; 0x2a4c <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    256c:	8c ed       	ldi	r24, 0xDC	; 220
    256e:	95 e0       	ldi	r25, 0x05	; 5
    2570:	f8 01       	movw	r30, r16
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	69 c2       	rjmp	.+1234   	; 0x2a4c <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    257a:	41 30       	cpi	r20, 0x01	; 1
    257c:	09 f0       	breq	.+2      	; 0x2580 <calc_prescaler+0x3c0>
    257e:	69 c0       	rjmp	.+210    	; 0x2652 <calc_prescaler+0x492>
		{

			if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024) )
    2580:	2f e6       	ldi	r18, 0x6F	; 111
    2582:	32 e1       	ldi	r19, 0x12	; 18
    2584:	43 e0       	ldi	r20, 0x03	; 3
    2586:	56 e4       	ldi	r21, 0x46	; 70
    2588:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    258c:	18 16       	cp	r1, r24
    258e:	0c f4       	brge	.+2      	; 0x2592 <calc_prescaler+0x3d2>
    2590:	59 c0       	rjmp	.+178    	; 0x2644 <calc_prescaler+0x484>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1))
    2592:	2f e6       	ldi	r18, 0x6F	; 111
    2594:	32 e1       	ldi	r19, 0x12	; 18
    2596:	43 e0       	ldi	r20, 0x03	; 3
    2598:	51 e4       	ldi	r21, 0x41	; 65
    259a:	c7 01       	movw	r24, r14
    259c:	b6 01       	movw	r22, r12
    259e:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    25a2:	18 16       	cp	r1, r24
    25a4:	34 f0       	brlt	.+12     	; 0x25b2 <calc_prescaler+0x3f2>
				*ptr_u16_prescale=P_1;
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	f8 01       	movw	r30, r16
    25ac:	91 83       	std	Z+1, r25	; 0x01
    25ae:	80 83       	st	Z, r24
    25b0:	4d c2       	rjmp	.+1178   	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
    25b2:	2f e6       	ldi	r18, 0x6F	; 111
    25b4:	32 e1       	ldi	r19, 0x12	; 18
    25b6:	43 e8       	ldi	r20, 0x83	; 131
    25b8:	52 e4       	ldi	r21, 0x42	; 66
    25ba:	c7 01       	movw	r24, r14
    25bc:	b6 01       	movw	r22, r12
    25be:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    25c2:	18 16       	cp	r1, r24
    25c4:	3c f0       	brlt	.+14     	; 0x25d4 <calc_prescaler+0x414>
				*ptr_u16_prescale=P_8;
    25c6:	88 e0       	ldi	r24, 0x08	; 8
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	f8 01       	movw	r30, r16
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	3c c2       	rjmp	.+1144   	; 0x2a4c <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
    25d4:	2f e6       	ldi	r18, 0x6F	; 111
    25d6:	32 e1       	ldi	r19, 0x12	; 18
    25d8:	43 e0       	ldi	r20, 0x03	; 3
    25da:	54 e4       	ldi	r21, 0x44	; 68
    25dc:	c7 01       	movw	r24, r14
    25de:	b6 01       	movw	r22, r12
    25e0:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    25e4:	18 16       	cp	r1, r24
    25e6:	3c f0       	brlt	.+14     	; 0x25f6 <calc_prescaler+0x436>
				*ptr_u16_prescale=P_64;
    25e8:	80 e4       	ldi	r24, 0x40	; 64
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	f8 01       	movw	r30, r16
    25ee:	91 83       	std	Z+1, r25	; 0x01
    25f0:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	2b c2       	rjmp	.+1110   	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
    25f6:	2f e6       	ldi	r18, 0x6F	; 111
    25f8:	32 e1       	ldi	r19, 0x12	; 18
    25fa:	43 e0       	ldi	r20, 0x03	; 3
    25fc:	55 e4       	ldi	r21, 0x45	; 69
    25fe:	c7 01       	movw	r24, r14
    2600:	b6 01       	movw	r22, r12
    2602:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2606:	18 16       	cp	r1, r24
    2608:	3c f0       	brlt	.+14     	; 0x2618 <calc_prescaler+0x458>
				*ptr_u16_prescale=P_256;
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	91 e0       	ldi	r25, 0x01	; 1
    260e:	f8 01       	movw	r30, r16
    2610:	91 83       	std	Z+1, r25	; 0x01
    2612:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	1a c2       	rjmp	.+1076   	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024))
    2618:	2f e6       	ldi	r18, 0x6F	; 111
    261a:	32 e1       	ldi	r19, 0x12	; 18
    261c:	43 e0       	ldi	r20, 0x03	; 3
    261e:	56 e4       	ldi	r21, 0x46	; 70
    2620:	c7 01       	movw	r24, r14
    2622:	b6 01       	movw	r22, r12
    2624:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2628:	18 16       	cp	r1, r24
    262a:	3c f0       	brlt	.+14     	; 0x263a <calc_prescaler+0x47a>
				*ptr_u16_prescale=P_1024;
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	94 e0       	ldi	r25, 0x04	; 4
    2630:	f8 01       	movw	r30, r16
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	09 c2       	rjmp	.+1042   	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale= P_0;
    263a:	f8 01       	movw	r30, r16
    263c:	11 82       	std	Z+1, r1	; 0x01
    263e:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	04 c2       	rjmp	.+1032   	; 0x2a4c <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale= P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    2644:	8c ed       	ldi	r24, 0xDC	; 220
    2646:	95 e0       	ldi	r25, 0x05	; 5
    2648:	f8 01       	movw	r30, r16
    264a:	91 83       	std	Z+1, r25	; 0x01
    264c:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	fd c1       	rjmp	.+1018   	; 0x2a4c <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    2652:	42 30       	cpi	r20, 0x02	; 2
    2654:	09 f0       	breq	.+2      	; 0x2658 <calc_prescaler+0x498>
    2656:	f5 c1       	rjmp	.+1002   	; 0x2a42 <calc_prescaler+0x882>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024) )
    2658:	2f e6       	ldi	r18, 0x6F	; 111
    265a:	32 e1       	ldi	r19, 0x12	; 18
    265c:	43 e0       	ldi	r20, 0x03	; 3
    265e:	52 e4       	ldi	r21, 0x42	; 66
    2660:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2664:	18 16       	cp	r1, r24
    2666:	0c f4       	brge	.+2      	; 0x266a <calc_prescaler+0x4aa>
    2668:	7b c0       	rjmp	.+246    	; 0x2760 <calc_prescaler+0x5a0>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
    266a:	2f e6       	ldi	r18, 0x6F	; 111
    266c:	32 e1       	ldi	r19, 0x12	; 18
    266e:	43 e0       	ldi	r20, 0x03	; 3
    2670:	5d e3       	ldi	r21, 0x3D	; 61
    2672:	c7 01       	movw	r24, r14
    2674:	b6 01       	movw	r22, r12
    2676:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    267a:	18 16       	cp	r1, r24
    267c:	34 f0       	brlt	.+12     	; 0x268a <calc_prescaler+0x4ca>
				*ptr_u16_prescale=P_1;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	f8 01       	movw	r30, r16
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	80 83       	st	Z, r24
    2688:	e1 c1       	rjmp	.+962    	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
    268a:	2f e6       	ldi	r18, 0x6F	; 111
    268c:	32 e1       	ldi	r19, 0x12	; 18
    268e:	43 e8       	ldi	r20, 0x83	; 131
    2690:	5e e3       	ldi	r21, 0x3E	; 62
    2692:	c7 01       	movw	r24, r14
    2694:	b6 01       	movw	r22, r12
    2696:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    269a:	18 16       	cp	r1, r24
    269c:	3c f0       	brlt	.+14     	; 0x26ac <calc_prescaler+0x4ec>
				*ptr_u16_prescale=P_8;
    269e:	88 e0       	ldi	r24, 0x08	; 8
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	f8 01       	movw	r30, r16
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	d0 c1       	rjmp	.+928    	; 0x2a4c <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
    26ac:	2f e6       	ldi	r18, 0x6F	; 111
    26ae:	32 e1       	ldi	r19, 0x12	; 18
    26b0:	43 e8       	ldi	r20, 0x83	; 131
    26b2:	5f e3       	ldi	r21, 0x3F	; 63
    26b4:	c7 01       	movw	r24, r14
    26b6:	b6 01       	movw	r22, r12
    26b8:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    26bc:	18 16       	cp	r1, r24
    26be:	3c f0       	brlt	.+14     	; 0x26ce <calc_prescaler+0x50e>
				*ptr_u16_prescale=P_32;
    26c0:	80 e2       	ldi	r24, 0x20	; 32
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	f8 01       	movw	r30, r16
    26c6:	91 83       	std	Z+1, r25	; 0x01
    26c8:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	bf c1       	rjmp	.+894    	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
    26ce:	2f e6       	ldi	r18, 0x6F	; 111
    26d0:	32 e1       	ldi	r19, 0x12	; 18
    26d2:	43 e0       	ldi	r20, 0x03	; 3
    26d4:	50 e4       	ldi	r21, 0x40	; 64
    26d6:	c7 01       	movw	r24, r14
    26d8:	b6 01       	movw	r22, r12
    26da:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    26de:	18 16       	cp	r1, r24
    26e0:	3c f0       	brlt	.+14     	; 0x26f0 <calc_prescaler+0x530>
				*ptr_u16_prescale=P_64;
    26e2:	80 e4       	ldi	r24, 0x40	; 64
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	f8 01       	movw	r30, r16
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	ae c1       	rjmp	.+860    	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
    26f0:	2f e6       	ldi	r18, 0x6F	; 111
    26f2:	32 e1       	ldi	r19, 0x12	; 18
    26f4:	43 e8       	ldi	r20, 0x83	; 131
    26f6:	50 e4       	ldi	r21, 0x40	; 64
    26f8:	c7 01       	movw	r24, r14
    26fa:	b6 01       	movw	r22, r12
    26fc:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2700:	18 16       	cp	r1, r24
    2702:	3c f0       	brlt	.+14     	; 0x2712 <calc_prescaler+0x552>
				*ptr_u16_prescale=P_128;
    2704:	80 e8       	ldi	r24, 0x80	; 128
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	f8 01       	movw	r30, r16
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	9d c1       	rjmp	.+826    	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
    2712:	2f e6       	ldi	r18, 0x6F	; 111
    2714:	32 e1       	ldi	r19, 0x12	; 18
    2716:	43 e0       	ldi	r20, 0x03	; 3
    2718:	51 e4       	ldi	r21, 0x41	; 65
    271a:	c7 01       	movw	r24, r14
    271c:	b6 01       	movw	r22, r12
    271e:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2722:	18 16       	cp	r1, r24
    2724:	3c f0       	brlt	.+14     	; 0x2734 <calc_prescaler+0x574>
				*ptr_u16_prescale=P_256;
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	91 e0       	ldi	r25, 0x01	; 1
    272a:	f8 01       	movw	r30, r16
    272c:	91 83       	std	Z+1, r25	; 0x01
    272e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	8c c1       	rjmp	.+792    	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_MS(P_1024))
    2734:	2f e6       	ldi	r18, 0x6F	; 111
    2736:	32 e1       	ldi	r19, 0x12	; 18
    2738:	43 e0       	ldi	r20, 0x03	; 3
    273a:	52 e4       	ldi	r21, 0x42	; 66
    273c:	c7 01       	movw	r24, r14
    273e:	b6 01       	movw	r22, r12
    2740:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2744:	18 16       	cp	r1, r24
    2746:	3c f0       	brlt	.+14     	; 0x2756 <calc_prescaler+0x596>
				*ptr_u16_prescale=P_1024;
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	94 e0       	ldi	r25, 0x04	; 4
    274c:	f8 01       	movw	r30, r16
    274e:	91 83       	std	Z+1, r25	; 0x01
    2750:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	7b c1       	rjmp	.+758    	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    2756:	f8 01       	movw	r30, r16
    2758:	11 82       	std	Z+1, r1	; 0x01
    275a:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	76 c1       	rjmp	.+748    	; 0x2a4c <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    2760:	8c ed       	ldi	r24, 0xDC	; 220
    2762:	95 e0       	ldi	r25, 0x05	; 5
    2764:	f8 01       	movw	r30, r16
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	6f c1       	rjmp	.+734    	; 0x2a4c <calc_prescaler+0x88c>
		{
			bo_return_value = FALSE;
			// do nothing
		}
	}
	else if (enu_time_unit == ENU_SECOND)
    276e:	22 30       	cpi	r18, 0x02	; 2
    2770:	09 f0       	breq	.+2      	; 0x2774 <calc_prescaler+0x5b4>
    2772:	69 c1       	rjmp	.+722    	; 0x2a46 <calc_prescaler+0x886>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    2774:	41 11       	cpse	r20, r1
    2776:	69 c0       	rjmp	.+210    	; 0x284a <calc_prescaler+0x68a>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024) )
    2778:	2d eb       	ldi	r18, 0xBD	; 189
    277a:	37 e3       	ldi	r19, 0x37	; 55
    277c:	46 e0       	ldi	r20, 0x06	; 6
    277e:	5d e3       	ldi	r21, 0x3D	; 61
    2780:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2784:	18 16       	cp	r1, r24
    2786:	0c f4       	brge	.+2      	; 0x278a <calc_prescaler+0x5ca>
    2788:	59 c0       	rjmp	.+178    	; 0x283c <calc_prescaler+0x67c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
    278a:	2d eb       	ldi	r18, 0xBD	; 189
    278c:	37 e3       	ldi	r19, 0x37	; 55
    278e:	46 e0       	ldi	r20, 0x06	; 6
    2790:	58 e3       	ldi	r21, 0x38	; 56
    2792:	c7 01       	movw	r24, r14
    2794:	b6 01       	movw	r22, r12
    2796:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    279a:	18 16       	cp	r1, r24
    279c:	34 f0       	brlt	.+12     	; 0x27aa <calc_prescaler+0x5ea>
				*ptr_u16_prescale=P_1;
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	f8 01       	movw	r30, r16
    27a4:	91 83       	std	Z+1, r25	; 0x01
    27a6:	80 83       	st	Z, r24
    27a8:	51 c1       	rjmp	.+674    	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
    27aa:	2d eb       	ldi	r18, 0xBD	; 189
    27ac:	37 e3       	ldi	r19, 0x37	; 55
    27ae:	46 e8       	ldi	r20, 0x86	; 134
    27b0:	59 e3       	ldi	r21, 0x39	; 57
    27b2:	c7 01       	movw	r24, r14
    27b4:	b6 01       	movw	r22, r12
    27b6:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    27ba:	18 16       	cp	r1, r24
    27bc:	3c f0       	brlt	.+14     	; 0x27cc <calc_prescaler+0x60c>
				*ptr_u16_prescale=P_8;
    27be:	88 e0       	ldi	r24, 0x08	; 8
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	f8 01       	movw	r30, r16
    27c4:	91 83       	std	Z+1, r25	; 0x01
    27c6:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	40 c1       	rjmp	.+640    	; 0x2a4c <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
    27cc:	2d eb       	ldi	r18, 0xBD	; 189
    27ce:	37 e3       	ldi	r19, 0x37	; 55
    27d0:	46 e0       	ldi	r20, 0x06	; 6
    27d2:	5b e3       	ldi	r21, 0x3B	; 59
    27d4:	c7 01       	movw	r24, r14
    27d6:	b6 01       	movw	r22, r12
    27d8:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    27dc:	18 16       	cp	r1, r24
    27de:	3c f0       	brlt	.+14     	; 0x27ee <calc_prescaler+0x62e>
				*ptr_u16_prescale=P_64;
    27e0:	80 e4       	ldi	r24, 0x40	; 64
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	f8 01       	movw	r30, r16
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	2f c1       	rjmp	.+606    	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
    27ee:	2d eb       	ldi	r18, 0xBD	; 189
    27f0:	37 e3       	ldi	r19, 0x37	; 55
    27f2:	46 e0       	ldi	r20, 0x06	; 6
    27f4:	5c e3       	ldi	r21, 0x3C	; 60
    27f6:	c7 01       	movw	r24, r14
    27f8:	b6 01       	movw	r22, r12
    27fa:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    27fe:	18 16       	cp	r1, r24
    2800:	3c f0       	brlt	.+14     	; 0x2810 <calc_prescaler+0x650>
				*ptr_u16_prescale=P_256;
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	91 e0       	ldi	r25, 0x01	; 1
    2806:	f8 01       	movw	r30, r16
    2808:	91 83       	std	Z+1, r25	; 0x01
    280a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	1e c1       	rjmp	.+572    	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024))
    2810:	2d eb       	ldi	r18, 0xBD	; 189
    2812:	37 e3       	ldi	r19, 0x37	; 55
    2814:	46 e0       	ldi	r20, 0x06	; 6
    2816:	5d e3       	ldi	r21, 0x3D	; 61
    2818:	c7 01       	movw	r24, r14
    281a:	b6 01       	movw	r22, r12
    281c:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2820:	18 16       	cp	r1, r24
    2822:	3c f0       	brlt	.+14     	; 0x2832 <calc_prescaler+0x672>
				*ptr_u16_prescale=P_1024;
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	94 e0       	ldi	r25, 0x04	; 4
    2828:	f8 01       	movw	r30, r16
    282a:	91 83       	std	Z+1, r25	; 0x01
    282c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	0d c1       	rjmp	.+538    	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    2832:	f8 01       	movw	r30, r16
    2834:	11 82       	std	Z+1, r1	; 0x01
    2836:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	08 c1       	rjmp	.+528    	; 0x2a4c <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    283c:	8c ed       	ldi	r24, 0xDC	; 220
    283e:	95 e0       	ldi	r25, 0x05	; 5
    2840:	f8 01       	movw	r30, r16
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	01 c1       	rjmp	.+514    	; 0x2a4c <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    284a:	41 30       	cpi	r20, 0x01	; 1
    284c:	09 f0       	breq	.+2      	; 0x2850 <calc_prescaler+0x690>
    284e:	69 c0       	rjmp	.+210    	; 0x2922 <calc_prescaler+0x762>
		{
			if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024) )
    2850:	2d eb       	ldi	r18, 0xBD	; 189
    2852:	37 e3       	ldi	r19, 0x37	; 55
    2854:	46 e0       	ldi	r20, 0x06	; 6
    2856:	51 e4       	ldi	r21, 0x41	; 65
    2858:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    285c:	18 16       	cp	r1, r24
    285e:	0c f4       	brge	.+2      	; 0x2862 <calc_prescaler+0x6a2>
    2860:	59 c0       	rjmp	.+178    	; 0x2914 <calc_prescaler+0x754>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1))
    2862:	2d eb       	ldi	r18, 0xBD	; 189
    2864:	37 e3       	ldi	r19, 0x37	; 55
    2866:	46 e0       	ldi	r20, 0x06	; 6
    2868:	5c e3       	ldi	r21, 0x3C	; 60
    286a:	c7 01       	movw	r24, r14
    286c:	b6 01       	movw	r22, r12
    286e:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2872:	18 16       	cp	r1, r24
    2874:	34 f0       	brlt	.+12     	; 0x2882 <calc_prescaler+0x6c2>
				*ptr_u16_prescale=P_1;
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	f8 01       	movw	r30, r16
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	80 83       	st	Z, r24
    2880:	e5 c0       	rjmp	.+458    	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
    2882:	2d eb       	ldi	r18, 0xBD	; 189
    2884:	37 e3       	ldi	r19, 0x37	; 55
    2886:	46 e8       	ldi	r20, 0x86	; 134
    2888:	5d e3       	ldi	r21, 0x3D	; 61
    288a:	c7 01       	movw	r24, r14
    288c:	b6 01       	movw	r22, r12
    288e:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2892:	18 16       	cp	r1, r24
    2894:	3c f0       	brlt	.+14     	; 0x28a4 <calc_prescaler+0x6e4>
				*ptr_u16_prescale=P_8;
    2896:	88 e0       	ldi	r24, 0x08	; 8
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	f8 01       	movw	r30, r16
    289c:	91 83       	std	Z+1, r25	; 0x01
    289e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	d4 c0       	rjmp	.+424    	; 0x2a4c <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
    28a4:	2d eb       	ldi	r18, 0xBD	; 189
    28a6:	37 e3       	ldi	r19, 0x37	; 55
    28a8:	46 e0       	ldi	r20, 0x06	; 6
    28aa:	5f e3       	ldi	r21, 0x3F	; 63
    28ac:	c7 01       	movw	r24, r14
    28ae:	b6 01       	movw	r22, r12
    28b0:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    28b4:	18 16       	cp	r1, r24
    28b6:	3c f0       	brlt	.+14     	; 0x28c6 <calc_prescaler+0x706>
				*ptr_u16_prescale=P_64;
    28b8:	80 e4       	ldi	r24, 0x40	; 64
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	f8 01       	movw	r30, r16
    28be:	91 83       	std	Z+1, r25	; 0x01
    28c0:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	c3 c0       	rjmp	.+390    	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
    28c6:	2d eb       	ldi	r18, 0xBD	; 189
    28c8:	37 e3       	ldi	r19, 0x37	; 55
    28ca:	46 e0       	ldi	r20, 0x06	; 6
    28cc:	50 e4       	ldi	r21, 0x40	; 64
    28ce:	c7 01       	movw	r24, r14
    28d0:	b6 01       	movw	r22, r12
    28d2:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    28d6:	18 16       	cp	r1, r24
    28d8:	3c f0       	brlt	.+14     	; 0x28e8 <calc_prescaler+0x728>
				*ptr_u16_prescale=P_256;
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	91 e0       	ldi	r25, 0x01	; 1
    28de:	f8 01       	movw	r30, r16
    28e0:	91 83       	std	Z+1, r25	; 0x01
    28e2:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	b2 c0       	rjmp	.+356    	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024))
    28e8:	2d eb       	ldi	r18, 0xBD	; 189
    28ea:	37 e3       	ldi	r19, 0x37	; 55
    28ec:	46 e0       	ldi	r20, 0x06	; 6
    28ee:	51 e4       	ldi	r21, 0x41	; 65
    28f0:	c7 01       	movw	r24, r14
    28f2:	b6 01       	movw	r22, r12
    28f4:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    28f8:	18 16       	cp	r1, r24
    28fa:	3c f0       	brlt	.+14     	; 0x290a <calc_prescaler+0x74a>
				*ptr_u16_prescale=P_1024;
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	94 e0       	ldi	r25, 0x04	; 4
    2900:	f8 01       	movw	r30, r16
    2902:	91 83       	std	Z+1, r25	; 0x01
    2904:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	a1 c0       	rjmp	.+322    	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    290a:	f8 01       	movw	r30, r16
    290c:	11 82       	std	Z+1, r1	; 0x01
    290e:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	9c c0       	rjmp	.+312    	; 0x2a4c <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    2914:	8c ed       	ldi	r24, 0xDC	; 220
    2916:	95 e0       	ldi	r25, 0x05	; 5
    2918:	f8 01       	movw	r30, r16
    291a:	91 83       	std	Z+1, r25	; 0x01
    291c:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	95 c0       	rjmp	.+298    	; 0x2a4c <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    2922:	42 30       	cpi	r20, 0x02	; 2
    2924:	09 f0       	breq	.+2      	; 0x2928 <calc_prescaler+0x768>
    2926:	91 c0       	rjmp	.+290    	; 0x2a4a <calc_prescaler+0x88a>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024) )
    2928:	2d eb       	ldi	r18, 0xBD	; 189
    292a:	37 e3       	ldi	r19, 0x37	; 55
    292c:	46 e0       	ldi	r20, 0x06	; 6
    292e:	5d e3       	ldi	r21, 0x3D	; 61
    2930:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2934:	18 16       	cp	r1, r24
    2936:	0c f4       	brge	.+2      	; 0x293a <calc_prescaler+0x77a>
    2938:	7b c0       	rjmp	.+246    	; 0x2a30 <calc_prescaler+0x870>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
    293a:	2d eb       	ldi	r18, 0xBD	; 189
    293c:	37 e3       	ldi	r19, 0x37	; 55
    293e:	46 e0       	ldi	r20, 0x06	; 6
    2940:	58 e3       	ldi	r21, 0x38	; 56
    2942:	c7 01       	movw	r24, r14
    2944:	b6 01       	movw	r22, r12
    2946:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    294a:	18 16       	cp	r1, r24
    294c:	34 f0       	brlt	.+12     	; 0x295a <calc_prescaler+0x79a>
				*ptr_u16_prescale=P_1;
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	f8 01       	movw	r30, r16
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	80 83       	st	Z, r24
    2958:	79 c0       	rjmp	.+242    	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
    295a:	2d eb       	ldi	r18, 0xBD	; 189
    295c:	37 e3       	ldi	r19, 0x37	; 55
    295e:	46 e8       	ldi	r20, 0x86	; 134
    2960:	59 e3       	ldi	r21, 0x39	; 57
    2962:	c7 01       	movw	r24, r14
    2964:	b6 01       	movw	r22, r12
    2966:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    296a:	18 16       	cp	r1, r24
    296c:	3c f0       	brlt	.+14     	; 0x297c <calc_prescaler+0x7bc>
				*ptr_u16_prescale=P_8;
    296e:	88 e0       	ldi	r24, 0x08	; 8
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	f8 01       	movw	r30, r16
    2974:	91 83       	std	Z+1, r25	; 0x01
    2976:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	68 c0       	rjmp	.+208    	; 0x2a4c <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
    297c:	2d eb       	ldi	r18, 0xBD	; 189
    297e:	37 e3       	ldi	r19, 0x37	; 55
    2980:	46 e8       	ldi	r20, 0x86	; 134
    2982:	5a e3       	ldi	r21, 0x3A	; 58
    2984:	c7 01       	movw	r24, r14
    2986:	b6 01       	movw	r22, r12
    2988:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    298c:	18 16       	cp	r1, r24
    298e:	3c f0       	brlt	.+14     	; 0x299e <calc_prescaler+0x7de>
				*ptr_u16_prescale=P_32;
    2990:	80 e2       	ldi	r24, 0x20	; 32
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	f8 01       	movw	r30, r16
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	57 c0       	rjmp	.+174    	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
    299e:	2d eb       	ldi	r18, 0xBD	; 189
    29a0:	37 e3       	ldi	r19, 0x37	; 55
    29a2:	46 e0       	ldi	r20, 0x06	; 6
    29a4:	5b e3       	ldi	r21, 0x3B	; 59
    29a6:	c7 01       	movw	r24, r14
    29a8:	b6 01       	movw	r22, r12
    29aa:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    29ae:	18 16       	cp	r1, r24
    29b0:	3c f0       	brlt	.+14     	; 0x29c0 <calc_prescaler+0x800>
				*ptr_u16_prescale=P_64;
    29b2:	80 e4       	ldi	r24, 0x40	; 64
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	f8 01       	movw	r30, r16
    29b8:	91 83       	std	Z+1, r25	; 0x01
    29ba:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	46 c0       	rjmp	.+140    	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
    29c0:	2d eb       	ldi	r18, 0xBD	; 189
    29c2:	37 e3       	ldi	r19, 0x37	; 55
    29c4:	46 e8       	ldi	r20, 0x86	; 134
    29c6:	5b e3       	ldi	r21, 0x3B	; 59
    29c8:	c7 01       	movw	r24, r14
    29ca:	b6 01       	movw	r22, r12
    29cc:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    29d0:	18 16       	cp	r1, r24
    29d2:	3c f0       	brlt	.+14     	; 0x29e2 <calc_prescaler+0x822>
				*ptr_u16_prescale=P_128;
    29d4:	80 e8       	ldi	r24, 0x80	; 128
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	f8 01       	movw	r30, r16
    29da:	91 83       	std	Z+1, r25	; 0x01
    29dc:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	35 c0       	rjmp	.+106    	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
    29e2:	2d eb       	ldi	r18, 0xBD	; 189
    29e4:	37 e3       	ldi	r19, 0x37	; 55
    29e6:	46 e0       	ldi	r20, 0x06	; 6
    29e8:	5c e3       	ldi	r21, 0x3C	; 60
    29ea:	c7 01       	movw	r24, r14
    29ec:	b6 01       	movw	r22, r12
    29ee:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    29f2:	18 16       	cp	r1, r24
    29f4:	3c f0       	brlt	.+14     	; 0x2a04 <calc_prescaler+0x844>
				*ptr_u16_prescale=P_256;
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	91 e0       	ldi	r25, 0x01	; 1
    29fa:	f8 01       	movw	r30, r16
    29fc:	91 83       	std	Z+1, r25	; 0x01
    29fe:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	24 c0       	rjmp	.+72     	; 0x2a4c <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_SEC(P_1024))
    2a04:	2d eb       	ldi	r18, 0xBD	; 189
    2a06:	37 e3       	ldi	r19, 0x37	; 55
    2a08:	46 e0       	ldi	r20, 0x06	; 6
    2a0a:	5d e3       	ldi	r21, 0x3D	; 61
    2a0c:	c7 01       	movw	r24, r14
    2a0e:	b6 01       	movw	r22, r12
    2a10:	0e 94 ed 1a 	call	0x35da	; 0x35da <__cmpsf2>
    2a14:	18 16       	cp	r1, r24
    2a16:	3c f0       	brlt	.+14     	; 0x2a26 <calc_prescaler+0x866>
				*ptr_u16_prescale=P_1024;
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	94 e0       	ldi	r25, 0x04	; 4
    2a1c:	f8 01       	movw	r30, r16
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	13 c0       	rjmp	.+38     	; 0x2a4c <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    2a26:	f8 01       	movw	r30, r16
    2a28:	11 82       	std	Z+1, r1	; 0x01
    2a2a:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	0e c0       	rjmp	.+28     	; 0x2a4c <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    2a30:	8c ed       	ldi	r24, 0xDC	; 220
    2a32:	95 e0       	ldi	r25, 0x05	; 5
    2a34:	f8 01       	movw	r30, r16
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	07 c0       	rjmp	.+14     	; 0x2a4c <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	05 c0       	rjmp	.+10     	; 0x2a4c <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	03 c0       	rjmp	.+6      	; 0x2a4c <calc_prescaler+0x88c>
			// do nothing
		}
	}
	else
	{
		bo_return_value = FALSE;
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	01 c0       	rjmp	.+2      	; 0x2a4c <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		bo_return_value = FALSE;
	}
	return bo_return_value;
}
    2a4c:	1f 91       	pop	r17
    2a4e:	0f 91       	pop	r16
    2a50:	ff 90       	pop	r15
    2a52:	ef 90       	pop	r14
    2a54:	df 90       	pop	r13
    2a56:	cf 90       	pop	r12
    2a58:	08 95       	ret

00002a5a <calc_initialValue>:

/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
    2a5a:	ef 92       	push	r14
    2a5c:	ff 92       	push	r15
    2a5e:	0f 93       	push	r16
    2a60:	1f 93       	push	r17
	BOOLEAN bo_return_value = TRUE;
	if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    2a62:	81 11       	cpse	r24, r1
    2a64:	8a c1       	rjmp	.+788    	; 0x2d7a <calc_initialValue+0x320>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    2a66:	61 11       	cpse	r22, r1
    2a68:	7c c0       	rjmp	.+248    	; 0x2b62 <calc_initialValue+0x108>
		{
			switch(prescaler)
    2a6a:	40 34       	cpi	r20, 0x40	; 64
    2a6c:	51 05       	cpc	r21, r1
    2a6e:	a9 f1       	breq	.+106    	; 0x2ada <calc_initialValue+0x80>
    2a70:	38 f4       	brcc	.+14     	; 0x2a80 <calc_initialValue+0x26>
    2a72:	41 30       	cpi	r20, 0x01	; 1
    2a74:	51 05       	cpc	r21, r1
    2a76:	69 f0       	breq	.+26     	; 0x2a92 <calc_initialValue+0x38>
    2a78:	48 30       	cpi	r20, 0x08	; 8
    2a7a:	51 05       	cpc	r21, r1
    2a7c:	f9 f0       	breq	.+62     	; 0x2abc <calc_initialValue+0x62>
    2a7e:	6c c0       	rjmp	.+216    	; 0x2b58 <calc_initialValue+0xfe>
    2a80:	41 15       	cp	r20, r1
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	58 07       	cpc	r21, r24
    2a86:	f1 f1       	breq	.+124    	; 0x2b04 <calc_initialValue+0xaa>
    2a88:	41 15       	cp	r20, r1
    2a8a:	54 40       	sbci	r21, 0x04	; 4
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <calc_initialValue+0x36>
    2a8e:	4f c0       	rjmp	.+158    	; 0x2b2e <calc_initialValue+0xd4>
    2a90:	63 c0       	rjmp	.+198    	; 0x2b58 <calc_initialValue+0xfe>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    2a92:	a9 01       	movw	r20, r18
    2a94:	98 01       	movw	r18, r16
    2a96:	60 e0       	ldi	r22, 0x00	; 0
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	92 e4       	ldi	r25, 0x42	; 66
    2a9e:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e0       	ldi	r20, 0x00	; 0
    2aa8:	51 e4       	ldi	r21, 0x41	; 65
    2aaa:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    2aae:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2ab2:	f7 01       	movw	r30, r14
    2ab4:	71 83       	std	Z+1, r23	; 0x01
    2ab6:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    2aba:	1d c5       	rjmp	.+2618   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    2abc:	a9 01       	movw	r20, r18
    2abe:	98 01       	movw	r18, r16
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	70 e0       	ldi	r23, 0x00	; 0
    2ac4:	80 e8       	ldi	r24, 0x80	; 128
    2ac6:	93 e4       	ldi	r25, 0x43	; 67
    2ac8:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2acc:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2ad0:	f7 01       	movw	r30, r14
    2ad2:	71 83       	std	Z+1, r23	; 0x01
    2ad4:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    2ad8:	0e c5       	rjmp	.+2588   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    2ada:	a9 01       	movw	r20, r18
    2adc:	98 01       	movw	r18, r16
    2ade:	60 e0       	ldi	r22, 0x00	; 0
    2ae0:	70 e0       	ldi	r23, 0x00	; 0
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	95 e4       	ldi	r25, 0x45	; 69
    2ae6:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e0       	ldi	r20, 0x00	; 0
    2af0:	5e e3       	ldi	r21, 0x3E	; 62
    2af2:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    2af6:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2afa:	f7 01       	movw	r30, r14
    2afc:	71 83       	std	Z+1, r23	; 0x01
    2afe:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2b00:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    2b02:	f9 c4       	rjmp	.+2546   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    2b04:	a9 01       	movw	r20, r18
    2b06:	98 01       	movw	r18, r16
    2b08:	60 e0       	ldi	r22, 0x00	; 0
    2b0a:	70 e0       	ldi	r23, 0x00	; 0
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	96 e4       	ldi	r25, 0x46	; 70
    2b10:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	5d e3       	ldi	r21, 0x3D	; 61
    2b1c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    2b20:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2b24:	f7 01       	movw	r30, r14
    2b26:	71 83       	std	Z+1, r23	; 0x01
    2b28:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    2b2c:	e4 c4       	rjmp	.+2504   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    2b2e:	a9 01       	movw	r20, r18
    2b30:	98 01       	movw	r18, r16
    2b32:	60 e0       	ldi	r22, 0x00	; 0
    2b34:	70 e0       	ldi	r23, 0x00	; 0
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	97 e4       	ldi	r25, 0x47	; 71
    2b3a:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	5c e3       	ldi	r21, 0x3C	; 60
    2b46:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    2b4a:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2b4e:	f7 01       	movw	r30, r14
    2b50:	71 83       	std	Z+1, r23	; 0x01
    2b52:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    2b56:	cf c4       	rjmp	.+2462   	; 0x34f6 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2b58:	f7 01       	movw	r30, r14
    2b5a:	11 82       	std	Z+1, r1	; 0x01
    2b5c:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2b60:	ca c4       	rjmp	.+2452   	; 0x34f6 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    2b62:	61 30       	cpi	r22, 0x01	; 1
    2b64:	09 f0       	breq	.+2      	; 0x2b68 <calc_initialValue+0x10e>
    2b66:	83 c0       	rjmp	.+262    	; 0x2c6e <calc_initialValue+0x214>
		{
			switch(prescaler)
    2b68:	40 34       	cpi	r20, 0x40	; 64
    2b6a:	51 05       	cpc	r21, r1
    2b6c:	e1 f1       	breq	.+120    	; 0x2be6 <calc_initialValue+0x18c>
    2b6e:	38 f4       	brcc	.+14     	; 0x2b7e <calc_initialValue+0x124>
    2b70:	41 30       	cpi	r20, 0x01	; 1
    2b72:	51 05       	cpc	r21, r1
    2b74:	71 f0       	breq	.+28     	; 0x2b92 <calc_initialValue+0x138>
    2b76:	48 30       	cpi	r20, 0x08	; 8
    2b78:	51 05       	cpc	r21, r1
    2b7a:	01 f1       	breq	.+64     	; 0x2bbc <calc_initialValue+0x162>
    2b7c:	73 c0       	rjmp	.+230    	; 0x2c64 <calc_initialValue+0x20a>
    2b7e:	41 15       	cp	r20, r1
    2b80:	f1 e0       	ldi	r31, 0x01	; 1
    2b82:	5f 07       	cpc	r21, r31
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <calc_initialValue+0x12e>
    2b86:	44 c0       	rjmp	.+136    	; 0x2c10 <calc_initialValue+0x1b6>
    2b88:	41 15       	cp	r20, r1
    2b8a:	54 40       	sbci	r21, 0x04	; 4
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <calc_initialValue+0x136>
    2b8e:	55 c0       	rjmp	.+170    	; 0x2c3a <calc_initialValue+0x1e0>
    2b90:	69 c0       	rjmp	.+210    	; 0x2c64 <calc_initialValue+0x20a>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    2b92:	a9 01       	movw	r20, r18
    2b94:	98 01       	movw	r18, r16
    2b96:	6f e6       	ldi	r22, 0x6F	; 111
    2b98:	72 e1       	ldi	r23, 0x12	; 18
    2b9a:	83 e0       	ldi	r24, 0x03	; 3
    2b9c:	9d e3       	ldi	r25, 0x3D	; 61
    2b9e:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2ba2:	2f e6       	ldi	r18, 0x6F	; 111
    2ba4:	32 e1       	ldi	r19, 0x12	; 18
    2ba6:	43 e0       	ldi	r20, 0x03	; 3
    2ba8:	59 e3       	ldi	r21, 0x39	; 57
    2baa:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2bae:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2bb2:	f7 01       	movw	r30, r14
    2bb4:	71 83       	std	Z+1, r23	; 0x01
    2bb6:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    2bba:	9d c4       	rjmp	.+2362   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    2bbc:	a9 01       	movw	r20, r18
    2bbe:	98 01       	movw	r18, r16
    2bc0:	6f e6       	ldi	r22, 0x6F	; 111
    2bc2:	72 e1       	ldi	r23, 0x12	; 18
    2bc4:	83 e8       	ldi	r24, 0x83	; 131
    2bc6:	9e e3       	ldi	r25, 0x3E	; 62
    2bc8:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2bcc:	2f e6       	ldi	r18, 0x6F	; 111
    2bce:	32 e1       	ldi	r19, 0x12	; 18
    2bd0:	43 e8       	ldi	r20, 0x83	; 131
    2bd2:	5a e3       	ldi	r21, 0x3A	; 58
    2bd4:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2bd8:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2bdc:	f7 01       	movw	r30, r14
    2bde:	71 83       	std	Z+1, r23	; 0x01
    2be0:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2be2:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    2be4:	88 c4       	rjmp	.+2320   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    2be6:	a9 01       	movw	r20, r18
    2be8:	98 01       	movw	r18, r16
    2bea:	6f e6       	ldi	r22, 0x6F	; 111
    2bec:	72 e1       	ldi	r23, 0x12	; 18
    2bee:	83 e0       	ldi	r24, 0x03	; 3
    2bf0:	90 e4       	ldi	r25, 0x40	; 64
    2bf2:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2bf6:	2f e6       	ldi	r18, 0x6F	; 111
    2bf8:	32 e1       	ldi	r19, 0x12	; 18
    2bfa:	43 e0       	ldi	r20, 0x03	; 3
    2bfc:	5c e3       	ldi	r21, 0x3C	; 60
    2bfe:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2c02:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2c06:	f7 01       	movw	r30, r14
    2c08:	71 83       	std	Z+1, r23	; 0x01
    2c0a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    2c0e:	73 c4       	rjmp	.+2278   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    2c10:	a9 01       	movw	r20, r18
    2c12:	98 01       	movw	r18, r16
    2c14:	6f e6       	ldi	r22, 0x6F	; 111
    2c16:	72 e1       	ldi	r23, 0x12	; 18
    2c18:	83 e0       	ldi	r24, 0x03	; 3
    2c1a:	91 e4       	ldi	r25, 0x41	; 65
    2c1c:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2c20:	2f e6       	ldi	r18, 0x6F	; 111
    2c22:	32 e1       	ldi	r19, 0x12	; 18
    2c24:	43 e0       	ldi	r20, 0x03	; 3
    2c26:	5d e3       	ldi	r21, 0x3D	; 61
    2c28:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2c2c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2c30:	f7 01       	movw	r30, r14
    2c32:	71 83       	std	Z+1, r23	; 0x01
    2c34:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    2c38:	5e c4       	rjmp	.+2236   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    2c3a:	a9 01       	movw	r20, r18
    2c3c:	98 01       	movw	r18, r16
    2c3e:	6f e6       	ldi	r22, 0x6F	; 111
    2c40:	72 e1       	ldi	r23, 0x12	; 18
    2c42:	83 e0       	ldi	r24, 0x03	; 3
    2c44:	92 e4       	ldi	r25, 0x42	; 66
    2c46:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2c4a:	2f e6       	ldi	r18, 0x6F	; 111
    2c4c:	32 e1       	ldi	r19, 0x12	; 18
    2c4e:	43 e0       	ldi	r20, 0x03	; 3
    2c50:	5e e3       	ldi	r21, 0x3E	; 62
    2c52:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2c56:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2c5a:	f7 01       	movw	r30, r14
    2c5c:	71 83       	std	Z+1, r23	; 0x01
    2c5e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2c60:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    2c62:	49 c4       	rjmp	.+2194   	; 0x34f6 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2c64:	f7 01       	movw	r30, r14
    2c66:	11 82       	std	Z+1, r1	; 0x01
    2c68:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2c6c:	44 c4       	rjmp	.+2184   	; 0x34f6 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    2c6e:	62 30       	cpi	r22, 0x02	; 2
    2c70:	09 f0       	breq	.+2      	; 0x2c74 <calc_initialValue+0x21a>
    2c72:	3a c4       	rjmp	.+2164   	; 0x34e8 <calc_initialValue+0xa8e>
		{
			switch(prescaler)
    2c74:	40 34       	cpi	r20, 0x40	; 64
    2c76:	51 05       	cpc	r21, r1
    2c78:	e1 f1       	breq	.+120    	; 0x2cf2 <calc_initialValue+0x298>
    2c7a:	38 f4       	brcc	.+14     	; 0x2c8a <calc_initialValue+0x230>
    2c7c:	41 30       	cpi	r20, 0x01	; 1
    2c7e:	51 05       	cpc	r21, r1
    2c80:	71 f0       	breq	.+28     	; 0x2c9e <calc_initialValue+0x244>
    2c82:	48 30       	cpi	r20, 0x08	; 8
    2c84:	51 05       	cpc	r21, r1
    2c86:	01 f1       	breq	.+64     	; 0x2cc8 <calc_initialValue+0x26e>
    2c88:	73 c0       	rjmp	.+230    	; 0x2d70 <calc_initialValue+0x316>
    2c8a:	41 15       	cp	r20, r1
    2c8c:	f1 e0       	ldi	r31, 0x01	; 1
    2c8e:	5f 07       	cpc	r21, r31
    2c90:	09 f4       	brne	.+2      	; 0x2c94 <calc_initialValue+0x23a>
    2c92:	44 c0       	rjmp	.+136    	; 0x2d1c <calc_initialValue+0x2c2>
    2c94:	41 15       	cp	r20, r1
    2c96:	54 40       	sbci	r21, 0x04	; 4
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <calc_initialValue+0x242>
    2c9a:	55 c0       	rjmp	.+170    	; 0x2d46 <calc_initialValue+0x2ec>
    2c9c:	69 c0       	rjmp	.+210    	; 0x2d70 <calc_initialValue+0x316>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    2c9e:	a9 01       	movw	r20, r18
    2ca0:	98 01       	movw	r18, r16
    2ca2:	6d eb       	ldi	r22, 0xBD	; 189
    2ca4:	77 e3       	ldi	r23, 0x37	; 55
    2ca6:	86 e0       	ldi	r24, 0x06	; 6
    2ca8:	98 e3       	ldi	r25, 0x38	; 56
    2caa:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2cae:	2d eb       	ldi	r18, 0xBD	; 189
    2cb0:	37 e3       	ldi	r19, 0x37	; 55
    2cb2:	46 e0       	ldi	r20, 0x06	; 6
    2cb4:	54 e3       	ldi	r21, 0x34	; 52
    2cb6:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2cba:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2cbe:	f7 01       	movw	r30, r14
    2cc0:	71 83       	std	Z+1, r23	; 0x01
    2cc2:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    2cc6:	17 c4       	rjmp	.+2094   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    2cc8:	a9 01       	movw	r20, r18
    2cca:	98 01       	movw	r18, r16
    2ccc:	6d eb       	ldi	r22, 0xBD	; 189
    2cce:	77 e3       	ldi	r23, 0x37	; 55
    2cd0:	86 e8       	ldi	r24, 0x86	; 134
    2cd2:	99 e3       	ldi	r25, 0x39	; 57
    2cd4:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2cd8:	2d eb       	ldi	r18, 0xBD	; 189
    2cda:	37 e3       	ldi	r19, 0x37	; 55
    2cdc:	46 e8       	ldi	r20, 0x86	; 134
    2cde:	55 e3       	ldi	r21, 0x35	; 53
    2ce0:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2ce4:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2ce8:	f7 01       	movw	r30, r14
    2cea:	71 83       	std	Z+1, r23	; 0x01
    2cec:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2cee:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    2cf0:	02 c4       	rjmp	.+2052   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    2cf2:	a9 01       	movw	r20, r18
    2cf4:	98 01       	movw	r18, r16
    2cf6:	6d eb       	ldi	r22, 0xBD	; 189
    2cf8:	77 e3       	ldi	r23, 0x37	; 55
    2cfa:	86 e0       	ldi	r24, 0x06	; 6
    2cfc:	9b e3       	ldi	r25, 0x3B	; 59
    2cfe:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2d02:	2d eb       	ldi	r18, 0xBD	; 189
    2d04:	37 e3       	ldi	r19, 0x37	; 55
    2d06:	46 e0       	ldi	r20, 0x06	; 6
    2d08:	57 e3       	ldi	r21, 0x37	; 55
    2d0a:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2d0e:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2d12:	f7 01       	movw	r30, r14
    2d14:	71 83       	std	Z+1, r23	; 0x01
    2d16:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    2d1a:	ed c3       	rjmp	.+2010   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    2d1c:	a9 01       	movw	r20, r18
    2d1e:	98 01       	movw	r18, r16
    2d20:	6d eb       	ldi	r22, 0xBD	; 189
    2d22:	77 e3       	ldi	r23, 0x37	; 55
    2d24:	86 e0       	ldi	r24, 0x06	; 6
    2d26:	9c e3       	ldi	r25, 0x3C	; 60
    2d28:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2d2c:	2d eb       	ldi	r18, 0xBD	; 189
    2d2e:	37 e3       	ldi	r19, 0x37	; 55
    2d30:	46 e0       	ldi	r20, 0x06	; 6
    2d32:	58 e3       	ldi	r21, 0x38	; 56
    2d34:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2d38:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2d3c:	f7 01       	movw	r30, r14
    2d3e:	71 83       	std	Z+1, r23	; 0x01
    2d40:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2d42:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    2d44:	d8 c3       	rjmp	.+1968   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    2d46:	a9 01       	movw	r20, r18
    2d48:	98 01       	movw	r18, r16
    2d4a:	6d eb       	ldi	r22, 0xBD	; 189
    2d4c:	77 e3       	ldi	r23, 0x37	; 55
    2d4e:	86 e0       	ldi	r24, 0x06	; 6
    2d50:	9d e3       	ldi	r25, 0x3D	; 61
    2d52:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2d56:	2d eb       	ldi	r18, 0xBD	; 189
    2d58:	37 e3       	ldi	r19, 0x37	; 55
    2d5a:	46 e0       	ldi	r20, 0x06	; 6
    2d5c:	59 e3       	ldi	r21, 0x39	; 57
    2d5e:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2d62:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2d66:	f7 01       	movw	r30, r14
    2d68:	71 83       	std	Z+1, r23	; 0x01
    2d6a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    2d6e:	c3 c3       	rjmp	.+1926   	; 0x34f6 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2d70:	f7 01       	movw	r30, r14
    2d72:	11 82       	std	Z+1, r1	; 0x01
    2d74:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2d76:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2d78:	be c3       	rjmp	.+1916   	; 0x34f6 <calc_initialValue+0xa9c>
		else
		{
			// do nothing
		}
	}
	else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    2d7a:	81 30       	cpi	r24, 0x01	; 1
    2d7c:	09 f0       	breq	.+2      	; 0x2d80 <calc_initialValue+0x326>
    2d7e:	8a c1       	rjmp	.+788    	; 0x3094 <calc_initialValue+0x63a>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    2d80:	61 11       	cpse	r22, r1
    2d82:	7c c0       	rjmp	.+248    	; 0x2e7c <calc_initialValue+0x422>
		{
			switch(prescaler)
    2d84:	40 34       	cpi	r20, 0x40	; 64
    2d86:	51 05       	cpc	r21, r1
    2d88:	a9 f1       	breq	.+106    	; 0x2df4 <calc_initialValue+0x39a>
    2d8a:	38 f4       	brcc	.+14     	; 0x2d9a <calc_initialValue+0x340>
    2d8c:	41 30       	cpi	r20, 0x01	; 1
    2d8e:	51 05       	cpc	r21, r1
    2d90:	69 f0       	breq	.+26     	; 0x2dac <calc_initialValue+0x352>
    2d92:	48 30       	cpi	r20, 0x08	; 8
    2d94:	51 05       	cpc	r21, r1
    2d96:	f9 f0       	breq	.+62     	; 0x2dd6 <calc_initialValue+0x37c>
    2d98:	6c c0       	rjmp	.+216    	; 0x2e72 <calc_initialValue+0x418>
    2d9a:	41 15       	cp	r20, r1
    2d9c:	f1 e0       	ldi	r31, 0x01	; 1
    2d9e:	5f 07       	cpc	r21, r31
    2da0:	f1 f1       	breq	.+124    	; 0x2e1e <calc_initialValue+0x3c4>
    2da2:	41 15       	cp	r20, r1
    2da4:	54 40       	sbci	r21, 0x04	; 4
    2da6:	09 f4       	brne	.+2      	; 0x2daa <calc_initialValue+0x350>
    2da8:	4f c0       	rjmp	.+158    	; 0x2e48 <calc_initialValue+0x3ee>
    2daa:	63 c0       	rjmp	.+198    	; 0x2e72 <calc_initialValue+0x418>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    2dac:	a9 01       	movw	r20, r18
    2dae:	98 01       	movw	r18, r16
    2db0:	60 e0       	ldi	r22, 0x00	; 0
    2db2:	70 e0       	ldi	r23, 0x00	; 0
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	96 e4       	ldi	r25, 0x46	; 70
    2db8:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e0       	ldi	r20, 0x00	; 0
    2dc2:	51 e4       	ldi	r21, 0x41	; 65
    2dc4:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    2dc8:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2dcc:	f7 01       	movw	r30, r14
    2dce:	71 83       	std	Z+1, r23	; 0x01
    2dd0:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    2dd4:	90 c3       	rjmp	.+1824   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    2dd6:	a9 01       	movw	r20, r18
    2dd8:	98 01       	movw	r18, r16
    2dda:	60 e0       	ldi	r22, 0x00	; 0
    2ddc:	70 e0       	ldi	r23, 0x00	; 0
    2dde:	80 e8       	ldi	r24, 0x80	; 128
    2de0:	97 e4       	ldi	r25, 0x47	; 71
    2de2:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2de6:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2dea:	f7 01       	movw	r30, r14
    2dec:	71 83       	std	Z+1, r23	; 0x01
    2dee:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2df0:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    2df2:	81 c3       	rjmp	.+1794   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    2df4:	a9 01       	movw	r20, r18
    2df6:	98 01       	movw	r18, r16
    2df8:	60 e0       	ldi	r22, 0x00	; 0
    2dfa:	70 e0       	ldi	r23, 0x00	; 0
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	99 e4       	ldi	r25, 0x49	; 73
    2e00:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	40 e0       	ldi	r20, 0x00	; 0
    2e0a:	5e e3       	ldi	r21, 0x3E	; 62
    2e0c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    2e10:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2e14:	f7 01       	movw	r30, r14
    2e16:	71 83       	std	Z+1, r23	; 0x01
    2e18:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    2e1c:	6c c3       	rjmp	.+1752   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    2e1e:	a9 01       	movw	r20, r18
    2e20:	98 01       	movw	r18, r16
    2e22:	60 e0       	ldi	r22, 0x00	; 0
    2e24:	70 e0       	ldi	r23, 0x00	; 0
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	9a e4       	ldi	r25, 0x4A	; 74
    2e2a:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	5d e3       	ldi	r21, 0x3D	; 61
    2e36:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    2e3a:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2e3e:	f7 01       	movw	r30, r14
    2e40:	71 83       	std	Z+1, r23	; 0x01
    2e42:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2e44:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    2e46:	57 c3       	rjmp	.+1710   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    2e48:	a9 01       	movw	r20, r18
    2e4a:	98 01       	movw	r18, r16
    2e4c:	60 e0       	ldi	r22, 0x00	; 0
    2e4e:	70 e0       	ldi	r23, 0x00	; 0
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	9b e4       	ldi	r25, 0x4B	; 75
    2e54:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	5c e3       	ldi	r21, 0x3C	; 60
    2e60:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    2e64:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2e68:	f7 01       	movw	r30, r14
    2e6a:	71 83       	std	Z+1, r23	; 0x01
    2e6c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2e6e:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    2e70:	42 c3       	rjmp	.+1668   	; 0x34f6 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2e72:	f7 01       	movw	r30, r14
    2e74:	11 82       	std	Z+1, r1	; 0x01
    2e76:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2e78:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2e7a:	3d c3       	rjmp	.+1658   	; 0x34f6 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    2e7c:	61 30       	cpi	r22, 0x01	; 1
    2e7e:	09 f0       	breq	.+2      	; 0x2e82 <calc_initialValue+0x428>
    2e80:	83 c0       	rjmp	.+262    	; 0x2f88 <calc_initialValue+0x52e>
		{
			switch(prescaler)
    2e82:	40 34       	cpi	r20, 0x40	; 64
    2e84:	51 05       	cpc	r21, r1
    2e86:	e1 f1       	breq	.+120    	; 0x2f00 <calc_initialValue+0x4a6>
    2e88:	38 f4       	brcc	.+14     	; 0x2e98 <calc_initialValue+0x43e>
    2e8a:	41 30       	cpi	r20, 0x01	; 1
    2e8c:	51 05       	cpc	r21, r1
    2e8e:	71 f0       	breq	.+28     	; 0x2eac <calc_initialValue+0x452>
    2e90:	48 30       	cpi	r20, 0x08	; 8
    2e92:	51 05       	cpc	r21, r1
    2e94:	01 f1       	breq	.+64     	; 0x2ed6 <calc_initialValue+0x47c>
    2e96:	73 c0       	rjmp	.+230    	; 0x2f7e <calc_initialValue+0x524>
    2e98:	41 15       	cp	r20, r1
    2e9a:	f1 e0       	ldi	r31, 0x01	; 1
    2e9c:	5f 07       	cpc	r21, r31
    2e9e:	09 f4       	brne	.+2      	; 0x2ea2 <calc_initialValue+0x448>
    2ea0:	44 c0       	rjmp	.+136    	; 0x2f2a <calc_initialValue+0x4d0>
    2ea2:	41 15       	cp	r20, r1
    2ea4:	54 40       	sbci	r21, 0x04	; 4
    2ea6:	09 f4       	brne	.+2      	; 0x2eaa <calc_initialValue+0x450>
    2ea8:	55 c0       	rjmp	.+170    	; 0x2f54 <calc_initialValue+0x4fa>
    2eaa:	69 c0       	rjmp	.+210    	; 0x2f7e <calc_initialValue+0x524>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    2eac:	a9 01       	movw	r20, r18
    2eae:	98 01       	movw	r18, r16
    2eb0:	6f e6       	ldi	r22, 0x6F	; 111
    2eb2:	72 e1       	ldi	r23, 0x12	; 18
    2eb4:	83 e0       	ldi	r24, 0x03	; 3
    2eb6:	91 e4       	ldi	r25, 0x41	; 65
    2eb8:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2ebc:	2f e6       	ldi	r18, 0x6F	; 111
    2ebe:	32 e1       	ldi	r19, 0x12	; 18
    2ec0:	43 e0       	ldi	r20, 0x03	; 3
    2ec2:	59 e3       	ldi	r21, 0x39	; 57
    2ec4:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2ec8:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2ecc:	f7 01       	movw	r30, r14
    2ece:	71 83       	std	Z+1, r23	; 0x01
    2ed0:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    2ed4:	10 c3       	rjmp	.+1568   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    2ed6:	a9 01       	movw	r20, r18
    2ed8:	98 01       	movw	r18, r16
    2eda:	6f e6       	ldi	r22, 0x6F	; 111
    2edc:	72 e1       	ldi	r23, 0x12	; 18
    2ede:	83 e8       	ldi	r24, 0x83	; 131
    2ee0:	92 e4       	ldi	r25, 0x42	; 66
    2ee2:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2ee6:	2f e6       	ldi	r18, 0x6F	; 111
    2ee8:	32 e1       	ldi	r19, 0x12	; 18
    2eea:	43 e8       	ldi	r20, 0x83	; 131
    2eec:	5a e3       	ldi	r21, 0x3A	; 58
    2eee:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2ef2:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2ef6:	f7 01       	movw	r30, r14
    2ef8:	71 83       	std	Z+1, r23	; 0x01
    2efa:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2efc:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    2efe:	fb c2       	rjmp	.+1526   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    2f00:	a9 01       	movw	r20, r18
    2f02:	98 01       	movw	r18, r16
    2f04:	6f e6       	ldi	r22, 0x6F	; 111
    2f06:	72 e1       	ldi	r23, 0x12	; 18
    2f08:	83 e0       	ldi	r24, 0x03	; 3
    2f0a:	94 e4       	ldi	r25, 0x44	; 68
    2f0c:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2f10:	2f e6       	ldi	r18, 0x6F	; 111
    2f12:	32 e1       	ldi	r19, 0x12	; 18
    2f14:	43 e0       	ldi	r20, 0x03	; 3
    2f16:	5c e3       	ldi	r21, 0x3C	; 60
    2f18:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2f1c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2f20:	f7 01       	movw	r30, r14
    2f22:	71 83       	std	Z+1, r23	; 0x01
    2f24:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2f26:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    2f28:	e6 c2       	rjmp	.+1484   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    2f2a:	a9 01       	movw	r20, r18
    2f2c:	98 01       	movw	r18, r16
    2f2e:	6f e6       	ldi	r22, 0x6F	; 111
    2f30:	72 e1       	ldi	r23, 0x12	; 18
    2f32:	83 e0       	ldi	r24, 0x03	; 3
    2f34:	95 e4       	ldi	r25, 0x45	; 69
    2f36:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2f3a:	2f e6       	ldi	r18, 0x6F	; 111
    2f3c:	32 e1       	ldi	r19, 0x12	; 18
    2f3e:	43 e0       	ldi	r20, 0x03	; 3
    2f40:	5d e3       	ldi	r21, 0x3D	; 61
    2f42:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2f46:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2f4a:	f7 01       	movw	r30, r14
    2f4c:	71 83       	std	Z+1, r23	; 0x01
    2f4e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    2f52:	d1 c2       	rjmp	.+1442   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    2f54:	a9 01       	movw	r20, r18
    2f56:	98 01       	movw	r18, r16
    2f58:	6f e6       	ldi	r22, 0x6F	; 111
    2f5a:	72 e1       	ldi	r23, 0x12	; 18
    2f5c:	83 e0       	ldi	r24, 0x03	; 3
    2f5e:	96 e4       	ldi	r25, 0x46	; 70
    2f60:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2f64:	2f e6       	ldi	r18, 0x6F	; 111
    2f66:	32 e1       	ldi	r19, 0x12	; 18
    2f68:	43 e0       	ldi	r20, 0x03	; 3
    2f6a:	5e e3       	ldi	r21, 0x3E	; 62
    2f6c:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2f70:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2f74:	f7 01       	movw	r30, r14
    2f76:	71 83       	std	Z+1, r23	; 0x01
    2f78:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    2f7c:	bc c2       	rjmp	.+1400   	; 0x34f6 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    2f7e:	f7 01       	movw	r30, r14
    2f80:	11 82       	std	Z+1, r1	; 0x01
    2f82:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    2f84:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    2f86:	b7 c2       	rjmp	.+1390   	; 0x34f6 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    2f88:	62 30       	cpi	r22, 0x02	; 2
    2f8a:	09 f0       	breq	.+2      	; 0x2f8e <calc_initialValue+0x534>
    2f8c:	af c2       	rjmp	.+1374   	; 0x34ec <calc_initialValue+0xa92>
		{
			switch(prescaler)
    2f8e:	40 34       	cpi	r20, 0x40	; 64
    2f90:	51 05       	cpc	r21, r1
    2f92:	e1 f1       	breq	.+120    	; 0x300c <calc_initialValue+0x5b2>
    2f94:	38 f4       	brcc	.+14     	; 0x2fa4 <calc_initialValue+0x54a>
    2f96:	41 30       	cpi	r20, 0x01	; 1
    2f98:	51 05       	cpc	r21, r1
    2f9a:	71 f0       	breq	.+28     	; 0x2fb8 <calc_initialValue+0x55e>
    2f9c:	48 30       	cpi	r20, 0x08	; 8
    2f9e:	51 05       	cpc	r21, r1
    2fa0:	01 f1       	breq	.+64     	; 0x2fe2 <calc_initialValue+0x588>
    2fa2:	73 c0       	rjmp	.+230    	; 0x308a <calc_initialValue+0x630>
    2fa4:	41 15       	cp	r20, r1
    2fa6:	f1 e0       	ldi	r31, 0x01	; 1
    2fa8:	5f 07       	cpc	r21, r31
    2faa:	09 f4       	brne	.+2      	; 0x2fae <calc_initialValue+0x554>
    2fac:	44 c0       	rjmp	.+136    	; 0x3036 <calc_initialValue+0x5dc>
    2fae:	41 15       	cp	r20, r1
    2fb0:	54 40       	sbci	r21, 0x04	; 4
    2fb2:	09 f4       	brne	.+2      	; 0x2fb6 <calc_initialValue+0x55c>
    2fb4:	55 c0       	rjmp	.+170    	; 0x3060 <calc_initialValue+0x606>
    2fb6:	69 c0       	rjmp	.+210    	; 0x308a <calc_initialValue+0x630>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    2fb8:	a9 01       	movw	r20, r18
    2fba:	98 01       	movw	r18, r16
    2fbc:	6d eb       	ldi	r22, 0xBD	; 189
    2fbe:	77 e3       	ldi	r23, 0x37	; 55
    2fc0:	86 e0       	ldi	r24, 0x06	; 6
    2fc2:	9c e3       	ldi	r25, 0x3C	; 60
    2fc4:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2fc8:	2d eb       	ldi	r18, 0xBD	; 189
    2fca:	37 e3       	ldi	r19, 0x37	; 55
    2fcc:	46 e0       	ldi	r20, 0x06	; 6
    2fce:	54 e3       	ldi	r21, 0x34	; 52
    2fd0:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2fd4:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    2fd8:	f7 01       	movw	r30, r14
    2fda:	71 83       	std	Z+1, r23	; 0x01
    2fdc:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    2fde:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    2fe0:	8a c2       	rjmp	.+1300   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    2fe2:	a9 01       	movw	r20, r18
    2fe4:	98 01       	movw	r18, r16
    2fe6:	6d eb       	ldi	r22, 0xBD	; 189
    2fe8:	77 e3       	ldi	r23, 0x37	; 55
    2fea:	86 e8       	ldi	r24, 0x86	; 134
    2fec:	9d e3       	ldi	r25, 0x3D	; 61
    2fee:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    2ff2:	2d eb       	ldi	r18, 0xBD	; 189
    2ff4:	37 e3       	ldi	r19, 0x37	; 55
    2ff6:	46 e8       	ldi	r20, 0x86	; 134
    2ff8:	55 e3       	ldi	r21, 0x35	; 53
    2ffa:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    2ffe:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    3002:	f7 01       	movw	r30, r14
    3004:	71 83       	std	Z+1, r23	; 0x01
    3006:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3008:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    300a:	75 c2       	rjmp	.+1258   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    300c:	a9 01       	movw	r20, r18
    300e:	98 01       	movw	r18, r16
    3010:	6d eb       	ldi	r22, 0xBD	; 189
    3012:	77 e3       	ldi	r23, 0x37	; 55
    3014:	86 e0       	ldi	r24, 0x06	; 6
    3016:	9f e3       	ldi	r25, 0x3F	; 63
    3018:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    301c:	2d eb       	ldi	r18, 0xBD	; 189
    301e:	37 e3       	ldi	r19, 0x37	; 55
    3020:	46 e0       	ldi	r20, 0x06	; 6
    3022:	57 e3       	ldi	r21, 0x37	; 55
    3024:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    3028:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    302c:	f7 01       	movw	r30, r14
    302e:	71 83       	std	Z+1, r23	; 0x01
    3030:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3032:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    3034:	60 c2       	rjmp	.+1216   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    3036:	a9 01       	movw	r20, r18
    3038:	98 01       	movw	r18, r16
    303a:	6d eb       	ldi	r22, 0xBD	; 189
    303c:	77 e3       	ldi	r23, 0x37	; 55
    303e:	86 e0       	ldi	r24, 0x06	; 6
    3040:	90 e4       	ldi	r25, 0x40	; 64
    3042:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    3046:	2d eb       	ldi	r18, 0xBD	; 189
    3048:	37 e3       	ldi	r19, 0x37	; 55
    304a:	46 e0       	ldi	r20, 0x06	; 6
    304c:	58 e3       	ldi	r21, 0x38	; 56
    304e:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    3052:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    3056:	f7 01       	movw	r30, r14
    3058:	71 83       	std	Z+1, r23	; 0x01
    305a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    305c:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    305e:	4b c2       	rjmp	.+1174   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    3060:	a9 01       	movw	r20, r18
    3062:	98 01       	movw	r18, r16
    3064:	6d eb       	ldi	r22, 0xBD	; 189
    3066:	77 e3       	ldi	r23, 0x37	; 55
    3068:	86 e0       	ldi	r24, 0x06	; 6
    306a:	91 e4       	ldi	r25, 0x41	; 65
    306c:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    3070:	2d eb       	ldi	r18, 0xBD	; 189
    3072:	37 e3       	ldi	r19, 0x37	; 55
    3074:	46 e0       	ldi	r20, 0x06	; 6
    3076:	59 e3       	ldi	r21, 0x39	; 57
    3078:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    307c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    3080:	f7 01       	movw	r30, r14
    3082:	71 83       	std	Z+1, r23	; 0x01
    3084:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3086:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    3088:	36 c2       	rjmp	.+1132   	; 0x34f6 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    308a:	f7 01       	movw	r30, r14
    308c:	11 82       	std	Z+1, r1	; 0x01
    308e:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    3090:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    3092:	31 c2       	rjmp	.+1122   	; 0x34f6 <calc_initialValue+0xa9c>
		else
		{
			// do nothing
		}
	}
	else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    3094:	82 30       	cpi	r24, 0x02	; 2
    3096:	09 f0       	breq	.+2      	; 0x309a <calc_initialValue+0x640>
    3098:	2b c2       	rjmp	.+1110   	; 0x34f0 <calc_initialValue+0xa96>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    309a:	61 11       	cpse	r22, r1
    309c:	b1 c0       	rjmp	.+354    	; 0x3200 <calc_initialValue+0x7a6>
		{
			switch(prescaler)
    309e:	40 34       	cpi	r20, 0x40	; 64
    30a0:	51 05       	cpc	r21, r1
    30a2:	09 f4       	brne	.+2      	; 0x30a6 <calc_initialValue+0x64c>
    30a4:	54 c0       	rjmp	.+168    	; 0x314e <calc_initialValue+0x6f4>
    30a6:	58 f4       	brcc	.+22     	; 0x30be <calc_initialValue+0x664>
    30a8:	48 30       	cpi	r20, 0x08	; 8
    30aa:	51 05       	cpc	r21, r1
    30ac:	61 f1       	breq	.+88     	; 0x3106 <calc_initialValue+0x6ac>
    30ae:	40 32       	cpi	r20, 0x20	; 32
    30b0:	51 05       	cpc	r21, r1
    30b2:	c1 f1       	breq	.+112    	; 0x3124 <calc_initialValue+0x6ca>
    30b4:	41 30       	cpi	r20, 0x01	; 1
    30b6:	51 05       	cpc	r21, r1
    30b8:	09 f0       	breq	.+2      	; 0x30bc <calc_initialValue+0x662>
    30ba:	9d c0       	rjmp	.+314    	; 0x31f6 <calc_initialValue+0x79c>
    30bc:	0f c0       	rjmp	.+30     	; 0x30dc <calc_initialValue+0x682>
    30be:	41 15       	cp	r20, r1
    30c0:	f1 e0       	ldi	r31, 0x01	; 1
    30c2:	5f 07       	cpc	r21, r31
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <calc_initialValue+0x66e>
    30c6:	6d c0       	rjmp	.+218    	; 0x31a2 <calc_initialValue+0x748>
    30c8:	41 15       	cp	r20, r1
    30ca:	84 e0       	ldi	r24, 0x04	; 4
    30cc:	58 07       	cpc	r21, r24
    30ce:	09 f4       	brne	.+2      	; 0x30d2 <calc_initialValue+0x678>
    30d0:	7d c0       	rjmp	.+250    	; 0x31cc <calc_initialValue+0x772>
    30d2:	40 38       	cpi	r20, 0x80	; 128
    30d4:	51 05       	cpc	r21, r1
    30d6:	09 f0       	breq	.+2      	; 0x30da <calc_initialValue+0x680>
    30d8:	8e c0       	rjmp	.+284    	; 0x31f6 <calc_initialValue+0x79c>
    30da:	4e c0       	rjmp	.+156    	; 0x3178 <calc_initialValue+0x71e>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    30dc:	a9 01       	movw	r20, r18
    30de:	98 01       	movw	r18, r16
    30e0:	60 e0       	ldi	r22, 0x00	; 0
    30e2:	70 e0       	ldi	r23, 0x00	; 0
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	92 e4       	ldi	r25, 0x42	; 66
    30e8:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	40 e0       	ldi	r20, 0x00	; 0
    30f2:	51 e4       	ldi	r21, 0x41	; 65
    30f4:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    30f8:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    30fc:	f7 01       	movw	r30, r14
    30fe:	71 83       	std	Z+1, r23	; 0x01
    3100:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3102:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    3104:	f8 c1       	rjmp	.+1008   	; 0x34f6 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    3106:	a9 01       	movw	r20, r18
    3108:	98 01       	movw	r18, r16
    310a:	60 e0       	ldi	r22, 0x00	; 0
    310c:	70 e0       	ldi	r23, 0x00	; 0
    310e:	80 e8       	ldi	r24, 0x80	; 128
    3110:	93 e4       	ldi	r25, 0x43	; 67
    3112:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    3116:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    311a:	f7 01       	movw	r30, r14
    311c:	71 83       	std	Z+1, r23	; 0x01
    311e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3120:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    3122:	e9 c1       	rjmp	.+978    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
    3124:	a9 01       	movw	r20, r18
    3126:	98 01       	movw	r18, r16
    3128:	60 e0       	ldi	r22, 0x00	; 0
    312a:	70 e0       	ldi	r23, 0x00	; 0
    312c:	80 e8       	ldi	r24, 0x80	; 128
    312e:	94 e4       	ldi	r25, 0x44	; 68
    3130:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e8       	ldi	r20, 0x80	; 128
    313a:	5e e3       	ldi	r21, 0x3E	; 62
    313c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    3140:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    3144:	f7 01       	movw	r30, r14
    3146:	71 83       	std	Z+1, r23	; 0x01
    3148:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    314a:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
				break;
    314c:	d4 c1       	rjmp	.+936    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    314e:	a9 01       	movw	r20, r18
    3150:	98 01       	movw	r18, r16
    3152:	60 e0       	ldi	r22, 0x00	; 0
    3154:	70 e0       	ldi	r23, 0x00	; 0
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	95 e4       	ldi	r25, 0x45	; 69
    315a:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e0       	ldi	r20, 0x00	; 0
    3164:	5e e3       	ldi	r21, 0x3E	; 62
    3166:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    316a:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    316e:	f7 01       	movw	r30, r14
    3170:	71 83       	std	Z+1, r23	; 0x01
    3172:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3174:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    3176:	bf c1       	rjmp	.+894    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
    3178:	a9 01       	movw	r20, r18
    317a:	98 01       	movw	r18, r16
    317c:	60 e0       	ldi	r22, 0x00	; 0
    317e:	70 e0       	ldi	r23, 0x00	; 0
    3180:	80 e8       	ldi	r24, 0x80	; 128
    3182:	95 e4       	ldi	r25, 0x45	; 69
    3184:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	40 e8       	ldi	r20, 0x80	; 128
    318e:	5d e3       	ldi	r21, 0x3D	; 61
    3190:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    3194:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    3198:	f7 01       	movw	r30, r14
    319a:	71 83       	std	Z+1, r23	; 0x01
    319c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    319e:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
				break;
    31a0:	aa c1       	rjmp	.+852    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    31a2:	a9 01       	movw	r20, r18
    31a4:	98 01       	movw	r18, r16
    31a6:	60 e0       	ldi	r22, 0x00	; 0
    31a8:	70 e0       	ldi	r23, 0x00	; 0
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	96 e4       	ldi	r25, 0x46	; 70
    31ae:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	40 e0       	ldi	r20, 0x00	; 0
    31b8:	5d e3       	ldi	r21, 0x3D	; 61
    31ba:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    31be:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    31c2:	f7 01       	movw	r30, r14
    31c4:	71 83       	std	Z+1, r23	; 0x01
    31c6:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    31c8:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    31ca:	95 c1       	rjmp	.+810    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    31cc:	a9 01       	movw	r20, r18
    31ce:	98 01       	movw	r18, r16
    31d0:	60 e0       	ldi	r22, 0x00	; 0
    31d2:	70 e0       	ldi	r23, 0x00	; 0
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	97 e4       	ldi	r25, 0x47	; 71
    31d8:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	40 e0       	ldi	r20, 0x00	; 0
    31e2:	5c e3       	ldi	r21, 0x3C	; 60
    31e4:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__mulsf3>
    31e8:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    31ec:	f7 01       	movw	r30, r14
    31ee:	71 83       	std	Z+1, r23	; 0x01
    31f0:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    31f2:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    31f4:	80 c1       	rjmp	.+768    	; 0x34f6 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    31f6:	f7 01       	movw	r30, r14
    31f8:	11 82       	std	Z+1, r1	; 0x01
    31fa:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    31fc:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    31fe:	7b c1       	rjmp	.+758    	; 0x34f6 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    3200:	61 30       	cpi	r22, 0x01	; 1
    3202:	09 f0       	breq	.+2      	; 0x3206 <calc_initialValue+0x7ac>
    3204:	b7 c0       	rjmp	.+366    	; 0x3374 <calc_initialValue+0x91a>
		{
			switch(prescaler)
    3206:	40 34       	cpi	r20, 0x40	; 64
    3208:	51 05       	cpc	r21, r1
    320a:	09 f4       	brne	.+2      	; 0x320e <calc_initialValue+0x7b4>
    320c:	5a c0       	rjmp	.+180    	; 0x32c2 <calc_initialValue+0x868>
    320e:	58 f4       	brcc	.+22     	; 0x3226 <calc_initialValue+0x7cc>
    3210:	48 30       	cpi	r20, 0x08	; 8
    3212:	51 05       	cpc	r21, r1
    3214:	61 f1       	breq	.+88     	; 0x326e <calc_initialValue+0x814>
    3216:	40 32       	cpi	r20, 0x20	; 32
    3218:	51 05       	cpc	r21, r1
    321a:	f1 f1       	breq	.+124    	; 0x3298 <calc_initialValue+0x83e>
    321c:	41 30       	cpi	r20, 0x01	; 1
    321e:	51 05       	cpc	r21, r1
    3220:	09 f0       	breq	.+2      	; 0x3224 <calc_initialValue+0x7ca>
    3222:	a3 c0       	rjmp	.+326    	; 0x336a <calc_initialValue+0x910>
    3224:	0f c0       	rjmp	.+30     	; 0x3244 <calc_initialValue+0x7ea>
    3226:	41 15       	cp	r20, r1
    3228:	f1 e0       	ldi	r31, 0x01	; 1
    322a:	5f 07       	cpc	r21, r31
    322c:	09 f4       	brne	.+2      	; 0x3230 <calc_initialValue+0x7d6>
    322e:	73 c0       	rjmp	.+230    	; 0x3316 <calc_initialValue+0x8bc>
    3230:	41 15       	cp	r20, r1
    3232:	84 e0       	ldi	r24, 0x04	; 4
    3234:	58 07       	cpc	r21, r24
    3236:	09 f4       	brne	.+2      	; 0x323a <calc_initialValue+0x7e0>
    3238:	83 c0       	rjmp	.+262    	; 0x3340 <calc_initialValue+0x8e6>
    323a:	40 38       	cpi	r20, 0x80	; 128
    323c:	51 05       	cpc	r21, r1
    323e:	09 f0       	breq	.+2      	; 0x3242 <calc_initialValue+0x7e8>
    3240:	94 c0       	rjmp	.+296    	; 0x336a <calc_initialValue+0x910>
    3242:	54 c0       	rjmp	.+168    	; 0x32ec <calc_initialValue+0x892>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    3244:	a9 01       	movw	r20, r18
    3246:	98 01       	movw	r18, r16
    3248:	6f e6       	ldi	r22, 0x6F	; 111
    324a:	72 e1       	ldi	r23, 0x12	; 18
    324c:	83 e0       	ldi	r24, 0x03	; 3
    324e:	9d e3       	ldi	r25, 0x3D	; 61
    3250:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    3254:	2f e6       	ldi	r18, 0x6F	; 111
    3256:	32 e1       	ldi	r19, 0x12	; 18
    3258:	43 e0       	ldi	r20, 0x03	; 3
    325a:	59 e3       	ldi	r21, 0x39	; 57
    325c:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    3260:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    3264:	f7 01       	movw	r30, r14
    3266:	71 83       	std	Z+1, r23	; 0x01
    3268:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    326a:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    326c:	44 c1       	rjmp	.+648    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    326e:	a9 01       	movw	r20, r18
    3270:	98 01       	movw	r18, r16
    3272:	6f e6       	ldi	r22, 0x6F	; 111
    3274:	72 e1       	ldi	r23, 0x12	; 18
    3276:	83 e8       	ldi	r24, 0x83	; 131
    3278:	9e e3       	ldi	r25, 0x3E	; 62
    327a:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    327e:	2f e6       	ldi	r18, 0x6F	; 111
    3280:	32 e1       	ldi	r19, 0x12	; 18
    3282:	43 e8       	ldi	r20, 0x83	; 131
    3284:	5a e3       	ldi	r21, 0x3A	; 58
    3286:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    328a:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    328e:	f7 01       	movw	r30, r14
    3290:	71 83       	std	Z+1, r23	; 0x01
    3292:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3294:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    3296:	2f c1       	rjmp	.+606    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
    3298:	a9 01       	movw	r20, r18
    329a:	98 01       	movw	r18, r16
    329c:	6f e6       	ldi	r22, 0x6F	; 111
    329e:	72 e1       	ldi	r23, 0x12	; 18
    32a0:	83 e8       	ldi	r24, 0x83	; 131
    32a2:	9f e3       	ldi	r25, 0x3F	; 63
    32a4:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    32a8:	2f e6       	ldi	r18, 0x6F	; 111
    32aa:	32 e1       	ldi	r19, 0x12	; 18
    32ac:	43 e8       	ldi	r20, 0x83	; 131
    32ae:	5b e3       	ldi	r21, 0x3B	; 59
    32b0:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    32b4:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    32b8:	f7 01       	movw	r30, r14
    32ba:	71 83       	std	Z+1, r23	; 0x01
    32bc:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    32be:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
				break;
    32c0:	1a c1       	rjmp	.+564    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    32c2:	a9 01       	movw	r20, r18
    32c4:	98 01       	movw	r18, r16
    32c6:	6f e6       	ldi	r22, 0x6F	; 111
    32c8:	72 e1       	ldi	r23, 0x12	; 18
    32ca:	83 e0       	ldi	r24, 0x03	; 3
    32cc:	90 e4       	ldi	r25, 0x40	; 64
    32ce:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    32d2:	2f e6       	ldi	r18, 0x6F	; 111
    32d4:	32 e1       	ldi	r19, 0x12	; 18
    32d6:	43 e0       	ldi	r20, 0x03	; 3
    32d8:	5c e3       	ldi	r21, 0x3C	; 60
    32da:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    32de:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    32e2:	f7 01       	movw	r30, r14
    32e4:	71 83       	std	Z+1, r23	; 0x01
    32e6:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    32e8:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    32ea:	05 c1       	rjmp	.+522    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
    32ec:	a9 01       	movw	r20, r18
    32ee:	98 01       	movw	r18, r16
    32f0:	6f e6       	ldi	r22, 0x6F	; 111
    32f2:	72 e1       	ldi	r23, 0x12	; 18
    32f4:	83 e8       	ldi	r24, 0x83	; 131
    32f6:	90 e4       	ldi	r25, 0x40	; 64
    32f8:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    32fc:	2f e6       	ldi	r18, 0x6F	; 111
    32fe:	32 e1       	ldi	r19, 0x12	; 18
    3300:	43 e8       	ldi	r20, 0x83	; 131
    3302:	5c e3       	ldi	r21, 0x3C	; 60
    3304:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    3308:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    330c:	f7 01       	movw	r30, r14
    330e:	71 83       	std	Z+1, r23	; 0x01
    3310:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3312:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
				break;
    3314:	f0 c0       	rjmp	.+480    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    3316:	a9 01       	movw	r20, r18
    3318:	98 01       	movw	r18, r16
    331a:	6f e6       	ldi	r22, 0x6F	; 111
    331c:	72 e1       	ldi	r23, 0x12	; 18
    331e:	83 e0       	ldi	r24, 0x03	; 3
    3320:	91 e4       	ldi	r25, 0x41	; 65
    3322:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    3326:	2f e6       	ldi	r18, 0x6F	; 111
    3328:	32 e1       	ldi	r19, 0x12	; 18
    332a:	43 e0       	ldi	r20, 0x03	; 3
    332c:	5d e3       	ldi	r21, 0x3D	; 61
    332e:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    3332:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    3336:	f7 01       	movw	r30, r14
    3338:	71 83       	std	Z+1, r23	; 0x01
    333a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    333c:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    333e:	db c0       	rjmp	.+438    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    3340:	a9 01       	movw	r20, r18
    3342:	98 01       	movw	r18, r16
    3344:	6f e6       	ldi	r22, 0x6F	; 111
    3346:	72 e1       	ldi	r23, 0x12	; 18
    3348:	83 e0       	ldi	r24, 0x03	; 3
    334a:	92 e4       	ldi	r25, 0x42	; 66
    334c:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    3350:	2f e6       	ldi	r18, 0x6F	; 111
    3352:	32 e1       	ldi	r19, 0x12	; 18
    3354:	43 e0       	ldi	r20, 0x03	; 3
    3356:	5e e3       	ldi	r21, 0x3E	; 62
    3358:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    335c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    3360:	f7 01       	movw	r30, r14
    3362:	71 83       	std	Z+1, r23	; 0x01
    3364:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3366:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    3368:	c6 c0       	rjmp	.+396    	; 0x34f6 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    336a:	f7 01       	movw	r30, r14
    336c:	11 82       	std	Z+1, r1	; 0x01
    336e:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    3370:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    3372:	c1 c0       	rjmp	.+386    	; 0x34f6 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    3374:	62 30       	cpi	r22, 0x02	; 2
    3376:	09 f0       	breq	.+2      	; 0x337a <calc_initialValue+0x920>
    3378:	bd c0       	rjmp	.+378    	; 0x34f4 <calc_initialValue+0xa9a>
		{
			switch(prescaler)
    337a:	40 34       	cpi	r20, 0x40	; 64
    337c:	51 05       	cpc	r21, r1
    337e:	09 f4       	brne	.+2      	; 0x3382 <calc_initialValue+0x928>
    3380:	5a c0       	rjmp	.+180    	; 0x3436 <calc_initialValue+0x9dc>
    3382:	58 f4       	brcc	.+22     	; 0x339a <calc_initialValue+0x940>
    3384:	48 30       	cpi	r20, 0x08	; 8
    3386:	51 05       	cpc	r21, r1
    3388:	61 f1       	breq	.+88     	; 0x33e2 <calc_initialValue+0x988>
    338a:	40 32       	cpi	r20, 0x20	; 32
    338c:	51 05       	cpc	r21, r1
    338e:	f1 f1       	breq	.+124    	; 0x340c <calc_initialValue+0x9b2>
    3390:	41 30       	cpi	r20, 0x01	; 1
    3392:	51 05       	cpc	r21, r1
    3394:	09 f0       	breq	.+2      	; 0x3398 <calc_initialValue+0x93e>
    3396:	a3 c0       	rjmp	.+326    	; 0x34de <calc_initialValue+0xa84>
    3398:	0f c0       	rjmp	.+30     	; 0x33b8 <calc_initialValue+0x95e>
    339a:	41 15       	cp	r20, r1
    339c:	f1 e0       	ldi	r31, 0x01	; 1
    339e:	5f 07       	cpc	r21, r31
    33a0:	09 f4       	brne	.+2      	; 0x33a4 <calc_initialValue+0x94a>
    33a2:	73 c0       	rjmp	.+230    	; 0x348a <calc_initialValue+0xa30>
    33a4:	41 15       	cp	r20, r1
    33a6:	84 e0       	ldi	r24, 0x04	; 4
    33a8:	58 07       	cpc	r21, r24
    33aa:	09 f4       	brne	.+2      	; 0x33ae <calc_initialValue+0x954>
    33ac:	83 c0       	rjmp	.+262    	; 0x34b4 <calc_initialValue+0xa5a>
    33ae:	40 38       	cpi	r20, 0x80	; 128
    33b0:	51 05       	cpc	r21, r1
    33b2:	09 f0       	breq	.+2      	; 0x33b6 <calc_initialValue+0x95c>
    33b4:	94 c0       	rjmp	.+296    	; 0x34de <calc_initialValue+0xa84>
    33b6:	54 c0       	rjmp	.+168    	; 0x3460 <calc_initialValue+0xa06>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    33b8:	a9 01       	movw	r20, r18
    33ba:	98 01       	movw	r18, r16
    33bc:	6d eb       	ldi	r22, 0xBD	; 189
    33be:	77 e3       	ldi	r23, 0x37	; 55
    33c0:	86 e0       	ldi	r24, 0x06	; 6
    33c2:	98 e3       	ldi	r25, 0x38	; 56
    33c4:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    33c8:	2d eb       	ldi	r18, 0xBD	; 189
    33ca:	37 e3       	ldi	r19, 0x37	; 55
    33cc:	46 e0       	ldi	r20, 0x06	; 6
    33ce:	54 e3       	ldi	r21, 0x34	; 52
    33d0:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    33d4:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    33d8:	f7 01       	movw	r30, r14
    33da:	71 83       	std	Z+1, r23	; 0x01
    33dc:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    33de:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    33e0:	8a c0       	rjmp	.+276    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    33e2:	a9 01       	movw	r20, r18
    33e4:	98 01       	movw	r18, r16
    33e6:	6d eb       	ldi	r22, 0xBD	; 189
    33e8:	77 e3       	ldi	r23, 0x37	; 55
    33ea:	86 e8       	ldi	r24, 0x86	; 134
    33ec:	99 e3       	ldi	r25, 0x39	; 57
    33ee:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    33f2:	2d eb       	ldi	r18, 0xBD	; 189
    33f4:	37 e3       	ldi	r19, 0x37	; 55
    33f6:	46 e8       	ldi	r20, 0x86	; 134
    33f8:	55 e3       	ldi	r21, 0x35	; 53
    33fa:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    33fe:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    3402:	f7 01       	movw	r30, r14
    3404:	71 83       	std	Z+1, r23	; 0x01
    3406:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3408:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    340a:	75 c0       	rjmp	.+234    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
    340c:	a9 01       	movw	r20, r18
    340e:	98 01       	movw	r18, r16
    3410:	6d eb       	ldi	r22, 0xBD	; 189
    3412:	77 e3       	ldi	r23, 0x37	; 55
    3414:	86 e8       	ldi	r24, 0x86	; 134
    3416:	9a e3       	ldi	r25, 0x3A	; 58
    3418:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    341c:	2d eb       	ldi	r18, 0xBD	; 189
    341e:	37 e3       	ldi	r19, 0x37	; 55
    3420:	46 e8       	ldi	r20, 0x86	; 134
    3422:	56 e3       	ldi	r21, 0x36	; 54
    3424:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    3428:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    342c:	f7 01       	movw	r30, r14
    342e:	71 83       	std	Z+1, r23	; 0x01
    3430:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3432:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
				break;
    3434:	60 c0       	rjmp	.+192    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    3436:	a9 01       	movw	r20, r18
    3438:	98 01       	movw	r18, r16
    343a:	6d eb       	ldi	r22, 0xBD	; 189
    343c:	77 e3       	ldi	r23, 0x37	; 55
    343e:	86 e0       	ldi	r24, 0x06	; 6
    3440:	9b e3       	ldi	r25, 0x3B	; 59
    3442:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    3446:	2d eb       	ldi	r18, 0xBD	; 189
    3448:	37 e3       	ldi	r19, 0x37	; 55
    344a:	46 e0       	ldi	r20, 0x06	; 6
    344c:	57 e3       	ldi	r21, 0x37	; 55
    344e:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    3452:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    3456:	f7 01       	movw	r30, r14
    3458:	71 83       	std	Z+1, r23	; 0x01
    345a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    345c:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    345e:	4b c0       	rjmp	.+150    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
    3460:	a9 01       	movw	r20, r18
    3462:	98 01       	movw	r18, r16
    3464:	6d eb       	ldi	r22, 0xBD	; 189
    3466:	77 e3       	ldi	r23, 0x37	; 55
    3468:	86 e8       	ldi	r24, 0x86	; 134
    346a:	9b e3       	ldi	r25, 0x3B	; 59
    346c:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    3470:	2d eb       	ldi	r18, 0xBD	; 189
    3472:	37 e3       	ldi	r19, 0x37	; 55
    3474:	46 e8       	ldi	r20, 0x86	; 134
    3476:	57 e3       	ldi	r21, 0x37	; 55
    3478:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    347c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    3480:	f7 01       	movw	r30, r14
    3482:	71 83       	std	Z+1, r23	; 0x01
    3484:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3486:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
				break;
    3488:	36 c0       	rjmp	.+108    	; 0x34f6 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    348a:	a9 01       	movw	r20, r18
    348c:	98 01       	movw	r18, r16
    348e:	6d eb       	ldi	r22, 0xBD	; 189
    3490:	77 e3       	ldi	r23, 0x37	; 55
    3492:	86 e0       	ldi	r24, 0x06	; 6
    3494:	9c e3       	ldi	r25, 0x3C	; 60
    3496:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    349a:	2d eb       	ldi	r18, 0xBD	; 189
    349c:	37 e3       	ldi	r19, 0x37	; 55
    349e:	46 e0       	ldi	r20, 0x06	; 6
    34a0:	58 e3       	ldi	r21, 0x38	; 56
    34a2:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    34a6:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    34aa:	f7 01       	movw	r30, r14
    34ac:	71 83       	std	Z+1, r23	; 0x01
    34ae:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    34b0:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    34b2:	21 c0       	rjmp	.+66     	; 0x34f6 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    34b4:	a9 01       	movw	r20, r18
    34b6:	98 01       	movw	r18, r16
    34b8:	6d eb       	ldi	r22, 0xBD	; 189
    34ba:	77 e3       	ldi	r23, 0x37	; 55
    34bc:	86 e0       	ldi	r24, 0x06	; 6
    34be:	9d e3       	ldi	r25, 0x3D	; 61
    34c0:	0e 94 80 1a 	call	0x3500	; 0x3500 <__subsf3>
    34c4:	2d eb       	ldi	r18, 0xBD	; 189
    34c6:	37 e3       	ldi	r19, 0x37	; 55
    34c8:	46 e0       	ldi	r20, 0x06	; 6
    34ca:	59 e3       	ldi	r21, 0x39	; 57
    34cc:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__divsf3>
    34d0:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__fixunssfsi>
    34d4:	f7 01       	movw	r30, r14
    34d6:	71 83       	std	Z+1, r23	; 0x01
    34d8:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    34da:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    34dc:	0c c0       	rjmp	.+24     	; 0x34f6 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    34de:	f7 01       	movw	r30, r14
    34e0:	11 82       	std	Z+1, r1	; 0x01
    34e2:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    34e4:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    34e6:	07 c0       	rjmp	.+14     	; 0x34f6 <calc_initialValue+0xa9c>
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	05 c0       	rjmp	.+10     	; 0x34f6 <calc_initialValue+0xa9c>
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	03 c0       	rjmp	.+6      	; 0x34f6 <calc_initialValue+0xa9c>
		}
		
	}
	else
	{
		bo_return_value = FALSE;
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	01 c0       	rjmp	.+2      	; 0x34f6 <calc_initialValue+0xa9c>
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    34f4:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		bo_return_value = FALSE;
	}
	return bo_return_value;
    34f6:	1f 91       	pop	r17
    34f8:	0f 91       	pop	r16
    34fa:	ff 90       	pop	r15
    34fc:	ef 90       	pop	r14
    34fe:	08 95       	ret

00003500 <__subsf3>:
    3500:	50 58       	subi	r21, 0x80	; 128

00003502 <__addsf3>:
    3502:	bb 27       	eor	r27, r27
    3504:	aa 27       	eor	r26, r26
    3506:	0e 94 98 1a 	call	0x3530	; 0x3530 <__addsf3x>
    350a:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__fp_round>
    350e:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <__fp_pscA>
    3512:	38 f0       	brcs	.+14     	; 0x3522 <__addsf3+0x20>
    3514:	0e 94 04 1c 	call	0x3808	; 0x3808 <__fp_pscB>
    3518:	20 f0       	brcs	.+8      	; 0x3522 <__addsf3+0x20>
    351a:	39 f4       	brne	.+14     	; 0x352a <__addsf3+0x28>
    351c:	9f 3f       	cpi	r25, 0xFF	; 255
    351e:	19 f4       	brne	.+6      	; 0x3526 <__addsf3+0x24>
    3520:	26 f4       	brtc	.+8      	; 0x352a <__addsf3+0x28>
    3522:	0c 94 fa 1b 	jmp	0x37f4	; 0x37f4 <__fp_nan>
    3526:	0e f4       	brtc	.+2      	; 0x352a <__addsf3+0x28>
    3528:	e0 95       	com	r30
    352a:	e7 fb       	bst	r30, 7
    352c:	0c 94 f4 1b 	jmp	0x37e8	; 0x37e8 <__fp_inf>

00003530 <__addsf3x>:
    3530:	e9 2f       	mov	r30, r25
    3532:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__fp_split3>
    3536:	58 f3       	brcs	.-42     	; 0x350e <__addsf3+0xc>
    3538:	ba 17       	cp	r27, r26
    353a:	62 07       	cpc	r22, r18
    353c:	73 07       	cpc	r23, r19
    353e:	84 07       	cpc	r24, r20
    3540:	95 07       	cpc	r25, r21
    3542:	20 f0       	brcs	.+8      	; 0x354c <__addsf3x+0x1c>
    3544:	79 f4       	brne	.+30     	; 0x3564 <__addsf3x+0x34>
    3546:	a6 f5       	brtc	.+104    	; 0x35b0 <__addsf3x+0x80>
    3548:	0c 94 3e 1c 	jmp	0x387c	; 0x387c <__fp_zero>
    354c:	0e f4       	brtc	.+2      	; 0x3550 <__addsf3x+0x20>
    354e:	e0 95       	com	r30
    3550:	0b 2e       	mov	r0, r27
    3552:	ba 2f       	mov	r27, r26
    3554:	a0 2d       	mov	r26, r0
    3556:	0b 01       	movw	r0, r22
    3558:	b9 01       	movw	r22, r18
    355a:	90 01       	movw	r18, r0
    355c:	0c 01       	movw	r0, r24
    355e:	ca 01       	movw	r24, r20
    3560:	a0 01       	movw	r20, r0
    3562:	11 24       	eor	r1, r1
    3564:	ff 27       	eor	r31, r31
    3566:	59 1b       	sub	r21, r25
    3568:	99 f0       	breq	.+38     	; 0x3590 <__addsf3x+0x60>
    356a:	59 3f       	cpi	r21, 0xF9	; 249
    356c:	50 f4       	brcc	.+20     	; 0x3582 <__addsf3x+0x52>
    356e:	50 3e       	cpi	r21, 0xE0	; 224
    3570:	68 f1       	brcs	.+90     	; 0x35cc <__addsf3x+0x9c>
    3572:	1a 16       	cp	r1, r26
    3574:	f0 40       	sbci	r31, 0x00	; 0
    3576:	a2 2f       	mov	r26, r18
    3578:	23 2f       	mov	r18, r19
    357a:	34 2f       	mov	r19, r20
    357c:	44 27       	eor	r20, r20
    357e:	58 5f       	subi	r21, 0xF8	; 248
    3580:	f3 cf       	rjmp	.-26     	; 0x3568 <__addsf3x+0x38>
    3582:	46 95       	lsr	r20
    3584:	37 95       	ror	r19
    3586:	27 95       	ror	r18
    3588:	a7 95       	ror	r26
    358a:	f0 40       	sbci	r31, 0x00	; 0
    358c:	53 95       	inc	r21
    358e:	c9 f7       	brne	.-14     	; 0x3582 <__addsf3x+0x52>
    3590:	7e f4       	brtc	.+30     	; 0x35b0 <__addsf3x+0x80>
    3592:	1f 16       	cp	r1, r31
    3594:	ba 0b       	sbc	r27, r26
    3596:	62 0b       	sbc	r22, r18
    3598:	73 0b       	sbc	r23, r19
    359a:	84 0b       	sbc	r24, r20
    359c:	ba f0       	brmi	.+46     	; 0x35cc <__addsf3x+0x9c>
    359e:	91 50       	subi	r25, 0x01	; 1
    35a0:	a1 f0       	breq	.+40     	; 0x35ca <__addsf3x+0x9a>
    35a2:	ff 0f       	add	r31, r31
    35a4:	bb 1f       	adc	r27, r27
    35a6:	66 1f       	adc	r22, r22
    35a8:	77 1f       	adc	r23, r23
    35aa:	88 1f       	adc	r24, r24
    35ac:	c2 f7       	brpl	.-16     	; 0x359e <__addsf3x+0x6e>
    35ae:	0e c0       	rjmp	.+28     	; 0x35cc <__addsf3x+0x9c>
    35b0:	ba 0f       	add	r27, r26
    35b2:	62 1f       	adc	r22, r18
    35b4:	73 1f       	adc	r23, r19
    35b6:	84 1f       	adc	r24, r20
    35b8:	48 f4       	brcc	.+18     	; 0x35cc <__addsf3x+0x9c>
    35ba:	87 95       	ror	r24
    35bc:	77 95       	ror	r23
    35be:	67 95       	ror	r22
    35c0:	b7 95       	ror	r27
    35c2:	f7 95       	ror	r31
    35c4:	9e 3f       	cpi	r25, 0xFE	; 254
    35c6:	08 f0       	brcs	.+2      	; 0x35ca <__addsf3x+0x9a>
    35c8:	b0 cf       	rjmp	.-160    	; 0x352a <__addsf3+0x28>
    35ca:	93 95       	inc	r25
    35cc:	88 0f       	add	r24, r24
    35ce:	08 f0       	brcs	.+2      	; 0x35d2 <__addsf3x+0xa2>
    35d0:	99 27       	eor	r25, r25
    35d2:	ee 0f       	add	r30, r30
    35d4:	97 95       	ror	r25
    35d6:	87 95       	ror	r24
    35d8:	08 95       	ret

000035da <__cmpsf2>:
    35da:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__fp_cmp>
    35de:	08 f4       	brcc	.+2      	; 0x35e2 <__cmpsf2+0x8>
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	08 95       	ret

000035e4 <__divsf3>:
    35e4:	0e 94 06 1b 	call	0x360c	; 0x360c <__divsf3x>
    35e8:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__fp_round>
    35ec:	0e 94 04 1c 	call	0x3808	; 0x3808 <__fp_pscB>
    35f0:	58 f0       	brcs	.+22     	; 0x3608 <__divsf3+0x24>
    35f2:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <__fp_pscA>
    35f6:	40 f0       	brcs	.+16     	; 0x3608 <__divsf3+0x24>
    35f8:	29 f4       	brne	.+10     	; 0x3604 <__divsf3+0x20>
    35fa:	5f 3f       	cpi	r21, 0xFF	; 255
    35fc:	29 f0       	breq	.+10     	; 0x3608 <__divsf3+0x24>
    35fe:	0c 94 f4 1b 	jmp	0x37e8	; 0x37e8 <__fp_inf>
    3602:	51 11       	cpse	r21, r1
    3604:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__fp_szero>
    3608:	0c 94 fa 1b 	jmp	0x37f4	; 0x37f4 <__fp_nan>

0000360c <__divsf3x>:
    360c:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__fp_split3>
    3610:	68 f3       	brcs	.-38     	; 0x35ec <__divsf3+0x8>

00003612 <__divsf3_pse>:
    3612:	99 23       	and	r25, r25
    3614:	b1 f3       	breq	.-20     	; 0x3602 <__divsf3+0x1e>
    3616:	55 23       	and	r21, r21
    3618:	91 f3       	breq	.-28     	; 0x35fe <__divsf3+0x1a>
    361a:	95 1b       	sub	r25, r21
    361c:	55 0b       	sbc	r21, r21
    361e:	bb 27       	eor	r27, r27
    3620:	aa 27       	eor	r26, r26
    3622:	62 17       	cp	r22, r18
    3624:	73 07       	cpc	r23, r19
    3626:	84 07       	cpc	r24, r20
    3628:	38 f0       	brcs	.+14     	; 0x3638 <__divsf3_pse+0x26>
    362a:	9f 5f       	subi	r25, 0xFF	; 255
    362c:	5f 4f       	sbci	r21, 0xFF	; 255
    362e:	22 0f       	add	r18, r18
    3630:	33 1f       	adc	r19, r19
    3632:	44 1f       	adc	r20, r20
    3634:	aa 1f       	adc	r26, r26
    3636:	a9 f3       	breq	.-22     	; 0x3622 <__divsf3_pse+0x10>
    3638:	35 d0       	rcall	.+106    	; 0x36a4 <__divsf3_pse+0x92>
    363a:	0e 2e       	mov	r0, r30
    363c:	3a f0       	brmi	.+14     	; 0x364c <__divsf3_pse+0x3a>
    363e:	e0 e8       	ldi	r30, 0x80	; 128
    3640:	32 d0       	rcall	.+100    	; 0x36a6 <__divsf3_pse+0x94>
    3642:	91 50       	subi	r25, 0x01	; 1
    3644:	50 40       	sbci	r21, 0x00	; 0
    3646:	e6 95       	lsr	r30
    3648:	00 1c       	adc	r0, r0
    364a:	ca f7       	brpl	.-14     	; 0x363e <__divsf3_pse+0x2c>
    364c:	2b d0       	rcall	.+86     	; 0x36a4 <__divsf3_pse+0x92>
    364e:	fe 2f       	mov	r31, r30
    3650:	29 d0       	rcall	.+82     	; 0x36a4 <__divsf3_pse+0x92>
    3652:	66 0f       	add	r22, r22
    3654:	77 1f       	adc	r23, r23
    3656:	88 1f       	adc	r24, r24
    3658:	bb 1f       	adc	r27, r27
    365a:	26 17       	cp	r18, r22
    365c:	37 07       	cpc	r19, r23
    365e:	48 07       	cpc	r20, r24
    3660:	ab 07       	cpc	r26, r27
    3662:	b0 e8       	ldi	r27, 0x80	; 128
    3664:	09 f0       	breq	.+2      	; 0x3668 <__divsf3_pse+0x56>
    3666:	bb 0b       	sbc	r27, r27
    3668:	80 2d       	mov	r24, r0
    366a:	bf 01       	movw	r22, r30
    366c:	ff 27       	eor	r31, r31
    366e:	93 58       	subi	r25, 0x83	; 131
    3670:	5f 4f       	sbci	r21, 0xFF	; 255
    3672:	3a f0       	brmi	.+14     	; 0x3682 <__divsf3_pse+0x70>
    3674:	9e 3f       	cpi	r25, 0xFE	; 254
    3676:	51 05       	cpc	r21, r1
    3678:	78 f0       	brcs	.+30     	; 0x3698 <__divsf3_pse+0x86>
    367a:	0c 94 f4 1b 	jmp	0x37e8	; 0x37e8 <__fp_inf>
    367e:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__fp_szero>
    3682:	5f 3f       	cpi	r21, 0xFF	; 255
    3684:	e4 f3       	brlt	.-8      	; 0x367e <__divsf3_pse+0x6c>
    3686:	98 3e       	cpi	r25, 0xE8	; 232
    3688:	d4 f3       	brlt	.-12     	; 0x367e <__divsf3_pse+0x6c>
    368a:	86 95       	lsr	r24
    368c:	77 95       	ror	r23
    368e:	67 95       	ror	r22
    3690:	b7 95       	ror	r27
    3692:	f7 95       	ror	r31
    3694:	9f 5f       	subi	r25, 0xFF	; 255
    3696:	c9 f7       	brne	.-14     	; 0x368a <__divsf3_pse+0x78>
    3698:	88 0f       	add	r24, r24
    369a:	91 1d       	adc	r25, r1
    369c:	96 95       	lsr	r25
    369e:	87 95       	ror	r24
    36a0:	97 f9       	bld	r25, 7
    36a2:	08 95       	ret
    36a4:	e1 e0       	ldi	r30, 0x01	; 1
    36a6:	66 0f       	add	r22, r22
    36a8:	77 1f       	adc	r23, r23
    36aa:	88 1f       	adc	r24, r24
    36ac:	bb 1f       	adc	r27, r27
    36ae:	62 17       	cp	r22, r18
    36b0:	73 07       	cpc	r23, r19
    36b2:	84 07       	cpc	r24, r20
    36b4:	ba 07       	cpc	r27, r26
    36b6:	20 f0       	brcs	.+8      	; 0x36c0 <__divsf3_pse+0xae>
    36b8:	62 1b       	sub	r22, r18
    36ba:	73 0b       	sbc	r23, r19
    36bc:	84 0b       	sbc	r24, r20
    36be:	ba 0b       	sbc	r27, r26
    36c0:	ee 1f       	adc	r30, r30
    36c2:	88 f7       	brcc	.-30     	; 0x36a6 <__divsf3_pse+0x94>
    36c4:	e0 95       	com	r30
    36c6:	08 95       	ret

000036c8 <__fixunssfsi>:
    36c8:	0e 94 24 1c 	call	0x3848	; 0x3848 <__fp_splitA>
    36cc:	88 f0       	brcs	.+34     	; 0x36f0 <__fixunssfsi+0x28>
    36ce:	9f 57       	subi	r25, 0x7F	; 127
    36d0:	98 f0       	brcs	.+38     	; 0x36f8 <__fixunssfsi+0x30>
    36d2:	b9 2f       	mov	r27, r25
    36d4:	99 27       	eor	r25, r25
    36d6:	b7 51       	subi	r27, 0x17	; 23
    36d8:	b0 f0       	brcs	.+44     	; 0x3706 <__fixunssfsi+0x3e>
    36da:	e1 f0       	breq	.+56     	; 0x3714 <__fixunssfsi+0x4c>
    36dc:	66 0f       	add	r22, r22
    36de:	77 1f       	adc	r23, r23
    36e0:	88 1f       	adc	r24, r24
    36e2:	99 1f       	adc	r25, r25
    36e4:	1a f0       	brmi	.+6      	; 0x36ec <__fixunssfsi+0x24>
    36e6:	ba 95       	dec	r27
    36e8:	c9 f7       	brne	.-14     	; 0x36dc <__fixunssfsi+0x14>
    36ea:	14 c0       	rjmp	.+40     	; 0x3714 <__fixunssfsi+0x4c>
    36ec:	b1 30       	cpi	r27, 0x01	; 1
    36ee:	91 f0       	breq	.+36     	; 0x3714 <__fixunssfsi+0x4c>
    36f0:	0e 94 3e 1c 	call	0x387c	; 0x387c <__fp_zero>
    36f4:	b1 e0       	ldi	r27, 0x01	; 1
    36f6:	08 95       	ret
    36f8:	0c 94 3e 1c 	jmp	0x387c	; 0x387c <__fp_zero>
    36fc:	67 2f       	mov	r22, r23
    36fe:	78 2f       	mov	r23, r24
    3700:	88 27       	eor	r24, r24
    3702:	b8 5f       	subi	r27, 0xF8	; 248
    3704:	39 f0       	breq	.+14     	; 0x3714 <__fixunssfsi+0x4c>
    3706:	b9 3f       	cpi	r27, 0xF9	; 249
    3708:	cc f3       	brlt	.-14     	; 0x36fc <__fixunssfsi+0x34>
    370a:	86 95       	lsr	r24
    370c:	77 95       	ror	r23
    370e:	67 95       	ror	r22
    3710:	b3 95       	inc	r27
    3712:	d9 f7       	brne	.-10     	; 0x370a <__fixunssfsi+0x42>
    3714:	3e f4       	brtc	.+14     	; 0x3724 <__fixunssfsi+0x5c>
    3716:	90 95       	com	r25
    3718:	80 95       	com	r24
    371a:	70 95       	com	r23
    371c:	61 95       	neg	r22
    371e:	7f 4f       	sbci	r23, 0xFF	; 255
    3720:	8f 4f       	sbci	r24, 0xFF	; 255
    3722:	9f 4f       	sbci	r25, 0xFF	; 255
    3724:	08 95       	ret

00003726 <__floatunsisf>:
    3726:	e8 94       	clt
    3728:	09 c0       	rjmp	.+18     	; 0x373c <__floatsisf+0x12>

0000372a <__floatsisf>:
    372a:	97 fb       	bst	r25, 7
    372c:	3e f4       	brtc	.+14     	; 0x373c <__floatsisf+0x12>
    372e:	90 95       	com	r25
    3730:	80 95       	com	r24
    3732:	70 95       	com	r23
    3734:	61 95       	neg	r22
    3736:	7f 4f       	sbci	r23, 0xFF	; 255
    3738:	8f 4f       	sbci	r24, 0xFF	; 255
    373a:	9f 4f       	sbci	r25, 0xFF	; 255
    373c:	99 23       	and	r25, r25
    373e:	a9 f0       	breq	.+42     	; 0x376a <__floatsisf+0x40>
    3740:	f9 2f       	mov	r31, r25
    3742:	96 e9       	ldi	r25, 0x96	; 150
    3744:	bb 27       	eor	r27, r27
    3746:	93 95       	inc	r25
    3748:	f6 95       	lsr	r31
    374a:	87 95       	ror	r24
    374c:	77 95       	ror	r23
    374e:	67 95       	ror	r22
    3750:	b7 95       	ror	r27
    3752:	f1 11       	cpse	r31, r1
    3754:	f8 cf       	rjmp	.-16     	; 0x3746 <__floatsisf+0x1c>
    3756:	fa f4       	brpl	.+62     	; 0x3796 <__floatsisf+0x6c>
    3758:	bb 0f       	add	r27, r27
    375a:	11 f4       	brne	.+4      	; 0x3760 <__floatsisf+0x36>
    375c:	60 ff       	sbrs	r22, 0
    375e:	1b c0       	rjmp	.+54     	; 0x3796 <__floatsisf+0x6c>
    3760:	6f 5f       	subi	r22, 0xFF	; 255
    3762:	7f 4f       	sbci	r23, 0xFF	; 255
    3764:	8f 4f       	sbci	r24, 0xFF	; 255
    3766:	9f 4f       	sbci	r25, 0xFF	; 255
    3768:	16 c0       	rjmp	.+44     	; 0x3796 <__floatsisf+0x6c>
    376a:	88 23       	and	r24, r24
    376c:	11 f0       	breq	.+4      	; 0x3772 <__floatsisf+0x48>
    376e:	96 e9       	ldi	r25, 0x96	; 150
    3770:	11 c0       	rjmp	.+34     	; 0x3794 <__floatsisf+0x6a>
    3772:	77 23       	and	r23, r23
    3774:	21 f0       	breq	.+8      	; 0x377e <__floatsisf+0x54>
    3776:	9e e8       	ldi	r25, 0x8E	; 142
    3778:	87 2f       	mov	r24, r23
    377a:	76 2f       	mov	r23, r22
    377c:	05 c0       	rjmp	.+10     	; 0x3788 <__floatsisf+0x5e>
    377e:	66 23       	and	r22, r22
    3780:	71 f0       	breq	.+28     	; 0x379e <__floatsisf+0x74>
    3782:	96 e8       	ldi	r25, 0x86	; 134
    3784:	86 2f       	mov	r24, r22
    3786:	70 e0       	ldi	r23, 0x00	; 0
    3788:	60 e0       	ldi	r22, 0x00	; 0
    378a:	2a f0       	brmi	.+10     	; 0x3796 <__floatsisf+0x6c>
    378c:	9a 95       	dec	r25
    378e:	66 0f       	add	r22, r22
    3790:	77 1f       	adc	r23, r23
    3792:	88 1f       	adc	r24, r24
    3794:	da f7       	brpl	.-10     	; 0x378c <__floatsisf+0x62>
    3796:	88 0f       	add	r24, r24
    3798:	96 95       	lsr	r25
    379a:	87 95       	ror	r24
    379c:	97 f9       	bld	r25, 7
    379e:	08 95       	ret

000037a0 <__fp_cmp>:
    37a0:	99 0f       	add	r25, r25
    37a2:	00 08       	sbc	r0, r0
    37a4:	55 0f       	add	r21, r21
    37a6:	aa 0b       	sbc	r26, r26
    37a8:	e0 e8       	ldi	r30, 0x80	; 128
    37aa:	fe ef       	ldi	r31, 0xFE	; 254
    37ac:	16 16       	cp	r1, r22
    37ae:	17 06       	cpc	r1, r23
    37b0:	e8 07       	cpc	r30, r24
    37b2:	f9 07       	cpc	r31, r25
    37b4:	c0 f0       	brcs	.+48     	; 0x37e6 <__fp_cmp+0x46>
    37b6:	12 16       	cp	r1, r18
    37b8:	13 06       	cpc	r1, r19
    37ba:	e4 07       	cpc	r30, r20
    37bc:	f5 07       	cpc	r31, r21
    37be:	98 f0       	brcs	.+38     	; 0x37e6 <__fp_cmp+0x46>
    37c0:	62 1b       	sub	r22, r18
    37c2:	73 0b       	sbc	r23, r19
    37c4:	84 0b       	sbc	r24, r20
    37c6:	95 0b       	sbc	r25, r21
    37c8:	39 f4       	brne	.+14     	; 0x37d8 <__fp_cmp+0x38>
    37ca:	0a 26       	eor	r0, r26
    37cc:	61 f0       	breq	.+24     	; 0x37e6 <__fp_cmp+0x46>
    37ce:	23 2b       	or	r18, r19
    37d0:	24 2b       	or	r18, r20
    37d2:	25 2b       	or	r18, r21
    37d4:	21 f4       	brne	.+8      	; 0x37de <__fp_cmp+0x3e>
    37d6:	08 95       	ret
    37d8:	0a 26       	eor	r0, r26
    37da:	09 f4       	brne	.+2      	; 0x37de <__fp_cmp+0x3e>
    37dc:	a1 40       	sbci	r26, 0x01	; 1
    37de:	a6 95       	lsr	r26
    37e0:	8f ef       	ldi	r24, 0xFF	; 255
    37e2:	81 1d       	adc	r24, r1
    37e4:	81 1d       	adc	r24, r1
    37e6:	08 95       	ret

000037e8 <__fp_inf>:
    37e8:	97 f9       	bld	r25, 7
    37ea:	9f 67       	ori	r25, 0x7F	; 127
    37ec:	80 e8       	ldi	r24, 0x80	; 128
    37ee:	70 e0       	ldi	r23, 0x00	; 0
    37f0:	60 e0       	ldi	r22, 0x00	; 0
    37f2:	08 95       	ret

000037f4 <__fp_nan>:
    37f4:	9f ef       	ldi	r25, 0xFF	; 255
    37f6:	80 ec       	ldi	r24, 0xC0	; 192
    37f8:	08 95       	ret

000037fa <__fp_pscA>:
    37fa:	00 24       	eor	r0, r0
    37fc:	0a 94       	dec	r0
    37fe:	16 16       	cp	r1, r22
    3800:	17 06       	cpc	r1, r23
    3802:	18 06       	cpc	r1, r24
    3804:	09 06       	cpc	r0, r25
    3806:	08 95       	ret

00003808 <__fp_pscB>:
    3808:	00 24       	eor	r0, r0
    380a:	0a 94       	dec	r0
    380c:	12 16       	cp	r1, r18
    380e:	13 06       	cpc	r1, r19
    3810:	14 06       	cpc	r1, r20
    3812:	05 06       	cpc	r0, r21
    3814:	08 95       	ret

00003816 <__fp_round>:
    3816:	09 2e       	mov	r0, r25
    3818:	03 94       	inc	r0
    381a:	00 0c       	add	r0, r0
    381c:	11 f4       	brne	.+4      	; 0x3822 <__fp_round+0xc>
    381e:	88 23       	and	r24, r24
    3820:	52 f0       	brmi	.+20     	; 0x3836 <__fp_round+0x20>
    3822:	bb 0f       	add	r27, r27
    3824:	40 f4       	brcc	.+16     	; 0x3836 <__fp_round+0x20>
    3826:	bf 2b       	or	r27, r31
    3828:	11 f4       	brne	.+4      	; 0x382e <__fp_round+0x18>
    382a:	60 ff       	sbrs	r22, 0
    382c:	04 c0       	rjmp	.+8      	; 0x3836 <__fp_round+0x20>
    382e:	6f 5f       	subi	r22, 0xFF	; 255
    3830:	7f 4f       	sbci	r23, 0xFF	; 255
    3832:	8f 4f       	sbci	r24, 0xFF	; 255
    3834:	9f 4f       	sbci	r25, 0xFF	; 255
    3836:	08 95       	ret

00003838 <__fp_split3>:
    3838:	57 fd       	sbrc	r21, 7
    383a:	90 58       	subi	r25, 0x80	; 128
    383c:	44 0f       	add	r20, r20
    383e:	55 1f       	adc	r21, r21
    3840:	59 f0       	breq	.+22     	; 0x3858 <__fp_splitA+0x10>
    3842:	5f 3f       	cpi	r21, 0xFF	; 255
    3844:	71 f0       	breq	.+28     	; 0x3862 <__fp_splitA+0x1a>
    3846:	47 95       	ror	r20

00003848 <__fp_splitA>:
    3848:	88 0f       	add	r24, r24
    384a:	97 fb       	bst	r25, 7
    384c:	99 1f       	adc	r25, r25
    384e:	61 f0       	breq	.+24     	; 0x3868 <__fp_splitA+0x20>
    3850:	9f 3f       	cpi	r25, 0xFF	; 255
    3852:	79 f0       	breq	.+30     	; 0x3872 <__fp_splitA+0x2a>
    3854:	87 95       	ror	r24
    3856:	08 95       	ret
    3858:	12 16       	cp	r1, r18
    385a:	13 06       	cpc	r1, r19
    385c:	14 06       	cpc	r1, r20
    385e:	55 1f       	adc	r21, r21
    3860:	f2 cf       	rjmp	.-28     	; 0x3846 <__fp_split3+0xe>
    3862:	46 95       	lsr	r20
    3864:	f1 df       	rcall	.-30     	; 0x3848 <__fp_splitA>
    3866:	08 c0       	rjmp	.+16     	; 0x3878 <__fp_splitA+0x30>
    3868:	16 16       	cp	r1, r22
    386a:	17 06       	cpc	r1, r23
    386c:	18 06       	cpc	r1, r24
    386e:	99 1f       	adc	r25, r25
    3870:	f1 cf       	rjmp	.-30     	; 0x3854 <__fp_splitA+0xc>
    3872:	86 95       	lsr	r24
    3874:	71 05       	cpc	r23, r1
    3876:	61 05       	cpc	r22, r1
    3878:	08 94       	sec
    387a:	08 95       	ret

0000387c <__fp_zero>:
    387c:	e8 94       	clt

0000387e <__fp_szero>:
    387e:	bb 27       	eor	r27, r27
    3880:	66 27       	eor	r22, r22
    3882:	77 27       	eor	r23, r23
    3884:	cb 01       	movw	r24, r22
    3886:	97 f9       	bld	r25, 7
    3888:	08 95       	ret

0000388a <__gesf2>:
    388a:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__fp_cmp>
    388e:	08 f4       	brcc	.+2      	; 0x3892 <__gesf2+0x8>
    3890:	8f ef       	ldi	r24, 0xFF	; 255
    3892:	08 95       	ret

00003894 <__mulsf3>:
    3894:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__mulsf3x>
    3898:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__fp_round>
    389c:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <__fp_pscA>
    38a0:	38 f0       	brcs	.+14     	; 0x38b0 <__mulsf3+0x1c>
    38a2:	0e 94 04 1c 	call	0x3808	; 0x3808 <__fp_pscB>
    38a6:	20 f0       	brcs	.+8      	; 0x38b0 <__mulsf3+0x1c>
    38a8:	95 23       	and	r25, r21
    38aa:	11 f0       	breq	.+4      	; 0x38b0 <__mulsf3+0x1c>
    38ac:	0c 94 f4 1b 	jmp	0x37e8	; 0x37e8 <__fp_inf>
    38b0:	0c 94 fa 1b 	jmp	0x37f4	; 0x37f4 <__fp_nan>
    38b4:	11 24       	eor	r1, r1
    38b6:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__fp_szero>

000038ba <__mulsf3x>:
    38ba:	0e 94 1c 1c 	call	0x3838	; 0x3838 <__fp_split3>
    38be:	70 f3       	brcs	.-36     	; 0x389c <__mulsf3+0x8>

000038c0 <__mulsf3_pse>:
    38c0:	95 9f       	mul	r25, r21
    38c2:	c1 f3       	breq	.-16     	; 0x38b4 <__mulsf3+0x20>
    38c4:	95 0f       	add	r25, r21
    38c6:	50 e0       	ldi	r21, 0x00	; 0
    38c8:	55 1f       	adc	r21, r21
    38ca:	62 9f       	mul	r22, r18
    38cc:	f0 01       	movw	r30, r0
    38ce:	72 9f       	mul	r23, r18
    38d0:	bb 27       	eor	r27, r27
    38d2:	f0 0d       	add	r31, r0
    38d4:	b1 1d       	adc	r27, r1
    38d6:	63 9f       	mul	r22, r19
    38d8:	aa 27       	eor	r26, r26
    38da:	f0 0d       	add	r31, r0
    38dc:	b1 1d       	adc	r27, r1
    38de:	aa 1f       	adc	r26, r26
    38e0:	64 9f       	mul	r22, r20
    38e2:	66 27       	eor	r22, r22
    38e4:	b0 0d       	add	r27, r0
    38e6:	a1 1d       	adc	r26, r1
    38e8:	66 1f       	adc	r22, r22
    38ea:	82 9f       	mul	r24, r18
    38ec:	22 27       	eor	r18, r18
    38ee:	b0 0d       	add	r27, r0
    38f0:	a1 1d       	adc	r26, r1
    38f2:	62 1f       	adc	r22, r18
    38f4:	73 9f       	mul	r23, r19
    38f6:	b0 0d       	add	r27, r0
    38f8:	a1 1d       	adc	r26, r1
    38fa:	62 1f       	adc	r22, r18
    38fc:	83 9f       	mul	r24, r19
    38fe:	a0 0d       	add	r26, r0
    3900:	61 1d       	adc	r22, r1
    3902:	22 1f       	adc	r18, r18
    3904:	74 9f       	mul	r23, r20
    3906:	33 27       	eor	r19, r19
    3908:	a0 0d       	add	r26, r0
    390a:	61 1d       	adc	r22, r1
    390c:	23 1f       	adc	r18, r19
    390e:	84 9f       	mul	r24, r20
    3910:	60 0d       	add	r22, r0
    3912:	21 1d       	adc	r18, r1
    3914:	82 2f       	mov	r24, r18
    3916:	76 2f       	mov	r23, r22
    3918:	6a 2f       	mov	r22, r26
    391a:	11 24       	eor	r1, r1
    391c:	9f 57       	subi	r25, 0x7F	; 127
    391e:	50 40       	sbci	r21, 0x00	; 0
    3920:	9a f0       	brmi	.+38     	; 0x3948 <__mulsf3_pse+0x88>
    3922:	f1 f0       	breq	.+60     	; 0x3960 <__mulsf3_pse+0xa0>
    3924:	88 23       	and	r24, r24
    3926:	4a f0       	brmi	.+18     	; 0x393a <__mulsf3_pse+0x7a>
    3928:	ee 0f       	add	r30, r30
    392a:	ff 1f       	adc	r31, r31
    392c:	bb 1f       	adc	r27, r27
    392e:	66 1f       	adc	r22, r22
    3930:	77 1f       	adc	r23, r23
    3932:	88 1f       	adc	r24, r24
    3934:	91 50       	subi	r25, 0x01	; 1
    3936:	50 40       	sbci	r21, 0x00	; 0
    3938:	a9 f7       	brne	.-22     	; 0x3924 <__mulsf3_pse+0x64>
    393a:	9e 3f       	cpi	r25, 0xFE	; 254
    393c:	51 05       	cpc	r21, r1
    393e:	80 f0       	brcs	.+32     	; 0x3960 <__mulsf3_pse+0xa0>
    3940:	0c 94 f4 1b 	jmp	0x37e8	; 0x37e8 <__fp_inf>
    3944:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__fp_szero>
    3948:	5f 3f       	cpi	r21, 0xFF	; 255
    394a:	e4 f3       	brlt	.-8      	; 0x3944 <__mulsf3_pse+0x84>
    394c:	98 3e       	cpi	r25, 0xE8	; 232
    394e:	d4 f3       	brlt	.-12     	; 0x3944 <__mulsf3_pse+0x84>
    3950:	86 95       	lsr	r24
    3952:	77 95       	ror	r23
    3954:	67 95       	ror	r22
    3956:	b7 95       	ror	r27
    3958:	f7 95       	ror	r31
    395a:	e7 95       	ror	r30
    395c:	9f 5f       	subi	r25, 0xFF	; 255
    395e:	c1 f7       	brne	.-16     	; 0x3950 <__mulsf3_pse+0x90>
    3960:	fe 2b       	or	r31, r30
    3962:	88 0f       	add	r24, r24
    3964:	91 1d       	adc	r25, r1
    3966:	96 95       	lsr	r25
    3968:	87 95       	ror	r24
    396a:	97 f9       	bld	r25, 7
    396c:	08 95       	ret

0000396e <__tablejump2__>:
    396e:	ee 0f       	add	r30, r30
    3970:	ff 1f       	adc	r31, r31
    3972:	05 90       	lpm	r0, Z+
    3974:	f4 91       	lpm	r31, Z
    3976:	e0 2d       	mov	r30, r0
    3978:	09 94       	ijmp

0000397a <__umulhisi3>:
    397a:	a2 9f       	mul	r26, r18
    397c:	b0 01       	movw	r22, r0
    397e:	b3 9f       	mul	r27, r19
    3980:	c0 01       	movw	r24, r0
    3982:	a3 9f       	mul	r26, r19
    3984:	70 0d       	add	r23, r0
    3986:	81 1d       	adc	r24, r1
    3988:	11 24       	eor	r1, r1
    398a:	91 1d       	adc	r25, r1
    398c:	b2 9f       	mul	r27, r18
    398e:	70 0d       	add	r23, r0
    3990:	81 1d       	adc	r24, r1
    3992:	11 24       	eor	r1, r1
    3994:	91 1d       	adc	r25, r1
    3996:	08 95       	ret

00003998 <itoa>:
    3998:	45 32       	cpi	r20, 0x25	; 37
    399a:	51 05       	cpc	r21, r1
    399c:	20 f4       	brcc	.+8      	; 0x39a6 <itoa+0xe>
    399e:	42 30       	cpi	r20, 0x02	; 2
    39a0:	10 f0       	brcs	.+4      	; 0x39a6 <itoa+0xe>
    39a2:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__itoa_ncheck>
    39a6:	fb 01       	movw	r30, r22
    39a8:	10 82       	st	Z, r1
    39aa:	cb 01       	movw	r24, r22
    39ac:	08 95       	ret

000039ae <__itoa_ncheck>:
    39ae:	bb 27       	eor	r27, r27
    39b0:	4a 30       	cpi	r20, 0x0A	; 10
    39b2:	31 f4       	brne	.+12     	; 0x39c0 <__itoa_ncheck+0x12>
    39b4:	99 23       	and	r25, r25
    39b6:	22 f4       	brpl	.+8      	; 0x39c0 <__itoa_ncheck+0x12>
    39b8:	bd e2       	ldi	r27, 0x2D	; 45
    39ba:	90 95       	com	r25
    39bc:	81 95       	neg	r24
    39be:	9f 4f       	sbci	r25, 0xFF	; 255
    39c0:	0c 94 e3 1c 	jmp	0x39c6	; 0x39c6 <__utoa_common>

000039c4 <__utoa_ncheck>:
    39c4:	bb 27       	eor	r27, r27

000039c6 <__utoa_common>:
    39c6:	fb 01       	movw	r30, r22
    39c8:	55 27       	eor	r21, r21
    39ca:	aa 27       	eor	r26, r26
    39cc:	88 0f       	add	r24, r24
    39ce:	99 1f       	adc	r25, r25
    39d0:	aa 1f       	adc	r26, r26
    39d2:	a4 17       	cp	r26, r20
    39d4:	10 f0       	brcs	.+4      	; 0x39da <__utoa_common+0x14>
    39d6:	a4 1b       	sub	r26, r20
    39d8:	83 95       	inc	r24
    39da:	50 51       	subi	r21, 0x10	; 16
    39dc:	b9 f7       	brne	.-18     	; 0x39cc <__utoa_common+0x6>
    39de:	a0 5d       	subi	r26, 0xD0	; 208
    39e0:	aa 33       	cpi	r26, 0x3A	; 58
    39e2:	08 f0       	brcs	.+2      	; 0x39e6 <__utoa_common+0x20>
    39e4:	a9 5d       	subi	r26, 0xD9	; 217
    39e6:	a1 93       	st	Z+, r26
    39e8:	00 97       	sbiw	r24, 0x00	; 0
    39ea:	79 f7       	brne	.-34     	; 0x39ca <__utoa_common+0x4>
    39ec:	b1 11       	cpse	r27, r1
    39ee:	b1 93       	st	Z+, r27
    39f0:	11 92       	st	Z+, r1
    39f2:	cb 01       	movw	r24, r22
    39f4:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <strrev>

000039f8 <strrev>:
    39f8:	dc 01       	movw	r26, r24
    39fa:	fc 01       	movw	r30, r24
    39fc:	67 2f       	mov	r22, r23
    39fe:	71 91       	ld	r23, Z+
    3a00:	77 23       	and	r23, r23
    3a02:	e1 f7       	brne	.-8      	; 0x39fc <strrev+0x4>
    3a04:	32 97       	sbiw	r30, 0x02	; 2
    3a06:	04 c0       	rjmp	.+8      	; 0x3a10 <strrev+0x18>
    3a08:	7c 91       	ld	r23, X
    3a0a:	6d 93       	st	X+, r22
    3a0c:	70 83       	st	Z, r23
    3a0e:	62 91       	ld	r22, -Z
    3a10:	ae 17       	cp	r26, r30
    3a12:	bf 07       	cpc	r27, r31
    3a14:	c8 f3       	brcs	.-14     	; 0x3a08 <strrev+0x10>
    3a16:	08 95       	ret

00003a18 <_exit>:
    3a18:	f8 94       	cli

00003a1a <__stop_program>:
    3a1a:	ff cf       	rjmp	.-2      	; 0x3a1a <__stop_program>
