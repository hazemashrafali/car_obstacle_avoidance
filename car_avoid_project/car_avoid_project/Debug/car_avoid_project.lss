
car_avoid_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000443a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  0000443a  000044ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000059  0080016e  0080016e  000045dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000045dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000460c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  00004648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006904  00000000  00000000  00004a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000154c  00000000  00000000  0000b374  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000046d6  00000000  00000000  0000c8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d9c  00000000  00000000  00010f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002031  00000000  00000000  00011d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006c23  00000000  00000000  00013d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  0001a988  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__ctors_end>
       4:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__vector_1>
       8:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__vector_2>
       c:	0c 94 93 10 	jmp	0x2126	; 0x2126 <__vector_3>
      10:	0c 94 c6 15 	jmp	0x2b8c	; 0x2b8c <__vector_4>
      14:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__vector_5>
      18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      1c:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <__vector_7>
      20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      24:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <__vector_9>
      28:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__vector_10>
      2c:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__vector_11>
      30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      54:	9b 01       	movw	r18, r22
      56:	c1 01       	movw	r24, r2
      58:	62 02       	muls	r22, r18
      5a:	e1 01       	movw	r28, r2
      5c:	05 02       	muls	r16, r21
      5e:	24 02       	muls	r18, r20
      60:	43 02       	muls	r20, r19
      62:	5f 13       	cpse	r21, r31
      64:	64 13       	cpse	r22, r20
      66:	6a 13       	cpse	r22, r26
      68:	1a 14       	cp	r1, r10
      6a:	70 13       	cpse	r23, r16
      6c:	1a 14       	cp	r1, r10
      6e:	76 13       	cpse	r23, r22
      70:	7c 13       	cpse	r23, r28
      72:	82 13       	cpse	r24, r18
      74:	88 13       	cpse	r24, r24
      76:	a2 13       	cpse	r26, r18
      78:	a7 13       	cpse	r26, r23
      7a:	ad 13       	cpse	r26, r29
      7c:	22 14       	cp	r2, r2
      7e:	b3 13       	cpse	r27, r19
      80:	22 14       	cp	r2, r2
      82:	b9 13       	cpse	r27, r25
      84:	bf 13       	cpse	r27, r31
      86:	c5 13       	cpse	r28, r21
      88:	cb 13       	cpse	r28, r27
      8a:	e0 13       	cpse	r30, r16
      8c:	e5 13       	cpse	r30, r21
      8e:	eb 13       	cpse	r30, r27
      90:	f1 13       	cpse	r31, r17
      92:	f7 13       	cpse	r31, r23
      94:	fd 13       	cpse	r31, r29
      96:	03 14       	cp	r0, r3
      98:	09 14       	cp	r0, r9

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf e5       	ldi	r28, 0x5F	; 95
      a0:	d8 e0       	ldi	r29, 0x08	; 8
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e6       	ldi	r26, 0x60	; 96
      aa:	b0 e0       	ldi	r27, 0x00	; 0
      ac:	ea e3       	ldi	r30, 0x3A	; 58
      ae:	f4 e4       	ldi	r31, 0x44	; 68
      b0:	02 c0       	rjmp	.+4      	; 0xb6 <__do_copy_data+0x10>
      b2:	05 90       	lpm	r0, Z+
      b4:	0d 92       	st	X+, r0
      b6:	ae 36       	cpi	r26, 0x6E	; 110
      b8:	b1 07       	cpc	r27, r17
      ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0xc>

000000bc <__do_clear_bss>:
      bc:	21 e0       	ldi	r18, 0x01	; 1
      be:	ae e6       	ldi	r26, 0x6E	; 110
      c0:	b1 e0       	ldi	r27, 0x01	; 1
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
      c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
      c6:	a7 3c       	cpi	r26, 0xC7	; 199
      c8:	b2 07       	cpc	r27, r18
      ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
      cc:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <main>
      d0:	0c 94 1b 22 	jmp	0x4436	; 0x4436 <_exit>

000000d4 <__bad_interrupt>:
      d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <car_powerOn>:
		LCD_displayStringRowColumn(1,0,"LEFT");	
	}
	else
	{
		LCD_displayString("     ");
		LCD_displayStringRowColumn(1,0,"RIGHT");
      d8:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <gl_enu_car_power>
      dc:	82 30       	cpi	r24, 0x02	; 2
      de:	19 f0       	breq	.+6      	; 0xe6 <car_powerOn+0xe>
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <gl_enu_car_power>
      e6:	08 95       	ret

000000e8 <car_powerOff>:
      e8:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <gl_enu_car_power>
      ec:	08 95       	ret

000000ee <robot_control>:
      ee:	af 92       	push	r10
      f0:	bf 92       	push	r11
      f2:	cf 92       	push	r12
      f4:	df 92       	push	r13
      f6:	ef 92       	push	r14
      f8:	0f 93       	push	r16
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	5b 01       	movw	r10, r22
     100:	6a 01       	movw	r12, r20
     102:	e9 01       	movw	r28, r18
     104:	01 11       	cpse	r16, r1
     106:	14 c0       	rjmp	.+40     	; 0x130 <robot_control+0x42>
     108:	4e 2d       	mov	r20, r14
     10a:	60 e0       	ldi	r22, 0x00	; 0
     10c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     110:	4e 2d       	mov	r20, r14
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	c5 01       	movw	r24, r10
     116:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     11a:	4e 2d       	mov	r20, r14
     11c:	60 e0       	ldi	r22, 0x00	; 0
     11e:	c6 01       	movw	r24, r12
     120:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     124:	4e 2d       	mov	r20, r14
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	ce 01       	movw	r24, r28
     12a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     12e:	4f c0       	rjmp	.+158    	; 0x1ce <robot_control+0xe0>
     130:	01 30       	cpi	r16, 0x01	; 1
     132:	a1 f4       	brne	.+40     	; 0x15c <robot_control+0x6e>
     134:	4e 2d       	mov	r20, r14
     136:	61 e0       	ldi	r22, 0x01	; 1
     138:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     13c:	4e 2d       	mov	r20, r14
     13e:	61 e0       	ldi	r22, 0x01	; 1
     140:	c5 01       	movw	r24, r10
     142:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     146:	4e 2d       	mov	r20, r14
     148:	61 e0       	ldi	r22, 0x01	; 1
     14a:	c6 01       	movw	r24, r12
     14c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     150:	4e 2d       	mov	r20, r14
     152:	61 e0       	ldi	r22, 0x01	; 1
     154:	ce 01       	movw	r24, r28
     156:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     15a:	39 c0       	rjmp	.+114    	; 0x1ce <robot_control+0xe0>
     15c:	03 30       	cpi	r16, 0x03	; 3
     15e:	a1 f4       	brne	.+40     	; 0x188 <robot_control+0x9a>
     160:	4e 2d       	mov	r20, r14
     162:	61 e0       	ldi	r22, 0x01	; 1
     164:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     168:	4e 2d       	mov	r20, r14
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	c5 01       	movw	r24, r10
     16e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     172:	4e 2d       	mov	r20, r14
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	c6 01       	movw	r24, r12
     178:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     17c:	4e 2d       	mov	r20, r14
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	ce 01       	movw	r24, r28
     182:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     186:	23 c0       	rjmp	.+70     	; 0x1ce <robot_control+0xe0>
     188:	02 30       	cpi	r16, 0x02	; 2
     18a:	a1 f4       	brne	.+40     	; 0x1b4 <robot_control+0xc6>
     18c:	4e 2d       	mov	r20, r14
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     194:	4e 2d       	mov	r20, r14
     196:	61 e0       	ldi	r22, 0x01	; 1
     198:	c5 01       	movw	r24, r10
     19a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     19e:	4e 2d       	mov	r20, r14
     1a0:	61 e0       	ldi	r22, 0x01	; 1
     1a2:	c6 01       	movw	r24, r12
     1a4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     1a8:	4e 2d       	mov	r20, r14
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	ce 01       	movw	r24, r28
     1ae:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <dcMotor_rotate>
     1b2:	0d c0       	rjmp	.+26     	; 0x1ce <robot_control+0xe0>
     1b4:	04 30       	cpi	r16, 0x04	; 4
     1b6:	59 f4       	brne	.+22     	; 0x1ce <robot_control+0xe0>
     1b8:	0e 94 32 05 	call	0xa64	; 0xa64 <dcMotor_stop>
     1bc:	c5 01       	movw	r24, r10
     1be:	0e 94 32 05 	call	0xa64	; 0xa64 <dcMotor_stop>
     1c2:	c6 01       	movw	r24, r12
     1c4:	0e 94 32 05 	call	0xa64	; 0xa64 <dcMotor_stop>
     1c8:	ce 01       	movw	r24, r28
     1ca:	0e 94 32 05 	call	0xa64	; 0xa64 <dcMotor_stop>
     1ce:	df 91       	pop	r29
     1d0:	cf 91       	pop	r28
     1d2:	0f 91       	pop	r16
     1d4:	ef 90       	pop	r14
     1d6:	df 90       	pop	r13
     1d8:	cf 90       	pop	r12
     1da:	bf 90       	pop	r11
     1dc:	af 90       	pop	r10
     1de:	08 95       	ret

000001e0 <read_event>:
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	1f 92       	push	r1
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	8c 01       	movw	r16, r24
     1f0:	19 82       	std	Y+1, r1	; 0x01
     1f2:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <Ultrasonic_readDistance>
     1f6:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <gl_enu_car_power>
     1fa:	81 30       	cpi	r24, 0x01	; 1
     1fc:	49 f4       	brne	.+18     	; 0x210 <read_event+0x30>
     1fe:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <st_bo_l_event_flag.2252>
     202:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <st_bo_l_timeout_active_flag.2253>
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <gl_enu_car_power>
     20c:	87 e0       	ldi	r24, 0x07	; 7
     20e:	74 c0       	rjmp	.+232    	; 0x2f8 <read_event+0x118>
     210:	81 11       	cpse	r24, r1
     212:	06 c0       	rjmp	.+12     	; 0x220 <read_event+0x40>
     214:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <st_bo_l_event_flag.2252>
     218:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <st_bo_l_timeout_active_flag.2253>
     21c:	86 e0       	ldi	r24, 0x06	; 6
     21e:	6c c0       	rjmp	.+216    	; 0x2f8 <read_event+0x118>
     220:	f8 01       	movw	r30, r16
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	86 34       	cpi	r24, 0x46	; 70
     228:	91 05       	cpc	r25, r1
     22a:	10 f1       	brcs	.+68     	; 0x270 <read_event+0x90>
     22c:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <st_bo_l_event_flag.2252>
     230:	21 11       	cpse	r18, r1
     232:	1e c0       	rjmp	.+60     	; 0x270 <read_event+0x90>
     234:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
     238:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <st_bo_l_timeout_active_flag.2253>
     23c:	81 11       	cpse	r24, r1
     23e:	0a c0       	rjmp	.+20     	; 0x254 <read_event+0x74>
     240:	40 e0       	ldi	r20, 0x00	; 0
     242:	50 e0       	ldi	r21, 0x00	; 0
     244:	60 ea       	ldi	r22, 0xA0	; 160
     246:	70 e4       	ldi	r23, 0x40	; 64
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	0e 94 26 0c 	call	0x184c	; 0x184c <timeOut_sec>
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <st_bo_l_timeout_active_flag.2253>
     254:	be 01       	movw	r22, r28
     256:	6f 5f       	subi	r22, 0xFF	; 255
     258:	7f 4f       	sbci	r23, 0xFF	; 255
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	0e 94 4e 09 	call	0x129c	; 0x129c <timer_check_time_out_flag>
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	81 30       	cpi	r24, 0x01	; 1
     264:	09 f0       	breq	.+2      	; 0x268 <read_event+0x88>
     266:	45 c0       	rjmp	.+138    	; 0x2f2 <read_event+0x112>
     268:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <st_bo_l_event_flag.2252>
     26c:	85 e0       	ldi	r24, 0x05	; 5
     26e:	44 c0       	rjmp	.+136    	; 0x2f8 <read_event+0x118>
     270:	86 34       	cpi	r24, 0x46	; 70
     272:	91 05       	cpc	r25, r1
     274:	50 f0       	brcs	.+20     	; 0x28a <read_event+0xaa>
     276:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <st_bo_l_event_flag.2252>
     27a:	21 30       	cpi	r18, 0x01	; 1
     27c:	31 f4       	brne	.+12     	; 0x28a <read_event+0xaa>
     27e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
     282:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <st_bo_l_timeout_active_flag.2253>
     286:	85 e0       	ldi	r24, 0x05	; 5
     288:	37 c0       	rjmp	.+110    	; 0x2f8 <read_event+0x118>
     28a:	9c 01       	movw	r18, r24
     28c:	2e 51       	subi	r18, 0x1E	; 30
     28e:	31 09       	sbc	r19, r1
     290:	28 32       	cpi	r18, 0x28	; 40
     292:	31 05       	cpc	r19, r1
     294:	40 f4       	brcc	.+16     	; 0x2a6 <read_event+0xc6>
     296:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <st_bo_l_timeout_active_flag.2253>
     29a:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
     29e:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <st_bo_l_event_flag.2252>
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	29 c0       	rjmp	.+82     	; 0x2f8 <read_event+0x118>
     2a6:	9c 01       	movw	r18, r24
     2a8:	24 51       	subi	r18, 0x14	; 20
     2aa:	31 09       	sbc	r19, r1
     2ac:	2a 30       	cpi	r18, 0x0A	; 10
     2ae:	31 05       	cpc	r19, r1
     2b0:	70 f4       	brcc	.+28     	; 0x2ce <read_event+0xee>
     2b2:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <st_bo_l_timeout_active_flag.2253>
     2b6:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <st_bo_l_event_flag.2252>
     2ba:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     2be:	8f 5f       	subi	r24, 0xFF	; 255
     2c0:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__data_end>
     2c4:	84 30       	cpi	r24, 0x04	; 4
     2c6:	b9 f4       	brne	.+46     	; 0x2f6 <read_event+0x116>
     2c8:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
     2cc:	15 c0       	rjmp	.+42     	; 0x2f8 <read_event+0x118>
     2ce:	44 97       	sbiw	r24, 0x14	; 20
     2d0:	40 f4       	brcc	.+16     	; 0x2e2 <read_event+0x102>
     2d2:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <st_bo_l_event_flag.2252>
     2d6:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
     2da:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <st_bo_l_timeout_active_flag.2253>
     2de:	83 e0       	ldi	r24, 0x03	; 3
     2e0:	0b c0       	rjmp	.+22     	; 0x2f8 <read_event+0x118>
     2e2:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <st_bo_l_event_flag.2252>
     2e6:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
     2ea:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <st_bo_l_timeout_active_flag.2253>
     2ee:	88 e0       	ldi	r24, 0x08	; 8
     2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <read_event+0x118>
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <read_event+0x118>
     2f6:	82 e0       	ldi	r24, 0x02	; 2
     2f8:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <gl_enu_car_power>
     2fc:	91 11       	cpse	r25, r1
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <read_event+0x122>
     300:	86 e0       	ldi	r24, 0x06	; 6
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	08 95       	ret

0000030e <car_stateMachine>:
     30e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <st_enu_carEvents.2285>
     312:	98 17       	cp	r25, r24
     314:	09 f4       	brne	.+2      	; 0x318 <car_stateMachine+0xa>
     316:	db c0       	rjmp	.+438    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     318:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <st_enu_carEvents.2285>
     31c:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <st_enu_carStates.2284>
     320:	4e 2f       	mov	r20, r30
     322:	50 e0       	ldi	r21, 0x00	; 0
     324:	47 30       	cpi	r20, 0x07	; 7
     326:	51 05       	cpc	r21, r1
     328:	08 f0       	brcs	.+2      	; 0x32c <car_stateMachine+0x1e>
     32a:	d1 c0       	rjmp	.+418    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     32c:	fa 01       	movw	r30, r20
     32e:	e6 5d       	subi	r30, 0xD6	; 214
     330:	ff 4f       	sbci	r31, 0xFF	; 255
     332:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__tablejump2__>
     336:	82 30       	cpi	r24, 0x02	; 2
     338:	a1 f0       	breq	.+40     	; 0x362 <car_stateMachine+0x54>
     33a:	28 f4       	brcc	.+10     	; 0x346 <car_stateMachine+0x38>
     33c:	88 23       	and	r24, r24
     33e:	59 f0       	breq	.+22     	; 0x356 <car_stateMachine+0x48>
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	61 f0       	breq	.+24     	; 0x35c <car_stateMachine+0x4e>
     344:	c4 c0       	rjmp	.+392    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     346:	85 30       	cpi	r24, 0x05	; 5
     348:	a1 f0       	breq	.+40     	; 0x372 <car_stateMachine+0x64>
     34a:	86 30       	cpi	r24, 0x06	; 6
     34c:	b1 f0       	breq	.+44     	; 0x37a <car_stateMachine+0x6c>
     34e:	83 30       	cpi	r24, 0x03	; 3
     350:	09 f0       	breq	.+2      	; 0x354 <car_stateMachine+0x46>
     352:	bd c0       	rjmp	.+378    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     354:	0a c0       	rjmp	.+20     	; 0x36a <car_stateMachine+0x5c>
     356:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <st_enu_carStates.2284>
     35a:	b9 c0       	rjmp	.+370    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     35c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <st_enu_carStates.2284>
     360:	b6 c0       	rjmp	.+364    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     362:	83 e0       	ldi	r24, 0x03	; 3
     364:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     368:	b2 c0       	rjmp	.+356    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     36a:	84 e0       	ldi	r24, 0x04	; 4
     36c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     370:	ae c0       	rjmp	.+348    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     378:	aa c0       	rjmp	.+340    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     37a:	82 e0       	ldi	r24, 0x02	; 2
     37c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     380:	a6 c0       	rjmp	.+332    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     382:	82 30       	cpi	r24, 0x02	; 2
     384:	91 f0       	breq	.+36     	; 0x3aa <car_stateMachine+0x9c>
     386:	28 f4       	brcc	.+10     	; 0x392 <car_stateMachine+0x84>
     388:	88 23       	and	r24, r24
     38a:	41 f0       	breq	.+16     	; 0x39c <car_stateMachine+0x8e>
     38c:	81 30       	cpi	r24, 0x01	; 1
     38e:	51 f0       	breq	.+20     	; 0x3a4 <car_stateMachine+0x96>
     390:	9e c0       	rjmp	.+316    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     392:	83 30       	cpi	r24, 0x03	; 3
     394:	71 f0       	breq	.+28     	; 0x3b2 <car_stateMachine+0xa4>
     396:	86 30       	cpi	r24, 0x06	; 6
     398:	81 f0       	breq	.+32     	; 0x3ba <car_stateMachine+0xac>
     39a:	99 c0       	rjmp	.+306    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     3a2:	95 c0       	rjmp	.+298    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     3a4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <st_enu_carStates.2284>
     3a8:	92 c0       	rjmp	.+292    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     3aa:	83 e0       	ldi	r24, 0x03	; 3
     3ac:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     3b0:	8e c0       	rjmp	.+284    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     3b2:	84 e0       	ldi	r24, 0x04	; 4
     3b4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     3b8:	8a c0       	rjmp	.+276    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     3c0:	86 c0       	rjmp	.+268    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     3c2:	82 30       	cpi	r24, 0x02	; 2
     3c4:	91 f0       	breq	.+36     	; 0x3ea <car_stateMachine+0xdc>
     3c6:	28 f4       	brcc	.+10     	; 0x3d2 <car_stateMachine+0xc4>
     3c8:	88 23       	and	r24, r24
     3ca:	49 f0       	breq	.+18     	; 0x3de <car_stateMachine+0xd0>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	51 f0       	breq	.+20     	; 0x3e4 <car_stateMachine+0xd6>
     3d0:	7e c0       	rjmp	.+252    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     3d2:	84 30       	cpi	r24, 0x04	; 4
     3d4:	91 f0       	breq	.+36     	; 0x3fa <car_stateMachine+0xec>
     3d6:	68 f0       	brcs	.+26     	; 0x3f2 <car_stateMachine+0xe4>
     3d8:	86 30       	cpi	r24, 0x06	; 6
     3da:	99 f0       	breq	.+38     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3dc:	78 c0       	rjmp	.+240    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     3de:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <st_enu_carStates.2284>
     3e2:	75 c0       	rjmp	.+234    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     3e4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <st_enu_carStates.2284>
     3e8:	72 c0       	rjmp	.+228    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     3f0:	6e c0       	rjmp	.+220    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     3f2:	84 e0       	ldi	r24, 0x04	; 4
     3f4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     3f8:	6a c0       	rjmp	.+212    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     3fa:	85 e0       	ldi	r24, 0x05	; 5
     3fc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     400:	66 c0       	rjmp	.+204    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     402:	82 e0       	ldi	r24, 0x02	; 2
     404:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     408:	62 c0       	rjmp	.+196    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     40a:	82 30       	cpi	r24, 0x02	; 2
     40c:	89 f0       	breq	.+34     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     40e:	28 f4       	brcc	.+10     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     410:	88 23       	and	r24, r24
     412:	41 f0       	breq	.+16     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     414:	81 30       	cpi	r24, 0x01	; 1
     416:	49 f0       	breq	.+18     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     418:	5a c0       	rjmp	.+180    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     41a:	83 30       	cpi	r24, 0x03	; 3
     41c:	69 f0       	breq	.+26     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     41e:	86 30       	cpi	r24, 0x06	; 6
     420:	79 f0       	breq	.+30     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     422:	55 c0       	rjmp	.+170    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     424:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <st_enu_carStates.2284>
     428:	52 c0       	rjmp	.+164    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     42a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <st_enu_carStates.2284>
     42e:	4f c0       	rjmp	.+158    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     430:	83 e0       	ldi	r24, 0x03	; 3
     432:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     436:	4b c0       	rjmp	.+150    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     438:	84 e0       	ldi	r24, 0x04	; 4
     43a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     43e:	47 c0       	rjmp	.+142    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     446:	43 c0       	rjmp	.+134    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     448:	82 30       	cpi	r24, 0x02	; 2
     44a:	89 f0       	breq	.+34     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     44c:	28 f4       	brcc	.+10     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     44e:	88 23       	and	r24, r24
     450:	41 f0       	breq	.+16     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     452:	81 30       	cpi	r24, 0x01	; 1
     454:	49 f0       	breq	.+18     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     456:	3b c0       	rjmp	.+118    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     458:	83 30       	cpi	r24, 0x03	; 3
     45a:	69 f0       	breq	.+26     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     45c:	86 30       	cpi	r24, 0x06	; 6
     45e:	79 f0       	breq	.+30     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     460:	36 c0       	rjmp	.+108    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     462:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <st_enu_carStates.2284>
     466:	33 c0       	rjmp	.+102    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     468:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <st_enu_carStates.2284>
     46c:	30 c0       	rjmp	.+96     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     46e:	83 e0       	ldi	r24, 0x03	; 3
     470:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     474:	2c c0       	rjmp	.+88     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     476:	84 e0       	ldi	r24, 0x04	; 4
     478:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     47c:	28 c0       	rjmp	.+80     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     484:	24 c0       	rjmp	.+72     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	89 f0       	breq	.+34     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     48a:	28 f4       	brcc	.+10     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     48c:	88 23       	and	r24, r24
     48e:	41 f0       	breq	.+16     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     490:	81 30       	cpi	r24, 0x01	; 1
     492:	49 f0       	breq	.+18     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     494:	1c c0       	rjmp	.+56     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     496:	83 30       	cpi	r24, 0x03	; 3
     498:	69 f0       	breq	.+26     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
     49a:	86 30       	cpi	r24, 0x06	; 6
     49c:	79 f0       	breq	.+30     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     49e:	17 c0       	rjmp	.+46     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     4a0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <st_enu_carStates.2284>
     4a4:	14 c0       	rjmp	.+40     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     4a6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <st_enu_carStates.2284>
     4aa:	11 c0       	rjmp	.+34     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     4b2:	0d c0       	rjmp	.+26     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     4b4:	84 e0       	ldi	r24, 0x04	; 4
     4b6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     4ba:	09 c0       	rjmp	.+18     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     4c2:	05 c0       	rjmp	.+10     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     4c4:	87 30       	cpi	r24, 0x07	; 7
     4c6:	19 f4       	brne	.+6      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     4c8:	86 e0       	ldi	r24, 0x06	; 6
     4ca:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <st_enu_carStates.2284>
     4ce:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <st_enu_carStates.2284>
     4d2:	08 95       	ret

000004d4 <car_welcome_screen>:
     4d4:	46 ee       	ldi	r20, 0xE6	; 230
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	62 e0       	ldi	r22, 0x02	; 2
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
     4e0:	43 ef       	ldi	r20, 0xF3	; 243
     4e2:	50 e0       	ldi	r21, 0x00	; 0
     4e4:	63 e0       	ldi	r22, 0x03	; 3
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
     4ec:	40 e0       	ldi	r20, 0x00	; 0
     4ee:	50 e8       	ldi	r21, 0x80	; 128
     4f0:	6b e3       	ldi	r22, 0x3B	; 59
     4f2:	75 e4       	ldi	r23, 0x45	; 69
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	0e 94 8e 09 	call	0x131c	; 0x131c <delay_ms>
     4fa:	0e 94 a0 07 	call	0xf40	; 0xf40 <LCD_clearScreen>
     4fe:	08 95       	ret

00000500 <app_init>:
     500:	0e 94 bc 10 	call	0x2178	; 0x2178 <enable_global_interrupt>
     504:	0e 94 ac 06 	call	0xd58	; 0xd58 <LCD_init>
     508:	67 e0       	ldi	r22, 0x07	; 7
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	0e 94 8f 04 	call	0x91e	; 0x91e <button_init>
     510:	63 e0       	ldi	r22, 0x03	; 3
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Init_external_interrupt>
     518:	63 e0       	ldi	r22, 0x03	; 3
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Init_external_interrupt>
     520:	84 e7       	ldi	r24, 0x74	; 116
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 23 10 	call	0x2046	; 0x2046 <interrupt0_set_callback>
     528:	8c e6       	ldi	r24, 0x6C	; 108
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 2d 10 	call	0x205a	; 0x205a <interrupt1_set_callback>
     530:	42 e0       	ldi	r20, 0x02	; 2
     532:	63 e0       	ldi	r22, 0x03	; 3
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Ultrasonic_init>
     53a:	85 e7       	ldi	r24, 0x75	; 117
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 b4 04 	call	0x968	; 0x968 <dcMotor_init>
     542:	8f e6       	ldi	r24, 0x6F	; 111
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 b4 04 	call	0x968	; 0x968 <dcMotor_init>
     54a:	89 e6       	ldi	r24, 0x69	; 105
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 b4 04 	call	0x968	; 0x968 <dcMotor_init>
     552:	83 e6       	ldi	r24, 0x63	; 99
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 b4 04 	call	0x968	; 0x968 <dcMotor_init>
     55a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <car_welcome_screen>
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	0e 94 08 10 	call	0x2010	; 0x2010 <enable_external_interrupt>
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	0e 94 08 10 	call	0x2010	; 0x2010 <enable_external_interrupt>
     56a:	08 95       	ret

0000056c <car_updtae_screen>:
	}
}

void car_updtae_screen (enu_lcd_page_t enu_lcd_page,uint16 u16_distance,uint8 u8_car_speed,enu_car_direction_t enu_car_direction)
{
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	c8 2f       	mov	r28, r24
     578:	7b 01       	movw	r14, r22
     57a:	14 2f       	mov	r17, r20
     57c:	d2 2f       	mov	r29, r18
	static enu_lcd_page_t st_enu_lcd_page = ENU_MAX_PAGE;
	if((st_enu_lcd_page != enu_lcd_page))
     57e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     582:	8c 13       	cpse	r24, r28
	{
		LCD_clearScreen();
     584:	0e 94 a0 07 	call	0xf40	; 0xf40 <LCD_clearScreen>
	}
	if(enu_lcd_page == ENU_PAGE_WELCOME)
     588:	c1 30       	cpi	r28, 0x01	; 1
     58a:	69 f4       	brne	.+26     	; 0x5a6 <car_updtae_screen+0x3a>
	{
		LCD_displayStringRowColumn(0,2,"CAR OBSTACLE");
     58c:	46 ee       	ldi	r20, 0xE6	; 230
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	62 e0       	ldi	r22, 0x02	; 2
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,3,"AVOIDANCE");
     598:	43 ef       	ldi	r20, 0xF3	; 243
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	63 e0       	ldi	r22, 0x03	; 3
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
     5a4:	a8 c0       	rjmp	.+336    	; 0x6f6 <car_updtae_screen+0x18a>
	}
	else if(enu_lcd_page == ENU_PAGE_MSG_1)
     5a6:	c3 30       	cpi	r28, 0x03	; 3
     5a8:	59 f4       	brne	.+22     	; 0x5c0 <car_updtae_screen+0x54>
	{
		LCD_displayString("press start");
     5aa:	85 e1       	ldi	r24, 0x15	; 21
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"to start the car");
     5b2:	41 e2       	ldi	r20, 0x21	; 33
     5b4:	51 e0       	ldi	r21, 0x01	; 1
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
     5be:	9b c0       	rjmp	.+310    	; 0x6f6 <car_updtae_screen+0x18a>
	}
	else if(enu_lcd_page == ENU_PAGE_MSG_2)
     5c0:	c4 30       	cpi	r28, 0x04	; 4
     5c2:	59 f4       	brne	.+22     	; 0x5da <car_updtae_screen+0x6e>
	{
		LCD_displayString("car stopped");
     5c4:	82 e3       	ldi	r24, 0x32	; 50
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"for 3 seconds");
     5cc:	4e e3       	ldi	r20, 0x3E	; 62
     5ce:	51 e0       	ldi	r21, 0x01	; 1
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
     5d8:	8e c0       	rjmp	.+284    	; 0x6f6 <car_updtae_screen+0x18a>
	}
	else if(enu_lcd_page == ENU_PAGE_INIT)
     5da:	c2 30       	cpi	r28, 0x02	; 2
     5dc:	11 f5       	brne	.+68     	; 0x622 <car_updtae_screen+0xb6>
	{
		LCD_displayStringRowColumn(0,0,"set Def. Rot");
     5de:	4d ef       	ldi	r20, 0xFD	; 253
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
		if (enu_car_direction == ENU_LFT_DIR)
     5ea:	d3 30       	cpi	r29, 0x03	; 3
     5ec:	69 f4       	brne	.+26     	; 0x608 <car_updtae_screen+0x9c>
		{
			LCD_displayStringRowColumn(1,0,"      ");
     5ee:	4c e4       	ldi	r20, 0x4C	; 76
     5f0:	51 e0       	ldi	r21, 0x01	; 1
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"LEFT");
     5fa:	4a e0       	ldi	r20, 0x0A	; 10
     5fc:	51 e0       	ldi	r21, 0x01	; 1
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
     606:	77 c0       	rjmp	.+238    	; 0x6f6 <car_updtae_screen+0x18a>
		}
		else
		{
			LCD_displayStringRowColumn(1,0,"      ");
     608:	4c e4       	ldi	r20, 0x4C	; 76
     60a:	51 e0       	ldi	r21, 0x01	; 1
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"RIGHT");
     614:	4f e0       	ldi	r20, 0x0F	; 15
     616:	51 e0       	ldi	r21, 0x01	; 1
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
     620:	6a c0       	rjmp	.+212    	; 0x6f6 <car_updtae_screen+0x18a>
		}
	}
	else if(enu_lcd_page == ENU_PAGE_INFO)
     622:	c1 11       	cpse	r28, r1
     624:	68 c0       	rjmp	.+208    	; 0x6f6 <car_updtae_screen+0x18a>
	{
		LCD_displayStringRowColumn(0,0,"Dis= ");
     626:	40 ee       	ldi	r20, 0xE0	; 224
     628:	50 e0       	ldi	r21, 0x00	; 0
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
		LCD_moveCursor(0,4);
     632:	64 e0       	ldi	r22, 0x04	; 4
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_moveCursor>
		LCD_intgerToString(u16_distance);
     63a:	c7 01       	movw	r24, r14
     63c:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_intgerToString>
		LCD_displayString("CM");
     640:	83 e5       	ldi	r24, 0x53	; 83
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_displayString>
		LCD_displayStringRowColumn(0,11,"S:");
     648:	46 e5       	ldi	r20, 0x56	; 86
     64a:	51 e0       	ldi	r21, 0x01	; 1
     64c:	6b e0       	ldi	r22, 0x0B	; 11
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
		LCD_intgerToString(u8_car_speed);
     654:	81 2f       	mov	r24, r17
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_intgerToString>
		LCD_displayStringRowColumn(1,0,"dir:");
     65c:	49 e5       	ldi	r20, 0x59	; 89
     65e:	51 e0       	ldi	r21, 0x01	; 1
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
		LCD_moveCursor(1,4);
     668:	64 e0       	ldi	r22, 0x04	; 4
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_moveCursor>
		switch(enu_car_direction)
     670:	d2 30       	cpi	r29, 0x02	; 2
     672:	09 f1       	breq	.+66     	; 0x6b6 <car_updtae_screen+0x14a>
     674:	28 f4       	brcc	.+10     	; 0x680 <car_updtae_screen+0x114>
     676:	dd 23       	and	r29, r29
     678:	41 f0       	breq	.+16     	; 0x68a <car_updtae_screen+0x11e>
     67a:	d1 30       	cpi	r29, 0x01	; 1
     67c:	89 f0       	breq	.+34     	; 0x6a0 <car_updtae_screen+0x134>
     67e:	3b c0       	rjmp	.+118    	; 0x6f6 <car_updtae_screen+0x18a>
     680:	d3 30       	cpi	r29, 0x03	; 3
     682:	21 f1       	breq	.+72     	; 0x6cc <car_updtae_screen+0x160>
     684:	d4 30       	cpi	r29, 0x04	; 4
     686:	69 f1       	breq	.+90     	; 0x6e2 <car_updtae_screen+0x176>
     688:	36 c0       	rjmp	.+108    	; 0x6f6 <car_updtae_screen+0x18a>
		{
			case ENU_FWD_DIR:
			{
				LCD_displayString("     ");
     68a:	8d e4       	ldi	r24, 0x4D	; 77
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_displayString>
				LCD_displayStringRowColumn(1,4,"FWD");
     692:	4e e5       	ldi	r20, 0x5E	; 94
     694:	51 e0       	ldi	r21, 0x01	; 1
     696:	64 e0       	ldi	r22, 0x04	; 4
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
			}
			break;
     69e:	2b c0       	rjmp	.+86     	; 0x6f6 <car_updtae_screen+0x18a>
			case ENU_BWD_DIR:
			{
				LCD_displayString("     ");
     6a0:	8d e4       	ldi	r24, 0x4D	; 77
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_displayString>
				LCD_displayStringRowColumn(1,4,"BWD");
     6a8:	42 e6       	ldi	r20, 0x62	; 98
     6aa:	51 e0       	ldi	r21, 0x01	; 1
     6ac:	64 e0       	ldi	r22, 0x04	; 4
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
			}
			break;
     6b4:	20 c0       	rjmp	.+64     	; 0x6f6 <car_updtae_screen+0x18a>
			case ENU_RHT_DIR:
			{
				LCD_displayString("     ");
     6b6:	8d e4       	ldi	r24, 0x4D	; 77
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_displayString>
				LCD_displayStringRowColumn(1,4,"RHT");
     6be:	46 e6       	ldi	r20, 0x66	; 102
     6c0:	51 e0       	ldi	r21, 0x01	; 1
     6c2:	64 e0       	ldi	r22, 0x04	; 4
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>

			}
			break;
     6ca:	15 c0       	rjmp	.+42     	; 0x6f6 <car_updtae_screen+0x18a>
			case ENU_LFT_DIR:
			{
				LCD_displayString("     ");
     6cc:	8d e4       	ldi	r24, 0x4D	; 77
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_displayString>
				LCD_displayStringRowColumn(1,4,"LFT");
     6d4:	4a e6       	ldi	r20, 0x6A	; 106
     6d6:	51 e0       	ldi	r21, 0x01	; 1
     6d8:	64 e0       	ldi	r22, 0x04	; 4
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
				
			}
			break;
     6e0:	0a c0       	rjmp	.+20     	; 0x6f6 <car_updtae_screen+0x18a>
			case ENU_STOP:
			{
				LCD_displayString("     ");
     6e2:	8d e4       	ldi	r24, 0x4D	; 77
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_displayString>
				LCD_displayStringRowColumn(1,4,"STOP");
     6ea:	4f ec       	ldi	r20, 0xCF	; 207
     6ec:	50 e0       	ldi	r21, 0x00	; 0
     6ee:	64 e0       	ldi	r22, 0x04	; 4
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_displayStringRowColumn>
	}
	else
	{
		//do nothing
	}
	st_enu_lcd_page	= enu_lcd_page;
     6f6:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__data_start>
}
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	ff 90       	pop	r15
     702:	ef 90       	pop	r14
     704:	08 95       	ret

00000706 <car_directionInit>:
	enable_external_interrupt(START_BUTTON_ID);
	enable_external_interrupt(STOP_BUTTON_ID);
}

void car_directionInit()
{
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	00 d0       	rcall	.+0      	; 0x70e <car_directionInit+0x8>
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
	uint8 value				= LOGIC_LOW;
     712:	19 82       	std	Y+1, r1	; 0x01
	uint8 u8_direction		= LOGIC_LOW;
	uint8 u8_l_timeout_flag = LOGIC_LOW;
     714:	1a 82       	std	Y+2, r1	; 0x02

	//update_screen(gl_u16_obsDistance);
	car_updtae_screen(ENU_PAGE_INIT,LOGIC_LOW,LOGIC_LOW,LOGIC_LOW);
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	40 e0       	ldi	r20, 0x00	; 0
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	0e 94 b6 02 	call	0x56c	; 0x56c <car_updtae_screen>
	//car_initialization_screen();
	timeOut_sec(TIMEOUT_TIMER_ID,DIRECTION_TIMEOUT_SEC);
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	60 ea       	ldi	r22, 0xA0	; 160
     72a:	70 e4       	ldi	r23, 0x40	; 64
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	0e 94 26 0c 	call	0x184c	; 0x184c <timeOut_sec>
	timer_check_time_out_flag(TIMEOUT_TIMER_ID,&u8_l_timeout_flag);
     732:	be 01       	movw	r22, r28
     734:	6e 5f       	subi	r22, 0xFE	; 254
     736:	7f 4f       	sbci	r23, 0xFF	; 255
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	0e 94 4e 09 	call	0x129c	; 0x129c <timer_check_time_out_flag>
}

void car_directionInit()
{
	uint8 value				= LOGIC_LOW;
	uint8 u8_direction		= LOGIC_LOW;
     73e:	10 e0       	ldi	r17, 0x00	; 0
	//update_screen(gl_u16_obsDistance);
	car_updtae_screen(ENU_PAGE_INIT,LOGIC_LOW,LOGIC_LOW,LOGIC_LOW);
	//car_initialization_screen();
	timeOut_sec(TIMEOUT_TIMER_ID,DIRECTION_TIMEOUT_SEC);
	timer_check_time_out_flag(TIMEOUT_TIMER_ID,&u8_l_timeout_flag);
	while(u8_l_timeout_flag != TRUE )
     740:	24 c0       	rjmp	.+72     	; 0x78a <car_directionInit+0x84>
	{
		timer_check_time_out_flag(TIMEOUT_TIMER_ID,&u8_l_timeout_flag);
     742:	be 01       	movw	r22, r28
     744:	6e 5f       	subi	r22, 0xFE	; 254
     746:	7f 4f       	sbci	r23, 0xFF	; 255
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	0e 94 4e 09 	call	0x129c	; 0x129c <timer_check_time_out_flag>
		button_read(DIRECTION_BUTTON_PORT,DIRECTION_BUTTON_PIN,&value);
     74e:	ae 01       	movw	r20, r28
     750:	4f 5f       	subi	r20, 0xFF	; 255
     752:	5f 4f       	sbci	r21, 0xFF	; 255
     754:	67 e0       	ldi	r22, 0x07	; 7
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	0e 94 93 04 	call	0x926	; 0x926 <button_read>
		if(value == TRUE)
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	09 f4       	brne	.+2      	; 0x764 <car_directionInit+0x5e>
		{
			u8_direction ^= LOGIC_ONE;
     762:	18 27       	eor	r17, r24
		}
		
		if(u8_direction == TRUE)
     764:	11 30       	cpi	r17, 0x01	; 1
     766:	21 f4       	brne	.+8      	; 0x770 <car_directionInit+0x6a>
		{
			gl_enu_car_rotation_direction = ENU_LFT_DIR;
     768:	83 e0       	ldi	r24, 0x03	; 3
     76a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <gl_enu_car_rotation_direction>
     76e:	03 c0       	rjmp	.+6      	; 0x776 <car_directionInit+0x70>
		}
		else
		{
			gl_enu_car_rotation_direction = ENU_RHT_DIR;
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <gl_enu_car_rotation_direction>
		}
		gl_enu_car_direction = gl_enu_car_rotation_direction;
     776:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <gl_enu_car_rotation_direction>
     77a:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <gl_enu_car_direction>
		car_updtae_screen(ENU_PAGE_INIT,LOGIC_LOW,LOGIC_LOW,gl_enu_car_direction);
     77e:	40 e0       	ldi	r20, 0x00	; 0
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	0e 94 b6 02 	call	0x56c	; 0x56c <car_updtae_screen>
	//update_screen(gl_u16_obsDistance);
	car_updtae_screen(ENU_PAGE_INIT,LOGIC_LOW,LOGIC_LOW,LOGIC_LOW);
	//car_initialization_screen();
	timeOut_sec(TIMEOUT_TIMER_ID,DIRECTION_TIMEOUT_SEC);
	timer_check_time_out_flag(TIMEOUT_TIMER_ID,&u8_l_timeout_flag);
	while(u8_l_timeout_flag != TRUE )
     78a:	8a 81       	ldd	r24, Y+2	; 0x02
     78c:	81 30       	cpi	r24, 0x01	; 1
     78e:	c9 f6       	brne	.-78     	; 0x742 <car_directionInit+0x3c>
			gl_enu_car_rotation_direction = ENU_RHT_DIR;
		}
		gl_enu_car_direction = gl_enu_car_rotation_direction;
		car_updtae_screen(ENU_PAGE_INIT,LOGIC_LOW,LOGIC_LOW,gl_enu_car_direction);
	}
}
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	08 95       	ret

0000079c <car_action>:
{
	gl_enu_car_power = ENU_CAR_POWER_OFF;
}

void car_action (enu_carStates_t enu_carStates,uint8* u8_carSpeed,enu_car_direction_t* enu_car_direction)
{
     79c:	cf 92       	push	r12
     79e:	df 92       	push	r13
     7a0:	ef 92       	push	r14
     7a2:	0f 93       	push	r16
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	eb 01       	movw	r28, r22
     7aa:	6a 01       	movw	r12, r20
	if(enu_carStates == ENU_FWD_30)
     7ac:	81 11       	cpse	r24, r1
     7ae:	14 c0       	rjmp	.+40     	; 0x7d8 <car_action+0x3c>
	{
		robot_control ( &str_dcMotor_RUP_motor,
     7b0:	0f 2e       	mov	r0, r31
     7b2:	fe e1       	ldi	r31, 0x1E	; 30
     7b4:	ef 2e       	mov	r14, r31
     7b6:	f0 2d       	mov	r31, r0
     7b8:	00 e0       	ldi	r16, 0x00	; 0
     7ba:	23 e6       	ldi	r18, 0x63	; 99
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	49 e6       	ldi	r20, 0x69	; 105
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	6f e6       	ldi	r22, 0x6F	; 111
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	85 e7       	ldi	r24, 0x75	; 117
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 77 00 	call	0xee	; 0xee <robot_control>
						&str_dcMotor_RDW_motor,
						&str_dcMotor_LUP_motor,
						&str_dcMotor_LDW_motor,
						ENU_FWD_DIR,
						SPEED_30_PERCENT);
		*u8_carSpeed		= SPEED_30_PERCENT;
     7ce:	8e e1       	ldi	r24, 0x1E	; 30
     7d0:	88 83       	st	Y, r24
		*enu_car_direction	= ENU_FWD_DIR;
     7d2:	f6 01       	movw	r30, r12
     7d4:	10 82       	st	Z, r1
     7d6:	9c c0       	rjmp	.+312    	; 0x910 <__stack+0xb1>
	}
	else if(enu_carStates == ENU_FWD_50)
     7d8:	81 30       	cpi	r24, 0x01	; 1
     7da:	a1 f4       	brne	.+40     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
	{
			robot_control ( &str_dcMotor_RUP_motor,
     7dc:	0f 2e       	mov	r0, r31
     7de:	f2 e3       	ldi	r31, 0x32	; 50
     7e0:	ef 2e       	mov	r14, r31
     7e2:	f0 2d       	mov	r31, r0
     7e4:	00 e0       	ldi	r16, 0x00	; 0
     7e6:	23 e6       	ldi	r18, 0x63	; 99
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	49 e6       	ldi	r20, 0x69	; 105
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	6f e6       	ldi	r22, 0x6F	; 111
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	85 e7       	ldi	r24, 0x75	; 117
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 77 00 	call	0xee	; 0xee <robot_control>
							&str_dcMotor_RDW_motor,
							&str_dcMotor_LUP_motor,
							&str_dcMotor_LDW_motor,
							ENU_FWD_DIR,
							SPEED_50_PERCENT);
		*u8_carSpeed		= SPEED_50_PERCENT;
     7fa:	82 e3       	ldi	r24, 0x32	; 50
     7fc:	88 83       	st	Y, r24
		*enu_car_direction	= ENU_FWD_DIR;
     7fe:	f6 01       	movw	r30, r12
     800:	10 82       	st	Z, r1
     802:	86 c0       	rjmp	.+268    	; 0x910 <__stack+0xb1>
	}
	else if(enu_carStates == ENU_BWD_30)
     804:	84 30       	cpi	r24, 0x04	; 4
     806:	a9 f4       	brne	.+42     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
	{
			robot_control ( &str_dcMotor_RUP_motor,
     808:	0f 2e       	mov	r0, r31
     80a:	fe e1       	ldi	r31, 0x1E	; 30
     80c:	ef 2e       	mov	r14, r31
     80e:	f0 2d       	mov	r31, r0
     810:	01 e0       	ldi	r16, 0x01	; 1
     812:	23 e6       	ldi	r18, 0x63	; 99
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	49 e6       	ldi	r20, 0x69	; 105
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	6f e6       	ldi	r22, 0x6F	; 111
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	85 e7       	ldi	r24, 0x75	; 117
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 77 00 	call	0xee	; 0xee <robot_control>
							&str_dcMotor_RDW_motor,
							&str_dcMotor_LUP_motor,
							&str_dcMotor_LDW_motor,
							ENU_BWD_DIR,
							SPEED_30_PERCENT);	
		*u8_carSpeed		= SPEED_30_PERCENT;
     826:	8e e1       	ldi	r24, 0x1E	; 30
     828:	88 83       	st	Y, r24
		*enu_car_direction	= ENU_BWD_DIR;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	f6 01       	movw	r30, r12
     82e:	80 83       	st	Z, r24
     830:	6f c0       	rjmp	.+222    	; 0x910 <__stack+0xb1>
	}
	else if(enu_carStates == ENU_ROT_90)
     832:	83 30       	cpi	r24, 0x03	; 3
     834:	89 f5       	brne	.+98     	; 0x898 <__stack+0x39>
	{
			robot_control ( &str_dcMotor_RUP_motor,
     836:	0f 2e       	mov	r0, r31
     838:	fa e0       	ldi	r31, 0x0A	; 10
     83a:	ef 2e       	mov	r14, r31
     83c:	f0 2d       	mov	r31, r0
     83e:	00 91 7b 00 	lds	r16, 0x007B	; 0x80007b <gl_enu_car_rotation_direction>
     842:	23 e6       	ldi	r18, 0x63	; 99
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	49 e6       	ldi	r20, 0x69	; 105
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	6f e6       	ldi	r22, 0x6F	; 111
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	85 e7       	ldi	r24, 0x75	; 117
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 77 00 	call	0xee	; 0xee <robot_control>
							&str_dcMotor_RDW_motor,
							&str_dcMotor_LUP_motor,
							&str_dcMotor_LDW_motor,
							gl_enu_car_rotation_direction,
							SPEED_10_PERCENT);
			delay_ms(DELAY_TIMER_ID,1500);
     856:	40 e0       	ldi	r20, 0x00	; 0
     858:	50 e8       	ldi	r21, 0x80	; 128
     85a:	6b eb       	ldi	r22, 0xBB	; 187
     85c:	74 e4       	ldi	r23, 0x44	; 68
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	0e 94 8e 09 	call	0x131c	; 0x131c <delay_ms>
			robot_control ( &str_dcMotor_RUP_motor,
     864:	e1 2c       	mov	r14, r1
     866:	04 e0       	ldi	r16, 0x04	; 4
     868:	23 e6       	ldi	r18, 0x63	; 99
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	49 e6       	ldi	r20, 0x69	; 105
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	6f e6       	ldi	r22, 0x6F	; 111
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	85 e7       	ldi	r24, 0x75	; 117
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 77 00 	call	0xee	; 0xee <robot_control>
							&str_dcMotor_RDW_motor,
							&str_dcMotor_LUP_motor,
							&str_dcMotor_LDW_motor,
							ENU_STOP,
							SPEED_0_PERCENT);
			delay_ms(DELAY_TIMER_ID,1500);
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	50 e8       	ldi	r21, 0x80	; 128
     880:	6b eb       	ldi	r22, 0xBB	; 187
     882:	74 e4       	ldi	r23, 0x44	; 68
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	0e 94 8e 09 	call	0x131c	; 0x131c <delay_ms>
		*u8_carSpeed			= SPEED_10_PERCENT;
     88a:	8a e0       	ldi	r24, 0x0A	; 10
     88c:	88 83       	st	Y, r24
		*enu_car_direction		= gl_enu_car_rotation_direction;				
     88e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <gl_enu_car_rotation_direction>
     892:	f6 01       	movw	r30, r12
     894:	80 83       	st	Z, r24
     896:	3c c0       	rjmp	.+120    	; 0x910 <__stack+0xb1>
	}
	else if(enu_carStates == ENU_STOP_3_SEC)
     898:	85 30       	cpi	r24, 0x05	; 5
     89a:	91 f4       	brne	.+36     	; 0x8c0 <__stack+0x61>
	{
		*u8_carSpeed			= SPEED_0_PERCENT;
     89c:	18 82       	st	Y, r1
		*enu_car_direction		= ENU_STOP;
     89e:	84 e0       	ldi	r24, 0x04	; 4
     8a0:	fa 01       	movw	r30, r20
     8a2:	80 83       	st	Z, r24
		car_updtae_screen(ENU_PAGE_MSG_2,LOGIC_LOW,*u8_carSpeed,*enu_car_direction);
     8a4:	24 e0       	ldi	r18, 0x04	; 4
     8a6:	48 81       	ld	r20, Y
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	0e 94 b6 02 	call	0x56c	; 0x56c <car_updtae_screen>
		delay_sec(DELAY_TIMER_ID,3);
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	60 e4       	ldi	r22, 0x40	; 64
     8b6:	70 e4       	ldi	r23, 0x40	; 64
     8b8:	82 e0       	ldi	r24, 0x02	; 2
     8ba:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delay_sec>
     8be:	28 c0       	rjmp	.+80     	; 0x910 <__stack+0xb1>
	}
	else if(enu_carStates == ENU_PWR_OFF)
     8c0:	82 30       	cpi	r24, 0x02	; 2
     8c2:	c1 f4       	brne	.+48     	; 0x8f4 <__stack+0x95>
	{
		robot_control ( &str_dcMotor_RUP_motor,
     8c4:	e1 2c       	mov	r14, r1
     8c6:	04 e0       	ldi	r16, 0x04	; 4
     8c8:	23 e6       	ldi	r18, 0x63	; 99
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	49 e6       	ldi	r20, 0x69	; 105
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	6f e6       	ldi	r22, 0x6F	; 111
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	85 e7       	ldi	r24, 0x75	; 117
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 77 00 	call	0xee	; 0xee <robot_control>
						&str_dcMotor_RDW_motor,
						&str_dcMotor_LUP_motor,
						&str_dcMotor_LDW_motor,
						ENU_STOP,
						SPEED_0_PERCENT);
		*u8_carSpeed		= SPEED_0_PERCENT;
     8dc:	18 82       	st	Y, r1
		*enu_car_direction	= ENU_STOP;
     8de:	84 e0       	ldi	r24, 0x04	; 4
     8e0:	f6 01       	movw	r30, r12
     8e2:	80 83       	st	Z, r24
		car_updtae_screen(ENU_PAGE_MSG_1,LOGIC_LOW,*u8_carSpeed,*enu_car_direction);
     8e4:	24 e0       	ldi	r18, 0x04	; 4
     8e6:	48 81       	ld	r20, Y
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	83 e0       	ldi	r24, 0x03	; 3
     8ee:	0e 94 b6 02 	call	0x56c	; 0x56c <car_updtae_screen>
     8f2:	0e c0       	rjmp	.+28     	; 0x910 <__stack+0xb1>
	}
	else if(enu_carStates == ENU_PWR_ON)
     8f4:	86 30       	cpi	r24, 0x06	; 6
     8f6:	61 f4       	brne	.+24     	; 0x910 <__stack+0xb1>
	{
		car_directionInit();
     8f8:	0e 94 83 03 	call	0x706	; 0x706 <car_directionInit>
		delay_sec(DELAY_TIMER_ID,WAIT_TIME_SEC);
     8fc:	40 e0       	ldi	r20, 0x00	; 0
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e4       	ldi	r23, 0x40	; 64
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delay_sec>
		*u8_carSpeed		= SPEED_0_PERCENT;
     90a:	18 82       	st	Y, r1
		*enu_car_direction	= ENU_FWD_DIR;
     90c:	f6 01       	movw	r30, r12
     90e:	10 82       	st	Z, r1
	else
	{
		//do nothing
	}
	
}
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	0f 91       	pop	r16
     916:	ef 90       	pop	r14
     918:	df 90       	pop	r13
     91a:	cf 90       	pop	r12
     91c:	08 95       	ret

0000091e <button_init>:
enu_button_error_t button_enable_pullup (uint8 port,uint8 pin)
{
	enu_button_error_t enu_button_error = BTN_VALID_OPERATION;
	enu_button_error = (enu_button_error_t) DIO_writePin(port,pin,PIN_HIGH);
	return enu_button_error;
}
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <DIO_pinMode>
     924:	08 95       	ret

00000926 <button_read>:


enu_button_error_t button_read(uint8 port,uint8 pin,uint8* value)
{
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	1f 92       	push	r1
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
	enu_button_error_t enu_button_error = BTN_VALID_OPERATION;
	uint8 u8_l_value = LOGIC_LOW;
     934:	19 82       	std	Y+1, r1	; 0x01
	if(value != NULL_PTR)
     936:	41 15       	cp	r20, r1
     938:	51 05       	cpc	r21, r1
     93a:	79 f0       	breq	.+30     	; 0x95a <button_read+0x34>
     93c:	8a 01       	movw	r16, r20
	{
		enu_button_error = (enu_button_error_t) DIO_readPin(port,pin,&u8_l_value);
     93e:	ae 01       	movw	r20, r28
     940:	4f 5f       	subi	r20, 0xFF	; 255
     942:	5f 4f       	sbci	r21, 0xFF	; 255
     944:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <DIO_readPin>
		if(u8_l_value == LOGIC_HIGH)
     948:	99 81       	ldd	r25, Y+1	; 0x01
     94a:	91 30       	cpi	r25, 0x01	; 1
     94c:	19 f4       	brne	.+6      	; 0x954 <button_read+0x2e>
		{
			*value = LOGIC_HIGH;
     94e:	f8 01       	movw	r30, r16
     950:	90 83       	st	Z, r25
     952:	04 c0       	rjmp	.+8      	; 0x95c <button_read+0x36>
		}
		else
		{
			*value = LOGIC_LOW;
     954:	f8 01       	movw	r30, r16
     956:	10 82       	st	Z, r1
     958:	01 c0       	rjmp	.+2      	; 0x95c <button_read+0x36>
		}
	}
	else
	{
		enu_button_error = BTN_INVALID_OPERATION;
     95a:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enu_button_error;
}
     95c:	0f 90       	pop	r0
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	08 95       	ret

00000968 <dcMotor_init>:
/**
 * @brief       dcMotor_init        		: Function used to initialize the motor pin connections      
 */

enu_dcMotor_error_t dcMotor_init (str_dcMotor_config_t* str_dcMotor_config)
{
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
	uint8 u8_l_returnValue = ZERO_VALUE;
	if(str_dcMotor_config != NULL_PTR)
     96c:	00 97       	sbiw	r24, 0x00	; 0
     96e:	11 f1       	breq	.+68     	; 0x9b4 <dcMotor_init+0x4c>
     970:	ec 01       	movw	r28, r24
	{
		u8_l_returnValue = DIO_pinMode(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_OUTPUT);
     972:	69 81       	ldd	r22, Y+1	; 0x01
     974:	41 e0       	ldi	r20, 0x01	; 1
     976:	88 81       	ld	r24, Y
     978:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <DIO_pinMode>
		if(u8_l_returnValue == VALID)
     97c:	81 30       	cpi	r24, 0x01	; 1
     97e:	e1 f4       	brne	.+56     	; 0x9b8 <dcMotor_init+0x50>
		{
			u8_l_returnValue = DIO_pinMode(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_OUTPUT);
     980:	6b 81       	ldd	r22, Y+3	; 0x03
     982:	41 e0       	ldi	r20, 0x01	; 1
     984:	8a 81       	ldd	r24, Y+2	; 0x02
     986:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <DIO_pinMode>
			if(u8_l_returnValue == VALID)
     98a:	81 30       	cpi	r24, 0x01	; 1
     98c:	b9 f4       	brne	.+46     	; 0x9bc <dcMotor_init+0x54>
			{
				u8_l_returnValue = PWM_Init(str_dcMotor_config->enable_terminal.port_id, str_dcMotor_config->enable_terminal.pin_id,PWM_TIMER_ID);
     98e:	6d 81       	ldd	r22, Y+5	; 0x05
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	8c 81       	ldd	r24, Y+4	; 0x04
     994:	0e 94 11 08 	call	0x1022	; 0x1022 <PWM_Init>
				if(u8_l_returnValue == VALID)
     998:	81 30       	cpi	r24, 0x01	; 1
     99a:	91 f4       	brne	.+36     	; 0x9c0 <dcMotor_init+0x58>
				{
					DIO_writePin(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_LOW);
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	69 81       	ldd	r22, Y+1	; 0x01
     9a0:	88 81       	ld	r24, Y
     9a2:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
					DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_LOW);
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	6b 81       	ldd	r22, Y+3	; 0x03
     9aa:	8a 81       	ldd	r24, Y+2	; 0x02
     9ac:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
 * @brief       dcMotor_init        		: Function used to initialize the motor pin connections      
 */

enu_dcMotor_error_t dcMotor_init (str_dcMotor_config_t* str_dcMotor_config)
{
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	07 c0       	rjmp	.+14     	; 0x9c2 <dcMotor_init+0x5a>
			enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
		}
	}
	else
	{
		enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	05 c0       	rjmp	.+10     	; 0x9c2 <dcMotor_init+0x5a>
				enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
			}
		}
		else
		{
			enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <dcMotor_init+0x5a>
					DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_LOW);
				}					
			}
			else
			{
				enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <dcMotor_init+0x5a>
 * @brief       dcMotor_init        		: Function used to initialize the motor pin connections      
 */

enu_dcMotor_error_t dcMotor_init (str_dcMotor_config_t* str_dcMotor_config)
{
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
     9c0:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
	}
	return enu_dcMotor_error;
}
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	08 95       	ret

000009c8 <dcMotor_rotate>:

/**
 * @brief       dcMotor_rotate        		: Function used to control motor rotation direction and the rotation speed    
 */
enu_dcMotor_error_t dcMotor_rotate (str_dcMotor_config_t* str_dcMotor_config,enu_dcMotor_state_t enu_dcMotor_state,uint8 u8_dcMotor_speed)
{
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
	if((str_dcMotor_config != NULL_PTR) && (enu_dcMotor_state < ENU_DCMOTOR_MAX_STATE) && (u8_dcMotor_speed <= MAX_MOTOR_SPEED))
     9ce:	00 97       	sbiw	r24, 0x00	; 0
     9d0:	f1 f1       	breq	.+124    	; 0xa4e <dcMotor_rotate+0x86>
     9d2:	63 30       	cpi	r22, 0x03	; 3
     9d4:	f0 f5       	brcc	.+124    	; 0xa52 <dcMotor_rotate+0x8a>
     9d6:	45 36       	cpi	r20, 0x65	; 101
     9d8:	f0 f5       	brcc	.+124    	; 0xa56 <dcMotor_rotate+0x8e>
     9da:	24 2f       	mov	r18, r20
     9dc:	c6 2f       	mov	r28, r22
     9de:	8c 01       	movw	r16, r24
	{
		PWM_start(PWM_TIMER_ID,PWM_PERIODIC_TIME,u8_dcMotor_speed);
     9e0:	44 e0       	ldi	r20, 0x04	; 4
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	0e 94 5d 08 	call	0x10ba	; 0x10ba <PWM_start>
		if(enu_dcMotor_state == ENU_DCMOTOR_CW)
     9ee:	c1 11       	cpse	r28, r1
     9f0:	0e c0       	rjmp	.+28     	; 0xa0e <dcMotor_rotate+0x46>
		{
			DIO_writePin(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_HIGH);
     9f2:	41 e0       	ldi	r20, 0x01	; 1
     9f4:	f8 01       	movw	r30, r16
     9f6:	61 81       	ldd	r22, Z+1	; 0x01
     9f8:	80 81       	ld	r24, Z
     9fa:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
			DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_LOW);
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	f8 01       	movw	r30, r16
     a02:	63 81       	ldd	r22, Z+3	; 0x03
     a04:	82 81       	ldd	r24, Z+2	; 0x02
     a06:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
/**
 * @brief       dcMotor_rotate        		: Function used to control motor rotation direction and the rotation speed    
 */
enu_dcMotor_error_t dcMotor_rotate (str_dcMotor_config_t* str_dcMotor_config,enu_dcMotor_state_t enu_dcMotor_state,uint8 u8_dcMotor_speed)
{
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	27 c0       	rjmp	.+78     	; 0xa5c <dcMotor_rotate+0x94>
		if(enu_dcMotor_state == ENU_DCMOTOR_CW)
		{
			DIO_writePin(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_HIGH);
			DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_LOW);
		}
		else if(enu_dcMotor_state == ENU_DCMOTOR_ACW)
     a0e:	c1 30       	cpi	r28, 0x01	; 1
     a10:	71 f4       	brne	.+28     	; 0xa2e <dcMotor_rotate+0x66>
		{
			DIO_writePin(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_LOW);
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f8 01       	movw	r30, r16
     a16:	61 81       	ldd	r22, Z+1	; 0x01
     a18:	80 81       	ld	r24, Z
     a1a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
			DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_HIGH);
     a1e:	41 e0       	ldi	r20, 0x01	; 1
     a20:	f8 01       	movw	r30, r16
     a22:	63 81       	ldd	r22, Z+3	; 0x03
     a24:	82 81       	ldd	r24, Z+2	; 0x02
     a26:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
/**
 * @brief       dcMotor_rotate        		: Function used to control motor rotation direction and the rotation speed    
 */
enu_dcMotor_error_t dcMotor_rotate (str_dcMotor_config_t* str_dcMotor_config,enu_dcMotor_state_t enu_dcMotor_state,uint8 u8_dcMotor_speed)
{
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	17 c0       	rjmp	.+46     	; 0xa5c <dcMotor_rotate+0x94>
		else if(enu_dcMotor_state == ENU_DCMOTOR_ACW)
		{
			DIO_writePin(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_LOW);
			DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_HIGH);
		}
		else if(enu_dcMotor_state == ENU_DCMOTOR_BREAK)
     a2e:	c2 30       	cpi	r28, 0x02	; 2
     a30:	a1 f4       	brne	.+40     	; 0xa5a <dcMotor_rotate+0x92>
		{
			DIO_writePin(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_LOW);
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	f8 01       	movw	r30, r16
     a36:	61 81       	ldd	r22, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
			DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_LOW);
     a3e:	40 e0       	ldi	r20, 0x00	; 0
     a40:	f8 01       	movw	r30, r16
     a42:	63 81       	ldd	r22, Z+3	; 0x03
     a44:	82 81       	ldd	r24, Z+2	; 0x02
     a46:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
/**
 * @brief       dcMotor_rotate        		: Function used to control motor rotation direction and the rotation speed    
 */
enu_dcMotor_error_t dcMotor_rotate (str_dcMotor_config_t* str_dcMotor_config,enu_dcMotor_state_t enu_dcMotor_state,uint8 u8_dcMotor_speed)
{
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	07 c0       	rjmp	.+14     	; 0xa5c <dcMotor_rotate+0x94>
			//do nothing
		}
	}
	else
	{
		enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	05 c0       	rjmp	.+10     	; 0xa5c <dcMotor_rotate+0x94>
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	03 c0       	rjmp	.+6      	; 0xa5c <dcMotor_rotate+0x94>
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <dcMotor_rotate+0x94>
/**
 * @brief       dcMotor_rotate        		: Function used to control motor rotation direction and the rotation speed    
 */
enu_dcMotor_error_t dcMotor_rotate (str_dcMotor_config_t* str_dcMotor_config,enu_dcMotor_state_t enu_dcMotor_state,uint8 u8_dcMotor_speed)
{
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
     a5a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
	}
	return enu_dcMotor_error;
}
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	08 95       	ret

00000a64 <dcMotor_stop>:

/**
 * @brief       dcMotor_stop        		: Function used to stop the motor  
 */
enu_dcMotor_error_t dcMotor_stop (str_dcMotor_config_t* str_dcMotor_config)
{
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
	if(str_dcMotor_config != NULL_PTR)
     a68:	00 97       	sbiw	r24, 0x00	; 0
     a6a:	69 f0       	breq	.+26     	; 0xa86 <dcMotor_stop+0x22>
     a6c:	ec 01       	movw	r28, r24
	{
		//PWM_stop(PWM_TIMER_ID);
		DIO_writePin(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_LOW);
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	69 81       	ldd	r22, Y+1	; 0x01
     a72:	88 81       	ld	r24, Y
     a74:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
		DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_LOW);
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	6b 81       	ldd	r22, Y+3	; 0x03
     a7c:	8a 81       	ldd	r24, Y+2	; 0x02
     a7e:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
/**
 * @brief       dcMotor_stop        		: Function used to stop the motor  
 */
enu_dcMotor_error_t dcMotor_stop (str_dcMotor_config_t* str_dcMotor_config)
{
	enu_dcMotor_error_t enu_dcMotor_error = ENU_DCMOTOR_VALID_OPERA;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	01 c0       	rjmp	.+2      	; 0xa88 <dcMotor_stop+0x24>
		DIO_writePin(str_dcMotor_config->positive_terminal.port_id, str_dcMotor_config->positive_terminal.pin_id, PIN_LOW);
		DIO_writePin(str_dcMotor_config->negative_terminal.port_id, str_dcMotor_config->negative_terminal.pin_id, PIN_LOW);
	}
	else
	{
		enu_dcMotor_error = ENU_DCMOTOR_INVALID_OPERA;
     a86:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enu_dcMotor_error;
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <Icu_init>:
 *				ENU_ICU_INVALID_INPUT		: in case of invalid passing argument Ex. timer channel id - null pointer - value out of range
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_init(const str_icu_configtype_t * str_icu_configtype)
{	
     a8e:	ef 92       	push	r14
     a90:	ff 92       	push	r15
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
     a9e:	29 97       	sbiw	r28, 0x09	; 9
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	de bf       	out	0x3e, r29	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	cd bf       	out	0x3d, r28	; 61
	enu_intrrupt_id_t	enu_intrrupt_id		= ENU_MAX_INT_ID;
	enu_trigger_mode_t	enu_trigger_mode	= ENU_MAX_TRIGGER_MODE;
	enu_icu_error_t		enu_icu_error		= ENU_ICU_VALID;
	str_tmr_config_t	str_tmr_config;
	if(str_icu_configtype->enu_icu_clock < ENU_ICU_MAX_CLOCK)
     aaa:	fc 01       	movw	r30, r24
     aac:	22 81       	ldd	r18, Z+2	; 0x02
     aae:	28 30       	cpi	r18, 0x08	; 8
     ab0:	08 f0       	brcs	.+2      	; 0xab4 <Icu_init+0x26>
     ab2:	4a c0       	rjmp	.+148    	; 0xb48 <Icu_init+0xba>
	{
		if(str_icu_configtype->enu_icu_edgetype < ENU_ICU_MAX_EDGETYPE)
     ab4:	23 81       	ldd	r18, Z+3	; 0x03
     ab6:	22 30       	cpi	r18, 0x02	; 2
     ab8:	08 f0       	brcs	.+2      	; 0xabc <Icu_init+0x2e>
     aba:	48 c0       	rjmp	.+144    	; 0xb4c <Icu_init+0xbe>
		{
			if (str_icu_configtype->enu_icu_channel_id < ENU_ICU_MAX_CHANNEL)
     abc:	30 81       	ld	r19, Z
     abe:	33 30       	cpi	r19, 0x03	; 3
     ac0:	08 f0       	brcs	.+2      	; 0xac4 <Icu_init+0x36>
     ac2:	46 c0       	rjmp	.+140    	; 0xb50 <Icu_init+0xc2>
			{
				if (str_icu_configtype->enu_timer_channel_id < ENU_TIMER_MAX_CHANNEL)
     ac4:	41 81       	ldd	r20, Z+1	; 0x01
     ac6:	43 30       	cpi	r20, 0x03	; 3
     ac8:	08 f0       	brcs	.+2      	; 0xacc <Icu_init+0x3e>
     aca:	44 c0       	rjmp	.+136    	; 0xb54 <Icu_init+0xc6>
				{
					if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID0)
     acc:	31 11       	cpse	r19, r1
     ace:	04 c0       	rjmp	.+8      	; 0xad8 <Icu_init+0x4a>
					{
						enu_intrrupt_id = ENU_INT0_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_0;
     ad0:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <gl_u8_interrupt_id>
			{
				if (str_icu_configtype->enu_timer_channel_id < ENU_TIMER_MAX_CHANNEL)
				{
					if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID0)
					{
						enu_intrrupt_id = ENU_INT0_ID;
     ad4:	f1 2c       	mov	r15, r1
     ad6:	0d c0       	rjmp	.+26     	; 0xaf2 <Icu_init+0x64>
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_0;
					}
					else if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID1)
     ad8:	31 30       	cpi	r19, 0x01	; 1
     ada:	29 f4       	brne	.+10     	; 0xae6 <Icu_init+0x58>
					{
						enu_intrrupt_id = ENU_INT1_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_1 ;
     adc:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <gl_u8_interrupt_id>
						enu_intrrupt_id = ENU_INT0_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_0;
					}
					else if (str_icu_configtype->enu_icu_channel_id == ENU_ICU_CHANNEL_ID1)
					{
						enu_intrrupt_id = ENU_INT1_ID;
     ae0:	ff 24       	eor	r15, r15
     ae2:	f3 94       	inc	r15
     ae4:	06 c0       	rjmp	.+12     	; 0xaf2 <Icu_init+0x64>
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_1 ;
					} 
					else
					{
						enu_intrrupt_id = ENU_INT2_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_2 ;
     ae6:	32 e0       	ldi	r19, 0x02	; 2
     ae8:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <gl_u8_interrupt_id>
						enu_intrrupt_id = ENU_INT1_ID;
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_1 ;
					} 
					else
					{
						enu_intrrupt_id = ENU_INT2_ID;
     aec:	68 94       	set
     aee:	ff 24       	eor	r15, r15
     af0:	f1 f8       	bld	r15, 1
						gl_u8_interrupt_id =INTERRUPT_CHANNEL_2 ;
					}
					if(str_icu_configtype->enu_icu_edgetype == ENU_ICU_FALLING )
     af2:	21 11       	cpse	r18, r1
     af4:	04 c0       	rjmp	.+8      	; 0xafe <Icu_init+0x70>
					{
						enu_trigger_mode = ENU_FALLING;
     af6:	68 94       	set
     af8:	ee 24       	eor	r14, r14
     afa:	e1 f8       	bld	r14, 1
     afc:	04 c0       	rjmp	.+8      	; 0xb06 <Icu_init+0x78>
					}
					else
					{
						enu_trigger_mode = ENU_RISING;
     afe:	0f 2e       	mov	r0, r31
     b00:	f3 e0       	ldi	r31, 0x03	; 3
     b02:	ef 2e       	mov	r14, r31
     b04:	f0 2d       	mov	r31, r0
     b06:	8c 01       	movw	r16, r24
					}

					str_tmr_config.enu_tmr_channel_id		= str_icu_configtype->enu_timer_channel_id;
     b08:	49 83       	std	Y+1, r20	; 0x01
					str_tmr_config.enu_tmr_mode				= ENU_TMR_NORMAL_MODE;
     b0a:	1a 82       	std	Y+2, r1	; 0x02
					str_tmr_config.enu_tmr_cmp_mode			= ENU_TMR_CMP_DISCONNECT;
     b0c:	1c 82       	std	Y+4, r1	; 0x04
					str_tmr_config.enu_tmr_clk				= (enu_tmr_clk_t) str_icu_configtype->enu_icu_clock;
     b0e:	fc 01       	movw	r30, r24
     b10:	82 81       	ldd	r24, Z+2	; 0x02
     b12:	8d 83       	std	Y+5, r24	; 0x05
					str_tmr_config.enu_tmr_interrupt_state	= ENU_TMR_INT_DISABLE;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	8b 83       	std	Y+3, r24	; 0x03
					str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
     b18:	19 86       	std	Y+9, r1	; 0x09
     b1a:	18 86       	std	Y+8, r1	; 0x08
					str_tmr_config.u16_tmr_initial_value	= ZERO_VALUE;
     b1c:	1f 82       	std	Y+7, r1	; 0x07
     b1e:	1e 82       	std	Y+6, r1	; 0x06
					gl_u8_timer_id = str_icu_configtype->enu_timer_channel_id;
     b20:	81 81       	ldd	r24, Z+1	; 0x01
     b22:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <gl_u8_timer_id>
					timer_init(&str_tmr_config);
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	0e 94 c0 10 	call	0x2180	; 0x2180 <timer_init>
					timer_start(str_icu_configtype->enu_timer_channel_id);
     b2e:	f8 01       	movw	r30, r16
     b30:	81 81       	ldd	r24, Z+1	; 0x01
     b32:	0e 94 37 13 	call	0x266e	; 0x266e <timer_start>
					Init_external_interrupt (enu_intrrupt_id,enu_trigger_mode);
     b36:	6e 2d       	mov	r22, r14
     b38:	8f 2d       	mov	r24, r15
     b3a:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Init_external_interrupt>
					enable_external_interrupt(enu_intrrupt_id);
     b3e:	8f 2d       	mov	r24, r15
     b40:	0e 94 08 10 	call	0x2010	; 0x2010 <enable_external_interrupt>
 */
enu_icu_error_t Icu_init(const str_icu_configtype_t * str_icu_configtype)
{	
	enu_intrrupt_id_t	enu_intrrupt_id		= ENU_MAX_INT_ID;
	enu_trigger_mode_t	enu_trigger_mode	= ENU_MAX_TRIGGER_MODE;
	enu_icu_error_t		enu_icu_error		= ENU_ICU_VALID;
     b44:	84 e0       	ldi	r24, 0x04	; 4
     b46:	07 c0       	rjmp	.+14     	; 0xb56 <Icu_init+0xc8>
			enu_icu_error = ENU_ICU_INVALID_EDGETYP;
		}
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CLOCK;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <Icu_init+0xc8>
				enu_icu_error = ENU_ICU_MAX_CHANNEL;
			}
		}
		else
		{
			enu_icu_error = ENU_ICU_INVALID_EDGETYP;
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	03 c0       	rjmp	.+6      	; 0xb56 <Icu_init+0xc8>
					enu_icu_error = ENU_TIMER_MAX_CHANNEL;
				}
			}
			else
			{
				enu_icu_error = ENU_ICU_MAX_CHANNEL;
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	01 c0       	rjmp	.+2      	; 0xb56 <Icu_init+0xc8>
					Init_external_interrupt (enu_intrrupt_id,enu_trigger_mode);
					enable_external_interrupt(enu_intrrupt_id);
				}
				else
				{
					enu_icu_error = ENU_TIMER_MAX_CHANNEL;
     b54:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CLOCK;
	}
	return enu_icu_error;
}
     b56:	29 96       	adiw	r28, 0x09	; 9
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	ef 90       	pop	r14
     b6e:	08 95       	ret

00000b70 <Icu_setCallBack>:
 *				ENU_ICU_INVALID_INPUT		: in case of invalid passing argument Ex. timer channel id - null pointer - value out of range
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
     b70:	9c 01       	movw	r18, r24
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_0)
     b72:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <gl_u8_interrupt_id>
     b76:	91 11       	cpse	r25, r1
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <Icu_setCallBack+0x14>
	{
		interrupt0_set_callback (a_ptr);
     b7a:	c9 01       	movw	r24, r18
     b7c:	0e 94 23 10 	call	0x2046	; 0x2046 <interrupt0_set_callback>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     b80:	84 e0       	ldi	r24, 0x04	; 4
     b82:	08 95       	ret
	if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_0)
	{
		interrupt0_set_callback (a_ptr);
	}
	else if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_1)
     b84:	91 30       	cpi	r25, 0x01	; 1
     b86:	29 f4       	brne	.+10     	; 0xb92 <Icu_setCallBack+0x22>
	{
		interrupt1_set_callback (a_ptr);
     b88:	c9 01       	movw	r24, r18
     b8a:	0e 94 2d 10 	call	0x205a	; 0x205a <interrupt1_set_callback>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     b8e:	84 e0       	ldi	r24, 0x04	; 4
     b90:	08 95       	ret
	}
	else if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_1)
	{
		interrupt1_set_callback (a_ptr);
	}
	else if (gl_u8_interrupt_id == INTERRUPT_CHANNEL_2)
     b92:	92 30       	cpi	r25, 0x02	; 2
     b94:	29 f4       	brne	.+10     	; 0xba0 <Icu_setCallBack+0x30>
	{
		interrupt2_set_callback (a_ptr);
     b96:	c9 01       	movw	r24, r18
     b98:	0e 94 37 10 	call	0x206e	; 0x206e <interrupt2_set_callback>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setCallBack(void(*a_ptr)(void))
{ 
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	08 95       	ret
	{
		interrupt2_set_callback (a_ptr);
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CHANNEL;
     ba0:	83 e0       	ldi	r24, 0x03	; 3
	}
	return enu_icu_error;
	
}
     ba2:	08 95       	ret

00000ba4 <Icu_setEdgeDetectionType>:
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setEdgeDetectionType(const enu_icu_edgetype_t enu_icu_edgetype)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	if (enu_icu_edgetype < ENU_ICU_MAX_EDGETYPE)
     ba4:	82 30       	cpi	r24, 0x02	; 2
     ba6:	90 f4       	brcc	.+36     	; 0xbcc <Icu_setEdgeDetectionType+0x28>
	{
		if((gl_u8_interrupt_id < MAX_INTERRUPT_CHANNEL))
     ba8:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <gl_u8_interrupt_id>
     bac:	23 30       	cpi	r18, 0x03	; 3
     bae:	80 f4       	brcc	.+32     	; 0xbd0 <Icu_setEdgeDetectionType+0x2c>
		{
			if (enu_icu_edgetype == ENU_ICU_FALLING)
     bb0:	81 11       	cpse	r24, r1
     bb2:	06 c0       	rjmp	.+12     	; 0xbc0 <Icu_setEdgeDetectionType+0x1c>
			{
				Init_external_interrupt(gl_u8_interrupt_id,ENU_FALLING);
     bb4:	62 e0       	ldi	r22, 0x02	; 2
     bb6:	82 2f       	mov	r24, r18
     bb8:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Init_external_interrupt>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setEdgeDetectionType(const enu_icu_edgetype_t enu_icu_edgetype)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     bbc:	84 e0       	ldi	r24, 0x04	; 4
     bbe:	08 95       	ret
			{
				Init_external_interrupt(gl_u8_interrupt_id,ENU_FALLING);
			}
			else
			{
				Init_external_interrupt(gl_u8_interrupt_id,ENU_RISING);
     bc0:	63 e0       	ldi	r22, 0x03	; 3
     bc2:	82 2f       	mov	r24, r18
     bc4:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <Init_external_interrupt>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_setEdgeDetectionType(const enu_icu_edgetype_t enu_icu_edgetype)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     bc8:	84 e0       	ldi	r24, 0x04	; 4
     bca:	08 95       	ret
			enu_icu_error = ENU_ICU_INVALID_INPUT;
		}
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_EDGETYP ;
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	08 95       	ret
				Init_external_interrupt(gl_u8_interrupt_id,ENU_RISING);
			}	
		}
		else
		{
			enu_icu_error = ENU_ICU_INVALID_INPUT;
     bd0:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		enu_icu_error = ENU_ICU_INVALID_EDGETYP ;
	}
	return enu_icu_error;
}
     bd2:	08 95       	ret

00000bd4 <Icu_getTimerValue>:
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	//uint16 u16_l_timer_value = 0;
	if(ptr_u16_timer_value != NULL_PTR)
     bd4:	00 97       	sbiw	r24, 0x00	; 0
     bd6:	c1 f0       	breq	.+48     	; 0xc08 <Icu_getTimerValue+0x34>
	{
		if(gl_u8_timer_id < MAX_TIMER_CHANNEL)
     bd8:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <gl_u8_timer_id>
     bdc:	23 30       	cpi	r18, 0x03	; 3
     bde:	b0 f4       	brcc	.+44     	; 0xc0c <Icu_getTimerValue+0x38>
     be0:	bc 01       	movw	r22, r24
		{
			if(gl_u8_timer_id == TIMER_CHANNEL_0)
     be2:	21 11       	cpse	r18, r1
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <Icu_getTimerValue+0x1c>
			{
				timer_getValue(ENU_TMR_CHANNEL_0,ptr_u16_timer_value);
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	0e 94 4c 14 	call	0x2898	; 0x2898 <timer_getValue>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     bec:	84 e0       	ldi	r24, 0x04	; 4
     bee:	08 95       	ret
		{
			if(gl_u8_timer_id == TIMER_CHANNEL_0)
			{
				timer_getValue(ENU_TMR_CHANNEL_0,ptr_u16_timer_value);
			}
			else if(gl_u8_timer_id == TIMER_CHANNEL_1)
     bf0:	21 30       	cpi	r18, 0x01	; 1
     bf2:	29 f4       	brne	.+10     	; 0xbfe <Icu_getTimerValue+0x2a>
			{
				timer_getValue(ENU_TMR_CHANNEL_1,ptr_u16_timer_value);
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	0e 94 4c 14 	call	0x2898	; 0x2898 <timer_getValue>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     bfa:	84 e0       	ldi	r24, 0x04	; 4
     bfc:	08 95       	ret
			{
				timer_getValue(ENU_TMR_CHANNEL_1,ptr_u16_timer_value);
			}
			else
			{
				timer_getValue(ENU_TMR_CHANNEL_2,ptr_u16_timer_value);			
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	0e 94 4c 14 	call	0x2898	; 0x2898 <timer_getValue>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_getTimerValue(uint16* ptr_u16_timer_value)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     c04:	84 e0       	ldi	r24, 0x04	; 4
     c06:	08 95       	ret
			enu_icu_error = ENU_ICU_INVALID_CHANNEL;
		}
	} 
	else
	{
		enu_icu_error = ENU_ICU_INVALID_INPUT;
     c08:	82 e0       	ldi	r24, 0x02	; 2
     c0a:	08 95       	ret
				timer_getValue(ENU_TMR_CHANNEL_2,ptr_u16_timer_value);			
			}
		}
		else
		{
			enu_icu_error = ENU_ICU_INVALID_CHANNEL;
     c0c:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		enu_icu_error = ENU_ICU_INVALID_INPUT;
	}
	return enu_icu_error;
}
     c0e:	08 95       	ret

00000c10 <Icu_clearTimerValue>:
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
	if(gl_u8_timer_id < MAX_TIMER_CHANNEL)
     c10:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gl_u8_timer_id>
     c14:	83 30       	cpi	r24, 0x03	; 3
     c16:	48 f5       	brcc	.+82     	; 0xc6a <Icu_clearTimerValue+0x5a>
	{
		if(gl_u8_timer_id == TIMER_CHANNEL_0)
     c18:	81 11       	cpse	r24, r1
     c1a:	0c c0       	rjmp	.+24     	; 0xc34 <Icu_clearTimerValue+0x24>
		{
			//to do clear timer0 value
			timer_stop(ENU_TMR_CHANNEL_0);
     c1c:	0e 94 28 14 	call	0x2850	; 0x2850 <timer_stop>
			timer_setInitialValue(ENU_TMR_CHANNEL_0,ZERO_VALUE);
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	0e 94 7f 12 	call	0x24fe	; 0x24fe <timer_setInitialValue>
			timer_start(ENU_TMR_CHANNEL_0);
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	0e 94 37 13 	call	0x266e	; 0x266e <timer_start>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     c30:	84 e0       	ldi	r24, 0x04	; 4
     c32:	08 95       	ret
			//to do clear timer0 value
			timer_stop(ENU_TMR_CHANNEL_0);
			timer_setInitialValue(ENU_TMR_CHANNEL_0,ZERO_VALUE);
			timer_start(ENU_TMR_CHANNEL_0);
		}
		else if(gl_u8_timer_id == TIMER_CHANNEL_1)
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	61 f4       	brne	.+24     	; 0xc50 <Icu_clearTimerValue+0x40>
		{
			//to do clear timer1 value
			timer_stop(ENU_TMR_CHANNEL_1);
     c38:	0e 94 28 14 	call	0x2850	; 0x2850 <timer_stop>
			timer_setInitialValue(ENU_TMR_CHANNEL_1,ZERO_VALUE);
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	0e 94 7f 12 	call	0x24fe	; 0x24fe <timer_setInitialValue>
			timer_start(ENU_TMR_CHANNEL_1);
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	0e 94 37 13 	call	0x266e	; 0x266e <timer_start>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     c4c:	84 e0       	ldi	r24, 0x04	; 4
     c4e:	08 95       	ret
			timer_start(ENU_TMR_CHANNEL_1);
		}
		else
		{
			//to do clear timer2 value
			timer_stop(ENU_TMR_CHANNEL_2);
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	0e 94 28 14 	call	0x2850	; 0x2850 <timer_stop>
			timer_setInitialValue(ENU_TMR_CHANNEL_2,ZERO_VALUE);
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	0e 94 7f 12 	call	0x24fe	; 0x24fe <timer_setInitialValue>
			timer_start(ENU_TMR_CHANNEL_2);
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	0e 94 37 13 	call	0x266e	; 0x266e <timer_start>
 *				ENU_ICU_INVALID_CHANNEL		: in case of invalid interrupt channel id
 *				ENU_ICU_VALID				: in case of valid operation
 */
enu_icu_error_t Icu_clearTimerValue(void)
{
	enu_icu_error_t enu_icu_error = ENU_ICU_VALID;
     c66:	84 e0       	ldi	r24, 0x04	; 4
     c68:	08 95       	ret
			timer_start(ENU_TMR_CHANNEL_2);
		}
	}
	else
	{
		enu_icu_error = ENU_ICU_INVALID_CHANNEL;
     c6a:	83 e0       	ldi	r24, 0x03	; 3
	}
	return enu_icu_error;
}
     c6c:	08 95       	ret

00000c6e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	1f 92       	push	r1
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	18 2f       	mov	r17, r24
	uint8 lcd_port_value = 0;
     c7c:	19 82       	std	Y+1, r1	; 0x01
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_LOW); /* Instruction Mode RS=0 */
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
	DIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_LOW); /* write data to LCD so RW=0 */
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	62 e0       	ldi	r22, 0x02	; 2
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c92:	8f ec       	ldi	r24, 0xCF	; 207
     c94:	97 e0       	ldi	r25, 0x07	; 7
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <LCD_sendCommand+0x28>
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <LCD_sendCommand+0x2e>
     c9c:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_HIGH); /* Enable LCD E=1 */
     c9e:	41 e0       	ldi	r20, 0x01	; 1
     ca0:	63 e0       	ldi	r22, 0x03	; 3
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
     ca8:	8f ec       	ldi	r24, 0xCF	; 207
     caa:	97 e0       	ldi	r25, 0x07	; 7
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <LCD_sendCommand+0x3e>
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <LCD_sendCommand+0x44>
     cb2:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	DIO_readPort(LCD_DATA_PORT_ID,&lcd_port_value);
     cb4:	be 01       	movw	r22, r28
     cb6:	6f 5f       	subi	r22, 0xFF	; 255
     cb8:	7f 4f       	sbci	r23, 0xFF	; 255
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <DIO_readPort>
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (command & 0xF0);
     cc0:	69 81       	ldd	r22, Y+1	; 0x01
     cc2:	6f 70       	andi	r22, 0x0F	; 15
     cc4:	81 2f       	mov	r24, r17
     cc6:	80 7f       	andi	r24, 0xF0	; 240
     cc8:	68 2b       	or	r22, r24
     cca:	69 83       	std	Y+1, r22	; 0x01
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((command & 0xF0) >> 4);
#endif
	DIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <DIO_writePort>
     cd2:	8f ec       	ldi	r24, 0xCF	; 207
     cd4:	97 e0       	ldi	r25, 0x07	; 7
     cd6:	01 97       	sbiw	r24, 0x01	; 1
     cd8:	f1 f7       	brne	.-4      	; 0xcd6 <LCD_sendCommand+0x68>
     cda:	00 c0       	rjmp	.+0      	; 0xcdc <LCD_sendCommand+0x6e>
     cdc:	00 00       	nop

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_LOW); /* Disable LCD E=0 */
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	63 e0       	ldi	r22, 0x03	; 3
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
     ce8:	8f ec       	ldi	r24, 0xCF	; 207
     cea:	97 e0       	ldi	r25, 0x07	; 7
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	f1 f7       	brne	.-4      	; 0xcec <LCD_sendCommand+0x7e>
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <LCD_sendCommand+0x84>
     cf2:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_HIGH); /* Enable LCD E=1 */
     cf4:	41 e0       	ldi	r20, 0x01	; 1
     cf6:	63 e0       	ldi	r22, 0x03	; 3
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
     cfe:	8f ec       	ldi	r24, 0xCF	; 207
     d00:	97 e0       	ldi	r25, 0x07	; 7
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	f1 f7       	brne	.-4      	; 0xd02 <LCD_sendCommand+0x94>
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <LCD_sendCommand+0x9a>
     d08:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	DIO_readPort(LCD_DATA_PORT_ID,&lcd_port_value);
     d0a:	be 01       	movw	r22, r28
     d0c:	6f 5f       	subi	r22, 0xFF	; 255
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <DIO_readPort>
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((command & 0x0F) << 4);
     d16:	20 e1       	ldi	r18, 0x10	; 16
     d18:	12 9f       	mul	r17, r18
     d1a:	c0 01       	movw	r24, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	69 81       	ldd	r22, Y+1	; 0x01
     d20:	6f 70       	andi	r22, 0x0F	; 15
     d22:	68 2b       	or	r22, r24
     d24:	69 83       	std	Y+1, r22	; 0x01
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (command & 0x0F);
#endif
	DIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <DIO_writePort>
     d2c:	8f ec       	ldi	r24, 0xCF	; 207
     d2e:	97 e0       	ldi	r25, 0x07	; 7
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <LCD_sendCommand+0xc2>
     d34:	00 c0       	rjmp	.+0      	; 0xd36 <LCD_sendCommand+0xc8>
     d36:	00 00       	nop

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_LOW); /* Disable LCD E=0 */
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	63 e0       	ldi	r22, 0x03	; 3
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
     d42:	8f ec       	ldi	r24, 0xCF	; 207
     d44:	97 e0       	ldi	r25, 0x07	; 7
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <LCD_sendCommand+0xd8>
     d4a:	00 c0       	rjmp	.+0      	; 0xd4c <LCD_sendCommand+0xde>
     d4c:	00 00       	nop
	DIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
     d4e:	0f 90       	pop	r0
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	08 95       	ret

00000d58 <LCD_init>:
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
	/* Configure the direction for RS, RW and E pins as output pins */
	DIO_pinMode(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     d58:	41 e0       	ldi	r20, 0x01	; 1
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <DIO_pinMode>
	DIO_pinMode(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
     d62:	41 e0       	ldi	r20, 0x01	; 1
     d64:	62 e0       	ldi	r22, 0x02	; 2
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <DIO_pinMode>
	DIO_pinMode(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     d6c:	41 e0       	ldi	r20, 0x01	; 1
     d6e:	63 e0       	ldi	r22, 0x03	; 3
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <DIO_pinMode>

#if (LCD_DATA_BITS_MODE == 4)

	/* Configure 4 pins in the data port as output pins */
	DIO_pinMode(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID,PIN_OUTPUT);
     d76:	41 e0       	ldi	r20, 0x01	; 1
     d78:	64 e0       	ldi	r22, 0x04	; 4
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <DIO_pinMode>
	DIO_pinMode(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+1,PIN_OUTPUT);
     d80:	41 e0       	ldi	r20, 0x01	; 1
     d82:	65 e0       	ldi	r22, 0x05	; 5
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <DIO_pinMode>
	DIO_pinMode(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,PIN_OUTPUT);
     d8a:	41 e0       	ldi	r20, 0x01	; 1
     d8c:	66 e0       	ldi	r22, 0x06	; 6
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <DIO_pinMode>
	DIO_pinMode(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,PIN_OUTPUT);
     d94:	41 e0       	ldi	r20, 0x01	; 1
     d96:	67 e0       	ldi	r22, 0x07	; 7
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <DIO_pinMode>

	LCD_sendCommand(LCD_GO_TO_HOME);
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	0e 94 37 06 	call	0xc6e	; 0xc6e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
     da4:	88 e2       	ldi	r24, 0x28	; 40
     da6:	0e 94 37 06 	call	0xc6e	; 0xc6e <LCD_sendCommand>
	/* Configure the data port as output port */
	DIO_portMode(LCD_DATA_PORT_ID,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     daa:	8c e0       	ldi	r24, 0x0C	; 12
     dac:	0e 94 37 06 	call	0xc6e	; 0xc6e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	0e 94 37 06 	call	0xc6e	; 0xc6e <LCD_sendCommand>
     db6:	08 95       	ret

00000db8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
     db8:	1f 93       	push	r17
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	1f 92       	push	r1
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	18 2f       	mov	r17, r24
	uint8 lcd_port_value = 0;
     dc6:	19 82       	std	Y+1, r1	; 0x01
	DIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
     dc8:	41 e0       	ldi	r20, 0x01	; 1
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
	DIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	62 e0       	ldi	r22, 0x02	; 2
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
     ddc:	8f ec       	ldi	r24, 0xCF	; 207
     dde:	97 e0       	ldi	r25, 0x07	; 7
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <LCD_displayCharacter+0x28>
     de4:	00 c0       	rjmp	.+0      	; 0xde6 <LCD_displayCharacter+0x2e>
     de6:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     de8:	41 e0       	ldi	r20, 0x01	; 1
     dea:	63 e0       	ldi	r22, 0x03	; 3
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
     df2:	8f ec       	ldi	r24, 0xCF	; 207
     df4:	97 e0       	ldi	r25, 0x07	; 7
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <LCD_displayCharacter+0x3e>
     dfa:	00 c0       	rjmp	.+0      	; 0xdfc <LCD_displayCharacter+0x44>
     dfc:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required data to the data bus D4 --> D7 */
	DIO_readPort(LCD_DATA_PORT_ID,&lcd_port_value);
     dfe:	be 01       	movw	r22, r28
     e00:	6f 5f       	subi	r22, 0xFF	; 255
     e02:	7f 4f       	sbci	r23, 0xFF	; 255
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <DIO_readPort>
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (data & 0xF0);
     e0a:	69 81       	ldd	r22, Y+1	; 0x01
     e0c:	6f 70       	andi	r22, 0x0F	; 15
     e0e:	81 2f       	mov	r24, r17
     e10:	80 7f       	andi	r24, 0xF0	; 240
     e12:	68 2b       	or	r22, r24
     e14:	69 83       	std	Y+1, r22	; 0x01
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((data & 0xF0) >> 4);
#endif
	DIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <DIO_writePort>
     e1c:	8f ec       	ldi	r24, 0xCF	; 207
     e1e:	97 e0       	ldi	r25, 0x07	; 7
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <LCD_displayCharacter+0x68>
     e24:	00 c0       	rjmp	.+0      	; 0xe26 <LCD_displayCharacter+0x6e>
     e26:	00 00       	nop

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	63 e0       	ldi	r22, 0x03	; 3
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
     e32:	8f ec       	ldi	r24, 0xCF	; 207
     e34:	97 e0       	ldi	r25, 0x07	; 7
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <LCD_displayCharacter+0x7e>
     e3a:	00 c0       	rjmp	.+0      	; 0xe3c <LCD_displayCharacter+0x84>
     e3c:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     e3e:	41 e0       	ldi	r20, 0x01	; 1
     e40:	63 e0       	ldi	r22, 0x03	; 3
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
     e48:	8f ec       	ldi	r24, 0xCF	; 207
     e4a:	97 e0       	ldi	r25, 0x07	; 7
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <LCD_displayCharacter+0x94>
     e50:	00 c0       	rjmp	.+0      	; 0xe52 <LCD_displayCharacter+0x9a>
     e52:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required data to the data bus D4 --> D7 */
	DIO_readPort(LCD_DATA_PORT_ID,&lcd_port_value);
     e54:	be 01       	movw	r22, r28
     e56:	6f 5f       	subi	r22, 0xFF	; 255
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <DIO_readPort>
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((data & 0x0F) << 4);
     e60:	20 e1       	ldi	r18, 0x10	; 16
     e62:	12 9f       	mul	r17, r18
     e64:	c0 01       	movw	r24, r0
     e66:	11 24       	eor	r1, r1
     e68:	69 81       	ldd	r22, Y+1	; 0x01
     e6a:	6f 70       	andi	r22, 0x0F	; 15
     e6c:	68 2b       	or	r22, r24
     e6e:	69 83       	std	Y+1, r22	; 0x01
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (data & 0x0F);
#endif
	DIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <DIO_writePort>
     e76:	8f ec       	ldi	r24, 0xCF	; 207
     e78:	97 e0       	ldi	r25, 0x07	; 7
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <LCD_displayCharacter+0xc2>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <LCD_displayCharacter+0xc8>
     e80:	00 00       	nop

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	63 e0       	ldi	r22, 0x03	; 3
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
     e8c:	8f ec       	ldi	r24, 0xCF	; 207
     e8e:	97 e0       	ldi	r25, 0x07	; 7
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <LCD_displayCharacter+0xd8>
     e94:	00 c0       	rjmp	.+0      	; 0xe96 <LCD_displayCharacter+0xde>
     e96:	00 00       	nop
	DIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
     e98:	0f 90       	pop	r0
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	08 95       	ret

00000ea2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	cf 93       	push	r28
     ea8:	8c 01       	movw	r16, r24
	uint8 i = 0;
     eaa:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
     eac:	03 c0       	rjmp	.+6      	; 0xeb4 <LCD_displayString+0x12>
	{
		LCD_displayCharacter(Str[i]);
     eae:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <LCD_displayCharacter>
		i++;
     eb2:	cf 5f       	subi	r28, 0xFF	; 255
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
     eb4:	f8 01       	movw	r30, r16
     eb6:	ec 0f       	add	r30, r28
     eb8:	f1 1d       	adc	r31, r1
     eba:	80 81       	ld	r24, Z
     ebc:	81 11       	cpse	r24, r1
     ebe:	f7 cf       	rjmp	.-18     	; 0xeae <LCD_displayString+0xc>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	08 95       	ret

00000ec8 <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address = LOGIC_HIGH;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	39 f0       	breq	.+14     	; 0xeda <LCD_moveCursor+0x12>
     ecc:	58 f0       	brcs	.+22     	; 0xee4 <LCD_moveCursor+0x1c>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	31 f0       	breq	.+12     	; 0xede <LCD_moveCursor+0x16>
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	31 f0       	breq	.+12     	; 0xee2 <LCD_moveCursor+0x1a>
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
	uint8 lcd_memory_address = LOGIC_HIGH;
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <LCD_moveCursor+0x1c>
	{
		case 0:
			lcd_memory_address=col;
				break;
		case 1:
			lcd_memory_address=col+0x40;
     eda:	60 5c       	subi	r22, 0xC0	; 192
				break;
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <LCD_moveCursor+0x1c>
		case 2:
			lcd_memory_address=col+0x10;
     ede:	60 5f       	subi	r22, 0xF0	; 240
				break;
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <LCD_moveCursor+0x1c>
		case 3:
			lcd_memory_address=col+0x50;
     ee2:	60 5b       	subi	r22, 0xB0	; 176
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
     ee4:	86 2f       	mov	r24, r22
     ee6:	80 68       	ori	r24, 0x80	; 128
     ee8:	0e 94 37 06 	call	0xc6e	; 0xc6e <LCD_sendCommand>
     eec:	08 95       	ret

00000eee <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	ea 01       	movw	r28, r20
	LCD_moveCursor(row,col); /* go to to the required LCD position */
     ef4:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
     ef8:	ce 01       	movw	r24, r28
     efa:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_displayString>
}
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	08 95       	ret

00000f04 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	60 97       	sbiw	r28, 0x10	; 16
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
     f18:	4a e0       	ldi	r20, 0x0A	; 10
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	be 01       	movw	r22, r28
     f1e:	6f 5f       	subi	r22, 0xFF	; 255
     f20:	7f 4f       	sbci	r23, 0xFF	; 255
     f22:	0e 94 db 21 	call	0x43b6	; 0x43b6 <itoa>
   LCD_displayString(buff); /* Display the string */
     f26:	ce 01       	movw	r24, r28
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_displayString>
}
     f2e:	60 96       	adiw	r28, 0x10	; 16
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <LCD_clearScreen>:
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	0e 94 37 06 	call	0xc6e	; 0xc6e <LCD_sendCommand>
     f46:	08 95       	ret

00000f48 <PWM_callback>:
}


/* ============= PWM CALLBACK FUNCTION =============*/
void PWM_callback (void)
{
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	cf 93       	push	r28
	if((gs_u8_duty_cycle < MAX_DUTY_CYCLE) && ((gs_u8_duty_cycle > ZERO_VALUE)))
     f52:	c0 91 7c 01 	lds	r28, 0x017C	; 0x80017c <gs_u8_duty_cycle>
     f56:	6c 2f       	mov	r22, r28
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 a4 20 	call	0x4148	; 0x4148 <__floatsisf>
     f62:	6b 01       	movw	r12, r22
     f64:	7c 01       	movw	r14, r24
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	48 ec       	ldi	r20, 0xC8	; 200
     f6c:	52 e4       	ldi	r21, 0x42	; 66
     f6e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
     f72:	88 23       	and	r24, r24
     f74:	bc f5       	brge	.+110    	; 0xfe4 <PWM_callback+0x9c>
     f76:	cc 23       	and	r28, r28
     f78:	a9 f1       	breq	.+106    	; 0xfe4 <PWM_callback+0x9c>
	{
		DIO_togglePin(gs_u8_gpio_port_id,gs_u8_gpio_pin_id);
     f7a:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <gs_u8_gpio_pin_id>
     f7e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <gs_u8_gpio_port_id>
     f82:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <DIO_togglePin>
		timer_stop(gs_u8_timer_id);
     f86:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <gs_u8_timer_id>
     f8a:	0e 94 28 14 	call	0x2850	; 0x2850 <timer_stop>
		if(gs_bo_pwm_flag == FALSE)		
     f8e:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <gs_bo_pwm_flag>
     f92:	81 11       	cpse	r24, r1
     f94:	12 c0       	rjmp	.+36     	; 0xfba <PWM_callback+0x72>
		{
			timer_setClock(gs_u8_timer_id,gs_u8_offTime_prescale);
     f96:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <gs_u8_offTime_prescale>
     f9a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <gs_u8_timer_id>
     f9e:	0e 94 aa 12 	call	0x2554	; 0x2554 <timer_setClock>
			timer_setInitialValue(gs_u8_timer_id,gs_u16_offTime_initValue);
     fa2:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <gs_u16_offTime_initValue>
     fa6:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <gs_u16_offTime_initValue+0x1>
     faa:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <gs_u8_timer_id>
     fae:	0e 94 7f 12 	call	0x24fe	; 0x24fe <timer_setInitialValue>
			gs_bo_pwm_flag = TRUE;
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <gs_bo_pwm_flag>
     fb8:	10 c0       	rjmp	.+32     	; 0xfda <PWM_callback+0x92>
		}
		else
		{
			timer_setClock(gs_u8_timer_id,gs_u8_onTime_prescale);
     fba:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <gs_u8_onTime_prescale>
     fbe:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <gs_u8_timer_id>
     fc2:	0e 94 aa 12 	call	0x2554	; 0x2554 <timer_setClock>
			timer_setInitialValue(gs_u8_timer_id,gs_u16_onTime_initValue);
     fc6:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <gs_u16_onTime_initValue>
     fca:	70 91 74 01 	lds	r23, 0x0174	; 0x800174 <gs_u16_onTime_initValue+0x1>
     fce:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <gs_u8_timer_id>
     fd2:	0e 94 7f 12 	call	0x24fe	; 0x24fe <timer_setInitialValue>
			gs_bo_pwm_flag = FALSE;
     fd6:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <gs_bo_pwm_flag>
		}
		timer_start(gs_u8_timer_id);
     fda:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <gs_u8_timer_id>
     fde:	0e 94 37 13 	call	0x266e	; 0x266e <timer_start>
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <PWM_callback+0xce>
	}
	else if (gs_u8_duty_cycle == MAX_DUTY_CYCLE)
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	48 ec       	ldi	r20, 0xC8	; 200
     fea:	52 e4       	ldi	r21, 0x42	; 66
     fec:	c7 01       	movw	r24, r14
     fee:	b6 01       	movw	r22, r12
     ff0:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
     ff4:	81 11       	cpse	r24, r1
     ff6:	08 c0       	rjmp	.+16     	; 0x1008 <PWM_callback+0xc0>
	{
		DIO_writePin(gs_u8_gpio_port_id,gs_u8_gpio_pin_id,PIN_HIGH);
     ff8:	41 e0       	ldi	r20, 0x01	; 1
     ffa:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <gs_u8_gpio_pin_id>
     ffe:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <gs_u8_gpio_port_id>
    1002:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
    1006:	07 c0       	rjmp	.+14     	; 0x1016 <PWM_callback+0xce>
	}
	else
	{
		DIO_writePin(gs_u8_gpio_port_id,gs_u8_gpio_pin_id,PIN_LOW);
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <gs_u8_gpio_pin_id>
    100e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <gs_u8_gpio_port_id>
    1012:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
	}
}
    1016:	cf 91       	pop	r28
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	df 90       	pop	r13
    101e:	cf 90       	pop	r12
    1020:	08 95       	ret

00001022 <PWM_Init>:
 *
 * @return      ENU_PWM_VALID_OPERATION		: in case of successful operation     
 *				ENU_PWM_INVALID_OPERATION	:	in case of wrong value       
 */
enu_pwm_error_t PWM_Init(uint8 u8_pwm_port_id,uint8 u8_pwm_pin_id,uint8 u8_pwm_timer_id)
{
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	29 97       	sbiw	r28, 0x09	; 9
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
	enu_pwm_error_t enu_pwm_error = ENU_PWM_VALID_OPERATION;
	str_tmr_config_t str_tmr_config;
	//check the passing parameters
	if((u8_pwm_port_id < MAX_PORT_ID) && (u8_pwm_pin_id < MAX_PIN_ID) && (u8_pwm_timer_id < MAX_ENU_TMR_CHANNEL))
    103c:	84 30       	cpi	r24, 0x04	; 4
    103e:	60 f5       	brcc	.+88     	; 0x1098 <PWM_Init+0x76>
    1040:	68 30       	cpi	r22, 0x08	; 8
    1042:	60 f5       	brcc	.+88     	; 0x109c <PWM_Init+0x7a>
    1044:	43 30       	cpi	r20, 0x03	; 3
    1046:	60 f5       	brcc	.+88     	; 0x10a0 <PWM_Init+0x7e>
    1048:	f4 2e       	mov	r15, r20
    104a:	06 2f       	mov	r16, r22
    104c:	18 2f       	mov	r17, r24
	{
		//set global variables
		gs_u8_gpio_port_id	= u8_pwm_port_id;
    104e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <gs_u8_gpio_port_id>
		gs_u8_gpio_pin_id	= u8_pwm_pin_id;
    1052:	60 93 7f 01 	sts	0x017F, r22	; 0x80017f <gs_u8_gpio_pin_id>
		gs_u8_timer_id		= u8_pwm_timer_id;
    1056:	40 93 7e 01 	sts	0x017E, r20	; 0x80017e <gs_u8_timer_id>
		//initialize TIMER
		str_tmr_config.enu_tmr_channel_id		= u8_pwm_timer_id;
    105a:	49 83       	std	Y+1, r20	; 0x01
		str_tmr_config.enu_tmr_clk				= ENU_TMR_NO_CLK;
    105c:	1d 82       	std	Y+5, r1	; 0x05
		str_tmr_config.enu_tmr_mode				= ENU_TMR_NORMAL_MODE;
    105e:	1a 82       	std	Y+2, r1	; 0x02
		str_tmr_config.enu_tmr_cmp_mode			= ENU_TMR_CMP_DISCONNECT;
    1060:	1c 82       	std	Y+4, r1	; 0x04
		str_tmr_config.enu_tmr_interrupt_state	= ENU_TMR_INT_ENABLE;
    1062:	1b 82       	std	Y+3, r1	; 0x03
		str_tmr_config.u16_tmr_initial_value	= ZERO_VALUE;
    1064:	1f 82       	std	Y+7, r1	; 0x07
    1066:	1e 82       	std	Y+6, r1	; 0x06
		str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
    1068:	19 86       	std	Y+9, r1	; 0x09
    106a:	18 86       	std	Y+8, r1	; 0x08
		timer_init(&str_tmr_config);
    106c:	ce 01       	movw	r24, r28
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	0e 94 c0 10 	call	0x2180	; 0x2180 <timer_init>
		timer_setCallBack(u8_pwm_timer_id,PWM_callback,ENU_TMR_NORMAL_MODE);
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	64 ea       	ldi	r22, 0xA4	; 164
    1078:	77 e0       	ldi	r23, 0x07	; 7
    107a:	8f 2d       	mov	r24, r15
    107c:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <timer_setCallBack>
		//initialize GPIO
		DIO_pinMode(u8_pwm_port_id,u8_pwm_pin_id,PIN_OUTPUT);
    1080:	41 e0       	ldi	r20, 0x01	; 1
    1082:	60 2f       	mov	r22, r16
    1084:	81 2f       	mov	r24, r17
    1086:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <DIO_pinMode>
		DIO_writePin(u8_pwm_port_id,u8_pwm_pin_id,PIN_LOW);
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	60 2f       	mov	r22, r16
    108e:	81 2f       	mov	r24, r17
    1090:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
 * @return      ENU_PWM_VALID_OPERATION		: in case of successful operation     
 *				ENU_PWM_INVALID_OPERATION	:	in case of wrong value       
 */
enu_pwm_error_t PWM_Init(uint8 u8_pwm_port_id,uint8 u8_pwm_pin_id,uint8 u8_pwm_timer_id)
{
	enu_pwm_error_t enu_pwm_error = ENU_PWM_VALID_OPERATION;
    1094:	81 e0       	ldi	r24, 0x01	; 1
		str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
		timer_init(&str_tmr_config);
		timer_setCallBack(u8_pwm_timer_id,PWM_callback,ENU_TMR_NORMAL_MODE);
		//initialize GPIO
		DIO_pinMode(u8_pwm_port_id,u8_pwm_pin_id,PIN_OUTPUT);
		DIO_writePin(u8_pwm_port_id,u8_pwm_pin_id,PIN_LOW);
    1096:	05 c0       	rjmp	.+10     	; 0x10a2 <PWM_Init+0x80>
	}
	else
	{
		enu_pwm_error = ENU_PWM_INVALID_OPERATION;
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <PWM_Init+0x80>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <PWM_Init+0x80>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enu_pwm_error;
}
    10a2:	29 96       	adiw	r28, 0x09	; 9
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	08 95       	ret

000010ba <PWM_start>:
 * @param[in]   u8_duty_cycle			: PWM duty cycle percentage it should be [0%--100%]
 * @return      ENU_PWM_VALID_OPERATION		: in case of successful operation     
 *				ENU_PWM_INVALID_OPERATION	:in case of wrong value       
 */
enu_pwm_error_t PWM_start(uint8 u8_pwm_timer_id,uint32 u32_periodic_time,uint8 u8_duty_cycle)
{
    10ba:	4f 92       	push	r4
    10bc:	5f 92       	push	r5
    10be:	6f 92       	push	r6
    10c0:	7f 92       	push	r7
    10c2:	8f 92       	push	r8
    10c4:	9f 92       	push	r9
    10c6:	af 92       	push	r10
    10c8:	bf 92       	push	r11
    10ca:	df 92       	push	r13
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	2a 97       	sbiw	r28, 0x0a	; 10
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
	enu_pwm_error_t enu_pwm_error	= ENU_PWM_VALID_OPERATION;
	float32 f32_on_time				= ZERO_VALUE;
	float32 f32_off_time			= ZERO_VALUE;
	uint16  u16_periodic_prescale	= ZERO_VALUE;
    10e8:	1a 82       	std	Y+2, r1	; 0x02
    10ea:	19 82       	std	Y+1, r1	; 0x01
	uint16	u16_offTime_prescale	= ZERO_VALUE;
    10ec:	1c 82       	std	Y+4, r1	; 0x04
    10ee:	1b 82       	std	Y+3, r1	; 0x03
	uint16	u16_onTime_prescale		= ZERO_VALUE;
    10f0:	1e 82       	std	Y+6, r1	; 0x06
    10f2:	1d 82       	std	Y+5, r1	; 0x05
	gs_u8_duty_cycle				= u8_duty_cycle;
    10f4:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <gs_u8_duty_cycle>
	
	if((u8_pwm_timer_id < MAX_ENU_TMR_CHANNEL) && (u32_periodic_time > ZERO_VALUE))
    10f8:	83 30       	cpi	r24, 0x03	; 3
    10fa:	08 f0       	brcs	.+2      	; 0x10fe <PWM_start+0x44>
    10fc:	b6 c0       	rjmp	.+364    	; 0x126a <PWM_start+0x1b0>
    10fe:	41 15       	cp	r20, r1
    1100:	51 05       	cpc	r21, r1
    1102:	61 05       	cpc	r22, r1
    1104:	71 05       	cpc	r23, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <PWM_start+0x50>
    1108:	b2 c0       	rjmp	.+356    	; 0x126e <PWM_start+0x1b4>
    110a:	12 2f       	mov	r17, r18
    110c:	4a 01       	movw	r8, r20
    110e:	5b 01       	movw	r10, r22
    1110:	d8 2e       	mov	r13, r24
	{
		if((u8_duty_cycle < MAX_DUTY_CYCLE) && (u8_duty_cycle > ZERO_VALUE))
    1112:	62 2f       	mov	r22, r18
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 a4 20 	call	0x4148	; 0x4148 <__floatsisf>
    111e:	2b 01       	movw	r4, r22
    1120:	3c 01       	movw	r6, r24
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	48 ec       	ldi	r20, 0xC8	; 200
    1128:	52 e4       	ldi	r21, 0x42	; 66
    112a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    112e:	88 23       	and	r24, r24
    1130:	0c f0       	brlt	.+2      	; 0x1134 <PWM_start+0x7a>
    1132:	69 c0       	rjmp	.+210    	; 0x1206 <PWM_start+0x14c>
    1134:	11 23       	and	r17, r17
    1136:	09 f4       	brne	.+2      	; 0x113a <PWM_start+0x80>
    1138:	66 c0       	rjmp	.+204    	; 0x1206 <PWM_start+0x14c>
		{
			f32_off_time	= ((float32)u32_periodic_time*u8_duty_cycle)/MAX_DUTY_CYCLE;	//calculate on time delay
    113a:	c5 01       	movw	r24, r10
    113c:	b4 01       	movw	r22, r8
    113e:	0e 94 a2 20 	call	0x4144	; 0x4144 <__floatunsisf>
    1142:	6f 83       	std	Y+7, r22	; 0x07
    1144:	78 87       	std	Y+8, r23	; 0x08
    1146:	89 87       	std	Y+9, r24	; 0x09
    1148:	9a 87       	std	Y+10, r25	; 0x0a
    114a:	9b 01       	movw	r18, r22
    114c:	ac 01       	movw	r20, r24
    114e:	c3 01       	movw	r24, r6
    1150:	b2 01       	movw	r22, r4
    1152:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	48 ec       	ldi	r20, 0xC8	; 200
    115c:	52 e4       	ldi	r21, 0x42	; 66
    115e:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    1162:	4b 01       	movw	r8, r22
    1164:	5c 01       	movw	r10, r24
			f32_on_time		= u32_periodic_time - f32_off_time;
    1166:	9b 01       	movw	r18, r22
    1168:	ac 01       	movw	r20, r24
    116a:	6f 81       	ldd	r22, Y+7	; 0x07
    116c:	78 85       	ldd	r23, Y+8	; 0x08
    116e:	89 85       	ldd	r24, Y+9	; 0x09
    1170:	9a 85       	ldd	r25, Y+10	; 0x0a
    1172:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    1176:	2b 01       	movw	r4, r22
    1178:	3c 01       	movw	r6, r24
			calc_prescaler(f32_off_time,u8_pwm_timer_id,ENU_MILLI_SECOND,&u16_offTime_prescale);
    117a:	8e 01       	movw	r16, r28
    117c:	0d 5f       	subi	r16, 0xFD	; 253
    117e:	1f 4f       	sbci	r17, 0xFF	; 255
    1180:	21 e0       	ldi	r18, 0x01	; 1
    1182:	4d 2d       	mov	r20, r13
    1184:	c5 01       	movw	r24, r10
    1186:	b4 01       	movw	r22, r8
    1188:	0e 94 ef 15 	call	0x2bde	; 0x2bde <calc_prescaler>
			calc_prescaler(f32_on_time,u8_pwm_timer_id,ENU_MILLI_SECOND,&u16_onTime_prescale);
    118c:	0e 5f       	subi	r16, 0xFE	; 254
    118e:	1f 4f       	sbci	r17, 0xFF	; 255
    1190:	21 e0       	ldi	r18, 0x01	; 1
    1192:	4d 2d       	mov	r20, r13
    1194:	c3 01       	movw	r24, r6
    1196:	b2 01       	movw	r22, r4
    1198:	0e 94 ef 15 	call	0x2bde	; 0x2bde <calc_prescaler>
			calc_initialValue(u8_pwm_timer_id,ENU_MILLI_SECOND,u16_offTime_prescale,f32_off_time,&gs_u16_offTime_initValue);
    119c:	4b 81       	ldd	r20, Y+3	; 0x03
    119e:	5c 81       	ldd	r21, Y+4	; 0x04
    11a0:	0f 2e       	mov	r0, r31
    11a2:	f5 e7       	ldi	r31, 0x75	; 117
    11a4:	ef 2e       	mov	r14, r31
    11a6:	f1 e0       	ldi	r31, 0x01	; 1
    11a8:	ff 2e       	mov	r15, r31
    11aa:	f0 2d       	mov	r31, r0
    11ac:	95 01       	movw	r18, r10
    11ae:	84 01       	movw	r16, r8
    11b0:	61 e0       	ldi	r22, 0x01	; 1
    11b2:	8d 2d       	mov	r24, r13
    11b4:	0e 94 3c 1a 	call	0x3478	; 0x3478 <calc_initialValue>
			calc_initialValue(u8_pwm_timer_id,ENU_MILLI_SECOND,u16_onTime_prescale,f32_on_time,&gs_u16_onTime_initValue);
    11b8:	4d 81       	ldd	r20, Y+5	; 0x05
    11ba:	5e 81       	ldd	r21, Y+6	; 0x06
    11bc:	0f 2e       	mov	r0, r31
    11be:	f3 e7       	ldi	r31, 0x73	; 115
    11c0:	ef 2e       	mov	r14, r31
    11c2:	f1 e0       	ldi	r31, 0x01	; 1
    11c4:	ff 2e       	mov	r15, r31
    11c6:	f0 2d       	mov	r31, r0
    11c8:	93 01       	movw	r18, r6
    11ca:	82 01       	movw	r16, r4
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	8d 2d       	mov	r24, r13
    11d0:	0e 94 3c 1a 	call	0x3478	; 0x3478 <calc_initialValue>
			gs_u8_onTime_prescale	= (uint8) timer_clk_map(u16_onTime_prescale);
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	9e 81       	ldd	r25, Y+6	; 0x06
    11d8:	0e 94 61 09 	call	0x12c2	; 0x12c2 <timer_clk_map>
    11dc:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <gs_u8_onTime_prescale>
			gs_u8_offTime_prescale	= (uint8) timer_clk_map(u16_offTime_prescale);
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <timer_clk_map>
    11e8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <gs_u8_offTime_prescale>
			timer_setInitialValue(u8_pwm_timer_id,gs_u16_onTime_initValue);
    11ec:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <gs_u16_onTime_initValue>
    11f0:	70 91 74 01 	lds	r23, 0x0174	; 0x800174 <gs_u16_onTime_initValue+0x1>
    11f4:	8d 2d       	mov	r24, r13
    11f6:	0e 94 7f 12 	call	0x24fe	; 0x24fe <timer_setInitialValue>
			timer_setClock(u8_pwm_timer_id,gs_u8_onTime_prescale);
    11fa:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <gs_u8_onTime_prescale>
    11fe:	8d 2d       	mov	r24, r13
    1200:	0e 94 aa 12 	call	0x2554	; 0x2554 <timer_setClock>
	gs_u8_duty_cycle				= u8_duty_cycle;
	
	if((u8_pwm_timer_id < MAX_ENU_TMR_CHANNEL) && (u32_periodic_time > ZERO_VALUE))
	{
		if((u8_duty_cycle < MAX_DUTY_CYCLE) && (u8_duty_cycle > ZERO_VALUE))
		{
    1204:	2d c0       	rjmp	.+90     	; 0x1260 <PWM_start+0x1a6>
			timer_setInitialValue(u8_pwm_timer_id,gs_u16_onTime_initValue);
			timer_setClock(u8_pwm_timer_id,gs_u8_onTime_prescale);
		}
		else 
		{
			calc_prescaler(u32_periodic_time,u8_pwm_timer_id,ENU_MILLI_SECOND,&u16_periodic_prescale);
    1206:	c5 01       	movw	r24, r10
    1208:	b4 01       	movw	r22, r8
    120a:	0e 94 a2 20 	call	0x4144	; 0x4144 <__floatunsisf>
    120e:	4b 01       	movw	r8, r22
    1210:	5c 01       	movw	r10, r24
    1212:	8e 01       	movw	r16, r28
    1214:	0f 5f       	subi	r16, 0xFF	; 255
    1216:	1f 4f       	sbci	r17, 0xFF	; 255
    1218:	21 e0       	ldi	r18, 0x01	; 1
    121a:	4d 2d       	mov	r20, r13
    121c:	0e 94 ef 15 	call	0x2bde	; 0x2bde <calc_prescaler>
			calc_initialValue(u8_pwm_timer_id,ENU_MILLI_SECOND,u16_periodic_prescale,u32_periodic_time,&gs_u16_periodic_initValue);
    1220:	49 81       	ldd	r20, Y+1	; 0x01
    1222:	5a 81       	ldd	r21, Y+2	; 0x02
    1224:	0f 2e       	mov	r0, r31
    1226:	f7 e7       	ldi	r31, 0x77	; 119
    1228:	ef 2e       	mov	r14, r31
    122a:	f1 e0       	ldi	r31, 0x01	; 1
    122c:	ff 2e       	mov	r15, r31
    122e:	f0 2d       	mov	r31, r0
    1230:	95 01       	movw	r18, r10
    1232:	84 01       	movw	r16, r8
    1234:	61 e0       	ldi	r22, 0x01	; 1
    1236:	8d 2d       	mov	r24, r13
    1238:	0e 94 3c 1a 	call	0x3478	; 0x3478 <calc_initialValue>
			gs_u8_periodic_prescale	= (uint8) timer_clk_map(u16_periodic_prescale);
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	0e 94 61 09 	call	0x12c2	; 0x12c2 <timer_clk_map>
    1244:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <gs_u8_periodic_prescale>
			timer_setInitialValue(u8_pwm_timer_id,gs_u16_periodic_initValue);
    1248:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <gs_u16_periodic_initValue>
    124c:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <gs_u16_periodic_initValue+0x1>
    1250:	8d 2d       	mov	r24, r13
    1252:	0e 94 7f 12 	call	0x24fe	; 0x24fe <timer_setInitialValue>
			timer_setClock(u8_pwm_timer_id,gs_u8_periodic_prescale);
    1256:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <gs_u8_periodic_prescale>
    125a:	8d 2d       	mov	r24, r13
    125c:	0e 94 aa 12 	call	0x2554	; 0x2554 <timer_setClock>
		}
		timer_start(u8_pwm_timer_id);
    1260:	8d 2d       	mov	r24, r13
    1262:	0e 94 37 13 	call	0x266e	; 0x266e <timer_start>
 * @return      ENU_PWM_VALID_OPERATION		: in case of successful operation     
 *				ENU_PWM_INVALID_OPERATION	:in case of wrong value       
 */
enu_pwm_error_t PWM_start(uint8 u8_pwm_timer_id,uint32 u32_periodic_time,uint8 u8_duty_cycle)
{
	enu_pwm_error_t enu_pwm_error	= ENU_PWM_VALID_OPERATION;
    1266:	81 e0       	ldi	r24, 0x01	; 1
			calc_initialValue(u8_pwm_timer_id,ENU_MILLI_SECOND,u16_periodic_prescale,u32_periodic_time,&gs_u16_periodic_initValue);
			gs_u8_periodic_prescale	= (uint8) timer_clk_map(u16_periodic_prescale);
			timer_setInitialValue(u8_pwm_timer_id,gs_u16_periodic_initValue);
			timer_setClock(u8_pwm_timer_id,gs_u8_periodic_prescale);
		}
		timer_start(u8_pwm_timer_id);
    1268:	03 c0       	rjmp	.+6      	; 0x1270 <PWM_start+0x1b6>
	}
	else
	{
		enu_pwm_error = ENU_PWM_INVALID_OPERATION;
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <PWM_start+0x1b6>
    126e:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enu_pwm_error;
}
    1270:	2a 96       	adiw	r28, 0x0a	; 10
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	bf 90       	pop	r11
    128c:	af 90       	pop	r10
    128e:	9f 90       	pop	r9
    1290:	8f 90       	pop	r8
    1292:	7f 90       	pop	r7
    1294:	6f 90       	pop	r6
    1296:	5f 90       	pop	r5
    1298:	4f 90       	pop	r4
    129a:	08 95       	ret

0000129c <timer_check_time_out_flag>:
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
	}
	return enu_time_error;
}
    129c:	83 30       	cpi	r24, 0x03	; 3
    129e:	68 f4       	brcc	.+26     	; 0x12ba <timer_check_time_out_flag+0x1e>
    12a0:	61 15       	cp	r22, r1
    12a2:	71 05       	cpc	r23, r1
    12a4:	61 f0       	breq	.+24     	; 0x12be <timer_check_time_out_flag+0x22>
    12a6:	e8 2f       	mov	r30, r24
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	e8 56       	subi	r30, 0x68	; 104
    12ac:	fe 4f       	sbci	r31, 0xFE	; 254
    12ae:	80 81       	ld	r24, Z
    12b0:	db 01       	movw	r26, r22
    12b2:	8c 93       	st	X, r24
    12b4:	10 82       	st	Z, r1
    12b6:	83 e0       	ldi	r24, 0x03	; 3
    12b8:	08 95       	ret
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	08 95       	ret
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	08 95       	ret

000012c2 <timer_clk_map>:
    12c2:	80 32       	cpi	r24, 0x20	; 32
    12c4:	91 05       	cpc	r25, r1
    12c6:	e1 f0       	breq	.+56     	; 0x1300 <timer_clk_map+0x3e>
    12c8:	38 f4       	brcc	.+14     	; 0x12d8 <timer_clk_map+0x16>
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	21 f1       	breq	.+72     	; 0x1318 <timer_clk_map+0x56>
    12d0:	98 f0       	brcs	.+38     	; 0x12f8 <timer_clk_map+0x36>
    12d2:	08 97       	sbiw	r24, 0x08	; 8
    12d4:	99 f0       	breq	.+38     	; 0x12fc <timer_clk_map+0x3a>
    12d6:	1e c0       	rjmp	.+60     	; 0x1314 <timer_clk_map+0x52>
    12d8:	80 38       	cpi	r24, 0x80	; 128
    12da:	91 05       	cpc	r25, r1
    12dc:	a9 f0       	breq	.+42     	; 0x1308 <timer_clk_map+0x46>
    12de:	20 f4       	brcc	.+8      	; 0x12e8 <timer_clk_map+0x26>
    12e0:	80 34       	cpi	r24, 0x40	; 64
    12e2:	91 05       	cpc	r25, r1
    12e4:	79 f0       	breq	.+30     	; 0x1304 <timer_clk_map+0x42>
    12e6:	16 c0       	rjmp	.+44     	; 0x1314 <timer_clk_map+0x52>
    12e8:	81 15       	cp	r24, r1
    12ea:	21 e0       	ldi	r18, 0x01	; 1
    12ec:	92 07       	cpc	r25, r18
    12ee:	71 f0       	breq	.+28     	; 0x130c <timer_clk_map+0x4a>
    12f0:	81 15       	cp	r24, r1
    12f2:	94 40       	sbci	r25, 0x04	; 4
    12f4:	69 f0       	breq	.+26     	; 0x1310 <timer_clk_map+0x4e>
    12f6:	0e c0       	rjmp	.+28     	; 0x1314 <timer_clk_map+0x52>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	08 95       	ret
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	08 95       	ret
    1300:	83 e0       	ldi	r24, 0x03	; 3
    1302:	08 95       	ret
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	08 95       	ret
    1308:	85 e0       	ldi	r24, 0x05	; 5
    130a:	08 95       	ret
    130c:	86 e0       	ldi	r24, 0x06	; 6
    130e:	08 95       	ret
    1310:	87 e0       	ldi	r24, 0x07	; 7
    1312:	08 95       	ret
    1314:	8a e0       	ldi	r24, 0x0A	; 10
    1316:	08 95       	ret
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	08 95       	ret

0000131c <delay_ms>:
    131c:	8f 92       	push	r8
    131e:	9f 92       	push	r9
    1320:	af 92       	push	r10
    1322:	bf 92       	push	r11
    1324:	df 92       	push	r13
    1326:	ef 92       	push	r14
    1328:	ff 92       	push	r15
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	2e 97       	sbiw	r28, 0x0e	; 14
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	1a 82       	std	Y+2, r1	; 0x02
    1344:	19 82       	std	Y+1, r1	; 0x01
    1346:	1c 82       	std	Y+4, r1	; 0x04
    1348:	1b 82       	std	Y+3, r1	; 0x03
    134a:	1d 82       	std	Y+5, r1	; 0x05
    134c:	8e 83       	std	Y+6, r24	; 0x06
    134e:	1f 82       	std	Y+7, r1	; 0x07
    1350:	19 86       	std	Y+9, r1	; 0x09
    1352:	91 e0       	ldi	r25, 0x01	; 1
    1354:	98 87       	std	Y+8, r25	; 0x08
    1356:	1e 86       	std	Y+14, r1	; 0x0e
    1358:	1d 86       	std	Y+13, r1	; 0x0d
    135a:	83 30       	cpi	r24, 0x03	; 3
    135c:	08 f0       	brcs	.+2      	; 0x1360 <delay_ms+0x44>
    135e:	d5 c0       	rjmp	.+426    	; 0x150a <delay_ms+0x1ee>
    1360:	4a 01       	movw	r8, r20
    1362:	5b 01       	movw	r10, r22
    1364:	d8 2e       	mov	r13, r24
    1366:	8e 01       	movw	r16, r28
    1368:	0f 5f       	subi	r16, 0xFF	; 255
    136a:	1f 4f       	sbci	r17, 0xFF	; 255
    136c:	21 e0       	ldi	r18, 0x01	; 1
    136e:	48 2f       	mov	r20, r24
    1370:	c5 01       	movw	r24, r10
    1372:	b4 01       	movw	r22, r8
    1374:	0e 94 ef 15 	call	0x2bde	; 0x2bde <calc_prescaler>
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	09 f0       	breq	.+2      	; 0x137e <delay_ms+0x62>
    137c:	c8 c0       	rjmp	.+400    	; 0x150e <delay_ms+0x1f2>
    137e:	49 81       	ldd	r20, Y+1	; 0x01
    1380:	5a 81       	ldd	r21, Y+2	; 0x02
    1382:	4c 3d       	cpi	r20, 0xDC	; 220
    1384:	85 e0       	ldi	r24, 0x05	; 5
    1386:	58 07       	cpc	r21, r24
    1388:	29 f1       	breq	.+74     	; 0x13d4 <delay_ms+0xb8>
    138a:	ce 01       	movw	r24, r28
    138c:	03 96       	adiw	r24, 0x03	; 3
    138e:	7c 01       	movw	r14, r24
    1390:	95 01       	movw	r18, r10
    1392:	84 01       	movw	r16, r8
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	8d 2d       	mov	r24, r13
    1398:	0e 94 3c 1a 	call	0x3478	; 0x3478 <calc_initialValue>
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	9a 81       	ldd	r25, Y+2	; 0x02
    13a0:	0e 94 61 09 	call	0x12c2	; 0x12c2 <timer_clk_map>
    13a4:	8a 87       	std	Y+10, r24	; 0x0a
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	9c 87       	std	Y+12, r25	; 0x0c
    13ac:	8b 87       	std	Y+11, r24	; 0x0b
    13ae:	ce 01       	movw	r24, r28
    13b0:	06 96       	adiw	r24, 0x06	; 6
    13b2:	0e 94 c0 10 	call	0x2180	; 0x2180 <timer_init>
    13b6:	8d 2d       	mov	r24, r13
    13b8:	0e 94 37 13 	call	0x266e	; 0x266e <timer_start>
    13bc:	ae 01       	movw	r20, r28
    13be:	4b 5f       	subi	r20, 0xFB	; 251
    13c0:	5f 4f       	sbci	r21, 0xFF	; 255
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	8d 2d       	mov	r24, r13
    13c6:	0e 94 76 14 	call	0x28ec	; 0x28ec <timer_flag_notification>
    13ca:	8d 81       	ldd	r24, Y+5	; 0x05
    13cc:	88 23       	and	r24, r24
    13ce:	b1 f3       	breq	.-20     	; 0x13bc <delay_ms+0xa0>
    13d0:	83 e0       	ldi	r24, 0x03	; 3
    13d2:	a0 c0       	rjmp	.+320    	; 0x1514 <delay_ms+0x1f8>
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	94 e0       	ldi	r25, 0x04	; 4
    13d8:	0e 94 61 09 	call	0x12c2	; 0x12c2 <timer_clk_map>
    13dc:	8a 87       	std	Y+10, r24	; 0x0a
    13de:	1c 86       	std	Y+12, r1	; 0x0c
    13e0:	1b 86       	std	Y+11, r1	; 0x0b
    13e2:	dd 20       	and	r13, r13
    13e4:	19 f0       	breq	.+6      	; 0x13ec <delay_ms+0xd0>
    13e6:	92 e0       	ldi	r25, 0x02	; 2
    13e8:	d9 12       	cpse	r13, r25
    13ea:	20 c0       	rjmp	.+64     	; 0x142c <delay_ms+0x110>
    13ec:	2f e6       	ldi	r18, 0x6F	; 111
    13ee:	32 e1       	ldi	r19, 0x12	; 18
    13f0:	43 e0       	ldi	r20, 0x03	; 3
    13f2:	52 e4       	ldi	r21, 0x42	; 66
    13f4:	c5 01       	movw	r24, r10
    13f6:	b4 01       	movw	r22, r8
    13f8:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    13fc:	4b 01       	movw	r8, r22
    13fe:	5c 01       	movw	r10, r24
    1400:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    1404:	8b 01       	movw	r16, r22
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 a2 20 	call	0x4144	; 0x4144 <__floatunsisf>
    140e:	9b 01       	movw	r18, r22
    1410:	ac 01       	movw	r20, r24
    1412:	c5 01       	movw	r24, r10
    1414:	b4 01       	movw	r22, r8
    1416:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    141a:	2f e6       	ldi	r18, 0x6F	; 111
    141c:	32 e1       	ldi	r19, 0x12	; 18
    141e:	43 e0       	ldi	r20, 0x03	; 3
    1420:	52 e4       	ldi	r21, 0x42	; 66
    1422:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1426:	4b 01       	movw	r8, r22
    1428:	5c 01       	movw	r10, r24
    142a:	33 c0       	rjmp	.+102    	; 0x1492 <delay_ms+0x176>
    142c:	2f e6       	ldi	r18, 0x6F	; 111
    142e:	32 e1       	ldi	r19, 0x12	; 18
    1430:	43 e0       	ldi	r20, 0x03	; 3
    1432:	56 e4       	ldi	r21, 0x46	; 70
    1434:	c5 01       	movw	r24, r10
    1436:	b4 01       	movw	r22, r8
    1438:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    143c:	4b 01       	movw	r8, r22
    143e:	5c 01       	movw	r10, r24
    1440:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    1444:	8b 01       	movw	r16, r22
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 a2 20 	call	0x4144	; 0x4144 <__floatunsisf>
    144e:	9b 01       	movw	r18, r22
    1450:	ac 01       	movw	r20, r24
    1452:	c5 01       	movw	r24, r10
    1454:	b4 01       	movw	r22, r8
    1456:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    145a:	2f e6       	ldi	r18, 0x6F	; 111
    145c:	32 e1       	ldi	r19, 0x12	; 18
    145e:	43 e0       	ldi	r20, 0x03	; 3
    1460:	56 e4       	ldi	r21, 0x46	; 70
    1462:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1466:	4b 01       	movw	r8, r22
    1468:	5c 01       	movw	r10, r24
    146a:	13 c0       	rjmp	.+38     	; 0x1492 <delay_ms+0x176>
    146c:	ce 01       	movw	r24, r28
    146e:	06 96       	adiw	r24, 0x06	; 6
    1470:	0e 94 c0 10 	call	0x2180	; 0x2180 <timer_init>
    1474:	8d 2d       	mov	r24, r13
    1476:	0e 94 37 13 	call	0x266e	; 0x266e <timer_start>
    147a:	ae 01       	movw	r20, r28
    147c:	4b 5f       	subi	r20, 0xFB	; 251
    147e:	5f 4f       	sbci	r21, 0xFF	; 255
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	8d 2d       	mov	r24, r13
    1484:	0e 94 76 14 	call	0x28ec	; 0x28ec <timer_flag_notification>
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	99 23       	and	r25, r25
    148c:	b1 f3       	breq	.-20     	; 0x147a <delay_ms+0x15e>
    148e:	01 50       	subi	r16, 0x01	; 1
    1490:	11 09       	sbc	r17, r1
    1492:	01 15       	cp	r16, r1
    1494:	11 05       	cpc	r17, r1
    1496:	51 f7       	brne	.-44     	; 0x146c <delay_ms+0x150>
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	a9 01       	movw	r20, r18
    149e:	c5 01       	movw	r24, r10
    14a0:	b4 01       	movw	r22, r8
    14a2:	0e 94 54 21 	call	0x42a8	; 0x42a8 <__gesf2>
    14a6:	18 16       	cp	r1, r24
    14a8:	a4 f5       	brge	.+104    	; 0x1512 <delay_ms+0x1f6>
    14aa:	8e 01       	movw	r16, r28
    14ac:	0f 5f       	subi	r16, 0xFF	; 255
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	21 e0       	ldi	r18, 0x01	; 1
    14b2:	4d 2d       	mov	r20, r13
    14b4:	c5 01       	movw	r24, r10
    14b6:	b4 01       	movw	r22, r8
    14b8:	0e 94 ef 15 	call	0x2bde	; 0x2bde <calc_prescaler>
    14bc:	49 81       	ldd	r20, Y+1	; 0x01
    14be:	5a 81       	ldd	r21, Y+2	; 0x02
    14c0:	ce 01       	movw	r24, r28
    14c2:	03 96       	adiw	r24, 0x03	; 3
    14c4:	7c 01       	movw	r14, r24
    14c6:	95 01       	movw	r18, r10
    14c8:	84 01       	movw	r16, r8
    14ca:	61 e0       	ldi	r22, 0x01	; 1
    14cc:	8d 2d       	mov	r24, r13
    14ce:	0e 94 3c 1a 	call	0x3478	; 0x3478 <calc_initialValue>
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	0e 94 61 09 	call	0x12c2	; 0x12c2 <timer_clk_map>
    14da:	8a 87       	std	Y+10, r24	; 0x0a
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	9c 87       	std	Y+12, r25	; 0x0c
    14e2:	8b 87       	std	Y+11, r24	; 0x0b
    14e4:	ce 01       	movw	r24, r28
    14e6:	06 96       	adiw	r24, 0x06	; 6
    14e8:	0e 94 c0 10 	call	0x2180	; 0x2180 <timer_init>
    14ec:	8d 2d       	mov	r24, r13
    14ee:	0e 94 37 13 	call	0x266e	; 0x266e <timer_start>
    14f2:	ae 01       	movw	r20, r28
    14f4:	4b 5f       	subi	r20, 0xFB	; 251
    14f6:	5f 4f       	sbci	r21, 0xFF	; 255
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	8d 2d       	mov	r24, r13
    14fc:	0e 94 76 14 	call	0x28ec	; 0x28ec <timer_flag_notification>
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	88 23       	and	r24, r24
    1504:	b1 f3       	breq	.-20     	; 0x14f2 <delay_ms+0x1d6>
    1506:	83 e0       	ldi	r24, 0x03	; 3
    1508:	05 c0       	rjmp	.+10     	; 0x1514 <delay_ms+0x1f8>
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <delay_ms+0x1f8>
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	01 c0       	rjmp	.+2      	; 0x1514 <delay_ms+0x1f8>
    1512:	83 e0       	ldi	r24, 0x03	; 3
    1514:	2e 96       	adiw	r28, 0x0e	; 14
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	df 90       	pop	r13
    152e:	bf 90       	pop	r11
    1530:	af 90       	pop	r10
    1532:	9f 90       	pop	r9
    1534:	8f 90       	pop	r8
    1536:	08 95       	ret

00001538 <delay_sec>:
    1538:	8f 92       	push	r8
    153a:	9f 92       	push	r9
    153c:	af 92       	push	r10
    153e:	bf 92       	push	r11
    1540:	df 92       	push	r13
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	2e 97       	sbiw	r28, 0x0e	; 14
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	1a 82       	std	Y+2, r1	; 0x02
    1560:	19 82       	std	Y+1, r1	; 0x01
    1562:	1c 82       	std	Y+4, r1	; 0x04
    1564:	1b 82       	std	Y+3, r1	; 0x03
    1566:	1d 82       	std	Y+5, r1	; 0x05
    1568:	8e 83       	std	Y+6, r24	; 0x06
    156a:	1f 82       	std	Y+7, r1	; 0x07
    156c:	19 86       	std	Y+9, r1	; 0x09
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	98 87       	std	Y+8, r25	; 0x08
    1572:	1e 86       	std	Y+14, r1	; 0x0e
    1574:	1d 86       	std	Y+13, r1	; 0x0d
    1576:	83 30       	cpi	r24, 0x03	; 3
    1578:	08 f0       	brcs	.+2      	; 0x157c <delay_sec+0x44>
    157a:	d5 c0       	rjmp	.+426    	; 0x1726 <delay_sec+0x1ee>
    157c:	4a 01       	movw	r8, r20
    157e:	5b 01       	movw	r10, r22
    1580:	d8 2e       	mov	r13, r24
    1582:	8e 01       	movw	r16, r28
    1584:	0f 5f       	subi	r16, 0xFF	; 255
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	22 e0       	ldi	r18, 0x02	; 2
    158a:	48 2f       	mov	r20, r24
    158c:	c5 01       	movw	r24, r10
    158e:	b4 01       	movw	r22, r8
    1590:	0e 94 ef 15 	call	0x2bde	; 0x2bde <calc_prescaler>
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	09 f0       	breq	.+2      	; 0x159a <delay_sec+0x62>
    1598:	c8 c0       	rjmp	.+400    	; 0x172a <delay_sec+0x1f2>
    159a:	49 81       	ldd	r20, Y+1	; 0x01
    159c:	5a 81       	ldd	r21, Y+2	; 0x02
    159e:	4c 3d       	cpi	r20, 0xDC	; 220
    15a0:	85 e0       	ldi	r24, 0x05	; 5
    15a2:	58 07       	cpc	r21, r24
    15a4:	29 f1       	breq	.+74     	; 0x15f0 <delay_sec+0xb8>
    15a6:	ce 01       	movw	r24, r28
    15a8:	03 96       	adiw	r24, 0x03	; 3
    15aa:	7c 01       	movw	r14, r24
    15ac:	95 01       	movw	r18, r10
    15ae:	84 01       	movw	r16, r8
    15b0:	62 e0       	ldi	r22, 0x02	; 2
    15b2:	8d 2d       	mov	r24, r13
    15b4:	0e 94 3c 1a 	call	0x3478	; 0x3478 <calc_initialValue>
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	0e 94 61 09 	call	0x12c2	; 0x12c2 <timer_clk_map>
    15c0:	8a 87       	std	Y+10, r24	; 0x0a
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	9c 87       	std	Y+12, r25	; 0x0c
    15c8:	8b 87       	std	Y+11, r24	; 0x0b
    15ca:	ce 01       	movw	r24, r28
    15cc:	06 96       	adiw	r24, 0x06	; 6
    15ce:	0e 94 c0 10 	call	0x2180	; 0x2180 <timer_init>
    15d2:	8d 2d       	mov	r24, r13
    15d4:	0e 94 37 13 	call	0x266e	; 0x266e <timer_start>
    15d8:	ae 01       	movw	r20, r28
    15da:	4b 5f       	subi	r20, 0xFB	; 251
    15dc:	5f 4f       	sbci	r21, 0xFF	; 255
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	8d 2d       	mov	r24, r13
    15e2:	0e 94 76 14 	call	0x28ec	; 0x28ec <timer_flag_notification>
    15e6:	8d 81       	ldd	r24, Y+5	; 0x05
    15e8:	88 23       	and	r24, r24
    15ea:	b1 f3       	breq	.-20     	; 0x15d8 <delay_sec+0xa0>
    15ec:	83 e0       	ldi	r24, 0x03	; 3
    15ee:	a0 c0       	rjmp	.+320    	; 0x1730 <delay_sec+0x1f8>
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	94 e0       	ldi	r25, 0x04	; 4
    15f4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <timer_clk_map>
    15f8:	8a 87       	std	Y+10, r24	; 0x0a
    15fa:	1c 86       	std	Y+12, r1	; 0x0c
    15fc:	1b 86       	std	Y+11, r1	; 0x0b
    15fe:	dd 20       	and	r13, r13
    1600:	19 f0       	breq	.+6      	; 0x1608 <delay_sec+0xd0>
    1602:	92 e0       	ldi	r25, 0x02	; 2
    1604:	d9 12       	cpse	r13, r25
    1606:	20 c0       	rjmp	.+64     	; 0x1648 <delay_sec+0x110>
    1608:	2d eb       	ldi	r18, 0xBD	; 189
    160a:	37 e3       	ldi	r19, 0x37	; 55
    160c:	46 e0       	ldi	r20, 0x06	; 6
    160e:	5d e3       	ldi	r21, 0x3D	; 61
    1610:	c5 01       	movw	r24, r10
    1612:	b4 01       	movw	r22, r8
    1614:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    1618:	4b 01       	movw	r8, r22
    161a:	5c 01       	movw	r10, r24
    161c:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    1620:	8b 01       	movw	r16, r22
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 a2 20 	call	0x4144	; 0x4144 <__floatunsisf>
    162a:	9b 01       	movw	r18, r22
    162c:	ac 01       	movw	r20, r24
    162e:	c5 01       	movw	r24, r10
    1630:	b4 01       	movw	r22, r8
    1632:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    1636:	2d eb       	ldi	r18, 0xBD	; 189
    1638:	37 e3       	ldi	r19, 0x37	; 55
    163a:	46 e0       	ldi	r20, 0x06	; 6
    163c:	5d e3       	ldi	r21, 0x3D	; 61
    163e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1642:	4b 01       	movw	r8, r22
    1644:	5c 01       	movw	r10, r24
    1646:	33 c0       	rjmp	.+102    	; 0x16ae <delay_sec+0x176>
    1648:	2d eb       	ldi	r18, 0xBD	; 189
    164a:	37 e3       	ldi	r19, 0x37	; 55
    164c:	46 e0       	ldi	r20, 0x06	; 6
    164e:	51 e4       	ldi	r21, 0x41	; 65
    1650:	c5 01       	movw	r24, r10
    1652:	b4 01       	movw	r22, r8
    1654:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    1658:	4b 01       	movw	r8, r22
    165a:	5c 01       	movw	r10, r24
    165c:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    1660:	8b 01       	movw	r16, r22
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 94 a2 20 	call	0x4144	; 0x4144 <__floatunsisf>
    166a:	9b 01       	movw	r18, r22
    166c:	ac 01       	movw	r20, r24
    166e:	c5 01       	movw	r24, r10
    1670:	b4 01       	movw	r22, r8
    1672:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    1676:	2d eb       	ldi	r18, 0xBD	; 189
    1678:	37 e3       	ldi	r19, 0x37	; 55
    167a:	46 e0       	ldi	r20, 0x06	; 6
    167c:	51 e4       	ldi	r21, 0x41	; 65
    167e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1682:	4b 01       	movw	r8, r22
    1684:	5c 01       	movw	r10, r24
    1686:	13 c0       	rjmp	.+38     	; 0x16ae <delay_sec+0x176>
    1688:	ce 01       	movw	r24, r28
    168a:	06 96       	adiw	r24, 0x06	; 6
    168c:	0e 94 c0 10 	call	0x2180	; 0x2180 <timer_init>
    1690:	8d 2d       	mov	r24, r13
    1692:	0e 94 37 13 	call	0x266e	; 0x266e <timer_start>
    1696:	ae 01       	movw	r20, r28
    1698:	4b 5f       	subi	r20, 0xFB	; 251
    169a:	5f 4f       	sbci	r21, 0xFF	; 255
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	8d 2d       	mov	r24, r13
    16a0:	0e 94 76 14 	call	0x28ec	; 0x28ec <timer_flag_notification>
    16a4:	9d 81       	ldd	r25, Y+5	; 0x05
    16a6:	99 23       	and	r25, r25
    16a8:	b1 f3       	breq	.-20     	; 0x1696 <delay_sec+0x15e>
    16aa:	01 50       	subi	r16, 0x01	; 1
    16ac:	11 09       	sbc	r17, r1
    16ae:	01 15       	cp	r16, r1
    16b0:	11 05       	cpc	r17, r1
    16b2:	51 f7       	brne	.-44     	; 0x1688 <delay_sec+0x150>
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	a9 01       	movw	r20, r18
    16ba:	c5 01       	movw	r24, r10
    16bc:	b4 01       	movw	r22, r8
    16be:	0e 94 54 21 	call	0x42a8	; 0x42a8 <__gesf2>
    16c2:	18 16       	cp	r1, r24
    16c4:	a4 f5       	brge	.+104    	; 0x172e <delay_sec+0x1f6>
    16c6:	8e 01       	movw	r16, r28
    16c8:	0f 5f       	subi	r16, 0xFF	; 255
    16ca:	1f 4f       	sbci	r17, 0xFF	; 255
    16cc:	22 e0       	ldi	r18, 0x02	; 2
    16ce:	4d 2d       	mov	r20, r13
    16d0:	c5 01       	movw	r24, r10
    16d2:	b4 01       	movw	r22, r8
    16d4:	0e 94 ef 15 	call	0x2bde	; 0x2bde <calc_prescaler>
    16d8:	49 81       	ldd	r20, Y+1	; 0x01
    16da:	5a 81       	ldd	r21, Y+2	; 0x02
    16dc:	ce 01       	movw	r24, r28
    16de:	03 96       	adiw	r24, 0x03	; 3
    16e0:	7c 01       	movw	r14, r24
    16e2:	95 01       	movw	r18, r10
    16e4:	84 01       	movw	r16, r8
    16e6:	62 e0       	ldi	r22, 0x02	; 2
    16e8:	8d 2d       	mov	r24, r13
    16ea:	0e 94 3c 1a 	call	0x3478	; 0x3478 <calc_initialValue>
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	0e 94 61 09 	call	0x12c2	; 0x12c2 <timer_clk_map>
    16f6:	8a 87       	std	Y+10, r24	; 0x0a
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	9c 81       	ldd	r25, Y+4	; 0x04
    16fc:	9c 87       	std	Y+12, r25	; 0x0c
    16fe:	8b 87       	std	Y+11, r24	; 0x0b
    1700:	ce 01       	movw	r24, r28
    1702:	06 96       	adiw	r24, 0x06	; 6
    1704:	0e 94 c0 10 	call	0x2180	; 0x2180 <timer_init>
    1708:	8d 2d       	mov	r24, r13
    170a:	0e 94 37 13 	call	0x266e	; 0x266e <timer_start>
    170e:	ae 01       	movw	r20, r28
    1710:	4b 5f       	subi	r20, 0xFB	; 251
    1712:	5f 4f       	sbci	r21, 0xFF	; 255
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	8d 2d       	mov	r24, r13
    1718:	0e 94 76 14 	call	0x28ec	; 0x28ec <timer_flag_notification>
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	88 23       	and	r24, r24
    1720:	b1 f3       	breq	.-20     	; 0x170e <delay_sec+0x1d6>
    1722:	83 e0       	ldi	r24, 0x03	; 3
    1724:	05 c0       	rjmp	.+10     	; 0x1730 <delay_sec+0x1f8>
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	03 c0       	rjmp	.+6      	; 0x1730 <delay_sec+0x1f8>
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <delay_sec+0x1f8>
    172e:	83 e0       	ldi	r24, 0x03	; 3
    1730:	2e 96       	adiw	r28, 0x0e	; 14
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	df 90       	pop	r13
    174a:	bf 90       	pop	r11
    174c:	af 90       	pop	r10
    174e:	9f 90       	pop	r9
    1750:	8f 90       	pop	r8
    1752:	08 95       	ret

00001754 <timeOut_callBack>:
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gl_u8_timer_id>
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	f9 01       	movw	r30, r18
    1764:	e7 57       	subi	r30, 0x77	; 119
    1766:	fe 4f       	sbci	r31, 0xFE	; 254
    1768:	90 81       	ld	r25, Z
    176a:	91 11       	cpse	r25, r1
    176c:	17 c0       	rjmp	.+46     	; 0x179c <timeOut_callBack+0x48>
    176e:	0e 94 28 14 	call	0x2850	; 0x2850 <timer_stop>
    1772:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <gl_u8_timer_id>
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	ee 0f       	add	r30, r30
    177a:	ff 1f       	adc	r31, r31
    177c:	ed 57       	subi	r30, 0x7D	; 125
    177e:	fe 4f       	sbci	r31, 0xFE	; 254
    1780:	01 90       	ld	r0, Z+
    1782:	f0 81       	ld	r31, Z
    1784:	e0 2d       	mov	r30, r0
    1786:	30 97       	sbiw	r30, 0x00	; 0
    1788:	09 f0       	breq	.+2      	; 0x178c <timeOut_callBack+0x38>
    178a:	09 95       	icall
    178c:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <gl_u8_timer_id>
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	e8 56       	subi	r30, 0x68	; 104
    1794:	fe 4f       	sbci	r31, 0xFE	; 254
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	80 83       	st	Z, r24
    179a:	54 c0       	rjmp	.+168    	; 0x1844 <timeOut_callBack+0xf0>
    179c:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <gl_u16_tick_count.1854>
    17a0:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <gl_u16_tick_count.1854+0x1>
    17a4:	4f 5f       	subi	r20, 0xFF	; 255
    17a6:	5f 4f       	sbci	r21, 0xFF	; 255
    17a8:	50 93 82 01 	sts	0x0182, r21	; 0x800182 <gl_u16_tick_count.1854+0x1>
    17ac:	40 93 81 01 	sts	0x0181, r20	; 0x800181 <gl_u16_tick_count.1854>
    17b0:	22 0f       	add	r18, r18
    17b2:	33 1f       	adc	r19, r19
    17b4:	f9 01       	movw	r30, r18
    17b6:	e9 55       	subi	r30, 0x59	; 89
    17b8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ba:	20 81       	ld	r18, Z
    17bc:	31 81       	ldd	r19, Z+1	; 0x01
    17be:	42 17       	cp	r20, r18
    17c0:	53 07       	cpc	r21, r19
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <timeOut_callBack+0x72>
    17c4:	3f c0       	rjmp	.+126    	; 0x1844 <timeOut_callBack+0xf0>
    17c6:	0e 94 28 14 	call	0x2850	; 0x2850 <timer_stop>
    17ca:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <gl_u16_tick_count.1854+0x1>
    17ce:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <gl_u16_tick_count.1854>
    17d2:	10 91 7e 00 	lds	r17, 0x007E	; 0x80007e <gl_u8_timer_id>
    17d6:	c1 2f       	mov	r28, r17
    17d8:	d0 e0       	ldi	r29, 0x00	; 0
    17da:	fe 01       	movw	r30, r28
    17dc:	ee 0f       	add	r30, r30
    17de:	ff 1f       	adc	r31, r31
    17e0:	ee 0f       	add	r30, r30
    17e2:	ff 1f       	adc	r31, r31
    17e4:	e5 56       	subi	r30, 0x65	; 101
    17e6:	fe 4f       	sbci	r31, 0xFE	; 254
    17e8:	60 81       	ld	r22, Z
    17ea:	71 81       	ldd	r23, Z+1	; 0x01
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	93 81       	ldd	r25, Z+3	; 0x03
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	a9 01       	movw	r20, r18
    17f6:	0e 94 54 21 	call	0x42a8	; 0x42a8 <__gesf2>
    17fa:	18 16       	cp	r1, r24
    17fc:	1c f5       	brge	.+70     	; 0x1844 <timeOut_callBack+0xf0>
    17fe:	cc 0f       	add	r28, r28
    1800:	dd 1f       	adc	r29, r29
    1802:	c4 57       	subi	r28, 0x74	; 116
    1804:	de 4f       	sbci	r29, 0xFE	; 254
    1806:	68 81       	ld	r22, Y
    1808:	79 81       	ldd	r23, Y+1	; 0x01
    180a:	81 2f       	mov	r24, r17
    180c:	0e 94 7f 12 	call	0x24fe	; 0x24fe <timer_setInitialValue>
    1810:	c0 91 7e 00 	lds	r28, 0x007E	; 0x80007e <gl_u8_timer_id>
    1814:	ec 2f       	mov	r30, r28
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	ee 0f       	add	r30, r30
    181a:	ff 1f       	adc	r31, r31
    181c:	ee 56       	subi	r30, 0x6E	; 110
    181e:	fe 4f       	sbci	r31, 0xFE	; 254
    1820:	80 81       	ld	r24, Z
    1822:	91 81       	ldd	r25, Z+1	; 0x01
    1824:	0e 94 61 09 	call	0x12c2	; 0x12c2 <timer_clk_map>
    1828:	68 2f       	mov	r22, r24
    182a:	8c 2f       	mov	r24, r28
    182c:	0e 94 aa 12 	call	0x2554	; 0x2554 <timer_setClock>
    1830:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gl_u8_timer_id>
    1834:	0e 94 37 13 	call	0x266e	; 0x266e <timer_start>
    1838:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <gl_u8_timer_id>
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	e7 57       	subi	r30, 0x77	; 119
    1840:	fe 4f       	sbci	r31, 0xFE	; 254
    1842:	10 82       	st	Z, r1
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	08 95       	ret

0000184c <timeOut_sec>:

enu_time_error_t timeOut_sec(uint8 u8_timer_id,float32 f32_time_delay)
{
    184c:	8f 92       	push	r8
    184e:	9f 92       	push	r9
    1850:	af 92       	push	r10
    1852:	bf 92       	push	r11
    1854:	df 92       	push	r13
    1856:	ef 92       	push	r14
    1858:	ff 92       	push	r15
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	2d 97       	sbiw	r28, 0x0d	; 13
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
	enu_time_error_t enu_time_error		= ENU_TIMER_VALID;
	uint16 u16_l_prescale				= ZERO_VALUE;
    1872:	1a 82       	std	Y+2, r1	; 0x02
    1874:	19 82       	std	Y+1, r1	; 0x01
	uint16 u16_l_initialValue			= ZERO_VALUE;
    1876:	1c 82       	std	Y+4, r1	; 0x04
    1878:	1b 82       	std	Y+3, r1	; 0x03
	BOOLEAN bo_l_return_state			= FALSE ;
	float32 f32_l_overFlows				= ZERO_VALUE;
	gl_bo_timeOut_flag [gl_u8_timer_id] = FALSE;
    187a:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <gl_u8_timer_id>
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	e8 56       	subi	r30, 0x68	; 104
    1882:	fe 4f       	sbci	r31, 0xFE	; 254
    1884:	10 82       	st	Z, r1
	str_tmr_config_t str_tmr_config ;
	str_tmr_config.enu_tmr_channel_id		= u8_timer_id;
    1886:	8d 83       	std	Y+5, r24	; 0x05
	str_tmr_config.enu_tmr_mode				= ENU_TMR_NORMAL_MODE;
    1888:	1e 82       	std	Y+6, r1	; 0x06
	str_tmr_config.enu_tmr_cmp_mode			= ENU_TMR_CMP_DISCONNECT;
    188a:	18 86       	std	Y+8, r1	; 0x08
	str_tmr_config.enu_tmr_interrupt_state	= ENU_TMR_INT_ENABLE;
    188c:	1f 82       	std	Y+7, r1	; 0x07
	str_tmr_config.u16_tmr_compare_value	= ZERO_VALUE;
    188e:	1d 86       	std	Y+13, r1	; 0x0d
    1890:	1c 86       	std	Y+12, r1	; 0x0c
	gl_u8_timer_id							= u8_timer_id;
    1892:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <gl_u8_timer_id>
	
	if(u8_timer_id < MAX_ENU_TMR_CHANNEL)
    1896:	83 30       	cpi	r24, 0x03	; 3
    1898:	08 f0       	brcs	.+2      	; 0x189c <timeOut_sec+0x50>
    189a:	d4 c0       	rjmp	.+424    	; 0x1a44 <timeOut_sec+0x1f8>
    189c:	4a 01       	movw	r8, r20
    189e:	5b 01       	movw	r10, r22
    18a0:	d8 2e       	mov	r13, r24
	{
		bo_l_return_state = calc_prescaler(f32_time_delay,u8_timer_id,ENU_SECOND,&u16_l_prescale);
    18a2:	8e 01       	movw	r16, r28
    18a4:	0f 5f       	subi	r16, 0xFF	; 255
    18a6:	1f 4f       	sbci	r17, 0xFF	; 255
    18a8:	22 e0       	ldi	r18, 0x02	; 2
    18aa:	48 2f       	mov	r20, r24
    18ac:	c5 01       	movw	r24, r10
    18ae:	b4 01       	movw	r22, r8
    18b0:	0e 94 ef 15 	call	0x2bde	; 0x2bde <calc_prescaler>
		if(bo_l_return_state == TRUE)
    18b4:	81 30       	cpi	r24, 0x01	; 1
    18b6:	09 f0       	breq	.+2      	; 0x18ba <timeOut_sec+0x6e>
    18b8:	c7 c0       	rjmp	.+398    	; 0x1a48 <timeOut_sec+0x1fc>
		{
			if (u16_l_prescale != NO_FIT_PRESCALER)
    18ba:	49 81       	ldd	r20, Y+1	; 0x01
    18bc:	5a 81       	ldd	r21, Y+2	; 0x02
    18be:	4c 3d       	cpi	r20, 0xDC	; 220
    18c0:	85 e0       	ldi	r24, 0x05	; 5
    18c2:	58 07       	cpc	r21, r24
    18c4:	c1 f0       	breq	.+48     	; 0x18f6 <timeOut_sec+0xaa>
			{
				//use timer without overflows
				gl_bo_overFlow_flag[u8_timer_id] = FALSE; 
    18c6:	ed 2d       	mov	r30, r13
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	e7 57       	subi	r30, 0x77	; 119
    18cc:	fe 4f       	sbci	r31, 0xFE	; 254
    18ce:	10 82       	st	Z, r1
				//calculate initial value
				calc_initialValue(u8_timer_id,ENU_SECOND,u16_l_prescale,f32_time_delay,&u16_l_initialValue);
    18d0:	fe 01       	movw	r30, r28
    18d2:	33 96       	adiw	r30, 0x03	; 3
    18d4:	7f 01       	movw	r14, r30
    18d6:	95 01       	movw	r18, r10
    18d8:	84 01       	movw	r16, r8
    18da:	62 e0       	ldi	r22, 0x02	; 2
    18dc:	8d 2d       	mov	r24, r13
    18de:	0e 94 3c 1a 	call	0x3478	; 0x3478 <calc_initialValue>
				str_tmr_config.enu_tmr_clk				= timer_clk_map(u16_l_prescale);
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	9a 81       	ldd	r25, Y+2	; 0x02
    18e6:	0e 94 61 09 	call	0x12c2	; 0x12c2 <timer_clk_map>
    18ea:	89 87       	std	Y+9, r24	; 0x09
				str_tmr_config.u16_tmr_initial_value	= u16_l_initialValue;
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	9b 87       	std	Y+11, r25	; 0x0b
    18f2:	8a 87       	std	Y+10, r24	; 0x0a
    18f4:	98 c0       	rjmp	.+304    	; 0x1a26 <timeOut_sec+0x1da>
			}
			else
			{
				gl_bo_overFlow_flag[u8_timer_id]	= TRUE; 
    18f6:	0d 2d       	mov	r16, r13
    18f8:	10 e0       	ldi	r17, 0x00	; 0
    18fa:	f8 01       	movw	r30, r16
    18fc:	e7 57       	subi	r30, 0x77	; 119
    18fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	80 83       	st	Z, r24
				str_tmr_config.enu_tmr_clk			= timer_clk_map(P_1024);
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	94 e0       	ldi	r25, 0x04	; 4
    1908:	0e 94 61 09 	call	0x12c2	; 0x12c2 <timer_clk_map>
    190c:	89 87       	std	Y+9, r24	; 0x09
				str_tmr_config.u16_tmr_initial_value= ZERO_VALUE;
    190e:	1b 86       	std	Y+11, r1	; 0x0b
    1910:	1a 86       	std	Y+10, r1	; 0x0a
				//calculate number of overflows
				if(u8_timer_id == ENU_TMR_CHANNEL_0 || u8_timer_id == ENU_TMR_CHANNEL_2)
    1912:	dd 20       	and	r13, r13
    1914:	19 f0       	breq	.+6      	; 0x191c <timeOut_sec+0xd0>
    1916:	f2 e0       	ldi	r31, 0x02	; 2
    1918:	df 12       	cpse	r13, r31
    191a:	2f c0       	rjmp	.+94     	; 0x197a <timeOut_sec+0x12e>
				{
					f32_l_overFlows = f32_time_delay / MAX_8_BIT_DELAY_SEC(P_1024);
    191c:	2d eb       	ldi	r18, 0xBD	; 189
    191e:	37 e3       	ldi	r19, 0x37	; 55
    1920:	46 e0       	ldi	r20, 0x06	; 6
    1922:	5d e3       	ldi	r21, 0x3D	; 61
    1924:	c5 01       	movw	r24, r10
    1926:	b4 01       	movw	r22, r8
    1928:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    192c:	4b 01       	movw	r8, r22
    192e:	5c 01       	movw	r10, r24
					gl_u16_realPart[u8_timer_id] = (uint16)f32_l_overFlows;
    1930:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    1934:	f8 01       	movw	r30, r16
    1936:	ee 0f       	add	r30, r30
    1938:	ff 1f       	adc	r31, r31
    193a:	e9 55       	subi	r30, 0x59	; 89
    193c:	fe 4f       	sbci	r31, 0xFE	; 254
    193e:	71 83       	std	Z+1, r23	; 0x01
    1940:	60 83       	st	Z, r22
					gl_f32_reminderPart[u8_timer_id] = ((f32_l_overFlows - gl_u16_realPart[u8_timer_id]) * MAX_8_BIT_DELAY_SEC(P_1024));
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 a2 20 	call	0x4144	; 0x4144 <__floatunsisf>
    194a:	9b 01       	movw	r18, r22
    194c:	ac 01       	movw	r20, r24
    194e:	c5 01       	movw	r24, r10
    1950:	b4 01       	movw	r22, r8
    1952:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    1956:	2d eb       	ldi	r18, 0xBD	; 189
    1958:	37 e3       	ldi	r19, 0x37	; 55
    195a:	46 e0       	ldi	r20, 0x06	; 6
    195c:	5d e3       	ldi	r21, 0x3D	; 61
    195e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    1962:	f8 01       	movw	r30, r16
    1964:	ee 0f       	add	r30, r30
    1966:	ff 1f       	adc	r31, r31
    1968:	ee 0f       	add	r30, r30
    196a:	ff 1f       	adc	r31, r31
    196c:	e5 56       	subi	r30, 0x65	; 101
    196e:	fe 4f       	sbci	r31, 0xFE	; 254
    1970:	60 83       	st	Z, r22
    1972:	71 83       	std	Z+1, r23	; 0x01
    1974:	82 83       	std	Z+2, r24	; 0x02
    1976:	93 83       	std	Z+3, r25	; 0x03
    1978:	2e c0       	rjmp	.+92     	; 0x19d6 <timeOut_sec+0x18a>
				}
				else
				{
					f32_l_overFlows = f32_time_delay / MAX_16_BIT_DELAY_SEC(P_1024);
    197a:	2d eb       	ldi	r18, 0xBD	; 189
    197c:	37 e3       	ldi	r19, 0x37	; 55
    197e:	46 e0       	ldi	r20, 0x06	; 6
    1980:	51 e4       	ldi	r21, 0x41	; 65
    1982:	c5 01       	movw	r24, r10
    1984:	b4 01       	movw	r22, r8
    1986:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    198a:	4b 01       	movw	r8, r22
    198c:	5c 01       	movw	r10, r24
					gl_u16_realPart[u8_timer_id] = (uint16)f32_l_overFlows;
    198e:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    1992:	f8 01       	movw	r30, r16
    1994:	ee 0f       	add	r30, r30
    1996:	ff 1f       	adc	r31, r31
    1998:	e9 55       	subi	r30, 0x59	; 89
    199a:	fe 4f       	sbci	r31, 0xFE	; 254
    199c:	71 83       	std	Z+1, r23	; 0x01
    199e:	60 83       	st	Z, r22
					gl_f32_reminderPart[u8_timer_id] =((f32_l_overFlows - gl_u16_realPart[u8_timer_id]) * MAX_16_BIT_DELAY_SEC(P_1024));
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	0e 94 a2 20 	call	0x4144	; 0x4144 <__floatunsisf>
    19a8:	9b 01       	movw	r18, r22
    19aa:	ac 01       	movw	r20, r24
    19ac:	c5 01       	movw	r24, r10
    19ae:	b4 01       	movw	r22, r8
    19b0:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    19b4:	2d eb       	ldi	r18, 0xBD	; 189
    19b6:	37 e3       	ldi	r19, 0x37	; 55
    19b8:	46 e0       	ldi	r20, 0x06	; 6
    19ba:	51 e4       	ldi	r21, 0x41	; 65
    19bc:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    19c0:	f8 01       	movw	r30, r16
    19c2:	ee 0f       	add	r30, r30
    19c4:	ff 1f       	adc	r31, r31
    19c6:	ee 0f       	add	r30, r30
    19c8:	ff 1f       	adc	r31, r31
    19ca:	e5 56       	subi	r30, 0x65	; 101
    19cc:	fe 4f       	sbci	r31, 0xFE	; 254
    19ce:	60 83       	st	Z, r22
    19d0:	71 83       	std	Z+1, r23	; 0x01
    19d2:	82 83       	std	Z+2, r24	; 0x02
    19d4:	93 83       	std	Z+3, r25	; 0x03
				}
				calc_prescaler(gl_f32_reminderPart[u8_timer_id],u8_timer_id,ENU_SECOND,&gl_u16_prescale[u8_timer_id]);
    19d6:	78 01       	movw	r14, r16
    19d8:	ee 0c       	add	r14, r14
    19da:	ff 1c       	adc	r15, r15
    19dc:	c7 01       	movw	r24, r14
    19de:	8e 56       	subi	r24, 0x6E	; 110
    19e0:	9e 4f       	sbci	r25, 0xFE	; 254
    19e2:	4c 01       	movw	r8, r24
    19e4:	00 0f       	add	r16, r16
    19e6:	11 1f       	adc	r17, r17
    19e8:	00 0f       	add	r16, r16
    19ea:	11 1f       	adc	r17, r17
    19ec:	f8 01       	movw	r30, r16
    19ee:	e5 56       	subi	r30, 0x65	; 101
    19f0:	fe 4f       	sbci	r31, 0xFE	; 254
    19f2:	5f 01       	movw	r10, r30
    19f4:	60 81       	ld	r22, Z
    19f6:	71 81       	ldd	r23, Z+1	; 0x01
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	84 01       	movw	r16, r8
    19fe:	22 e0       	ldi	r18, 0x02	; 2
    1a00:	4d 2d       	mov	r20, r13
    1a02:	0e 94 ef 15 	call	0x2bde	; 0x2bde <calc_prescaler>
				calc_initialValue(u8_timer_id,ENU_SECOND,gl_u16_prescale[u8_timer_id],gl_f32_reminderPart[u8_timer_id],&gl_u16_initialValue[u8_timer_id]);
    1a06:	c7 01       	movw	r24, r14
    1a08:	84 57       	subi	r24, 0x74	; 116
    1a0a:	9e 4f       	sbci	r25, 0xFE	; 254
    1a0c:	7c 01       	movw	r14, r24
    1a0e:	f5 01       	movw	r30, r10
    1a10:	00 81       	ld	r16, Z
    1a12:	11 81       	ldd	r17, Z+1	; 0x01
    1a14:	22 81       	ldd	r18, Z+2	; 0x02
    1a16:	33 81       	ldd	r19, Z+3	; 0x03
    1a18:	f4 01       	movw	r30, r8
    1a1a:	40 81       	ld	r20, Z
    1a1c:	51 81       	ldd	r21, Z+1	; 0x01
    1a1e:	62 e0       	ldi	r22, 0x02	; 2
    1a20:	8d 2d       	mov	r24, r13
    1a22:	0e 94 3c 1a 	call	0x3478	; 0x3478 <calc_initialValue>
			}
			timer_init(&str_tmr_config);
    1a26:	ce 01       	movw	r24, r28
    1a28:	05 96       	adiw	r24, 0x05	; 5
    1a2a:	0e 94 c0 10 	call	0x2180	; 0x2180 <timer_init>
			timer_setCallBack(u8_timer_id,timeOut_callBack,ENU_TMR_NORMAL_MODE);
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	6a ea       	ldi	r22, 0xAA	; 170
    1a32:	7b e0       	ldi	r23, 0x0B	; 11
    1a34:	8d 2d       	mov	r24, r13
    1a36:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <timer_setCallBack>
			timer_start(u8_timer_id);
    1a3a:	8d 2d       	mov	r24, r13
    1a3c:	0e 94 37 13 	call	0x266e	; 0x266e <timer_start>
	return enu_time_error;
}

enu_time_error_t timeOut_sec(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error		= ENU_TIMER_VALID;
    1a40:	83 e0       	ldi	r24, 0x03	; 3
    1a42:	03 c0       	rjmp	.+6      	; 0x1a4a <timeOut_sec+0x1fe>
			
		}
	}
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	01 c0       	rjmp	.+2      	; 0x1a4a <timeOut_sec+0x1fe>
	return enu_time_error;
}

enu_time_error_t timeOut_sec(uint8 u8_timer_id,float32 f32_time_delay)
{
	enu_time_error_t enu_time_error		= ENU_TIMER_VALID;
    1a48:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		enu_time_error = ENU_TIMER_INVALID_ID;
	}
	return enu_time_error;
}
    1a4a:	2d 96       	adiw	r28, 0x0d	; 13
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	1f 91       	pop	r17
    1a5c:	0f 91       	pop	r16
    1a5e:	ff 90       	pop	r15
    1a60:	ef 90       	pop	r14
    1a62:	df 90       	pop	r13
    1a64:	bf 90       	pop	r11
    1a66:	af 90       	pop	r10
    1a68:	9f 90       	pop	r9
    1a6a:	8f 90       	pop	r8
    1a6c:	08 95       	ret

00001a6e <Ultrasonic_edgeProcessing>:
/**
 * @brief       Ultrasonic_edgeProcessing		: callback function used to process the detection of echo signal 
 */
void Ultrasonic_edgeProcessing(void)
{
	gl_u8_edgeCount++;
    1a6e:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <gl_u8_edgeCount>
    1a72:	8f 5f       	subi	r24, 0xFF	; 255
    1a74:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <gl_u8_edgeCount>
	if(gl_u8_edgeCount == FIREST_EDGE)
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	31 f4       	brne	.+12     	; 0x1a88 <Ultrasonic_edgeProcessing+0x1a>
	{
		Icu_clearTimerValue();
    1a7c:	0e 94 08 06 	call	0xc10	; 0xc10 <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(ENU_ICU_FALLING);
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	0e 94 d2 05 	call	0xba4	; 0xba4 <Icu_setEdgeDetectionType>
    1a86:	08 95       	ret
	}
	else if(gl_u8_edgeCount == SECOND_EDGE)
    1a88:	82 30       	cpi	r24, 0x02	; 2
    1a8a:	49 f4       	brne	.+18     	; 0x1a9e <Ultrasonic_edgeProcessing+0x30>
	{
		Icu_getTimerValue(&gl_u16_timeHigh);
    1a8c:	8f ea       	ldi	r24, 0xAF	; 175
    1a8e:	91 e0       	ldi	r25, 0x01	; 1
    1a90:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Icu_getTimerValue>
		Icu_clearTimerValue();
    1a94:	0e 94 08 06 	call	0xc10	; 0xc10 <Icu_clearTimerValue>
		Icu_setEdgeDetectionType(ENU_ICU_RISING);
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	0e 94 d2 05 	call	0xba4	; 0xba4 <Icu_setEdgeDetectionType>
    1a9e:	08 95       	ret

00001aa0 <Ultrasonic_init>:
 * @brief       Ultrasonic_init				: Function to initialize the ultrasonic driver
 *											  initialize ICU driver,set callback function,setup trigger pin direction as output
 *											  setup External interrupt source
 */
enu_usonic_state_t Ultrasonic_init(uint8 u8_triggerPort,uint8 u8_triggerPin,enu_echo_pin_id_t enu_echo_pin_id)
{
    1aa0:	0f 93       	push	r16
    1aa2:	1f 93       	push	r17
    1aa4:	cf 93       	push	r28
    1aa6:	df 93       	push	r29
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <Ultrasonic_init+0xa>
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <Ultrasonic_init+0xc>
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
	str_icu_configtype_t str_icu_configtype;
	if((u8_triggerPort < MAX_PORT_ID) && (u8_triggerPin < MAX_PIN_ID) && (enu_echo_pin_id < ENU_MAX_ECHO))
    1ab0:	84 30       	cpi	r24, 0x04	; 4
    1ab2:	20 f5       	brcc	.+72     	; 0x1afc <Ultrasonic_init+0x5c>
    1ab4:	68 30       	cpi	r22, 0x08	; 8
    1ab6:	20 f5       	brcc	.+72     	; 0x1b00 <Ultrasonic_init+0x60>
    1ab8:	43 30       	cpi	r20, 0x03	; 3
    1aba:	20 f5       	brcc	.+72     	; 0x1b04 <Ultrasonic_init+0x64>
    1abc:	06 2f       	mov	r16, r22
    1abe:	18 2f       	mov	r17, r24
	{
		str_icu_configtype.enu_icu_channel_id	= enu_echo_pin_id;
    1ac0:	49 83       	std	Y+1, r20	; 0x01
		str_icu_configtype.enu_timer_channel_id = ULTRASONIC_TIMER_ID;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	8a 83       	std	Y+2, r24	; 0x02
		str_icu_configtype.enu_icu_clock		= ENU_ICU_F_CPU_8;
    1ac6:	92 e0       	ldi	r25, 0x02	; 2
    1ac8:	9b 83       	std	Y+3, r25	; 0x03
		str_icu_configtype.enu_icu_edgetype		= ENU_ICU_RISING;
    1aca:	8c 83       	std	Y+4, r24	; 0x04
		gl_u8_triggerPort						= u8_triggerPort;
    1acc:	10 93 ae 01 	sts	0x01AE, r17	; 0x8001ae <gl_u8_triggerPort>
		gl_u8_triggerPin						= u8_triggerPin;
    1ad0:	60 93 ad 01 	sts	0x01AD, r22	; 0x8001ad <gl_u8_triggerPin>
		Icu_init(&str_icu_configtype);
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	01 96       	adiw	r24, 0x01	; 1
    1ad8:	0e 94 47 05 	call	0xa8e	; 0xa8e <Icu_init>
		Icu_setCallBack(Ultrasonic_edgeProcessing);
    1adc:	87 e3       	ldi	r24, 0x37	; 55
    1ade:	9d e0       	ldi	r25, 0x0D	; 13
    1ae0:	0e 94 b8 05 	call	0xb70	; 0xb70 <Icu_setCallBack>
		DIO_pinMode(u8_triggerPort,u8_triggerPin,PIN_OUTPUT);		 //setup trigger pin direction as output
    1ae4:	41 e0       	ldi	r20, 0x01	; 1
    1ae6:	60 2f       	mov	r22, r16
    1ae8:	81 2f       	mov	r24, r17
    1aea:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <DIO_pinMode>
		DIO_writePin(u8_triggerPort,u8_triggerPin,PIN_LOW);
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	60 2f       	mov	r22, r16
    1af2:	81 2f       	mov	r24, r17
    1af4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
 *											  initialize ICU driver,set callback function,setup trigger pin direction as output
 *											  setup External interrupt source
 */
enu_usonic_state_t Ultrasonic_init(uint8 u8_triggerPort,uint8 u8_triggerPin,enu_echo_pin_id_t enu_echo_pin_id)
{
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
    1af8:	80 e0       	ldi	r24, 0x00	; 0
		gl_u8_triggerPort						= u8_triggerPort;
		gl_u8_triggerPin						= u8_triggerPin;
		Icu_init(&str_icu_configtype);
		Icu_setCallBack(Ultrasonic_edgeProcessing);
		DIO_pinMode(u8_triggerPort,u8_triggerPin,PIN_OUTPUT);		 //setup trigger pin direction as output
		DIO_writePin(u8_triggerPort,u8_triggerPin,PIN_LOW);
    1afa:	05 c0       	rjmp	.+10     	; 0x1b06 <Ultrasonic_init+0x66>
	}
	else
	{
		enu_usonic_state = ENU_USONIC_STATE_INVALID;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	03 c0       	rjmp	.+6      	; 0x1b06 <Ultrasonic_init+0x66>
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	01 c0       	rjmp	.+2      	; 0x1b06 <Ultrasonic_init+0x66>
    1b04:	81 e0       	ldi	r24, 0x01	; 1
	}
	return enu_usonic_state;
}
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	08 95       	ret

00001b18 <Ultrasonic_Trigger>:
/**
 * @brief       Ultrasonic_Trigger		: function used to send trigger pulse 10 microSEC
 */
void Ultrasonic_Trigger(void)
{
	DIO_writePin(gl_u8_triggerPort, gl_u8_triggerPin,PIN_HIGH);
    1b18:	41 e0       	ldi	r20, 0x01	; 1
    1b1a:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <gl_u8_triggerPin>
    1b1e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gl_u8_triggerPort>
    1b22:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b26:	85 e3       	ldi	r24, 0x35	; 53
    1b28:	8a 95       	dec	r24
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <Ultrasonic_Trigger+0x10>
    1b2c:	00 00       	nop
	_delay_us(20);
//	delay_us(DELAY_ID,TRIGGER_TIME);
	DIO_writePin(gl_u8_triggerPort, gl_u8_triggerPin,PIN_LOW);
    1b2e:	40 e0       	ldi	r20, 0x00	; 0
    1b30:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <gl_u8_triggerPin>
    1b34:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gl_u8_triggerPort>
    1b38:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <DIO_writePin>
    1b3c:	08 95       	ret

00001b3e <Ultrasonic_readDistance>:

/**
 * @brief       Ultrasonic_readDistance		: function to read distance of from the sensor
 */
enu_usonic_state_t Ultrasonic_readDistance(uint16* ptr_u16_distanceValue)
{
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
	if(ptr_u16_distanceValue != NULL_PTR)
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	e1 f0       	breq	.+56     	; 0x1b7e <Ultrasonic_readDistance+0x40>
    1b46:	ec 01       	movw	r28, r24
	{
		Ultrasonic_Trigger();
    1b48:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <Ultrasonic_Trigger>
		while(gl_u8_edgeCount != NUM_OF_EDGES);			//wait until ultrasonic sound to travel towards the object and return.
    1b4c:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <gl_u8_edgeCount>
    1b50:	92 30       	cpi	r25, 0x02	; 2
    1b52:	e1 f7       	brne	.-8      	; 0x1b4c <Ultrasonic_readDistance+0xe>
		*ptr_u16_distanceValue = CALC_DISTANCE(gl_u16_timeHigh);
    1b54:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <gl_u16_timeHigh>
    1b58:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <gl_u16_timeHigh+0x1>
    1b5c:	af e9       	ldi	r26, 0x9F	; 159
    1b5e:	b6 e4       	ldi	r27, 0x46	; 70
    1b60:	0e 94 cc 21 	call	0x4398	; 0x4398 <__umulhisi3>
    1b64:	92 95       	swap	r25
    1b66:	82 95       	swap	r24
    1b68:	8f 70       	andi	r24, 0x0F	; 15
    1b6a:	89 27       	eor	r24, r25
    1b6c:	9f 70       	andi	r25, 0x0F	; 15
    1b6e:	89 27       	eor	r24, r25
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	99 83       	std	Y+1, r25	; 0x01
    1b74:	88 83       	st	Y, r24
		gl_u8_edgeCount=ZERO;							//clear edge count to be ready for new read
    1b76:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <gl_u8_edgeCount>
/**
 * @brief       Ultrasonic_readDistance		: function to read distance of from the sensor
 */
enu_usonic_state_t Ultrasonic_readDistance(uint16* ptr_u16_distanceValue)
{
	enu_usonic_state_t enu_usonic_state = ENU_USONIC_STATE_VALID;
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	01 c0       	rjmp	.+2      	; 0x1b80 <Ultrasonic_readDistance+0x42>
		*ptr_u16_distanceValue = CALC_DISTANCE(gl_u16_timeHigh);
		gl_u8_edgeCount=ZERO;							//clear edge count to be ready for new read
	}
	else
	{
		enu_usonic_state = ENU_USONIC_STATE_INVALID;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return enu_usonic_state;
}
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	08 95       	ret

00001b86 <main>:
 */ 

#include "APP/app.h"

int main(void)
{
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <main+0x6>
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <main+0x8>
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
	uint16 u16_obstacle_distance			= LOGIC_ZERO;
    1b92:	1a 82       	std	Y+2, r1	; 0x02
    1b94:	19 82       	std	Y+1, r1	; 0x01
	enu_carEvents_t enu_carEvents			= ENU_MAX_EV;
	enu_carStates_t	enu_carStates			= ENU_MAX_ST;
	enu_car_direction_t enu_car_direction	= ENU_STOP;
    1b96:	84 e0       	ldi	r24, 0x04	; 4
    1b98:	8b 83       	std	Y+3, r24	; 0x03
	uint8 u8_car_speed						= SPEED_0_PERCENT;
    1b9a:	1c 82       	std	Y+4, r1	; 0x04
	
	app_init();
    1b9c:	0e 94 80 02 	call	0x500	; 0x500 <app_init>
	
	while(1)
	{
		enu_carEvents = read_event(&u16_obstacle_distance);
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <read_event>
		enu_carStates = car_stateMachine(enu_carEvents);
    1ba8:	0e 94 87 01 	call	0x30e	; 0x30e <car_stateMachine>
    1bac:	18 2f       	mov	r17, r24
		car_action(enu_carStates,&u8_car_speed,&enu_car_direction);
    1bae:	ae 01       	movw	r20, r28
    1bb0:	4d 5f       	subi	r20, 0xFD	; 253
    1bb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb4:	be 01       	movw	r22, r28
    1bb6:	6c 5f       	subi	r22, 0xFC	; 252
    1bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bba:	0e 94 ce 03 	call	0x79c	; 0x79c <car_action>
		if(enu_carStates != ENU_PWR_OFF)
    1bbe:	12 30       	cpi	r17, 0x02	; 2
    1bc0:	79 f3       	breq	.-34     	; 0x1ba0 <main+0x1a>
			car_updtae_screen(ENU_PAGE_INFO,u16_obstacle_distance,u8_car_speed,enu_car_direction);
    1bc2:	69 81       	ldd	r22, Y+1	; 0x01
    1bc4:	7a 81       	ldd	r23, Y+2	; 0x02
    1bc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc8:	4c 81       	ldd	r20, Y+4	; 0x04
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	0e 94 b6 02 	call	0x56c	; 0x56c <car_updtae_screen>
    1bd0:	e7 cf       	rjmp	.-50     	; 0x1ba0 <main+0x1a>

00001bd2 <DIO_pinMode>:
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
    1bd2:	84 30       	cpi	r24, 0x04	; 4
    1bd4:	08 f0       	brcs	.+2      	; 0x1bd8 <DIO_pinMode+0x6>
    1bd6:	7b c0       	rjmp	.+246    	; 0x1cce <DIO_pinMode+0xfc>
    1bd8:	68 30       	cpi	r22, 0x08	; 8
    1bda:	08 f0       	brcs	.+2      	; 0x1bde <DIO_pinMode+0xc>
    1bdc:	7a c0       	rjmp	.+244    	; 0x1cd2 <DIO_pinMode+0x100>
    1bde:	42 30       	cpi	r20, 0x02	; 2
    1be0:	08 f0       	brcs	.+2      	; 0x1be4 <DIO_pinMode+0x12>
    1be2:	79 c0       	rjmp	.+242    	; 0x1cd6 <DIO_pinMode+0x104>
    1be4:	81 30       	cpi	r24, 0x01	; 1
    1be6:	11 f1       	breq	.+68     	; 0x1c2c <DIO_pinMode+0x5a>
    1be8:	30 f0       	brcs	.+12     	; 0x1bf6 <DIO_pinMode+0x24>
    1bea:	82 30       	cpi	r24, 0x02	; 2
    1bec:	d1 f1       	breq	.+116    	; 0x1c62 <DIO_pinMode+0x90>
    1bee:	83 30       	cpi	r24, 0x03	; 3
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <DIO_pinMode+0x22>
    1bf2:	52 c0       	rjmp	.+164    	; 0x1c98 <DIO_pinMode+0xc6>
    1bf4:	72 c0       	rjmp	.+228    	; 0x1cda <DIO_pinMode+0x108>
    1bf6:	41 30       	cpi	r20, 0x01	; 1
    1bf8:	61 f4       	brne	.+24     	; 0x1c12 <DIO_pinMode+0x40>
    1bfa:	2a b3       	in	r18, 0x1a	; 26
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <DIO_pinMode+0x34>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	6a 95       	dec	r22
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <DIO_pinMode+0x30>
    1c0a:	82 2b       	or	r24, r18
    1c0c:	8a bb       	out	0x1a, r24	; 26
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	08 95       	ret
    1c12:	2a b3       	in	r18, 0x1a	; 26
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <DIO_pinMode+0x4c>
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	6a 95       	dec	r22
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <DIO_pinMode+0x48>
    1c22:	80 95       	com	r24
    1c24:	82 23       	and	r24, r18
    1c26:	8a bb       	out	0x1a, r24	; 26
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	08 95       	ret
    1c2c:	41 30       	cpi	r20, 0x01	; 1
    1c2e:	61 f4       	brne	.+24     	; 0x1c48 <DIO_pinMode+0x76>
    1c30:	27 b3       	in	r18, 0x17	; 23
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <DIO_pinMode+0x6a>
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	6a 95       	dec	r22
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <DIO_pinMode+0x66>
    1c40:	82 2b       	or	r24, r18
    1c42:	87 bb       	out	0x17, r24	; 23
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	08 95       	ret
    1c48:	27 b3       	in	r18, 0x17	; 23
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <DIO_pinMode+0x82>
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	6a 95       	dec	r22
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <DIO_pinMode+0x7e>
    1c58:	80 95       	com	r24
    1c5a:	82 23       	and	r24, r18
    1c5c:	87 bb       	out	0x17, r24	; 23
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	08 95       	ret
    1c62:	41 30       	cpi	r20, 0x01	; 1
    1c64:	61 f4       	brne	.+24     	; 0x1c7e <DIO_pinMode+0xac>
    1c66:	24 b3       	in	r18, 0x14	; 20
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <DIO_pinMode+0xa0>
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	6a 95       	dec	r22
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <DIO_pinMode+0x9c>
    1c76:	82 2b       	or	r24, r18
    1c78:	84 bb       	out	0x14, r24	; 20
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	08 95       	ret
    1c7e:	24 b3       	in	r18, 0x14	; 20
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <DIO_pinMode+0xb8>
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	6a 95       	dec	r22
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <DIO_pinMode+0xb4>
    1c8e:	80 95       	com	r24
    1c90:	82 23       	and	r24, r18
    1c92:	84 bb       	out	0x14, r24	; 20
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	08 95       	ret
    1c98:	41 30       	cpi	r20, 0x01	; 1
    1c9a:	61 f4       	brne	.+24     	; 0x1cb4 <DIO_pinMode+0xe2>
    1c9c:	21 b3       	in	r18, 0x11	; 17
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <DIO_pinMode+0xd6>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	6a 95       	dec	r22
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <DIO_pinMode+0xd2>
    1cac:	82 2b       	or	r24, r18
    1cae:	81 bb       	out	0x11, r24	; 17
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	08 95       	ret
    1cb4:	21 b3       	in	r18, 0x11	; 17
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <DIO_pinMode+0xee>
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	6a 95       	dec	r22
    1cc2:	e2 f7       	brpl	.-8      	; 0x1cbc <DIO_pinMode+0xea>
    1cc4:	80 95       	com	r24
    1cc6:	82 23       	and	r24, r18
    1cc8:	81 bb       	out	0x11, r24	; 17
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	08 95       	ret
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	08 95       	ret
    1cd2:	83 e0       	ldi	r24, 0x03	; 3
    1cd4:	08 95       	ret
    1cd6:	84 e0       	ldi	r24, 0x04	; 4
    1cd8:	08 95       	ret
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	08 95       	ret

00001cde <DIO_writePin>:
    1cde:	84 30       	cpi	r24, 0x04	; 4
    1ce0:	08 f0       	brcs	.+2      	; 0x1ce4 <DIO_writePin+0x6>
    1ce2:	7b c0       	rjmp	.+246    	; 0x1dda <DIO_writePin+0xfc>
    1ce4:	68 30       	cpi	r22, 0x08	; 8
    1ce6:	08 f0       	brcs	.+2      	; 0x1cea <DIO_writePin+0xc>
    1ce8:	7a c0       	rjmp	.+244    	; 0x1dde <DIO_writePin+0x100>
    1cea:	42 30       	cpi	r20, 0x02	; 2
    1cec:	08 f0       	brcs	.+2      	; 0x1cf0 <DIO_writePin+0x12>
    1cee:	79 c0       	rjmp	.+242    	; 0x1de2 <DIO_writePin+0x104>
    1cf0:	81 30       	cpi	r24, 0x01	; 1
    1cf2:	11 f1       	breq	.+68     	; 0x1d38 <DIO_writePin+0x5a>
    1cf4:	30 f0       	brcs	.+12     	; 0x1d02 <DIO_writePin+0x24>
    1cf6:	82 30       	cpi	r24, 0x02	; 2
    1cf8:	d1 f1       	breq	.+116    	; 0x1d6e <DIO_writePin+0x90>
    1cfa:	83 30       	cpi	r24, 0x03	; 3
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <DIO_writePin+0x22>
    1cfe:	52 c0       	rjmp	.+164    	; 0x1da4 <DIO_writePin+0xc6>
    1d00:	72 c0       	rjmp	.+228    	; 0x1de6 <DIO_writePin+0x108>
    1d02:	41 30       	cpi	r20, 0x01	; 1
    1d04:	61 f4       	brne	.+24     	; 0x1d1e <DIO_writePin+0x40>
    1d06:	2b b3       	in	r18, 0x1b	; 27
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <DIO_writePin+0x34>
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	6a 95       	dec	r22
    1d14:	e2 f7       	brpl	.-8      	; 0x1d0e <DIO_writePin+0x30>
    1d16:	82 2b       	or	r24, r18
    1d18:	8b bb       	out	0x1b, r24	; 27
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	08 95       	ret
    1d1e:	2b b3       	in	r18, 0x1b	; 27
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <DIO_writePin+0x4c>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	6a 95       	dec	r22
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <DIO_writePin+0x48>
    1d2e:	80 95       	com	r24
    1d30:	82 23       	and	r24, r18
    1d32:	8b bb       	out	0x1b, r24	; 27
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	08 95       	ret
    1d38:	41 30       	cpi	r20, 0x01	; 1
    1d3a:	61 f4       	brne	.+24     	; 0x1d54 <DIO_writePin+0x76>
    1d3c:	28 b3       	in	r18, 0x18	; 24
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <DIO_writePin+0x6a>
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	6a 95       	dec	r22
    1d4a:	e2 f7       	brpl	.-8      	; 0x1d44 <DIO_writePin+0x66>
    1d4c:	82 2b       	or	r24, r18
    1d4e:	88 bb       	out	0x18, r24	; 24
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	08 95       	ret
    1d54:	28 b3       	in	r18, 0x18	; 24
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <DIO_writePin+0x82>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	6a 95       	dec	r22
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <DIO_writePin+0x7e>
    1d64:	80 95       	com	r24
    1d66:	82 23       	and	r24, r18
    1d68:	88 bb       	out	0x18, r24	; 24
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	08 95       	ret
    1d6e:	41 30       	cpi	r20, 0x01	; 1
    1d70:	61 f4       	brne	.+24     	; 0x1d8a <DIO_writePin+0xac>
    1d72:	25 b3       	in	r18, 0x15	; 21
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <DIO_writePin+0xa0>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	6a 95       	dec	r22
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <DIO_writePin+0x9c>
    1d82:	82 2b       	or	r24, r18
    1d84:	85 bb       	out	0x15, r24	; 21
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	08 95       	ret
    1d8a:	25 b3       	in	r18, 0x15	; 21
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <DIO_writePin+0xb8>
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	6a 95       	dec	r22
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <DIO_writePin+0xb4>
    1d9a:	80 95       	com	r24
    1d9c:	82 23       	and	r24, r18
    1d9e:	85 bb       	out	0x15, r24	; 21
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	08 95       	ret
    1da4:	41 30       	cpi	r20, 0x01	; 1
    1da6:	61 f4       	brne	.+24     	; 0x1dc0 <DIO_writePin+0xe2>
    1da8:	22 b3       	in	r18, 0x12	; 18
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <DIO_writePin+0xd6>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	6a 95       	dec	r22
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <DIO_writePin+0xd2>
    1db8:	82 2b       	or	r24, r18
    1dba:	82 bb       	out	0x12, r24	; 18
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	08 95       	ret
    1dc0:	22 b3       	in	r18, 0x12	; 18
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <DIO_writePin+0xee>
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	6a 95       	dec	r22
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <DIO_writePin+0xea>
    1dd0:	80 95       	com	r24
    1dd2:	82 23       	and	r24, r18
    1dd4:	82 bb       	out	0x12, r24	; 18
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	08 95       	ret
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	08 95       	ret
    1dde:	83 e0       	ldi	r24, 0x03	; 3
    1de0:	08 95       	ret
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	08 95       	ret
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	08 95       	ret

00001dea <DIO_readPin>:
    1dea:	84 30       	cpi	r24, 0x04	; 4
    1dec:	08 f0       	brcs	.+2      	; 0x1df0 <DIO_readPin+0x6>
    1dee:	53 c0       	rjmp	.+166    	; 0x1e96 <DIO_readPin+0xac>
    1df0:	68 30       	cpi	r22, 0x08	; 8
    1df2:	08 f0       	brcs	.+2      	; 0x1df6 <DIO_readPin+0xc>
    1df4:	52 c0       	rjmp	.+164    	; 0x1e9a <DIO_readPin+0xb0>
    1df6:	41 15       	cp	r20, r1
    1df8:	51 05       	cpc	r21, r1
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <DIO_readPin+0x14>
    1dfc:	50 c0       	rjmp	.+160    	; 0x1e9e <DIO_readPin+0xb4>
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	b9 f0       	breq	.+46     	; 0x1e30 <DIO_readPin+0x46>
    1e02:	28 f0       	brcs	.+10     	; 0x1e0e <DIO_readPin+0x24>
    1e04:	82 30       	cpi	r24, 0x02	; 2
    1e06:	29 f1       	breq	.+74     	; 0x1e52 <DIO_readPin+0x68>
    1e08:	83 30       	cpi	r24, 0x03	; 3
    1e0a:	a1 f1       	breq	.+104    	; 0x1e74 <DIO_readPin+0x8a>
    1e0c:	4a c0       	rjmp	.+148    	; 0x1ea2 <DIO_readPin+0xb8>
    1e0e:	89 b3       	in	r24, 0x19	; 25
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <DIO_readPin+0x2e>
    1e14:	95 95       	asr	r25
    1e16:	87 95       	ror	r24
    1e18:	6a 95       	dec	r22
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <DIO_readPin+0x2a>
    1e1c:	80 ff       	sbrs	r24, 0
    1e1e:	04 c0       	rjmp	.+8      	; 0x1e28 <DIO_readPin+0x3e>
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	fa 01       	movw	r30, r20
    1e24:	80 83       	st	Z, r24
    1e26:	08 95       	ret
    1e28:	fa 01       	movw	r30, r20
    1e2a:	10 82       	st	Z, r1
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	08 95       	ret
    1e30:	86 b3       	in	r24, 0x16	; 22
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <DIO_readPin+0x50>
    1e36:	95 95       	asr	r25
    1e38:	87 95       	ror	r24
    1e3a:	6a 95       	dec	r22
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <DIO_readPin+0x4c>
    1e3e:	80 ff       	sbrs	r24, 0
    1e40:	04 c0       	rjmp	.+8      	; 0x1e4a <DIO_readPin+0x60>
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	fa 01       	movw	r30, r20
    1e46:	80 83       	st	Z, r24
    1e48:	08 95       	ret
    1e4a:	fa 01       	movw	r30, r20
    1e4c:	10 82       	st	Z, r1
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	08 95       	ret
    1e52:	83 b3       	in	r24, 0x13	; 19
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <DIO_readPin+0x72>
    1e58:	95 95       	asr	r25
    1e5a:	87 95       	ror	r24
    1e5c:	6a 95       	dec	r22
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <DIO_readPin+0x6e>
    1e60:	80 ff       	sbrs	r24, 0
    1e62:	04 c0       	rjmp	.+8      	; 0x1e6c <DIO_readPin+0x82>
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	fa 01       	movw	r30, r20
    1e68:	80 83       	st	Z, r24
    1e6a:	08 95       	ret
    1e6c:	fa 01       	movw	r30, r20
    1e6e:	10 82       	st	Z, r1
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	08 95       	ret
    1e74:	80 b3       	in	r24, 0x10	; 16
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <DIO_readPin+0x94>
    1e7a:	95 95       	asr	r25
    1e7c:	87 95       	ror	r24
    1e7e:	6a 95       	dec	r22
    1e80:	e2 f7       	brpl	.-8      	; 0x1e7a <DIO_readPin+0x90>
    1e82:	80 ff       	sbrs	r24, 0
    1e84:	04 c0       	rjmp	.+8      	; 0x1e8e <DIO_readPin+0xa4>
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	fa 01       	movw	r30, r20
    1e8a:	80 83       	st	Z, r24
    1e8c:	08 95       	ret
    1e8e:	fa 01       	movw	r30, r20
    1e90:	10 82       	st	Z, r1
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	08 95       	ret
    1e96:	82 e0       	ldi	r24, 0x02	; 2
    1e98:	08 95       	ret
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	08 95       	ret
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	08 95       	ret
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	08 95       	ret

00001ea6 <DIO_togglePin>:
    1ea6:	84 30       	cpi	r24, 0x04	; 4
    1ea8:	d0 f5       	brcc	.+116    	; 0x1f1e <DIO_togglePin+0x78>
    1eaa:	68 30       	cpi	r22, 0x08	; 8
    1eac:	d0 f5       	brcc	.+116    	; 0x1f22 <DIO_togglePin+0x7c>
    1eae:	81 30       	cpi	r24, 0x01	; 1
    1eb0:	91 f0       	breq	.+36     	; 0x1ed6 <DIO_togglePin+0x30>
    1eb2:	28 f0       	brcs	.+10     	; 0x1ebe <DIO_togglePin+0x18>
    1eb4:	82 30       	cpi	r24, 0x02	; 2
    1eb6:	d9 f0       	breq	.+54     	; 0x1eee <DIO_togglePin+0x48>
    1eb8:	83 30       	cpi	r24, 0x03	; 3
    1eba:	29 f1       	breq	.+74     	; 0x1f06 <DIO_togglePin+0x60>
    1ebc:	34 c0       	rjmp	.+104    	; 0x1f26 <DIO_togglePin+0x80>
    1ebe:	2b b3       	in	r18, 0x1b	; 27
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <DIO_togglePin+0x24>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	6a 95       	dec	r22
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <DIO_togglePin+0x20>
    1ece:	82 27       	eor	r24, r18
    1ed0:	8b bb       	out	0x1b, r24	; 27
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	08 95       	ret
    1ed6:	28 b3       	in	r18, 0x18	; 24
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <DIO_togglePin+0x3c>
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	6a 95       	dec	r22
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <DIO_togglePin+0x38>
    1ee6:	82 27       	eor	r24, r18
    1ee8:	88 bb       	out	0x18, r24	; 24
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	08 95       	ret
    1eee:	25 b3       	in	r18, 0x15	; 21
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <DIO_togglePin+0x54>
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	6a 95       	dec	r22
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <DIO_togglePin+0x50>
    1efe:	82 27       	eor	r24, r18
    1f00:	85 bb       	out	0x15, r24	; 21
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	08 95       	ret
    1f06:	22 b3       	in	r18, 0x12	; 18
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <DIO_togglePin+0x6c>
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	6a 95       	dec	r22
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <DIO_togglePin+0x68>
    1f16:	82 27       	eor	r24, r18
    1f18:	82 bb       	out	0x12, r24	; 18
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	08 95       	ret
    1f1e:	82 e0       	ldi	r24, 0x02	; 2
    1f20:	08 95       	ret
    1f22:	83 e0       	ldi	r24, 0x03	; 3
    1f24:	08 95       	ret
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	08 95       	ret

00001f2a <DIO_writePort>:
/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
    1f2a:	84 30       	cpi	r24, 0x04	; 4
    1f2c:	a0 f4       	brcc	.+40     	; 0x1f56 <DIO_writePort+0x2c>
	{
			switch(port)
    1f2e:	81 30       	cpi	r24, 0x01	; 1
    1f30:	49 f0       	breq	.+18     	; 0x1f44 <DIO_writePort+0x1a>
    1f32:	28 f0       	brcs	.+10     	; 0x1f3e <DIO_writePort+0x14>
    1f34:	82 30       	cpi	r24, 0x02	; 2
    1f36:	49 f0       	breq	.+18     	; 0x1f4a <DIO_writePort+0x20>
    1f38:	83 30       	cpi	r24, 0x03	; 3
    1f3a:	51 f0       	breq	.+20     	; 0x1f50 <DIO_writePort+0x26>
    1f3c:	0e c0       	rjmp	.+28     	; 0x1f5a <DIO_writePort+0x30>
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
    1f3e:	6b bb       	out	0x1b, r22	; 27

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
	{
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
    1f42:	08 95       	ret
				case PORTB_ID:	PORTB = enu_port_value;		break;
    1f44:	68 bb       	out	0x18, r22	; 24

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
	{
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
				case PORTB_ID:	PORTB = enu_port_value;		break;
    1f48:	08 95       	ret
				case PORTC_ID:	PORTC = enu_port_value;		break;
    1f4a:	65 bb       	out	0x15, r22	; 21

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
	{
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
				case PORTB_ID:	PORTB = enu_port_value;		break;
				case PORTC_ID:	PORTC = enu_port_value;		break;
    1f4e:	08 95       	ret
				case PORTD_ID:	PORTD = enu_port_value;		break;
    1f50:	62 bb       	out	0x12, r22	; 18

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
			switch(port)
			{
				case PORTA_ID:	PORTA = enu_port_value;		break;
				case PORTB_ID:	PORTB = enu_port_value;		break;
				case PORTC_ID:	PORTC = enu_port_value;		break;
				case PORTD_ID:	PORTD = enu_port_value;		break;
    1f54:	08 95       	ret
					break;
			}
	}
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	08 95       	ret

/*===========================================================================*/

enu_dio_error_t DIO_writePort	(uint8 port,enu_port_value_t enu_port_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
    1f5c:	08 95       	ret

00001f5e <DIO_readPort>:
/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
	if((port >= PORTA_ID) && (port < MAX_PORT_ID))
    1f5e:	84 30       	cpi	r24, 0x04	; 4
    1f60:	f8 f4       	brcc	.+62     	; 0x1fa0 <DIO_readPort+0x42>
	{
		if(pptr_value != NULL_PTR)
    1f62:	61 15       	cp	r22, r1
    1f64:	71 05       	cpc	r23, r1
    1f66:	f1 f0       	breq	.+60     	; 0x1fa4 <DIO_readPort+0x46>
		{
			switch(port)
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	59 f0       	breq	.+22     	; 0x1f82 <DIO_readPort+0x24>
    1f6c:	28 f0       	brcs	.+10     	; 0x1f78 <DIO_readPort+0x1a>
    1f6e:	82 30       	cpi	r24, 0x02	; 2
    1f70:	69 f0       	breq	.+26     	; 0x1f8c <DIO_readPort+0x2e>
    1f72:	83 30       	cpi	r24, 0x03	; 3
    1f74:	81 f0       	breq	.+32     	; 0x1f96 <DIO_readPort+0x38>
    1f76:	18 c0       	rjmp	.+48     	; 0x1fa8 <DIO_readPort+0x4a>
			{
				case PORTA_ID:	*pptr_value = PINA;	break;
    1f78:	89 b3       	in	r24, 0x19	; 25
    1f7a:	fb 01       	movw	r30, r22
    1f7c:	80 83       	st	Z, r24

/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
	{
		if(pptr_value != NULL_PTR)
		{
			switch(port)
			{
				case PORTA_ID:	*pptr_value = PINA;	break;
    1f80:	08 95       	ret
				case PORTB_ID:	*pptr_value = PINB;	break;
    1f82:	86 b3       	in	r24, 0x16	; 22
    1f84:	fb 01       	movw	r30, r22
    1f86:	80 83       	st	Z, r24

/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
		if(pptr_value != NULL_PTR)
		{
			switch(port)
			{
				case PORTA_ID:	*pptr_value = PINA;	break;
				case PORTB_ID:	*pptr_value = PINB;	break;
    1f8a:	08 95       	ret
				case PORTC_ID:	*pptr_value = PINC;	break;
    1f8c:	83 b3       	in	r24, 0x13	; 19
    1f8e:	fb 01       	movw	r30, r22
    1f90:	80 83       	st	Z, r24

/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(port)
			{
				case PORTA_ID:	*pptr_value = PINA;	break;
				case PORTB_ID:	*pptr_value = PINB;	break;
				case PORTC_ID:	*pptr_value = PINC;	break;
    1f94:	08 95       	ret
				case PORTD_ID:	*pptr_value = PIND;	break;
    1f96:	80 b3       	in	r24, 0x10	; 16
    1f98:	fb 01       	movw	r30, r22
    1f9a:	80 83       	st	Z, r24

/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
			switch(port)
			{
				case PORTA_ID:	*pptr_value = PINA;	break;
				case PORTB_ID:	*pptr_value = PINB;	break;
				case PORTC_ID:	*pptr_value = PINC;	break;
				case PORTD_ID:	*pptr_value = PIND;	break;
    1f9e:	08 95       	ret
			enu_dio_error = DIO_INVALID_OPERATION;
		}
	}
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
    1fa0:	82 e0       	ldi	r24, 0x02	; 2
    1fa2:	08 95       	ret
			}

		}
		else
		{
			enu_dio_error = DIO_INVALID_OPERATION;
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	08 95       	ret

/*===========================================================================*/

enu_dio_error_t DIO_readPort	(uint8 port,uint8* pptr_value)
{
	enu_dio_error_t enu_dio_error = DIO_VALID_OPERATION;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_dio_error = DIO_INVALID_PORT_ID;
	}
	return enu_dio_error;
}
    1faa:	08 95       	ret

00001fac <Init_external_interrupt>:
	 else
	 {
		 enu_interrupt_error = ENU_INT_INVALID_ID;
	 }
	 return enu_interrupt_error;
 }
    1fac:	83 30       	cpi	r24, 0x03	; 3
    1fae:	40 f5       	brcc	.+80     	; 0x2000 <Init_external_interrupt+0x54>
    1fb0:	64 30       	cpi	r22, 0x04	; 4
    1fb2:	40 f5       	brcc	.+80     	; 0x2004 <Init_external_interrupt+0x58>
    1fb4:	81 11       	cpse	r24, r1
    1fb6:	06 c0       	rjmp	.+12     	; 0x1fc4 <Init_external_interrupt+0x18>
    1fb8:	85 b7       	in	r24, 0x35	; 53
    1fba:	8c 7f       	andi	r24, 0xFC	; 252
    1fbc:	68 2b       	or	r22, r24
    1fbe:	65 bf       	out	0x35, r22	; 53
    1fc0:	83 e0       	ldi	r24, 0x03	; 3
    1fc2:	08 95       	ret
    1fc4:	81 30       	cpi	r24, 0x01	; 1
    1fc6:	59 f4       	brne	.+22     	; 0x1fde <Init_external_interrupt+0x32>
    1fc8:	85 b7       	in	r24, 0x35	; 53
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	66 0f       	add	r22, r22
    1fce:	77 1f       	adc	r23, r23
    1fd0:	66 0f       	add	r22, r22
    1fd2:	77 1f       	adc	r23, r23
    1fd4:	83 7f       	andi	r24, 0xF3	; 243
    1fd6:	68 2b       	or	r22, r24
    1fd8:	65 bf       	out	0x35, r22	; 53
    1fda:	83 e0       	ldi	r24, 0x03	; 3
    1fdc:	08 95       	ret
    1fde:	82 30       	cpi	r24, 0x02	; 2
    1fe0:	99 f4       	brne	.+38     	; 0x2008 <Init_external_interrupt+0x5c>
    1fe2:	8e ef       	ldi	r24, 0xFE	; 254
    1fe4:	86 0f       	add	r24, r22
    1fe6:	82 30       	cpi	r24, 0x02	; 2
    1fe8:	88 f4       	brcc	.+34     	; 0x200c <Init_external_interrupt+0x60>
    1fea:	24 b7       	in	r18, 0x34	; 52
    1fec:	30 e4       	ldi	r19, 0x40	; 64
    1fee:	63 9f       	mul	r22, r19
    1ff0:	c0 01       	movw	r24, r0
    1ff2:	11 24       	eor	r1, r1
    1ff4:	92 2f       	mov	r25, r18
    1ff6:	9f 7b       	andi	r25, 0xBF	; 191
    1ff8:	89 2b       	or	r24, r25
    1ffa:	84 bf       	out	0x34, r24	; 52
    1ffc:	83 e0       	ldi	r24, 0x03	; 3
    1ffe:	08 95       	ret
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	08 95       	ret
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	08 95       	ret
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	08 95       	ret
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	08 95       	ret

00002010 <enable_external_interrupt>:
    2010:	83 30       	cpi	r24, 0x03	; 3
    2012:	a8 f4       	brcc	.+42     	; 0x203e <enable_external_interrupt+0x2e>
    2014:	81 11       	cpse	r24, r1
    2016:	05 c0       	rjmp	.+10     	; 0x2022 <enable_external_interrupt+0x12>
    2018:	8b b7       	in	r24, 0x3b	; 59
    201a:	80 64       	ori	r24, 0x40	; 64
    201c:	8b bf       	out	0x3b, r24	; 59
    201e:	83 e0       	ldi	r24, 0x03	; 3
    2020:	08 95       	ret
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	29 f4       	brne	.+10     	; 0x2030 <enable_external_interrupt+0x20>
    2026:	8b b7       	in	r24, 0x3b	; 59
    2028:	80 68       	ori	r24, 0x80	; 128
    202a:	8b bf       	out	0x3b, r24	; 59
    202c:	83 e0       	ldi	r24, 0x03	; 3
    202e:	08 95       	ret
    2030:	82 30       	cpi	r24, 0x02	; 2
    2032:	39 f4       	brne	.+14     	; 0x2042 <enable_external_interrupt+0x32>
    2034:	8b b7       	in	r24, 0x3b	; 59
    2036:	80 62       	ori	r24, 0x20	; 32
    2038:	8b bf       	out	0x3b, r24	; 59
    203a:	83 e0       	ldi	r24, 0x03	; 3
    203c:	08 95       	ret
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	08 95       	ret
    2042:	83 e0       	ldi	r24, 0x03	; 3
    2044:	08 95       	ret

00002046 <interrupt0_set_callback>:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt0_set_callback (void(*f_ptr)(void))
{
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
	if (f_ptr != NULL_PTR)
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	31 f0       	breq	.+12     	; 0x2056 <interrupt0_set_callback+0x10>
	{
		gl_callbackptr_0 = f_ptr;
    204a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <gl_callbackptr_0+0x1>
    204e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <gl_callbackptr_0>
 *				INVALID_PIN_ID				:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt0_set_callback (void(*f_ptr)(void))
{
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	08 95       	ret
		gl_callbackptr_0 = f_ptr;
		
	}
	else
	{
		enu_interrupt_error = ENU_INT_INVALID_INPUT ;
    2056:	82 e0       	ldi	r24, 0x02	; 2
	}
	return enu_interrupt_error ;
}
    2058:	08 95       	ret

0000205a <interrupt1_set_callback>:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt1_set_callback (void(*f_ptr)(void))
{
		enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
		if (f_ptr != NULL_PTR)
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	31 f0       	breq	.+12     	; 0x206a <interrupt1_set_callback+0x10>
		{
			gl_callbackptr_1 = f_ptr;
    205e:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <gl_callbackptr_1+0x1>
    2062:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <gl_callbackptr_1>
 *				INVALID_PIN_ID				:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt1_set_callback (void(*f_ptr)(void))
{
		enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
    2066:	83 e0       	ldi	r24, 0x03	; 3
    2068:	08 95       	ret
			gl_callbackptr_1 = f_ptr;
			
		}
		else
		{
			enu_interrupt_error = ENU_INT_INVALID_INPUT ;
    206a:	82 e0       	ldi	r24, 0x02	; 2
		}
		return enu_interrupt_error ;
}
    206c:	08 95       	ret

0000206e <interrupt2_set_callback>:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt2_set_callback (void(*f_ptr)(void))
{	
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
	if (f_ptr != NULL_PTR)
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	31 f0       	breq	.+12     	; 0x207e <interrupt2_set_callback+0x10>
	{
		gl_callbackptr_2 = f_ptr;
    2072:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <gl_callbackptr_2+0x1>
    2076:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <gl_callbackptr_2>
 *				INVALID_PIN_ID				:
 *				INVALID_DIRECTION			:	
 */
enu_interrupt_error_t interrupt2_set_callback (void(*f_ptr)(void))
{	
	enu_interrupt_error_t enu_interrupt_error = ENU_INT_VALID;
    207a:	83 e0       	ldi	r24, 0x03	; 3
    207c:	08 95       	ret
		gl_callbackptr_2 = f_ptr;
		
	}
	else
	{
		enu_interrupt_error = ENU_INT_INVALID_INPUT ;
    207e:	82 e0       	ldi	r24, 0x02	; 2
	}
	return enu_interrupt_error ;
}
    2080:	08 95       	ret

00002082 <__vector_1>:

ISR_HANDLER(EXT_INT0)
{
    2082:	1f 92       	push	r1
    2084:	0f 92       	push	r0
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	0f 92       	push	r0
    208a:	11 24       	eor	r1, r1
    208c:	2f 93       	push	r18
    208e:	3f 93       	push	r19
    2090:	4f 93       	push	r20
    2092:	5f 93       	push	r21
    2094:	6f 93       	push	r22
    2096:	7f 93       	push	r23
    2098:	8f 93       	push	r24
    209a:	9f 93       	push	r25
    209c:	af 93       	push	r26
    209e:	bf 93       	push	r27
    20a0:	ef 93       	push	r30
    20a2:	ff 93       	push	r31
	if(gl_callbackptr_0 != NULL_PTR)
    20a4:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <gl_callbackptr_0>
    20a8:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <gl_callbackptr_0+0x1>
    20ac:	30 97       	sbiw	r30, 0x00	; 0
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <__vector_1+0x30>
	{
		gl_callbackptr_0();
    20b0:	09 95       	icall
	}
}
    20b2:	ff 91       	pop	r31
    20b4:	ef 91       	pop	r30
    20b6:	bf 91       	pop	r27
    20b8:	af 91       	pop	r26
    20ba:	9f 91       	pop	r25
    20bc:	8f 91       	pop	r24
    20be:	7f 91       	pop	r23
    20c0:	6f 91       	pop	r22
    20c2:	5f 91       	pop	r21
    20c4:	4f 91       	pop	r20
    20c6:	3f 91       	pop	r19
    20c8:	2f 91       	pop	r18
    20ca:	0f 90       	pop	r0
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	0f 90       	pop	r0
    20d0:	1f 90       	pop	r1
    20d2:	18 95       	reti

000020d4 <__vector_2>:

ISR_HANDLER(EXT_INT1)
{
    20d4:	1f 92       	push	r1
    20d6:	0f 92       	push	r0
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	0f 92       	push	r0
    20dc:	11 24       	eor	r1, r1
    20de:	2f 93       	push	r18
    20e0:	3f 93       	push	r19
    20e2:	4f 93       	push	r20
    20e4:	5f 93       	push	r21
    20e6:	6f 93       	push	r22
    20e8:	7f 93       	push	r23
    20ea:	8f 93       	push	r24
    20ec:	9f 93       	push	r25
    20ee:	af 93       	push	r26
    20f0:	bf 93       	push	r27
    20f2:	ef 93       	push	r30
    20f4:	ff 93       	push	r31
	if(gl_callbackptr_1 != NULL_PTR)
    20f6:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <gl_callbackptr_1>
    20fa:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <gl_callbackptr_1+0x1>
    20fe:	30 97       	sbiw	r30, 0x00	; 0
    2100:	09 f0       	breq	.+2      	; 0x2104 <__vector_2+0x30>
	{
		gl_callbackptr_1();
    2102:	09 95       	icall
	}
}
    2104:	ff 91       	pop	r31
    2106:	ef 91       	pop	r30
    2108:	bf 91       	pop	r27
    210a:	af 91       	pop	r26
    210c:	9f 91       	pop	r25
    210e:	8f 91       	pop	r24
    2110:	7f 91       	pop	r23
    2112:	6f 91       	pop	r22
    2114:	5f 91       	pop	r21
    2116:	4f 91       	pop	r20
    2118:	3f 91       	pop	r19
    211a:	2f 91       	pop	r18
    211c:	0f 90       	pop	r0
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	0f 90       	pop	r0
    2122:	1f 90       	pop	r1
    2124:	18 95       	reti

00002126 <__vector_3>:

ISR_HANDLER(EXT_INT2)
{
    2126:	1f 92       	push	r1
    2128:	0f 92       	push	r0
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	0f 92       	push	r0
    212e:	11 24       	eor	r1, r1
    2130:	2f 93       	push	r18
    2132:	3f 93       	push	r19
    2134:	4f 93       	push	r20
    2136:	5f 93       	push	r21
    2138:	6f 93       	push	r22
    213a:	7f 93       	push	r23
    213c:	8f 93       	push	r24
    213e:	9f 93       	push	r25
    2140:	af 93       	push	r26
    2142:	bf 93       	push	r27
    2144:	ef 93       	push	r30
    2146:	ff 93       	push	r31
	if(gl_callbackptr_2 != NULL_PTR)
    2148:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <gl_callbackptr_2>
    214c:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <gl_callbackptr_2+0x1>
    2150:	30 97       	sbiw	r30, 0x00	; 0
    2152:	09 f0       	breq	.+2      	; 0x2156 <__vector_3+0x30>
	{
		gl_callbackptr_2();
    2154:	09 95       	icall
	}
}
    2156:	ff 91       	pop	r31
    2158:	ef 91       	pop	r30
    215a:	bf 91       	pop	r27
    215c:	af 91       	pop	r26
    215e:	9f 91       	pop	r25
    2160:	8f 91       	pop	r24
    2162:	7f 91       	pop	r23
    2164:	6f 91       	pop	r22
    2166:	5f 91       	pop	r21
    2168:	4f 91       	pop	r20
    216a:	3f 91       	pop	r19
    216c:	2f 91       	pop	r18
    216e:	0f 90       	pop	r0
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	0f 90       	pop	r0
    2174:	1f 90       	pop	r1
    2176:	18 95       	reti

00002178 <enable_global_interrupt>:


/*================ APIS ================*/
void enable_global_interrupt (void)
{
	SET_BIT(SREG,PIN7);
    2178:	8f b7       	in	r24, 0x3f	; 63
    217a:	80 68       	ori	r24, 0x80	; 128
    217c:	8f bf       	out	0x3f, r24	; 63
    217e:	08 95       	ret

00002180 <timer_init>:
	else
	{
		enu_tmr_error = ENU_TMR_INVALID_ID;
	}
	return ENU_TMR_INVALID_ID;
}
    2180:	fc 01       	movw	r30, r24
    2182:	89 2b       	or	r24, r25
    2184:	09 f4       	brne	.+2      	; 0x2188 <timer_init+0x8>
    2186:	95 c1       	rjmp	.+810    	; 0x24b2 <timer_init+0x332>
    2188:	80 81       	ld	r24, Z
    218a:	83 30       	cpi	r24, 0x03	; 3
    218c:	08 f0       	brcs	.+2      	; 0x2190 <timer_init+0x10>
    218e:	93 c1       	rjmp	.+806    	; 0x24b6 <timer_init+0x336>
    2190:	91 81       	ldd	r25, Z+1	; 0x01
    2192:	92 30       	cpi	r25, 0x02	; 2
    2194:	08 f0       	brcs	.+2      	; 0x2198 <timer_init+0x18>
    2196:	91 c1       	rjmp	.+802    	; 0x24ba <timer_init+0x33a>
    2198:	92 81       	ldd	r25, Z+2	; 0x02
    219a:	92 30       	cpi	r25, 0x02	; 2
    219c:	08 f0       	brcs	.+2      	; 0x21a0 <timer_init+0x20>
    219e:	8f c1       	rjmp	.+798    	; 0x24be <timer_init+0x33e>
    21a0:	93 81       	ldd	r25, Z+3	; 0x03
    21a2:	94 30       	cpi	r25, 0x04	; 4
    21a4:	08 f0       	brcs	.+2      	; 0x21a8 <timer_init+0x28>
    21a6:	8d c1       	rjmp	.+794    	; 0x24c2 <timer_init+0x342>
    21a8:	94 81       	ldd	r25, Z+4	; 0x04
    21aa:	9a 30       	cpi	r25, 0x0A	; 10
    21ac:	08 f0       	brcs	.+2      	; 0x21b0 <timer_init+0x30>
    21ae:	8b c1       	rjmp	.+790    	; 0x24c6 <timer_init+0x346>
    21b0:	81 11       	cpse	r24, r1
    21b2:	7d c0       	rjmp	.+250    	; 0x22ae <timer_init+0x12e>
    21b4:	83 b7       	in	r24, 0x33	; 51
    21b6:	80 68       	ori	r24, 0x80	; 128
    21b8:	83 bf       	out	0x33, r24	; 51
    21ba:	81 81       	ldd	r24, Z+1	; 0x01
    21bc:	88 23       	and	r24, r24
    21be:	19 f0       	breq	.+6      	; 0x21c6 <timer_init+0x46>
    21c0:	81 30       	cpi	r24, 0x01	; 1
    21c2:	41 f0       	breq	.+16     	; 0x21d4 <timer_init+0x54>
    21c4:	0d c0       	rjmp	.+26     	; 0x21e0 <timer_init+0x60>
    21c6:	83 b7       	in	r24, 0x33	; 51
    21c8:	8f 7b       	andi	r24, 0xBF	; 191
    21ca:	83 bf       	out	0x33, r24	; 51
    21cc:	83 b7       	in	r24, 0x33	; 51
    21ce:	87 7f       	andi	r24, 0xF7	; 247
    21d0:	83 bf       	out	0x33, r24	; 51
    21d2:	06 c0       	rjmp	.+12     	; 0x21e0 <timer_init+0x60>
    21d4:	83 b7       	in	r24, 0x33	; 51
    21d6:	8f 7b       	andi	r24, 0xBF	; 191
    21d8:	83 bf       	out	0x33, r24	; 51
    21da:	83 b7       	in	r24, 0x33	; 51
    21dc:	88 60       	ori	r24, 0x08	; 8
    21de:	83 bf       	out	0x33, r24	; 51
    21e0:	83 81       	ldd	r24, Z+3	; 0x03
    21e2:	81 30       	cpi	r24, 0x01	; 1
    21e4:	69 f0       	breq	.+26     	; 0x2200 <timer_init+0x80>
    21e6:	28 f0       	brcs	.+10     	; 0x21f2 <timer_init+0x72>
    21e8:	82 30       	cpi	r24, 0x02	; 2
    21ea:	a1 f0       	breq	.+40     	; 0x2214 <timer_init+0x94>
    21ec:	83 30       	cpi	r24, 0x03	; 3
    21ee:	e1 f0       	breq	.+56     	; 0x2228 <timer_init+0xa8>
    21f0:	24 c0       	rjmp	.+72     	; 0x223a <timer_init+0xba>
    21f2:	83 b7       	in	r24, 0x33	; 51
    21f4:	8f 7e       	andi	r24, 0xEF	; 239
    21f6:	83 bf       	out	0x33, r24	; 51
    21f8:	83 b7       	in	r24, 0x33	; 51
    21fa:	8f 7d       	andi	r24, 0xDF	; 223
    21fc:	83 bf       	out	0x33, r24	; 51
    21fe:	1d c0       	rjmp	.+58     	; 0x223a <timer_init+0xba>
    2200:	87 b3       	in	r24, 0x17	; 23
    2202:	88 60       	ori	r24, 0x08	; 8
    2204:	87 bb       	out	0x17, r24	; 23
    2206:	83 b7       	in	r24, 0x33	; 51
    2208:	80 61       	ori	r24, 0x10	; 16
    220a:	83 bf       	out	0x33, r24	; 51
    220c:	83 b7       	in	r24, 0x33	; 51
    220e:	8f 7d       	andi	r24, 0xDF	; 223
    2210:	83 bf       	out	0x33, r24	; 51
    2212:	13 c0       	rjmp	.+38     	; 0x223a <timer_init+0xba>
    2214:	87 b3       	in	r24, 0x17	; 23
    2216:	88 60       	ori	r24, 0x08	; 8
    2218:	87 bb       	out	0x17, r24	; 23
    221a:	83 b7       	in	r24, 0x33	; 51
    221c:	8f 7e       	andi	r24, 0xEF	; 239
    221e:	83 bf       	out	0x33, r24	; 51
    2220:	83 b7       	in	r24, 0x33	; 51
    2222:	80 62       	ori	r24, 0x20	; 32
    2224:	83 bf       	out	0x33, r24	; 51
    2226:	09 c0       	rjmp	.+18     	; 0x223a <timer_init+0xba>
    2228:	87 b3       	in	r24, 0x17	; 23
    222a:	88 60       	ori	r24, 0x08	; 8
    222c:	87 bb       	out	0x17, r24	; 23
    222e:	83 b7       	in	r24, 0x33	; 51
    2230:	80 61       	ori	r24, 0x10	; 16
    2232:	83 bf       	out	0x33, r24	; 51
    2234:	83 b7       	in	r24, 0x33	; 51
    2236:	80 62       	ori	r24, 0x20	; 32
    2238:	83 bf       	out	0x33, r24	; 51
    223a:	84 81       	ldd	r24, Z+4	; 0x04
    223c:	83 30       	cpi	r24, 0x03	; 3
    223e:	09 f4       	brne	.+2      	; 0x2242 <timer_init+0xc2>
    2240:	44 c1       	rjmp	.+648    	; 0x24ca <timer_init+0x34a>
    2242:	85 30       	cpi	r24, 0x05	; 5
    2244:	09 f4       	brne	.+2      	; 0x2248 <timer_init+0xc8>
    2246:	43 c1       	rjmp	.+646    	; 0x24ce <timer_init+0x34e>
    2248:	a0 81       	ld	r26, Z
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	a1 58       	subi	r26, 0x81	; 129
    224e:	bf 4f       	sbci	r27, 0xFF	; 255
    2250:	8c 93       	st	X, r24
    2252:	82 81       	ldd	r24, Z+2	; 0x02
    2254:	81 11       	cpse	r24, r1
    2256:	0b c0       	rjmp	.+22     	; 0x226e <timer_init+0xee>
    2258:	81 81       	ldd	r24, Z+1	; 0x01
    225a:	81 11       	cpse	r24, r1
    225c:	04 c0       	rjmp	.+8      	; 0x2266 <timer_init+0xe6>
    225e:	89 b7       	in	r24, 0x39	; 57
    2260:	81 60       	ori	r24, 0x01	; 1
    2262:	89 bf       	out	0x39, r24	; 57
    2264:	0a c0       	rjmp	.+20     	; 0x227a <timer_init+0xfa>
    2266:	89 b7       	in	r24, 0x39	; 57
    2268:	82 60       	ori	r24, 0x02	; 2
    226a:	89 bf       	out	0x39, r24	; 57
    226c:	06 c0       	rjmp	.+12     	; 0x227a <timer_init+0xfa>
    226e:	89 b7       	in	r24, 0x39	; 57
    2270:	8e 7f       	andi	r24, 0xFE	; 254
    2272:	89 bf       	out	0x39, r24	; 57
    2274:	89 b7       	in	r24, 0x39	; 57
    2276:	8d 7f       	andi	r24, 0xFD	; 253
    2278:	89 bf       	out	0x39, r24	; 57
    227a:	85 81       	ldd	r24, Z+5	; 0x05
    227c:	96 81       	ldd	r25, Z+6	; 0x06
    227e:	8f 3f       	cpi	r24, 0xFF	; 255
    2280:	91 05       	cpc	r25, r1
    2282:	11 f0       	breq	.+4      	; 0x2288 <timer_init+0x108>
    2284:	08 f0       	brcs	.+2      	; 0x2288 <timer_init+0x108>
    2286:	25 c1       	rjmp	.+586    	; 0x24d2 <timer_init+0x352>
    2288:	27 81       	ldd	r18, Z+7	; 0x07
    228a:	30 85       	ldd	r19, Z+8	; 0x08
    228c:	2f 3f       	cpi	r18, 0xFF	; 255
    228e:	31 05       	cpc	r19, r1
    2290:	11 f0       	breq	.+4      	; 0x2296 <timer_init+0x116>
    2292:	08 f0       	brcs	.+2      	; 0x2296 <timer_init+0x116>
    2294:	20 c1       	rjmp	.+576    	; 0x24d6 <timer_init+0x356>
    2296:	21 81       	ldd	r18, Z+1	; 0x01
    2298:	21 11       	cpse	r18, r1
    229a:	04 c0       	rjmp	.+8      	; 0x22a4 <timer_init+0x124>
    229c:	82 bf       	out	0x32, r24	; 50
    229e:	1c be       	out	0x3c, r1	; 60
    22a0:	86 e0       	ldi	r24, 0x06	; 6
    22a2:	24 c1       	rjmp	.+584    	; 0x24ec <timer_init+0x36c>
    22a4:	12 be       	out	0x32, r1	; 50
    22a6:	87 81       	ldd	r24, Z+7	; 0x07
    22a8:	8c bf       	out	0x3c, r24	; 60
    22aa:	86 e0       	ldi	r24, 0x06	; 6
    22ac:	1f c1       	rjmp	.+574    	; 0x24ec <timer_init+0x36c>
    22ae:	81 30       	cpi	r24, 0x01	; 1
    22b0:	09 f0       	breq	.+2      	; 0x22b4 <timer_init+0x134>
    22b2:	85 c0       	rjmp	.+266    	; 0x23be <timer_init+0x23e>
    22b4:	8f b5       	in	r24, 0x2f	; 47
    22b6:	88 60       	ori	r24, 0x08	; 8
    22b8:	8f bd       	out	0x2f, r24	; 47
    22ba:	8f b5       	in	r24, 0x2f	; 47
    22bc:	84 60       	ori	r24, 0x04	; 4
    22be:	8f bd       	out	0x2f, r24	; 47
    22c0:	81 81       	ldd	r24, Z+1	; 0x01
    22c2:	88 23       	and	r24, r24
    22c4:	19 f0       	breq	.+6      	; 0x22cc <timer_init+0x14c>
    22c6:	81 30       	cpi	r24, 0x01	; 1
    22c8:	71 f0       	breq	.+28     	; 0x22e6 <timer_init+0x166>
    22ca:	19 c0       	rjmp	.+50     	; 0x22fe <timer_init+0x17e>
    22cc:	8f b5       	in	r24, 0x2f	; 47
    22ce:	8e 7f       	andi	r24, 0xFE	; 254
    22d0:	8f bd       	out	0x2f, r24	; 47
    22d2:	8f b5       	in	r24, 0x2f	; 47
    22d4:	8d 7f       	andi	r24, 0xFD	; 253
    22d6:	8f bd       	out	0x2f, r24	; 47
    22d8:	8e b5       	in	r24, 0x2e	; 46
    22da:	87 7f       	andi	r24, 0xF7	; 247
    22dc:	8e bd       	out	0x2e, r24	; 46
    22de:	8e b5       	in	r24, 0x2e	; 46
    22e0:	8f 7e       	andi	r24, 0xEF	; 239
    22e2:	8e bd       	out	0x2e, r24	; 46
    22e4:	0c c0       	rjmp	.+24     	; 0x22fe <timer_init+0x17e>
    22e6:	8f b5       	in	r24, 0x2f	; 47
    22e8:	8e 7f       	andi	r24, 0xFE	; 254
    22ea:	8f bd       	out	0x2f, r24	; 47
    22ec:	8f b5       	in	r24, 0x2f	; 47
    22ee:	8d 7f       	andi	r24, 0xFD	; 253
    22f0:	8f bd       	out	0x2f, r24	; 47
    22f2:	8e b5       	in	r24, 0x2e	; 46
    22f4:	88 60       	ori	r24, 0x08	; 8
    22f6:	8e bd       	out	0x2e, r24	; 46
    22f8:	8e b5       	in	r24, 0x2e	; 46
    22fa:	8f 7e       	andi	r24, 0xEF	; 239
    22fc:	8e bd       	out	0x2e, r24	; 46
    22fe:	83 81       	ldd	r24, Z+3	; 0x03
    2300:	81 30       	cpi	r24, 0x01	; 1
    2302:	69 f0       	breq	.+26     	; 0x231e <timer_init+0x19e>
    2304:	28 f0       	brcs	.+10     	; 0x2310 <timer_init+0x190>
    2306:	82 30       	cpi	r24, 0x02	; 2
    2308:	a1 f0       	breq	.+40     	; 0x2332 <timer_init+0x1b2>
    230a:	83 30       	cpi	r24, 0x03	; 3
    230c:	e1 f0       	breq	.+56     	; 0x2346 <timer_init+0x1c6>
    230e:	24 c0       	rjmp	.+72     	; 0x2358 <timer_init+0x1d8>
    2310:	8f b5       	in	r24, 0x2f	; 47
    2312:	8f 7b       	andi	r24, 0xBF	; 191
    2314:	8f bd       	out	0x2f, r24	; 47
    2316:	8f b5       	in	r24, 0x2f	; 47
    2318:	8f 77       	andi	r24, 0x7F	; 127
    231a:	8f bd       	out	0x2f, r24	; 47
    231c:	1d c0       	rjmp	.+58     	; 0x2358 <timer_init+0x1d8>
    231e:	81 b3       	in	r24, 0x11	; 17
    2320:	80 62       	ori	r24, 0x20	; 32
    2322:	81 bb       	out	0x11, r24	; 17
    2324:	8f b5       	in	r24, 0x2f	; 47
    2326:	80 64       	ori	r24, 0x40	; 64
    2328:	8f bd       	out	0x2f, r24	; 47
    232a:	8f b5       	in	r24, 0x2f	; 47
    232c:	8f 77       	andi	r24, 0x7F	; 127
    232e:	8f bd       	out	0x2f, r24	; 47
    2330:	13 c0       	rjmp	.+38     	; 0x2358 <timer_init+0x1d8>
    2332:	81 b3       	in	r24, 0x11	; 17
    2334:	80 62       	ori	r24, 0x20	; 32
    2336:	81 bb       	out	0x11, r24	; 17
    2338:	8f b5       	in	r24, 0x2f	; 47
    233a:	8f 7b       	andi	r24, 0xBF	; 191
    233c:	8f bd       	out	0x2f, r24	; 47
    233e:	8f b5       	in	r24, 0x2f	; 47
    2340:	80 68       	ori	r24, 0x80	; 128
    2342:	8f bd       	out	0x2f, r24	; 47
    2344:	09 c0       	rjmp	.+18     	; 0x2358 <timer_init+0x1d8>
    2346:	81 b3       	in	r24, 0x11	; 17
    2348:	80 62       	ori	r24, 0x20	; 32
    234a:	81 bb       	out	0x11, r24	; 17
    234c:	8f b5       	in	r24, 0x2f	; 47
    234e:	80 64       	ori	r24, 0x40	; 64
    2350:	8f bd       	out	0x2f, r24	; 47
    2352:	8f b5       	in	r24, 0x2f	; 47
    2354:	80 68       	ori	r24, 0x80	; 128
    2356:	8f bd       	out	0x2f, r24	; 47
    2358:	84 81       	ldd	r24, Z+4	; 0x04
    235a:	83 30       	cpi	r24, 0x03	; 3
    235c:	09 f4       	brne	.+2      	; 0x2360 <timer_init+0x1e0>
    235e:	bd c0       	rjmp	.+378    	; 0x24da <timer_init+0x35a>
    2360:	85 30       	cpi	r24, 0x05	; 5
    2362:	09 f4       	brne	.+2      	; 0x2366 <timer_init+0x1e6>
    2364:	bc c0       	rjmp	.+376    	; 0x24de <timer_init+0x35e>
    2366:	a0 81       	ld	r26, Z
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	a1 58       	subi	r26, 0x81	; 129
    236c:	bf 4f       	sbci	r27, 0xFF	; 255
    236e:	8c 93       	st	X, r24
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	81 11       	cpse	r24, r1
    2374:	0b c0       	rjmp	.+22     	; 0x238c <timer_init+0x20c>
    2376:	81 81       	ldd	r24, Z+1	; 0x01
    2378:	81 11       	cpse	r24, r1
    237a:	04 c0       	rjmp	.+8      	; 0x2384 <timer_init+0x204>
    237c:	89 b7       	in	r24, 0x39	; 57
    237e:	84 60       	ori	r24, 0x04	; 4
    2380:	89 bf       	out	0x39, r24	; 57
    2382:	0a c0       	rjmp	.+20     	; 0x2398 <timer_init+0x218>
    2384:	89 b7       	in	r24, 0x39	; 57
    2386:	80 61       	ori	r24, 0x10	; 16
    2388:	89 bf       	out	0x39, r24	; 57
    238a:	06 c0       	rjmp	.+12     	; 0x2398 <timer_init+0x218>
    238c:	89 b7       	in	r24, 0x39	; 57
    238e:	8b 7f       	andi	r24, 0xFB	; 251
    2390:	89 bf       	out	0x39, r24	; 57
    2392:	89 b7       	in	r24, 0x39	; 57
    2394:	8f 7e       	andi	r24, 0xEF	; 239
    2396:	89 bf       	out	0x39, r24	; 57
    2398:	81 81       	ldd	r24, Z+1	; 0x01
    239a:	81 11       	cpse	r24, r1
    239c:	08 c0       	rjmp	.+16     	; 0x23ae <timer_init+0x22e>
    239e:	85 81       	ldd	r24, Z+5	; 0x05
    23a0:	96 81       	ldd	r25, Z+6	; 0x06
    23a2:	9d bd       	out	0x2d, r25	; 45
    23a4:	8c bd       	out	0x2c, r24	; 44
    23a6:	1b bc       	out	0x2b, r1	; 43
    23a8:	1a bc       	out	0x2a, r1	; 42
    23aa:	86 e0       	ldi	r24, 0x06	; 6
    23ac:	9f c0       	rjmp	.+318    	; 0x24ec <timer_init+0x36c>
    23ae:	1d bc       	out	0x2d, r1	; 45
    23b0:	1c bc       	out	0x2c, r1	; 44
    23b2:	87 81       	ldd	r24, Z+7	; 0x07
    23b4:	90 85       	ldd	r25, Z+8	; 0x08
    23b6:	9b bd       	out	0x2b, r25	; 43
    23b8:	8a bd       	out	0x2a, r24	; 42
    23ba:	86 e0       	ldi	r24, 0x06	; 6
    23bc:	97 c0       	rjmp	.+302    	; 0x24ec <timer_init+0x36c>
    23be:	85 b5       	in	r24, 0x25	; 37
    23c0:	80 68       	ori	r24, 0x80	; 128
    23c2:	85 bd       	out	0x25, r24	; 37
    23c4:	81 81       	ldd	r24, Z+1	; 0x01
    23c6:	88 23       	and	r24, r24
    23c8:	19 f0       	breq	.+6      	; 0x23d0 <timer_init+0x250>
    23ca:	81 30       	cpi	r24, 0x01	; 1
    23cc:	41 f0       	breq	.+16     	; 0x23de <timer_init+0x25e>
    23ce:	0d c0       	rjmp	.+26     	; 0x23ea <timer_init+0x26a>
    23d0:	85 b5       	in	r24, 0x25	; 37
    23d2:	8f 7b       	andi	r24, 0xBF	; 191
    23d4:	85 bd       	out	0x25, r24	; 37
    23d6:	85 b5       	in	r24, 0x25	; 37
    23d8:	87 7f       	andi	r24, 0xF7	; 247
    23da:	85 bd       	out	0x25, r24	; 37
    23dc:	06 c0       	rjmp	.+12     	; 0x23ea <timer_init+0x26a>
    23de:	85 b5       	in	r24, 0x25	; 37
    23e0:	8f 7b       	andi	r24, 0xBF	; 191
    23e2:	85 bd       	out	0x25, r24	; 37
    23e4:	85 b5       	in	r24, 0x25	; 37
    23e6:	88 60       	ori	r24, 0x08	; 8
    23e8:	85 bd       	out	0x25, r24	; 37
    23ea:	83 81       	ldd	r24, Z+3	; 0x03
    23ec:	81 30       	cpi	r24, 0x01	; 1
    23ee:	69 f0       	breq	.+26     	; 0x240a <timer_init+0x28a>
    23f0:	28 f0       	brcs	.+10     	; 0x23fc <timer_init+0x27c>
    23f2:	82 30       	cpi	r24, 0x02	; 2
    23f4:	a1 f0       	breq	.+40     	; 0x241e <timer_init+0x29e>
    23f6:	83 30       	cpi	r24, 0x03	; 3
    23f8:	e1 f0       	breq	.+56     	; 0x2432 <timer_init+0x2b2>
    23fa:	24 c0       	rjmp	.+72     	; 0x2444 <timer_init+0x2c4>
    23fc:	85 b5       	in	r24, 0x25	; 37
    23fe:	8f 7e       	andi	r24, 0xEF	; 239
    2400:	85 bd       	out	0x25, r24	; 37
    2402:	85 b5       	in	r24, 0x25	; 37
    2404:	8f 7d       	andi	r24, 0xDF	; 223
    2406:	85 bd       	out	0x25, r24	; 37
    2408:	1d c0       	rjmp	.+58     	; 0x2444 <timer_init+0x2c4>
    240a:	81 b3       	in	r24, 0x11	; 17
    240c:	80 68       	ori	r24, 0x80	; 128
    240e:	81 bb       	out	0x11, r24	; 17
    2410:	85 b5       	in	r24, 0x25	; 37
    2412:	80 61       	ori	r24, 0x10	; 16
    2414:	85 bd       	out	0x25, r24	; 37
    2416:	85 b5       	in	r24, 0x25	; 37
    2418:	8f 7d       	andi	r24, 0xDF	; 223
    241a:	85 bd       	out	0x25, r24	; 37
    241c:	13 c0       	rjmp	.+38     	; 0x2444 <timer_init+0x2c4>
    241e:	81 b3       	in	r24, 0x11	; 17
    2420:	80 68       	ori	r24, 0x80	; 128
    2422:	81 bb       	out	0x11, r24	; 17
    2424:	85 b5       	in	r24, 0x25	; 37
    2426:	8f 7e       	andi	r24, 0xEF	; 239
    2428:	85 bd       	out	0x25, r24	; 37
    242a:	85 b5       	in	r24, 0x25	; 37
    242c:	80 62       	ori	r24, 0x20	; 32
    242e:	85 bd       	out	0x25, r24	; 37
    2430:	09 c0       	rjmp	.+18     	; 0x2444 <timer_init+0x2c4>
    2432:	81 b3       	in	r24, 0x11	; 17
    2434:	80 68       	ori	r24, 0x80	; 128
    2436:	81 bb       	out	0x11, r24	; 17
    2438:	85 b5       	in	r24, 0x25	; 37
    243a:	80 61       	ori	r24, 0x10	; 16
    243c:	85 bd       	out	0x25, r24	; 37
    243e:	85 b5       	in	r24, 0x25	; 37
    2440:	80 62       	ori	r24, 0x20	; 32
    2442:	85 bd       	out	0x25, r24	; 37
    2444:	84 81       	ldd	r24, Z+4	; 0x04
    2446:	98 ef       	ldi	r25, 0xF8	; 248
    2448:	98 0f       	add	r25, r24
    244a:	92 30       	cpi	r25, 0x02	; 2
    244c:	08 f4       	brcc	.+2      	; 0x2450 <timer_init+0x2d0>
    244e:	49 c0       	rjmp	.+146    	; 0x24e2 <timer_init+0x362>
    2450:	a0 81       	ld	r26, Z
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	a1 58       	subi	r26, 0x81	; 129
    2456:	bf 4f       	sbci	r27, 0xFF	; 255
    2458:	8c 93       	st	X, r24
    245a:	82 81       	ldd	r24, Z+2	; 0x02
    245c:	81 11       	cpse	r24, r1
    245e:	0b c0       	rjmp	.+22     	; 0x2476 <timer_init+0x2f6>
    2460:	81 81       	ldd	r24, Z+1	; 0x01
    2462:	81 11       	cpse	r24, r1
    2464:	04 c0       	rjmp	.+8      	; 0x246e <timer_init+0x2ee>
    2466:	89 b7       	in	r24, 0x39	; 57
    2468:	80 64       	ori	r24, 0x40	; 64
    246a:	89 bf       	out	0x39, r24	; 57
    246c:	0a c0       	rjmp	.+20     	; 0x2482 <timer_init+0x302>
    246e:	89 b7       	in	r24, 0x39	; 57
    2470:	80 68       	ori	r24, 0x80	; 128
    2472:	89 bf       	out	0x39, r24	; 57
    2474:	06 c0       	rjmp	.+12     	; 0x2482 <timer_init+0x302>
    2476:	89 b7       	in	r24, 0x39	; 57
    2478:	8f 7b       	andi	r24, 0xBF	; 191
    247a:	89 bf       	out	0x39, r24	; 57
    247c:	89 b7       	in	r24, 0x39	; 57
    247e:	8f 77       	andi	r24, 0x7F	; 127
    2480:	89 bf       	out	0x39, r24	; 57
    2482:	85 81       	ldd	r24, Z+5	; 0x05
    2484:	96 81       	ldd	r25, Z+6	; 0x06
    2486:	8f 3f       	cpi	r24, 0xFF	; 255
    2488:	91 05       	cpc	r25, r1
    248a:	09 f0       	breq	.+2      	; 0x248e <timer_init+0x30e>
    248c:	60 f5       	brcc	.+88     	; 0x24e6 <timer_init+0x366>
    248e:	27 81       	ldd	r18, Z+7	; 0x07
    2490:	30 85       	ldd	r19, Z+8	; 0x08
    2492:	2f 3f       	cpi	r18, 0xFF	; 255
    2494:	31 05       	cpc	r19, r1
    2496:	09 f0       	breq	.+2      	; 0x249a <timer_init+0x31a>
    2498:	40 f5       	brcc	.+80     	; 0x24ea <timer_init+0x36a>
    249a:	21 81       	ldd	r18, Z+1	; 0x01
    249c:	21 11       	cpse	r18, r1
    249e:	04 c0       	rjmp	.+8      	; 0x24a8 <timer_init+0x328>
    24a0:	84 bd       	out	0x24, r24	; 36
    24a2:	13 bc       	out	0x23, r1	; 35
    24a4:	86 e0       	ldi	r24, 0x06	; 6
    24a6:	22 c0       	rjmp	.+68     	; 0x24ec <timer_init+0x36c>
    24a8:	14 bc       	out	0x24, r1	; 36
    24aa:	87 81       	ldd	r24, Z+7	; 0x07
    24ac:	83 bd       	out	0x23, r24	; 35
    24ae:	86 e0       	ldi	r24, 0x06	; 6
    24b0:	1d c0       	rjmp	.+58     	; 0x24ec <timer_init+0x36c>
    24b2:	85 e0       	ldi	r24, 0x05	; 5
    24b4:	1b c0       	rjmp	.+54     	; 0x24ec <timer_init+0x36c>
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	19 c0       	rjmp	.+50     	; 0x24ec <timer_init+0x36c>
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	17 c0       	rjmp	.+46     	; 0x24ec <timer_init+0x36c>
    24be:	82 e0       	ldi	r24, 0x02	; 2
    24c0:	15 c0       	rjmp	.+42     	; 0x24ec <timer_init+0x36c>
    24c2:	83 e0       	ldi	r24, 0x03	; 3
    24c4:	13 c0       	rjmp	.+38     	; 0x24ec <timer_init+0x36c>
    24c6:	84 e0       	ldi	r24, 0x04	; 4
    24c8:	11 c0       	rjmp	.+34     	; 0x24ec <timer_init+0x36c>
    24ca:	84 e0       	ldi	r24, 0x04	; 4
    24cc:	0f c0       	rjmp	.+30     	; 0x24ec <timer_init+0x36c>
    24ce:	84 e0       	ldi	r24, 0x04	; 4
    24d0:	0d c0       	rjmp	.+26     	; 0x24ec <timer_init+0x36c>
    24d2:	85 e0       	ldi	r24, 0x05	; 5
    24d4:	0b c0       	rjmp	.+22     	; 0x24ec <timer_init+0x36c>
    24d6:	85 e0       	ldi	r24, 0x05	; 5
    24d8:	09 c0       	rjmp	.+18     	; 0x24ec <timer_init+0x36c>
    24da:	84 e0       	ldi	r24, 0x04	; 4
    24dc:	07 c0       	rjmp	.+14     	; 0x24ec <timer_init+0x36c>
    24de:	84 e0       	ldi	r24, 0x04	; 4
    24e0:	05 c0       	rjmp	.+10     	; 0x24ec <timer_init+0x36c>
    24e2:	84 e0       	ldi	r24, 0x04	; 4
    24e4:	03 c0       	rjmp	.+6      	; 0x24ec <timer_init+0x36c>
    24e6:	85 e0       	ldi	r24, 0x05	; 5
    24e8:	01 c0       	rjmp	.+2      	; 0x24ec <timer_init+0x36c>
    24ea:	85 e0       	ldi	r24, 0x05	; 5
    24ec:	86 30       	cpi	r24, 0x06	; 6
    24ee:	31 f4       	brne	.+12     	; 0x24fc <timer_init+0x37c>
    24f0:	e0 81       	ld	r30, Z
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	ec 53       	subi	r30, 0x3C	; 60
    24f6:	fe 4f       	sbci	r31, 0xFE	; 254
    24f8:	91 e0       	ldi	r25, 0x01	; 1
    24fa:	90 83       	st	Z, r25
    24fc:	08 95       	ret

000024fe <timer_setInitialValue>:
    24fe:	83 30       	cpi	r24, 0x03	; 3
    2500:	f8 f4       	brcc	.+62     	; 0x2540 <timer_setInitialValue+0x42>
    2502:	e8 2f       	mov	r30, r24
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	ec 53       	subi	r30, 0x3C	; 60
    2508:	fe 4f       	sbci	r31, 0xFE	; 254
    250a:	90 81       	ld	r25, Z
    250c:	91 30       	cpi	r25, 0x01	; 1
    250e:	d1 f4       	brne	.+52     	; 0x2544 <timer_setInitialValue+0x46>
    2510:	81 30       	cpi	r24, 0x01	; 1
    2512:	59 f0       	breq	.+22     	; 0x252a <timer_setInitialValue+0x2c>
    2514:	18 f0       	brcs	.+6      	; 0x251c <timer_setInitialValue+0x1e>
    2516:	82 30       	cpi	r24, 0x02	; 2
    2518:	61 f0       	breq	.+24     	; 0x2532 <timer_setInitialValue+0x34>
    251a:	16 c0       	rjmp	.+44     	; 0x2548 <timer_setInitialValue+0x4a>
    251c:	6f 3f       	cpi	r22, 0xFF	; 255
    251e:	71 05       	cpc	r23, r1
    2520:	09 f0       	breq	.+2      	; 0x2524 <timer_setInitialValue+0x26>
    2522:	a0 f4       	brcc	.+40     	; 0x254c <timer_setInitialValue+0x4e>
    2524:	62 bf       	out	0x32, r22	; 50
    2526:	86 e0       	ldi	r24, 0x06	; 6
    2528:	08 95       	ret
    252a:	7d bd       	out	0x2d, r23	; 45
    252c:	6c bd       	out	0x2c, r22	; 44
    252e:	86 e0       	ldi	r24, 0x06	; 6
    2530:	08 95       	ret
    2532:	6f 3f       	cpi	r22, 0xFF	; 255
    2534:	71 05       	cpc	r23, r1
    2536:	09 f0       	breq	.+2      	; 0x253a <timer_setInitialValue+0x3c>
    2538:	58 f4       	brcc	.+22     	; 0x2550 <timer_setInitialValue+0x52>
    253a:	64 bd       	out	0x24, r22	; 36
    253c:	86 e0       	ldi	r24, 0x06	; 6
    253e:	08 95       	ret
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	08 95       	ret
    2544:	88 e0       	ldi	r24, 0x08	; 8
    2546:	08 95       	ret
    2548:	86 e0       	ldi	r24, 0x06	; 6
    254a:	08 95       	ret
    254c:	85 e0       	ldi	r24, 0x05	; 5
    254e:	08 95       	ret
    2550:	85 e0       	ldi	r24, 0x05	; 5
    2552:	08 95       	ret

00002554 <timer_setClock>:
    2554:	83 30       	cpi	r24, 0x03	; 3
    2556:	70 f5       	brcc	.+92     	; 0x25b4 <timer_setClock+0x60>
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	f9 01       	movw	r30, r18
    255e:	ec 53       	subi	r30, 0x3C	; 60
    2560:	fe 4f       	sbci	r31, 0xFE	; 254
    2562:	90 81       	ld	r25, Z
    2564:	91 30       	cpi	r25, 0x01	; 1
    2566:	41 f5       	brne	.+80     	; 0x25b8 <timer_setClock+0x64>
    2568:	6a 30       	cpi	r22, 0x0A	; 10
    256a:	40 f5       	brcc	.+80     	; 0x25bc <timer_setClock+0x68>
    256c:	81 30       	cpi	r24, 0x01	; 1
    256e:	71 f0       	breq	.+28     	; 0x258c <timer_setClock+0x38>
    2570:	18 f0       	brcs	.+6      	; 0x2578 <timer_setClock+0x24>
    2572:	82 30       	cpi	r24, 0x02	; 2
    2574:	a9 f0       	breq	.+42     	; 0x25a0 <timer_setClock+0x4c>
    2576:	24 c0       	rjmp	.+72     	; 0x25c0 <timer_setClock+0x6c>
    2578:	63 30       	cpi	r22, 0x03	; 3
    257a:	21 f1       	breq	.+72     	; 0x25c4 <timer_setClock+0x70>
    257c:	65 30       	cpi	r22, 0x05	; 5
    257e:	21 f1       	breq	.+72     	; 0x25c8 <timer_setClock+0x74>
    2580:	f9 01       	movw	r30, r18
    2582:	e1 58       	subi	r30, 0x81	; 129
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	60 83       	st	Z, r22
    2588:	86 e0       	ldi	r24, 0x06	; 6
    258a:	08 95       	ret
    258c:	63 30       	cpi	r22, 0x03	; 3
    258e:	f1 f0       	breq	.+60     	; 0x25cc <timer_setClock+0x78>
    2590:	65 30       	cpi	r22, 0x05	; 5
    2592:	f1 f0       	breq	.+60     	; 0x25d0 <timer_setClock+0x7c>
    2594:	f9 01       	movw	r30, r18
    2596:	e1 58       	subi	r30, 0x81	; 129
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	60 83       	st	Z, r22
    259c:	86 e0       	ldi	r24, 0x06	; 6
    259e:	08 95       	ret
    25a0:	88 ef       	ldi	r24, 0xF8	; 248
    25a2:	86 0f       	add	r24, r22
    25a4:	82 30       	cpi	r24, 0x02	; 2
    25a6:	b0 f0       	brcs	.+44     	; 0x25d4 <timer_setClock+0x80>
    25a8:	f9 01       	movw	r30, r18
    25aa:	e1 58       	subi	r30, 0x81	; 129
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	60 83       	st	Z, r22
    25b0:	86 e0       	ldi	r24, 0x06	; 6
    25b2:	08 95       	ret
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	08 95       	ret
    25b8:	88 e0       	ldi	r24, 0x08	; 8
    25ba:	08 95       	ret
    25bc:	84 e0       	ldi	r24, 0x04	; 4
    25be:	08 95       	ret
    25c0:	86 e0       	ldi	r24, 0x06	; 6
    25c2:	08 95       	ret
    25c4:	84 e0       	ldi	r24, 0x04	; 4
    25c6:	08 95       	ret
    25c8:	84 e0       	ldi	r24, 0x04	; 4
    25ca:	08 95       	ret
    25cc:	84 e0       	ldi	r24, 0x04	; 4
    25ce:	08 95       	ret
    25d0:	84 e0       	ldi	r24, 0x04	; 4
    25d2:	08 95       	ret
    25d4:	84 e0       	ldi	r24, 0x04	; 4
    25d6:	08 95       	ret

000025d8 <timer_setCallBack>:
    25d8:	83 30       	cpi	r24, 0x03	; 3
    25da:	d8 f5       	brcc	.+118    	; 0x2652 <timer_setCallBack+0x7a>
    25dc:	42 30       	cpi	r20, 0x02	; 2
    25de:	d8 f5       	brcc	.+118    	; 0x2656 <timer_setCallBack+0x7e>
    25e0:	61 15       	cp	r22, r1
    25e2:	71 05       	cpc	r23, r1
    25e4:	d1 f1       	breq	.+116    	; 0x265a <timer_setCallBack+0x82>
    25e6:	81 30       	cpi	r24, 0x01	; 1
    25e8:	a1 f0       	breq	.+40     	; 0x2612 <timer_setCallBack+0x3a>
    25ea:	18 f0       	brcs	.+6      	; 0x25f2 <timer_setCallBack+0x1a>
    25ec:	82 30       	cpi	r24, 0x02	; 2
    25ee:	09 f1       	breq	.+66     	; 0x2632 <timer_setCallBack+0x5a>
    25f0:	36 c0       	rjmp	.+108    	; 0x265e <timer_setCallBack+0x86>
    25f2:	41 11       	cpse	r20, r1
    25f4:	06 c0       	rjmp	.+12     	; 0x2602 <timer_setCallBack+0x2a>
    25f6:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <gl_callBackPtr_timer0_OVF+0x1>
    25fa:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <gl_callBackPtr_timer0_OVF>
    25fe:	86 e0       	ldi	r24, 0x06	; 6
    2600:	08 95       	ret
    2602:	41 30       	cpi	r20, 0x01	; 1
    2604:	71 f5       	brne	.+92     	; 0x2662 <timer_setCallBack+0x8a>
    2606:	70 93 bd 01 	sts	0x01BD, r23	; 0x8001bd <gl_callBackPtr_timer0_COMP+0x1>
    260a:	60 93 bc 01 	sts	0x01BC, r22	; 0x8001bc <gl_callBackPtr_timer0_COMP>
    260e:	86 e0       	ldi	r24, 0x06	; 6
    2610:	08 95       	ret
    2612:	41 11       	cpse	r20, r1
    2614:	06 c0       	rjmp	.+12     	; 0x2622 <timer_setCallBack+0x4a>
    2616:	70 93 c1 01 	sts	0x01C1, r23	; 0x8001c1 <gl_callBackPtr_timer1_OVF+0x1>
    261a:	60 93 c0 01 	sts	0x01C0, r22	; 0x8001c0 <gl_callBackPtr_timer1_OVF>
    261e:	86 e0       	ldi	r24, 0x06	; 6
    2620:	08 95       	ret
    2622:	41 30       	cpi	r20, 0x01	; 1
    2624:	01 f5       	brne	.+64     	; 0x2666 <timer_setCallBack+0x8e>
    2626:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <gl_callBackPtr_timer1_COMP+0x1>
    262a:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <gl_callBackPtr_timer1_COMP>
    262e:	86 e0       	ldi	r24, 0x06	; 6
    2630:	08 95       	ret
    2632:	41 11       	cpse	r20, r1
    2634:	06 c0       	rjmp	.+12     	; 0x2642 <timer_setCallBack+0x6a>
    2636:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <gl_callBackPtr_timer2_OVF+0x1>
    263a:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <gl_callBackPtr_timer2_OVF>
    263e:	86 e0       	ldi	r24, 0x06	; 6
    2640:	08 95       	ret
    2642:	41 30       	cpi	r20, 0x01	; 1
    2644:	91 f4       	brne	.+36     	; 0x266a <timer_setCallBack+0x92>
    2646:	70 93 b9 01 	sts	0x01B9, r23	; 0x8001b9 <gl_callBackPtr_timer2_COMP+0x1>
    264a:	60 93 b8 01 	sts	0x01B8, r22	; 0x8001b8 <gl_callBackPtr_timer2_COMP>
    264e:	86 e0       	ldi	r24, 0x06	; 6
    2650:	08 95       	ret
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	08 95       	ret
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	08 95       	ret
    265a:	85 e0       	ldi	r24, 0x05	; 5
    265c:	08 95       	ret
    265e:	86 e0       	ldi	r24, 0x06	; 6
    2660:	08 95       	ret
    2662:	86 e0       	ldi	r24, 0x06	; 6
    2664:	08 95       	ret
    2666:	86 e0       	ldi	r24, 0x06	; 6
    2668:	08 95       	ret
    266a:	86 e0       	ldi	r24, 0x06	; 6
    266c:	08 95       	ret

0000266e <timer_start>:
    266e:	83 30       	cpi	r24, 0x03	; 3
    2670:	08 f0       	brcs	.+2      	; 0x2674 <timer_start+0x6>
    2672:	d4 c0       	rjmp	.+424    	; 0x281c <timer_start+0x1ae>
    2674:	e8 2f       	mov	r30, r24
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	ec 53       	subi	r30, 0x3C	; 60
    267a:	fe 4f       	sbci	r31, 0xFE	; 254
    267c:	90 81       	ld	r25, Z
    267e:	91 30       	cpi	r25, 0x01	; 1
    2680:	09 f0       	breq	.+2      	; 0x2684 <timer_start+0x16>
    2682:	ce c0       	rjmp	.+412    	; 0x2820 <timer_start+0x1b2>
    2684:	81 30       	cpi	r24, 0x01	; 1
    2686:	09 f4       	brne	.+2      	; 0x268a <timer_start+0x1c>
    2688:	48 c0       	rjmp	.+144    	; 0x271a <timer_start+0xac>
    268a:	20 f0       	brcs	.+8      	; 0x2694 <timer_start+0x26>
    268c:	82 30       	cpi	r24, 0x02	; 2
    268e:	09 f4       	brne	.+2      	; 0x2692 <timer_start+0x24>
    2690:	87 c0       	rjmp	.+270    	; 0x27a0 <timer_start+0x132>
    2692:	c8 c0       	rjmp	.+400    	; 0x2824 <timer_start+0x1b6>
    2694:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <gl_enu_tmr_clk>
    2698:	8a 30       	cpi	r24, 0x0A	; 10
    269a:	08 f0       	brcs	.+2      	; 0x269e <timer_start+0x30>
    269c:	c5 c0       	rjmp	.+394    	; 0x2828 <timer_start+0x1ba>
    269e:	83 30       	cpi	r24, 0x03	; 3
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <timer_start+0x36>
    26a2:	c4 c0       	rjmp	.+392    	; 0x282c <timer_start+0x1be>
    26a4:	85 30       	cpi	r24, 0x05	; 5
    26a6:	09 f4       	brne	.+2      	; 0x26aa <timer_start+0x3c>
    26a8:	c3 c0       	rjmp	.+390    	; 0x2830 <timer_start+0x1c2>
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	8a 30       	cpi	r24, 0x0A	; 10
    26ae:	91 05       	cpc	r25, r1
    26b0:	08 f0       	brcs	.+2      	; 0x26b4 <timer_start+0x46>
    26b2:	c0 c0       	rjmp	.+384    	; 0x2834 <timer_start+0x1c6>
    26b4:	fc 01       	movw	r30, r24
    26b6:	ef 5c       	subi	r30, 0xCF	; 207
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__tablejump2__>
    26be:	83 b7       	in	r24, 0x33	; 51
    26c0:	88 7f       	andi	r24, 0xF8	; 248
    26c2:	83 bf       	out	0x33, r24	; 51
    26c4:	86 e0       	ldi	r24, 0x06	; 6
    26c6:	08 95       	ret
    26c8:	83 b7       	in	r24, 0x33	; 51
    26ca:	88 7f       	andi	r24, 0xF8	; 248
    26cc:	81 60       	ori	r24, 0x01	; 1
    26ce:	83 bf       	out	0x33, r24	; 51
    26d0:	86 e0       	ldi	r24, 0x06	; 6
    26d2:	08 95       	ret
    26d4:	83 b7       	in	r24, 0x33	; 51
    26d6:	88 7f       	andi	r24, 0xF8	; 248
    26d8:	82 60       	ori	r24, 0x02	; 2
    26da:	83 bf       	out	0x33, r24	; 51
    26dc:	86 e0       	ldi	r24, 0x06	; 6
    26de:	08 95       	ret
    26e0:	83 b7       	in	r24, 0x33	; 51
    26e2:	88 7f       	andi	r24, 0xF8	; 248
    26e4:	83 60       	ori	r24, 0x03	; 3
    26e6:	83 bf       	out	0x33, r24	; 51
    26e8:	86 e0       	ldi	r24, 0x06	; 6
    26ea:	08 95       	ret
    26ec:	83 b7       	in	r24, 0x33	; 51
    26ee:	88 7f       	andi	r24, 0xF8	; 248
    26f0:	84 60       	ori	r24, 0x04	; 4
    26f2:	83 bf       	out	0x33, r24	; 51
    26f4:	86 e0       	ldi	r24, 0x06	; 6
    26f6:	08 95       	ret
    26f8:	83 b7       	in	r24, 0x33	; 51
    26fa:	88 7f       	andi	r24, 0xF8	; 248
    26fc:	85 60       	ori	r24, 0x05	; 5
    26fe:	83 bf       	out	0x33, r24	; 51
    2700:	86 e0       	ldi	r24, 0x06	; 6
    2702:	08 95       	ret
    2704:	83 b7       	in	r24, 0x33	; 51
    2706:	88 7f       	andi	r24, 0xF8	; 248
    2708:	86 60       	ori	r24, 0x06	; 6
    270a:	83 bf       	out	0x33, r24	; 51
    270c:	86 e0       	ldi	r24, 0x06	; 6
    270e:	08 95       	ret
    2710:	83 b7       	in	r24, 0x33	; 51
    2712:	87 60       	ori	r24, 0x07	; 7
    2714:	83 bf       	out	0x33, r24	; 51
    2716:	86 e0       	ldi	r24, 0x06	; 6
    2718:	08 95       	ret
    271a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <gl_enu_tmr_clk+0x1>
    271e:	8a 30       	cpi	r24, 0x0A	; 10
    2720:	08 f0       	brcs	.+2      	; 0x2724 <timer_start+0xb6>
    2722:	8a c0       	rjmp	.+276    	; 0x2838 <timer_start+0x1ca>
    2724:	83 30       	cpi	r24, 0x03	; 3
    2726:	09 f4       	brne	.+2      	; 0x272a <timer_start+0xbc>
    2728:	89 c0       	rjmp	.+274    	; 0x283c <timer_start+0x1ce>
    272a:	85 30       	cpi	r24, 0x05	; 5
    272c:	09 f4       	brne	.+2      	; 0x2730 <timer_start+0xc2>
    272e:	88 c0       	rjmp	.+272    	; 0x2840 <timer_start+0x1d2>
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	8a 30       	cpi	r24, 0x0A	; 10
    2734:	91 05       	cpc	r25, r1
    2736:	08 f0       	brcs	.+2      	; 0x273a <timer_start+0xcc>
    2738:	85 c0       	rjmp	.+266    	; 0x2844 <timer_start+0x1d6>
    273a:	fc 01       	movw	r30, r24
    273c:	e5 5c       	subi	r30, 0xC5	; 197
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__tablejump2__>
    2744:	8e b5       	in	r24, 0x2e	; 46
    2746:	88 7f       	andi	r24, 0xF8	; 248
    2748:	8e bd       	out	0x2e, r24	; 46
    274a:	86 e0       	ldi	r24, 0x06	; 6
    274c:	08 95       	ret
    274e:	8e b5       	in	r24, 0x2e	; 46
    2750:	88 7f       	andi	r24, 0xF8	; 248
    2752:	81 60       	ori	r24, 0x01	; 1
    2754:	8e bd       	out	0x2e, r24	; 46
    2756:	86 e0       	ldi	r24, 0x06	; 6
    2758:	08 95       	ret
    275a:	8e b5       	in	r24, 0x2e	; 46
    275c:	88 7f       	andi	r24, 0xF8	; 248
    275e:	82 60       	ori	r24, 0x02	; 2
    2760:	8e bd       	out	0x2e, r24	; 46
    2762:	86 e0       	ldi	r24, 0x06	; 6
    2764:	08 95       	ret
    2766:	8e b5       	in	r24, 0x2e	; 46
    2768:	88 7f       	andi	r24, 0xF8	; 248
    276a:	83 60       	ori	r24, 0x03	; 3
    276c:	8e bd       	out	0x2e, r24	; 46
    276e:	86 e0       	ldi	r24, 0x06	; 6
    2770:	08 95       	ret
    2772:	8e b5       	in	r24, 0x2e	; 46
    2774:	88 7f       	andi	r24, 0xF8	; 248
    2776:	84 60       	ori	r24, 0x04	; 4
    2778:	8e bd       	out	0x2e, r24	; 46
    277a:	86 e0       	ldi	r24, 0x06	; 6
    277c:	08 95       	ret
    277e:	8e b5       	in	r24, 0x2e	; 46
    2780:	88 7f       	andi	r24, 0xF8	; 248
    2782:	85 60       	ori	r24, 0x05	; 5
    2784:	8e bd       	out	0x2e, r24	; 46
    2786:	86 e0       	ldi	r24, 0x06	; 6
    2788:	08 95       	ret
    278a:	8e b5       	in	r24, 0x2e	; 46
    278c:	88 7f       	andi	r24, 0xF8	; 248
    278e:	86 60       	ori	r24, 0x06	; 6
    2790:	8e bd       	out	0x2e, r24	; 46
    2792:	86 e0       	ldi	r24, 0x06	; 6
    2794:	08 95       	ret
    2796:	8e b5       	in	r24, 0x2e	; 46
    2798:	87 60       	ori	r24, 0x07	; 7
    279a:	8e bd       	out	0x2e, r24	; 46
    279c:	86 e0       	ldi	r24, 0x06	; 6
    279e:	08 95       	ret
    27a0:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <gl_enu_tmr_clk+0x2>
    27a4:	e8 30       	cpi	r30, 0x08	; 8
    27a6:	08 f0       	brcs	.+2      	; 0x27aa <timer_start+0x13c>
    27a8:	4f c0       	rjmp	.+158    	; 0x2848 <timer_start+0x1da>
    27aa:	8e 2f       	mov	r24, r30
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	88 30       	cpi	r24, 0x08	; 8
    27b0:	91 05       	cpc	r25, r1
    27b2:	08 f0       	brcs	.+2      	; 0x27b6 <timer_start+0x148>
    27b4:	4b c0       	rjmp	.+150    	; 0x284c <timer_start+0x1de>
    27b6:	fc 01       	movw	r30, r24
    27b8:	eb 5b       	subi	r30, 0xBB	; 187
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__tablejump2__>
    27c0:	85 b5       	in	r24, 0x25	; 37
    27c2:	88 7f       	andi	r24, 0xF8	; 248
    27c4:	85 bd       	out	0x25, r24	; 37
    27c6:	86 e0       	ldi	r24, 0x06	; 6
    27c8:	08 95       	ret
    27ca:	85 b5       	in	r24, 0x25	; 37
    27cc:	88 7f       	andi	r24, 0xF8	; 248
    27ce:	81 60       	ori	r24, 0x01	; 1
    27d0:	85 bd       	out	0x25, r24	; 37
    27d2:	86 e0       	ldi	r24, 0x06	; 6
    27d4:	08 95       	ret
    27d6:	85 b5       	in	r24, 0x25	; 37
    27d8:	88 7f       	andi	r24, 0xF8	; 248
    27da:	82 60       	ori	r24, 0x02	; 2
    27dc:	85 bd       	out	0x25, r24	; 37
    27de:	86 e0       	ldi	r24, 0x06	; 6
    27e0:	08 95       	ret
    27e2:	85 b5       	in	r24, 0x25	; 37
    27e4:	88 7f       	andi	r24, 0xF8	; 248
    27e6:	83 60       	ori	r24, 0x03	; 3
    27e8:	85 bd       	out	0x25, r24	; 37
    27ea:	86 e0       	ldi	r24, 0x06	; 6
    27ec:	08 95       	ret
    27ee:	85 b5       	in	r24, 0x25	; 37
    27f0:	88 7f       	andi	r24, 0xF8	; 248
    27f2:	84 60       	ori	r24, 0x04	; 4
    27f4:	85 bd       	out	0x25, r24	; 37
    27f6:	86 e0       	ldi	r24, 0x06	; 6
    27f8:	08 95       	ret
    27fa:	85 b5       	in	r24, 0x25	; 37
    27fc:	88 7f       	andi	r24, 0xF8	; 248
    27fe:	85 60       	ori	r24, 0x05	; 5
    2800:	85 bd       	out	0x25, r24	; 37
    2802:	86 e0       	ldi	r24, 0x06	; 6
    2804:	08 95       	ret
    2806:	85 b5       	in	r24, 0x25	; 37
    2808:	88 7f       	andi	r24, 0xF8	; 248
    280a:	86 60       	ori	r24, 0x06	; 6
    280c:	85 bd       	out	0x25, r24	; 37
    280e:	86 e0       	ldi	r24, 0x06	; 6
    2810:	08 95       	ret
    2812:	85 b5       	in	r24, 0x25	; 37
    2814:	87 60       	ori	r24, 0x07	; 7
    2816:	85 bd       	out	0x25, r24	; 37
    2818:	86 e0       	ldi	r24, 0x06	; 6
    281a:	08 95       	ret
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	08 95       	ret
    2820:	88 e0       	ldi	r24, 0x08	; 8
    2822:	08 95       	ret
    2824:	86 e0       	ldi	r24, 0x06	; 6
    2826:	08 95       	ret
    2828:	84 e0       	ldi	r24, 0x04	; 4
    282a:	08 95       	ret
    282c:	84 e0       	ldi	r24, 0x04	; 4
    282e:	08 95       	ret
    2830:	84 e0       	ldi	r24, 0x04	; 4
    2832:	08 95       	ret
    2834:	86 e0       	ldi	r24, 0x06	; 6
    2836:	08 95       	ret
    2838:	84 e0       	ldi	r24, 0x04	; 4
    283a:	08 95       	ret
    283c:	84 e0       	ldi	r24, 0x04	; 4
    283e:	08 95       	ret
    2840:	84 e0       	ldi	r24, 0x04	; 4
    2842:	08 95       	ret
    2844:	86 e0       	ldi	r24, 0x06	; 6
    2846:	08 95       	ret
    2848:	84 e0       	ldi	r24, 0x04	; 4
    284a:	08 95       	ret
    284c:	86 e0       	ldi	r24, 0x06	; 6
    284e:	08 95       	ret

00002850 <timer_stop>:
    2850:	83 30       	cpi	r24, 0x03	; 3
    2852:	e0 f4       	brcc	.+56     	; 0x288c <timer_stop+0x3c>
    2854:	e8 2f       	mov	r30, r24
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	ec 53       	subi	r30, 0x3C	; 60
    285a:	fe 4f       	sbci	r31, 0xFE	; 254
    285c:	90 81       	ld	r25, Z
    285e:	91 30       	cpi	r25, 0x01	; 1
    2860:	b9 f4       	brne	.+46     	; 0x2890 <timer_stop+0x40>
    2862:	81 30       	cpi	r24, 0x01	; 1
    2864:	49 f0       	breq	.+18     	; 0x2878 <timer_stop+0x28>
    2866:	18 f0       	brcs	.+6      	; 0x286e <timer_stop+0x1e>
    2868:	82 30       	cpi	r24, 0x02	; 2
    286a:	59 f0       	breq	.+22     	; 0x2882 <timer_stop+0x32>
    286c:	13 c0       	rjmp	.+38     	; 0x2894 <timer_stop+0x44>
    286e:	83 b7       	in	r24, 0x33	; 51
    2870:	88 7f       	andi	r24, 0xF8	; 248
    2872:	83 bf       	out	0x33, r24	; 51
    2874:	86 e0       	ldi	r24, 0x06	; 6
    2876:	08 95       	ret
    2878:	8e b5       	in	r24, 0x2e	; 46
    287a:	88 7f       	andi	r24, 0xF8	; 248
    287c:	8e bd       	out	0x2e, r24	; 46
    287e:	86 e0       	ldi	r24, 0x06	; 6
    2880:	08 95       	ret
    2882:	85 b5       	in	r24, 0x25	; 37
    2884:	88 7f       	andi	r24, 0xF8	; 248
    2886:	85 bd       	out	0x25, r24	; 37
    2888:	86 e0       	ldi	r24, 0x06	; 6
    288a:	08 95       	ret
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	08 95       	ret
    2890:	88 e0       	ldi	r24, 0x08	; 8
    2892:	08 95       	ret
    2894:	86 e0       	ldi	r24, 0x06	; 6
    2896:	08 95       	ret

00002898 <timer_getValue>:
    2898:	83 30       	cpi	r24, 0x03	; 3
    289a:	10 f5       	brcc	.+68     	; 0x28e0 <timer_getValue+0x48>
    289c:	e8 2f       	mov	r30, r24
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	ec 53       	subi	r30, 0x3C	; 60
    28a2:	fe 4f       	sbci	r31, 0xFE	; 254
    28a4:	90 81       	ld	r25, Z
    28a6:	91 30       	cpi	r25, 0x01	; 1
    28a8:	e9 f4       	brne	.+58     	; 0x28e4 <timer_getValue+0x4c>
    28aa:	81 30       	cpi	r24, 0x01	; 1
    28ac:	59 f0       	breq	.+22     	; 0x28c4 <timer_getValue+0x2c>
    28ae:	18 f0       	brcs	.+6      	; 0x28b6 <timer_getValue+0x1e>
    28b0:	82 30       	cpi	r24, 0x02	; 2
    28b2:	79 f0       	breq	.+30     	; 0x28d2 <timer_getValue+0x3a>
    28b4:	19 c0       	rjmp	.+50     	; 0x28e8 <timer_getValue+0x50>
    28b6:	82 b7       	in	r24, 0x32	; 50
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	fb 01       	movw	r30, r22
    28bc:	91 83       	std	Z+1, r25	; 0x01
    28be:	80 83       	st	Z, r24
    28c0:	86 e0       	ldi	r24, 0x06	; 6
    28c2:	08 95       	ret
    28c4:	8c b5       	in	r24, 0x2c	; 44
    28c6:	9d b5       	in	r25, 0x2d	; 45
    28c8:	fb 01       	movw	r30, r22
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	80 83       	st	Z, r24
    28ce:	86 e0       	ldi	r24, 0x06	; 6
    28d0:	08 95       	ret
    28d2:	84 b5       	in	r24, 0x24	; 36
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	fb 01       	movw	r30, r22
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	80 83       	st	Z, r24
    28dc:	86 e0       	ldi	r24, 0x06	; 6
    28de:	08 95       	ret
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	08 95       	ret
    28e4:	88 e0       	ldi	r24, 0x08	; 8
    28e6:	08 95       	ret
    28e8:	86 e0       	ldi	r24, 0x06	; 6
    28ea:	08 95       	ret

000028ec <timer_flag_notification>:
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
	if(enu_tmr_channel_id < MAX_ENU_TMR_CHANNEL)
    28ec:	83 30       	cpi	r24, 0x03	; 3
    28ee:	08 f0       	brcs	.+2      	; 0x28f2 <timer_flag_notification+0x6>
    28f0:	76 c0       	rjmp	.+236    	; 0x29de <timer_flag_notification+0xf2>
	{
		if(enu_tmr_mode < ENU_MAX_TMR_MODE)
    28f2:	62 30       	cpi	r22, 0x02	; 2
    28f4:	08 f0       	brcs	.+2      	; 0x28f8 <timer_flag_notification+0xc>
    28f6:	75 c0       	rjmp	.+234    	; 0x29e2 <timer_flag_notification+0xf6>
		{
			if(ptr_u8_flag_status != NULL_PTR)
    28f8:	41 15       	cp	r20, r1
    28fa:	51 05       	cpc	r21, r1
    28fc:	09 f4       	brne	.+2      	; 0x2900 <timer_flag_notification+0x14>
    28fe:	73 c0       	rjmp	.+230    	; 0x29e6 <timer_flag_notification+0xfa>
			{
				if(gl_bo_timer_init_flag[enu_tmr_channel_id] == TRUE)
    2900:	e8 2f       	mov	r30, r24
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	ec 53       	subi	r30, 0x3C	; 60
    2906:	fe 4f       	sbci	r31, 0xFE	; 254
    2908:	90 81       	ld	r25, Z
    290a:	91 30       	cpi	r25, 0x01	; 1
    290c:	09 f0       	breq	.+2      	; 0x2910 <timer_flag_notification+0x24>
    290e:	6d c0       	rjmp	.+218    	; 0x29ea <timer_flag_notification+0xfe>
				{
					switch (enu_tmr_channel_id)
    2910:	81 30       	cpi	r24, 0x01	; 1
    2912:	29 f1       	breq	.+74     	; 0x295e <timer_flag_notification+0x72>
    2914:	20 f0       	brcs	.+8      	; 0x291e <timer_flag_notification+0x32>
    2916:	82 30       	cpi	r24, 0x02	; 2
    2918:	09 f4       	brne	.+2      	; 0x291c <timer_flag_notification+0x30>
    291a:	41 c0       	rjmp	.+130    	; 0x299e <timer_flag_notification+0xb2>
    291c:	68 c0       	rjmp	.+208    	; 0x29ee <timer_flag_notification+0x102>
					{
						case ENU_TMR_CHANNEL_0:
						{
							if(enu_tmr_mode == ENU_TMR_NORMAL_MODE)
    291e:	61 11       	cpse	r22, r1
    2920:	0f c0       	rjmp	.+30     	; 0x2940 <timer_flag_notification+0x54>
							{
								if(BIT_IS_SET(TIFR,TOV0))
    2922:	08 b6       	in	r0, 0x38	; 56
    2924:	00 fe       	sbrs	r0, 0
    2926:	08 c0       	rjmp	.+16     	; 0x2938 <timer_flag_notification+0x4c>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	fa 01       	movw	r30, r20
    292c:	80 83       	st	Z, r24
									SET_BIT(TIFR,TOV0);	//TOV0 is cleared by writing a logic one to the flag
    292e:	88 b7       	in	r24, 0x38	; 56
    2930:	81 60       	ori	r24, 0x01	; 1
    2932:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    2934:	86 e0       	ldi	r24, 0x06	; 6
    2936:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,TOV0);	//TOV0 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    2938:	fa 01       	movw	r30, r20
    293a:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    293c:	86 e0       	ldi	r24, 0x06	; 6
    293e:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_FALSE;
								}
							}
							else
							{
								if(BIT_IS_SET(TIFR,OCF0))	// in case compare flag
    2940:	08 b6       	in	r0, 0x38	; 56
    2942:	01 fe       	sbrs	r0, 1
    2944:	08 c0       	rjmp	.+16     	; 0x2956 <timer_flag_notification+0x6a>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	fa 01       	movw	r30, r20
    294a:	80 83       	st	Z, r24
									SET_BIT(TIFR,OCF0);	//OCF0 is cleared by writing a logic one to the flag
    294c:	88 b7       	in	r24, 0x38	; 56
    294e:	82 60       	ori	r24, 0x02	; 2
    2950:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    2952:	86 e0       	ldi	r24, 0x06	; 6
    2954:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,OCF0);	//OCF0 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    2956:	fa 01       	movw	r30, r20
    2958:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    295a:	86 e0       	ldi	r24, 0x06	; 6
    295c:	08 95       	ret
							}
						}
						break;
						case ENU_TMR_CHANNEL_1:
						{
							if(enu_tmr_mode == ENU_TMR_NORMAL_MODE)
    295e:	61 11       	cpse	r22, r1
    2960:	0f c0       	rjmp	.+30     	; 0x2980 <timer_flag_notification+0x94>
							{
								if(BIT_IS_SET(TIFR,TOV1))
    2962:	08 b6       	in	r0, 0x38	; 56
    2964:	02 fe       	sbrs	r0, 2
    2966:	08 c0       	rjmp	.+16     	; 0x2978 <timer_flag_notification+0x8c>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	fa 01       	movw	r30, r20
    296c:	80 83       	st	Z, r24
									SET_BIT(TIFR,TOV1);	//TOV1 is cleared by writing a logic one to the flag
    296e:	88 b7       	in	r24, 0x38	; 56
    2970:	84 60       	ori	r24, 0x04	; 4
    2972:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    2974:	86 e0       	ldi	r24, 0x06	; 6
    2976:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,TOV1);	//TOV1 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    2978:	fa 01       	movw	r30, r20
    297a:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    297c:	86 e0       	ldi	r24, 0x06	; 6
    297e:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_FALSE;
								}
							}
							else
							{
								if(BIT_IS_SET(TIFR,OCF1A))
    2980:	08 b6       	in	r0, 0x38	; 56
    2982:	04 fe       	sbrs	r0, 4
    2984:	08 c0       	rjmp	.+16     	; 0x2996 <timer_flag_notification+0xaa>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	fa 01       	movw	r30, r20
    298a:	80 83       	st	Z, r24
									SET_BIT(TIFR,OCF1A);	//OCF1A is cleared by writing a logic one to the flag
    298c:	88 b7       	in	r24, 0x38	; 56
    298e:	80 61       	ori	r24, 0x10	; 16
    2990:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    2992:	86 e0       	ldi	r24, 0x06	; 6
    2994:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,OCF1A);	//OCF1A is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    2996:	fa 01       	movw	r30, r20
    2998:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    299a:	86 e0       	ldi	r24, 0x06	; 6
    299c:	08 95       	ret
							}
						}
						break;
						case ENU_TMR_CHANNEL_2:
						{
							if(enu_tmr_mode == ENU_TMR_NORMAL_MODE)
    299e:	61 11       	cpse	r22, r1
    29a0:	0f c0       	rjmp	.+30     	; 0x29c0 <timer_flag_notification+0xd4>
							{
								if(BIT_IS_SET(TIFR,TOV2))
    29a2:	08 b6       	in	r0, 0x38	; 56
    29a4:	06 fe       	sbrs	r0, 6
    29a6:	08 c0       	rjmp	.+16     	; 0x29b8 <timer_flag_notification+0xcc>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	fa 01       	movw	r30, r20
    29ac:	80 83       	st	Z, r24
									SET_BIT(TIFR,TOV2);	//TOV2 is cleared by writing a logic one to the flag
    29ae:	88 b7       	in	r24, 0x38	; 56
    29b0:	80 64       	ori	r24, 0x40	; 64
    29b2:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    29b4:	86 e0       	ldi	r24, 0x06	; 6
    29b6:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,TOV2);	//TOV2 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    29b8:	fa 01       	movw	r30, r20
    29ba:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    29bc:	86 e0       	ldi	r24, 0x06	; 6
    29be:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_FALSE;
								}
							}
							else
							{
								if(BIT_IS_SET(TIFR,OCF2))
    29c0:	08 b6       	in	r0, 0x38	; 56
    29c2:	07 fe       	sbrs	r0, 7
    29c4:	08 c0       	rjmp	.+16     	; 0x29d6 <timer_flag_notification+0xea>
								{
									*ptr_u8_flag_status = LOGIC_TRUE;
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	fa 01       	movw	r30, r20
    29ca:	80 83       	st	Z, r24
									SET_BIT(TIFR,OCF2);	//OCF2 is cleared by writing a logic one to the flag
    29cc:	88 b7       	in	r24, 0x38	; 56
    29ce:	80 68       	ori	r24, 0x80	; 128
    29d0:	88 bf       	out	0x38, r24	; 56
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    29d2:	86 e0       	ldi	r24, 0x06	; 6
    29d4:	08 95       	ret
									*ptr_u8_flag_status = LOGIC_TRUE;
									SET_BIT(TIFR,OCF2);	//OCF2 is cleared by writing a logic one to the flag
								}
								else
								{
									*ptr_u8_flag_status = LOGIC_FALSE;
    29d6:	fa 01       	movw	r30, r20
    29d8:	10 82       	st	Z, r1
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    29da:	86 e0       	ldi	r24, 0x06	; 6
    29dc:	08 95       	ret
			enu_tmr_error = ENU_TMR_INVALID_MODE;
		}
	}
	else
	{
		enu_tmr_error = ENU_TMR_INVALID_ID;
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	08 95       	ret
				enu_tmr_error = ENU_TMR_INVALID_INPUT;
			}
		}
		else
		{
			enu_tmr_error = ENU_TMR_INVALID_MODE;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	08 95       	ret
					enu_tmr_error = ENU_TMR_NOT_INITIALIZED;
				}
			}
			else
			{
				enu_tmr_error = ENU_TMR_INVALID_INPUT;
    29e6:	85 e0       	ldi	r24, 0x05	; 5
    29e8:	08 95       	ret
						}
					}
				}
				else
				{
					enu_tmr_error = ENU_TMR_NOT_INITIALIZED;
    29ea:	88 e0       	ldi	r24, 0x08	; 8
    29ec:	08 95       	ret
 *											  if [*ptr_u8_flag_status] = TRUE  >>> the interrupt happen then cleared
 *											  if [*ptr_u8_flag_status] = FLASE >>> the interrupt does not happen
 */
enu_tmr_error_t timer_flag_notification	(enu_tmr_channel_id_t enu_tmr_channel_id,enu_tmr_mode_t enu_tmr_mode,uint8* ptr_u8_flag_status)
{
	enu_tmr_error_t enu_tmr_error = ENU_TMR_VALID;
    29ee:	86 e0       	ldi	r24, 0x06	; 6
	else
	{
		enu_tmr_error = ENU_TMR_INVALID_ID;
	}
	return enu_tmr_error;
}
    29f0:	08 95       	ret

000029f2 <__vector_11>:

/*===============ISR HANDLERS================*/
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR_HANDLER(TMR0_OVF)
{
    29f2:	1f 92       	push	r1
    29f4:	0f 92       	push	r0
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	0f 92       	push	r0
    29fa:	11 24       	eor	r1, r1
    29fc:	2f 93       	push	r18
    29fe:	3f 93       	push	r19
    2a00:	4f 93       	push	r20
    2a02:	5f 93       	push	r21
    2a04:	6f 93       	push	r22
    2a06:	7f 93       	push	r23
    2a08:	8f 93       	push	r24
    2a0a:	9f 93       	push	r25
    2a0c:	af 93       	push	r26
    2a0e:	bf 93       	push	r27
    2a10:	ef 93       	push	r30
    2a12:	ff 93       	push	r31
	if(gl_callBackPtr_timer0_OVF != NULL_PTR)
    2a14:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <gl_callBackPtr_timer0_OVF>
    2a18:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <gl_callBackPtr_timer0_OVF+0x1>
    2a1c:	30 97       	sbiw	r30, 0x00	; 0
    2a1e:	09 f0       	breq	.+2      	; 0x2a22 <__vector_11+0x30>
	{
		gl_callBackPtr_timer0_OVF();
    2a20:	09 95       	icall
	}
}
    2a22:	ff 91       	pop	r31
    2a24:	ef 91       	pop	r30
    2a26:	bf 91       	pop	r27
    2a28:	af 91       	pop	r26
    2a2a:	9f 91       	pop	r25
    2a2c:	8f 91       	pop	r24
    2a2e:	7f 91       	pop	r23
    2a30:	6f 91       	pop	r22
    2a32:	5f 91       	pop	r21
    2a34:	4f 91       	pop	r20
    2a36:	3f 91       	pop	r19
    2a38:	2f 91       	pop	r18
    2a3a:	0f 90       	pop	r0
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	0f 90       	pop	r0
    2a40:	1f 90       	pop	r1
    2a42:	18 95       	reti

00002a44 <__vector_9>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR_HANDLER(TMR1_OVF)
{
    2a44:	1f 92       	push	r1
    2a46:	0f 92       	push	r0
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	0f 92       	push	r0
    2a4c:	11 24       	eor	r1, r1
    2a4e:	2f 93       	push	r18
    2a50:	3f 93       	push	r19
    2a52:	4f 93       	push	r20
    2a54:	5f 93       	push	r21
    2a56:	6f 93       	push	r22
    2a58:	7f 93       	push	r23
    2a5a:	8f 93       	push	r24
    2a5c:	9f 93       	push	r25
    2a5e:	af 93       	push	r26
    2a60:	bf 93       	push	r27
    2a62:	ef 93       	push	r30
    2a64:	ff 93       	push	r31
	if(gl_callBackPtr_timer1_OVF != NULL_PTR)
    2a66:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <gl_callBackPtr_timer1_OVF>
    2a6a:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <gl_callBackPtr_timer1_OVF+0x1>
    2a6e:	30 97       	sbiw	r30, 0x00	; 0
    2a70:	09 f0       	breq	.+2      	; 0x2a74 <__vector_9+0x30>
	{
		gl_callBackPtr_timer1_OVF();
    2a72:	09 95       	icall
	}
}
    2a74:	ff 91       	pop	r31
    2a76:	ef 91       	pop	r30
    2a78:	bf 91       	pop	r27
    2a7a:	af 91       	pop	r26
    2a7c:	9f 91       	pop	r25
    2a7e:	8f 91       	pop	r24
    2a80:	7f 91       	pop	r23
    2a82:	6f 91       	pop	r22
    2a84:	5f 91       	pop	r21
    2a86:	4f 91       	pop	r20
    2a88:	3f 91       	pop	r19
    2a8a:	2f 91       	pop	r18
    2a8c:	0f 90       	pop	r0
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	0f 90       	pop	r0
    2a92:	1f 90       	pop	r1
    2a94:	18 95       	reti

00002a96 <__vector_5>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR_HANDLER(TMR2_OVF)
{
    2a96:	1f 92       	push	r1
    2a98:	0f 92       	push	r0
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	0f 92       	push	r0
    2a9e:	11 24       	eor	r1, r1
    2aa0:	2f 93       	push	r18
    2aa2:	3f 93       	push	r19
    2aa4:	4f 93       	push	r20
    2aa6:	5f 93       	push	r21
    2aa8:	6f 93       	push	r22
    2aaa:	7f 93       	push	r23
    2aac:	8f 93       	push	r24
    2aae:	9f 93       	push	r25
    2ab0:	af 93       	push	r26
    2ab2:	bf 93       	push	r27
    2ab4:	ef 93       	push	r30
    2ab6:	ff 93       	push	r31
	if(gl_callBackPtr_timer2_OVF != NULL_PTR)
    2ab8:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <gl_callBackPtr_timer2_OVF>
    2abc:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <gl_callBackPtr_timer2_OVF+0x1>
    2ac0:	30 97       	sbiw	r30, 0x00	; 0
    2ac2:	09 f0       	breq	.+2      	; 0x2ac6 <__vector_5+0x30>
	{
		gl_callBackPtr_timer2_OVF();
    2ac4:	09 95       	icall
	}
}
    2ac6:	ff 91       	pop	r31
    2ac8:	ef 91       	pop	r30
    2aca:	bf 91       	pop	r27
    2acc:	af 91       	pop	r26
    2ace:	9f 91       	pop	r25
    2ad0:	8f 91       	pop	r24
    2ad2:	7f 91       	pop	r23
    2ad4:	6f 91       	pop	r22
    2ad6:	5f 91       	pop	r21
    2ad8:	4f 91       	pop	r20
    2ada:	3f 91       	pop	r19
    2adc:	2f 91       	pop	r18
    2ade:	0f 90       	pop	r0
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	0f 90       	pop	r0
    2ae4:	1f 90       	pop	r1
    2ae6:	18 95       	reti

00002ae8 <__vector_10>:
/* Interrupt Service Routine for TIMER0 Overflow Mode */
ISR_HANDLER(TMR0_CMP)
{
    2ae8:	1f 92       	push	r1
    2aea:	0f 92       	push	r0
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	0f 92       	push	r0
    2af0:	11 24       	eor	r1, r1
    2af2:	2f 93       	push	r18
    2af4:	3f 93       	push	r19
    2af6:	4f 93       	push	r20
    2af8:	5f 93       	push	r21
    2afa:	6f 93       	push	r22
    2afc:	7f 93       	push	r23
    2afe:	8f 93       	push	r24
    2b00:	9f 93       	push	r25
    2b02:	af 93       	push	r26
    2b04:	bf 93       	push	r27
    2b06:	ef 93       	push	r30
    2b08:	ff 93       	push	r31
	if(gl_callBackPtr_timer0_COMP != NULL_PTR)
    2b0a:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <gl_callBackPtr_timer0_COMP>
    2b0e:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <gl_callBackPtr_timer0_COMP+0x1>
    2b12:	30 97       	sbiw	r30, 0x00	; 0
    2b14:	09 f0       	breq	.+2      	; 0x2b18 <__vector_10+0x30>
	{
		gl_callBackPtr_timer0_COMP();
    2b16:	09 95       	icall
	}
}
    2b18:	ff 91       	pop	r31
    2b1a:	ef 91       	pop	r30
    2b1c:	bf 91       	pop	r27
    2b1e:	af 91       	pop	r26
    2b20:	9f 91       	pop	r25
    2b22:	8f 91       	pop	r24
    2b24:	7f 91       	pop	r23
    2b26:	6f 91       	pop	r22
    2b28:	5f 91       	pop	r21
    2b2a:	4f 91       	pop	r20
    2b2c:	3f 91       	pop	r19
    2b2e:	2f 91       	pop	r18
    2b30:	0f 90       	pop	r0
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	0f 90       	pop	r0
    2b36:	1f 90       	pop	r1
    2b38:	18 95       	reti

00002b3a <__vector_7>:

/* Interrupt Service Routine for TIMER1 Overflow Mode */
ISR_HANDLER(TMR1_CMP_A)
{
    2b3a:	1f 92       	push	r1
    2b3c:	0f 92       	push	r0
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	0f 92       	push	r0
    2b42:	11 24       	eor	r1, r1
    2b44:	2f 93       	push	r18
    2b46:	3f 93       	push	r19
    2b48:	4f 93       	push	r20
    2b4a:	5f 93       	push	r21
    2b4c:	6f 93       	push	r22
    2b4e:	7f 93       	push	r23
    2b50:	8f 93       	push	r24
    2b52:	9f 93       	push	r25
    2b54:	af 93       	push	r26
    2b56:	bf 93       	push	r27
    2b58:	ef 93       	push	r30
    2b5a:	ff 93       	push	r31
	if(gl_callBackPtr_timer1_COMP != NULL_PTR)
    2b5c:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <gl_callBackPtr_timer1_COMP>
    2b60:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <gl_callBackPtr_timer1_COMP+0x1>
    2b64:	30 97       	sbiw	r30, 0x00	; 0
    2b66:	09 f0       	breq	.+2      	; 0x2b6a <__vector_7+0x30>
	{
		gl_callBackPtr_timer1_COMP();
    2b68:	09 95       	icall
	}
}
    2b6a:	ff 91       	pop	r31
    2b6c:	ef 91       	pop	r30
    2b6e:	bf 91       	pop	r27
    2b70:	af 91       	pop	r26
    2b72:	9f 91       	pop	r25
    2b74:	8f 91       	pop	r24
    2b76:	7f 91       	pop	r23
    2b78:	6f 91       	pop	r22
    2b7a:	5f 91       	pop	r21
    2b7c:	4f 91       	pop	r20
    2b7e:	3f 91       	pop	r19
    2b80:	2f 91       	pop	r18
    2b82:	0f 90       	pop	r0
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	0f 90       	pop	r0
    2b88:	1f 90       	pop	r1
    2b8a:	18 95       	reti

00002b8c <__vector_4>:

/* Interrupt Service Routine for TIMER2 Overflow Mode */
ISR_HANDLER(TMR2_CMP)
{
    2b8c:	1f 92       	push	r1
    2b8e:	0f 92       	push	r0
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	0f 92       	push	r0
    2b94:	11 24       	eor	r1, r1
    2b96:	2f 93       	push	r18
    2b98:	3f 93       	push	r19
    2b9a:	4f 93       	push	r20
    2b9c:	5f 93       	push	r21
    2b9e:	6f 93       	push	r22
    2ba0:	7f 93       	push	r23
    2ba2:	8f 93       	push	r24
    2ba4:	9f 93       	push	r25
    2ba6:	af 93       	push	r26
    2ba8:	bf 93       	push	r27
    2baa:	ef 93       	push	r30
    2bac:	ff 93       	push	r31
	if(gl_callBackPtr_timer2_COMP != NULL_PTR)
    2bae:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <gl_callBackPtr_timer2_COMP>
    2bb2:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <gl_callBackPtr_timer2_COMP+0x1>
    2bb6:	30 97       	sbiw	r30, 0x00	; 0
    2bb8:	09 f0       	breq	.+2      	; 0x2bbc <__vector_4+0x30>
	{
		gl_callBackPtr_timer2_COMP(); 
    2bba:	09 95       	icall
	}
    2bbc:	ff 91       	pop	r31
    2bbe:	ef 91       	pop	r30
    2bc0:	bf 91       	pop	r27
    2bc2:	af 91       	pop	r26
    2bc4:	9f 91       	pop	r25
    2bc6:	8f 91       	pop	r24
    2bc8:	7f 91       	pop	r23
    2bca:	6f 91       	pop	r22
    2bcc:	5f 91       	pop	r21
    2bce:	4f 91       	pop	r20
    2bd0:	3f 91       	pop	r19
    2bd2:	2f 91       	pop	r18
    2bd4:	0f 90       	pop	r0
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	0f 90       	pop	r0
    2bda:	1f 90       	pop	r1
    2bdc:	18 95       	reti

00002bde <calc_prescaler>:

/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
    2bde:	cf 92       	push	r12
    2be0:	df 92       	push	r13
    2be2:	ef 92       	push	r14
    2be4:	ff 92       	push	r15
    2be6:	0f 93       	push	r16
    2be8:	1f 93       	push	r17
    2bea:	6b 01       	movw	r12, r22
    2bec:	7c 01       	movw	r14, r24
	BOOLEAN bo_return_value = TRUE;
	if(enu_time_unit == ENU_MICRO_SECOND)
    2bee:	21 11       	cpse	r18, r1
    2bf0:	65 c1       	rjmp	.+714    	; 0x2ebc <calc_prescaler+0x2de>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    2bf2:	41 11       	cpse	r20, r1
    2bf4:	69 c0       	rjmp	.+210    	; 0x2cc8 <calc_prescaler+0xea>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	57 e4       	ldi	r21, 0x47	; 71
    2bfe:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2c02:	18 16       	cp	r1, r24
    2c04:	0c f4       	brge	.+2      	; 0x2c08 <calc_prescaler+0x2a>
    2c06:	59 c0       	rjmp	.+178    	; 0x2cba <calc_prescaler+0xdc>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	40 e0       	ldi	r20, 0x00	; 0
    2c0e:	52 e4       	ldi	r21, 0x42	; 66
    2c10:	c7 01       	movw	r24, r14
    2c12:	b6 01       	movw	r22, r12
    2c14:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2c18:	18 16       	cp	r1, r24
    2c1a:	34 f0       	brlt	.+12     	; 0x2c28 <calc_prescaler+0x4a>
				*ptr_u16_prescale=P_1;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	f8 01       	movw	r30, r16
    2c22:	91 83       	std	Z+1, r25	; 0x01
    2c24:	80 83       	st	Z, r24
    2c26:	21 c4       	rjmp	.+2114   	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e8       	ldi	r20, 0x80	; 128
    2c2e:	53 e4       	ldi	r21, 0x43	; 67
    2c30:	c7 01       	movw	r24, r14
    2c32:	b6 01       	movw	r22, r12
    2c34:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2c38:	18 16       	cp	r1, r24
    2c3a:	3c f0       	brlt	.+14     	; 0x2c4a <calc_prescaler+0x6c>
				*ptr_u16_prescale=P_8;
    2c3c:	88 e0       	ldi	r24, 0x08	; 8
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	f8 01       	movw	r30, r16
    2c42:	91 83       	std	Z+1, r25	; 0x01
    2c44:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	10 c4       	rjmp	.+2080   	; 0x346a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	55 e4       	ldi	r21, 0x45	; 69
    2c52:	c7 01       	movw	r24, r14
    2c54:	b6 01       	movw	r22, r12
    2c56:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2c5a:	18 16       	cp	r1, r24
    2c5c:	3c f0       	brlt	.+14     	; 0x2c6c <calc_prescaler+0x8e>
				*ptr_u16_prescale=P_64;
    2c5e:	80 e4       	ldi	r24, 0x40	; 64
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	f8 01       	movw	r30, r16
    2c64:	91 83       	std	Z+1, r25	; 0x01
    2c66:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	ff c3       	rjmp	.+2046   	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e0       	ldi	r20, 0x00	; 0
    2c72:	56 e4       	ldi	r21, 0x46	; 70
    2c74:	c7 01       	movw	r24, r14
    2c76:	b6 01       	movw	r22, r12
    2c78:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2c7c:	18 16       	cp	r1, r24
    2c7e:	3c f0       	brlt	.+14     	; 0x2c8e <calc_prescaler+0xb0>
				*ptr_u16_prescale=P_256;
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	91 e0       	ldi	r25, 0x01	; 1
    2c84:	f8 01       	movw	r30, r16
    2c86:	91 83       	std	Z+1, r25	; 0x01
    2c88:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	ee c3       	rjmp	.+2012   	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024))
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	40 e0       	ldi	r20, 0x00	; 0
    2c94:	57 e4       	ldi	r21, 0x47	; 71
    2c96:	c7 01       	movw	r24, r14
    2c98:	b6 01       	movw	r22, r12
    2c9a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2c9e:	18 16       	cp	r1, r24
    2ca0:	3c f0       	brlt	.+14     	; 0x2cb0 <calc_prescaler+0xd2>
				*ptr_u16_prescale=P_1024;
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	94 e0       	ldi	r25, 0x04	; 4
    2ca6:	f8 01       	movw	r30, r16
    2ca8:	91 83       	std	Z+1, r25	; 0x01
    2caa:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	dd c3       	rjmp	.+1978   	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    2cb0:	f8 01       	movw	r30, r16
    2cb2:	11 82       	std	Z+1, r1	; 0x01
    2cb4:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	d8 c3       	rjmp	.+1968   	; 0x346a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    2cba:	8c ed       	ldi	r24, 0xDC	; 220
    2cbc:	95 e0       	ldi	r25, 0x05	; 5
    2cbe:	f8 01       	movw	r30, r16
    2cc0:	91 83       	std	Z+1, r25	; 0x01
    2cc2:	80 83       	st	Z, r24
				bo_return_value = TRUE;	
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	d1 c3       	rjmp	.+1954   	; 0x346a <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    2cc8:	41 30       	cpi	r20, 0x01	; 1
    2cca:	09 f0       	breq	.+2      	; 0x2cce <calc_prescaler+0xf0>
    2ccc:	69 c0       	rjmp	.+210    	; 0x2da0 <calc_prescaler+0x1c2>
		{
			if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024) )
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	5b e4       	ldi	r21, 0x4B	; 75
    2cd6:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2cda:	18 16       	cp	r1, r24
    2cdc:	0c f4       	brge	.+2      	; 0x2ce0 <calc_prescaler+0x102>
    2cde:	59 c0       	rjmp	.+178    	; 0x2d92 <calc_prescaler+0x1b4>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_US(P_1))
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e0       	ldi	r20, 0x00	; 0
    2ce6:	56 e4       	ldi	r21, 0x46	; 70
    2ce8:	c7 01       	movw	r24, r14
    2cea:	b6 01       	movw	r22, r12
    2cec:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2cf0:	18 16       	cp	r1, r24
    2cf2:	34 f0       	brlt	.+12     	; 0x2d00 <calc_prescaler+0x122>
				*ptr_u16_prescale=P_1;
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	f8 01       	movw	r30, r16
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	80 83       	st	Z, r24
    2cfe:	b5 c3       	rjmp	.+1898   	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	40 e8       	ldi	r20, 0x80	; 128
    2d06:	57 e4       	ldi	r21, 0x47	; 71
    2d08:	c7 01       	movw	r24, r14
    2d0a:	b6 01       	movw	r22, r12
    2d0c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2d10:	18 16       	cp	r1, r24
    2d12:	3c f0       	brlt	.+14     	; 0x2d22 <calc_prescaler+0x144>
				*ptr_u16_prescale=P_8;
    2d14:	88 e0       	ldi	r24, 0x08	; 8
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	f8 01       	movw	r30, r16
    2d1a:	91 83       	std	Z+1, r25	; 0x01
    2d1c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	a4 c3       	rjmp	.+1864   	; 0x346a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 e0       	ldi	r20, 0x00	; 0
    2d28:	59 e4       	ldi	r21, 0x49	; 73
    2d2a:	c7 01       	movw	r24, r14
    2d2c:	b6 01       	movw	r22, r12
    2d2e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2d32:	18 16       	cp	r1, r24
    2d34:	3c f0       	brlt	.+14     	; 0x2d44 <calc_prescaler+0x166>
				*ptr_u16_prescale=P_64;
    2d36:	80 e4       	ldi	r24, 0x40	; 64
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	f8 01       	movw	r30, r16
    2d3c:	91 83       	std	Z+1, r25	; 0x01
    2d3e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	93 c3       	rjmp	.+1830   	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e0       	ldi	r20, 0x00	; 0
    2d4a:	5a e4       	ldi	r21, 0x4A	; 74
    2d4c:	c7 01       	movw	r24, r14
    2d4e:	b6 01       	movw	r22, r12
    2d50:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2d54:	18 16       	cp	r1, r24
    2d56:	3c f0       	brlt	.+14     	; 0x2d66 <calc_prescaler+0x188>
				*ptr_u16_prescale=P_256;
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	91 e0       	ldi	r25, 0x01	; 1
    2d5c:	f8 01       	movw	r30, r16
    2d5e:	91 83       	std	Z+1, r25	; 0x01
    2d60:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	82 c3       	rjmp	.+1796   	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024))
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e0       	ldi	r20, 0x00	; 0
    2d6c:	5b e4       	ldi	r21, 0x4B	; 75
    2d6e:	c7 01       	movw	r24, r14
    2d70:	b6 01       	movw	r22, r12
    2d72:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2d76:	18 16       	cp	r1, r24
    2d78:	3c f0       	brlt	.+14     	; 0x2d88 <calc_prescaler+0x1aa>
				*ptr_u16_prescale=P_1024;
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	94 e0       	ldi	r25, 0x04	; 4
    2d7e:	f8 01       	movw	r30, r16
    2d80:	91 83       	std	Z+1, r25	; 0x01
    2d82:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	71 c3       	rjmp	.+1762   	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    2d88:	f8 01       	movw	r30, r16
    2d8a:	11 82       	std	Z+1, r1	; 0x01
    2d8c:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	6c c3       	rjmp	.+1752   	; 0x346a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    2d92:	8c ed       	ldi	r24, 0xDC	; 220
    2d94:	95 e0       	ldi	r25, 0x05	; 5
    2d96:	f8 01       	movw	r30, r16
    2d98:	91 83       	std	Z+1, r25	; 0x01
    2d9a:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	65 c3       	rjmp	.+1738   	; 0x346a <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    2da0:	42 30       	cpi	r20, 0x02	; 2
    2da2:	09 f0       	breq	.+2      	; 0x2da6 <calc_prescaler+0x1c8>
    2da4:	5b c3       	rjmp	.+1718   	; 0x345c <calc_prescaler+0x87e>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_US(P_1024) )
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	40 e0       	ldi	r20, 0x00	; 0
    2dac:	57 e4       	ldi	r21, 0x47	; 71
    2dae:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2db2:	18 16       	cp	r1, r24
    2db4:	0c f4       	brge	.+2      	; 0x2db8 <calc_prescaler+0x1da>
    2db6:	7b c0       	rjmp	.+246    	; 0x2eae <calc_prescaler+0x2d0>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	40 e0       	ldi	r20, 0x00	; 0
    2dbe:	52 e4       	ldi	r21, 0x42	; 66
    2dc0:	c7 01       	movw	r24, r14
    2dc2:	b6 01       	movw	r22, r12
    2dc4:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2dc8:	18 16       	cp	r1, r24
    2dca:	34 f0       	brlt	.+12     	; 0x2dd8 <calc_prescaler+0x1fa>
				*ptr_u16_prescale=P_1;
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	f8 01       	movw	r30, r16
    2dd2:	91 83       	std	Z+1, r25	; 0x01
    2dd4:	80 83       	st	Z, r24
    2dd6:	49 c3       	rjmp	.+1682   	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e8       	ldi	r20, 0x80	; 128
    2dde:	53 e4       	ldi	r21, 0x43	; 67
    2de0:	c7 01       	movw	r24, r14
    2de2:	b6 01       	movw	r22, r12
    2de4:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2de8:	18 16       	cp	r1, r24
    2dea:	3c f0       	brlt	.+14     	; 0x2dfa <calc_prescaler+0x21c>
				*ptr_u16_prescale=P_8;
    2dec:	88 e0       	ldi	r24, 0x08	; 8
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	f8 01       	movw	r30, r16
    2df2:	91 83       	std	Z+1, r25	; 0x01
    2df4:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	38 c3       	rjmp	.+1648   	; 0x346a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_US(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e8       	ldi	r20, 0x80	; 128
    2e00:	54 e4       	ldi	r21, 0x44	; 68
    2e02:	c7 01       	movw	r24, r14
    2e04:	b6 01       	movw	r22, r12
    2e06:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2e0a:	18 16       	cp	r1, r24
    2e0c:	3c f0       	brlt	.+14     	; 0x2e1c <calc_prescaler+0x23e>
				*ptr_u16_prescale=P_32;
    2e0e:	80 e2       	ldi	r24, 0x20	; 32
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	f8 01       	movw	r30, r16
    2e14:	91 83       	std	Z+1, r25	; 0x01
    2e16:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	27 c3       	rjmp	.+1614   	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	40 e0       	ldi	r20, 0x00	; 0
    2e22:	55 e4       	ldi	r21, 0x45	; 69
    2e24:	c7 01       	movw	r24, r14
    2e26:	b6 01       	movw	r22, r12
    2e28:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2e2c:	18 16       	cp	r1, r24
    2e2e:	3c f0       	brlt	.+14     	; 0x2e3e <calc_prescaler+0x260>
				*ptr_u16_prescale=P_64;
    2e30:	80 e4       	ldi	r24, 0x40	; 64
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	f8 01       	movw	r30, r16
    2e36:	91 83       	std	Z+1, r25	; 0x01
    2e38:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	16 c3       	rjmp	.+1580   	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	40 e8       	ldi	r20, 0x80	; 128
    2e44:	55 e4       	ldi	r21, 0x45	; 69
    2e46:	c7 01       	movw	r24, r14
    2e48:	b6 01       	movw	r22, r12
    2e4a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2e4e:	18 16       	cp	r1, r24
    2e50:	3c f0       	brlt	.+14     	; 0x2e60 <calc_prescaler+0x282>
				*ptr_u16_prescale=P_128;
    2e52:	80 e8       	ldi	r24, 0x80	; 128
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	f8 01       	movw	r30, r16
    2e58:	91 83       	std	Z+1, r25	; 0x01
    2e5a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	05 c3       	rjmp	.+1546   	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	56 e4       	ldi	r21, 0x46	; 70
    2e68:	c7 01       	movw	r24, r14
    2e6a:	b6 01       	movw	r22, r12
    2e6c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2e70:	18 16       	cp	r1, r24
    2e72:	3c f0       	brlt	.+14     	; 0x2e82 <calc_prescaler+0x2a4>
				*ptr_u16_prescale=P_256;
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	91 e0       	ldi	r25, 0x01	; 1
    2e78:	f8 01       	movw	r30, r16
    2e7a:	91 83       	std	Z+1, r25	; 0x01
    2e7c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	f4 c2       	rjmp	.+1512   	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_US(P_1024))
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e0       	ldi	r20, 0x00	; 0
    2e88:	57 e4       	ldi	r21, 0x47	; 71
    2e8a:	c7 01       	movw	r24, r14
    2e8c:	b6 01       	movw	r22, r12
    2e8e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2e92:	18 16       	cp	r1, r24
    2e94:	3c f0       	brlt	.+14     	; 0x2ea4 <calc_prescaler+0x2c6>
				*ptr_u16_prescale=P_1024;
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	94 e0       	ldi	r25, 0x04	; 4
    2e9a:	f8 01       	movw	r30, r16
    2e9c:	91 83       	std	Z+1, r25	; 0x01
    2e9e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	e3 c2       	rjmp	.+1478   	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_US(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_US(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    2ea4:	f8 01       	movw	r30, r16
    2ea6:	11 82       	std	Z+1, r1	; 0x01
    2ea8:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	de c2       	rjmp	.+1468   	; 0x346a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    2eae:	8c ed       	ldi	r24, 0xDC	; 220
    2eb0:	95 e0       	ldi	r25, 0x05	; 5
    2eb2:	f8 01       	movw	r30, r16
    2eb4:	91 83       	std	Z+1, r25	; 0x01
    2eb6:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	d7 c2       	rjmp	.+1454   	; 0x346a <calc_prescaler+0x88c>
		else
		{
			bo_return_value = FALSE;
		}
	}
	else if (enu_time_unit == ENU_MILLI_SECOND)
    2ebc:	21 30       	cpi	r18, 0x01	; 1
    2ebe:	09 f0       	breq	.+2      	; 0x2ec2 <calc_prescaler+0x2e4>
    2ec0:	65 c1       	rjmp	.+714    	; 0x318c <calc_prescaler+0x5ae>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    2ec2:	41 11       	cpse	r20, r1
    2ec4:	69 c0       	rjmp	.+210    	; 0x2f98 <calc_prescaler+0x3ba>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024) )
    2ec6:	2f e6       	ldi	r18, 0x6F	; 111
    2ec8:	32 e1       	ldi	r19, 0x12	; 18
    2eca:	43 e0       	ldi	r20, 0x03	; 3
    2ecc:	52 e4       	ldi	r21, 0x42	; 66
    2ece:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2ed2:	18 16       	cp	r1, r24
    2ed4:	0c f4       	brge	.+2      	; 0x2ed8 <calc_prescaler+0x2fa>
    2ed6:	59 c0       	rjmp	.+178    	; 0x2f8a <calc_prescaler+0x3ac>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
    2ed8:	2f e6       	ldi	r18, 0x6F	; 111
    2eda:	32 e1       	ldi	r19, 0x12	; 18
    2edc:	43 e0       	ldi	r20, 0x03	; 3
    2ede:	5d e3       	ldi	r21, 0x3D	; 61
    2ee0:	c7 01       	movw	r24, r14
    2ee2:	b6 01       	movw	r22, r12
    2ee4:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2ee8:	18 16       	cp	r1, r24
    2eea:	34 f0       	brlt	.+12     	; 0x2ef8 <calc_prescaler+0x31a>
				*ptr_u16_prescale=P_1;
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	f8 01       	movw	r30, r16
    2ef2:	91 83       	std	Z+1, r25	; 0x01
    2ef4:	80 83       	st	Z, r24
    2ef6:	b9 c2       	rjmp	.+1394   	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
    2ef8:	2f e6       	ldi	r18, 0x6F	; 111
    2efa:	32 e1       	ldi	r19, 0x12	; 18
    2efc:	43 e8       	ldi	r20, 0x83	; 131
    2efe:	5e e3       	ldi	r21, 0x3E	; 62
    2f00:	c7 01       	movw	r24, r14
    2f02:	b6 01       	movw	r22, r12
    2f04:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2f08:	18 16       	cp	r1, r24
    2f0a:	3c f0       	brlt	.+14     	; 0x2f1a <calc_prescaler+0x33c>
				*ptr_u16_prescale=P_8;
    2f0c:	88 e0       	ldi	r24, 0x08	; 8
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	f8 01       	movw	r30, r16
    2f12:	91 83       	std	Z+1, r25	; 0x01
    2f14:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	a8 c2       	rjmp	.+1360   	; 0x346a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
    2f1a:	2f e6       	ldi	r18, 0x6F	; 111
    2f1c:	32 e1       	ldi	r19, 0x12	; 18
    2f1e:	43 e0       	ldi	r20, 0x03	; 3
    2f20:	50 e4       	ldi	r21, 0x40	; 64
    2f22:	c7 01       	movw	r24, r14
    2f24:	b6 01       	movw	r22, r12
    2f26:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2f2a:	18 16       	cp	r1, r24
    2f2c:	3c f0       	brlt	.+14     	; 0x2f3c <calc_prescaler+0x35e>
				*ptr_u16_prescale=P_64;
    2f2e:	80 e4       	ldi	r24, 0x40	; 64
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	f8 01       	movw	r30, r16
    2f34:	91 83       	std	Z+1, r25	; 0x01
    2f36:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	97 c2       	rjmp	.+1326   	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
    2f3c:	2f e6       	ldi	r18, 0x6F	; 111
    2f3e:	32 e1       	ldi	r19, 0x12	; 18
    2f40:	43 e0       	ldi	r20, 0x03	; 3
    2f42:	51 e4       	ldi	r21, 0x41	; 65
    2f44:	c7 01       	movw	r24, r14
    2f46:	b6 01       	movw	r22, r12
    2f48:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2f4c:	18 16       	cp	r1, r24
    2f4e:	3c f0       	brlt	.+14     	; 0x2f5e <calc_prescaler+0x380>
				*ptr_u16_prescale=P_256;
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	91 e0       	ldi	r25, 0x01	; 1
    2f54:	f8 01       	movw	r30, r16
    2f56:	91 83       	std	Z+1, r25	; 0x01
    2f58:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	86 c2       	rjmp	.+1292   	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024))
    2f5e:	2f e6       	ldi	r18, 0x6F	; 111
    2f60:	32 e1       	ldi	r19, 0x12	; 18
    2f62:	43 e0       	ldi	r20, 0x03	; 3
    2f64:	52 e4       	ldi	r21, 0x42	; 66
    2f66:	c7 01       	movw	r24, r14
    2f68:	b6 01       	movw	r22, r12
    2f6a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2f6e:	18 16       	cp	r1, r24
    2f70:	3c f0       	brlt	.+14     	; 0x2f80 <calc_prescaler+0x3a2>
				*ptr_u16_prescale=P_1024;
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	94 e0       	ldi	r25, 0x04	; 4
    2f76:	f8 01       	movw	r30, r16
    2f78:	91 83       	std	Z+1, r25	; 0x01
    2f7a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	75 c2       	rjmp	.+1258   	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    2f80:	f8 01       	movw	r30, r16
    2f82:	11 82       	std	Z+1, r1	; 0x01
    2f84:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	70 c2       	rjmp	.+1248   	; 0x346a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    2f8a:	8c ed       	ldi	r24, 0xDC	; 220
    2f8c:	95 e0       	ldi	r25, 0x05	; 5
    2f8e:	f8 01       	movw	r30, r16
    2f90:	91 83       	std	Z+1, r25	; 0x01
    2f92:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	69 c2       	rjmp	.+1234   	; 0x346a <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    2f98:	41 30       	cpi	r20, 0x01	; 1
    2f9a:	09 f0       	breq	.+2      	; 0x2f9e <calc_prescaler+0x3c0>
    2f9c:	69 c0       	rjmp	.+210    	; 0x3070 <calc_prescaler+0x492>
		{

			if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024) )
    2f9e:	2f e6       	ldi	r18, 0x6F	; 111
    2fa0:	32 e1       	ldi	r19, 0x12	; 18
    2fa2:	43 e0       	ldi	r20, 0x03	; 3
    2fa4:	56 e4       	ldi	r21, 0x46	; 70
    2fa6:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2faa:	18 16       	cp	r1, r24
    2fac:	0c f4       	brge	.+2      	; 0x2fb0 <calc_prescaler+0x3d2>
    2fae:	59 c0       	rjmp	.+178    	; 0x3062 <calc_prescaler+0x484>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1))
    2fb0:	2f e6       	ldi	r18, 0x6F	; 111
    2fb2:	32 e1       	ldi	r19, 0x12	; 18
    2fb4:	43 e0       	ldi	r20, 0x03	; 3
    2fb6:	51 e4       	ldi	r21, 0x41	; 65
    2fb8:	c7 01       	movw	r24, r14
    2fba:	b6 01       	movw	r22, r12
    2fbc:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2fc0:	18 16       	cp	r1, r24
    2fc2:	34 f0       	brlt	.+12     	; 0x2fd0 <calc_prescaler+0x3f2>
				*ptr_u16_prescale=P_1;
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	f8 01       	movw	r30, r16
    2fca:	91 83       	std	Z+1, r25	; 0x01
    2fcc:	80 83       	st	Z, r24
    2fce:	4d c2       	rjmp	.+1178   	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
    2fd0:	2f e6       	ldi	r18, 0x6F	; 111
    2fd2:	32 e1       	ldi	r19, 0x12	; 18
    2fd4:	43 e8       	ldi	r20, 0x83	; 131
    2fd6:	52 e4       	ldi	r21, 0x42	; 66
    2fd8:	c7 01       	movw	r24, r14
    2fda:	b6 01       	movw	r22, r12
    2fdc:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    2fe0:	18 16       	cp	r1, r24
    2fe2:	3c f0       	brlt	.+14     	; 0x2ff2 <calc_prescaler+0x414>
				*ptr_u16_prescale=P_8;
    2fe4:	88 e0       	ldi	r24, 0x08	; 8
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	f8 01       	movw	r30, r16
    2fea:	91 83       	std	Z+1, r25	; 0x01
    2fec:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	3c c2       	rjmp	.+1144   	; 0x346a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
    2ff2:	2f e6       	ldi	r18, 0x6F	; 111
    2ff4:	32 e1       	ldi	r19, 0x12	; 18
    2ff6:	43 e0       	ldi	r20, 0x03	; 3
    2ff8:	54 e4       	ldi	r21, 0x44	; 68
    2ffa:	c7 01       	movw	r24, r14
    2ffc:	b6 01       	movw	r22, r12
    2ffe:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    3002:	18 16       	cp	r1, r24
    3004:	3c f0       	brlt	.+14     	; 0x3014 <calc_prescaler+0x436>
				*ptr_u16_prescale=P_64;
    3006:	80 e4       	ldi	r24, 0x40	; 64
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	f8 01       	movw	r30, r16
    300c:	91 83       	std	Z+1, r25	; 0x01
    300e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	2b c2       	rjmp	.+1110   	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
    3014:	2f e6       	ldi	r18, 0x6F	; 111
    3016:	32 e1       	ldi	r19, 0x12	; 18
    3018:	43 e0       	ldi	r20, 0x03	; 3
    301a:	55 e4       	ldi	r21, 0x45	; 69
    301c:	c7 01       	movw	r24, r14
    301e:	b6 01       	movw	r22, r12
    3020:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    3024:	18 16       	cp	r1, r24
    3026:	3c f0       	brlt	.+14     	; 0x3036 <calc_prescaler+0x458>
				*ptr_u16_prescale=P_256;
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	91 e0       	ldi	r25, 0x01	; 1
    302c:	f8 01       	movw	r30, r16
    302e:	91 83       	std	Z+1, r25	; 0x01
    3030:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	1a c2       	rjmp	.+1076   	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024))
    3036:	2f e6       	ldi	r18, 0x6F	; 111
    3038:	32 e1       	ldi	r19, 0x12	; 18
    303a:	43 e0       	ldi	r20, 0x03	; 3
    303c:	56 e4       	ldi	r21, 0x46	; 70
    303e:	c7 01       	movw	r24, r14
    3040:	b6 01       	movw	r22, r12
    3042:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    3046:	18 16       	cp	r1, r24
    3048:	3c f0       	brlt	.+14     	; 0x3058 <calc_prescaler+0x47a>
				*ptr_u16_prescale=P_1024;
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	94 e0       	ldi	r25, 0x04	; 4
    304e:	f8 01       	movw	r30, r16
    3050:	91 83       	std	Z+1, r25	; 0x01
    3052:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	09 c2       	rjmp	.+1042   	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale= P_0;
    3058:	f8 01       	movw	r30, r16
    305a:	11 82       	std	Z+1, r1	; 0x01
    305c:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	04 c2       	rjmp	.+1032   	; 0x346a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale= P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    3062:	8c ed       	ldi	r24, 0xDC	; 220
    3064:	95 e0       	ldi	r25, 0x05	; 5
    3066:	f8 01       	movw	r30, r16
    3068:	91 83       	std	Z+1, r25	; 0x01
    306a:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	fd c1       	rjmp	.+1018   	; 0x346a <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    3070:	42 30       	cpi	r20, 0x02	; 2
    3072:	09 f0       	breq	.+2      	; 0x3076 <calc_prescaler+0x498>
    3074:	f5 c1       	rjmp	.+1002   	; 0x3460 <calc_prescaler+0x882>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1024) )
    3076:	2f e6       	ldi	r18, 0x6F	; 111
    3078:	32 e1       	ldi	r19, 0x12	; 18
    307a:	43 e0       	ldi	r20, 0x03	; 3
    307c:	52 e4       	ldi	r21, 0x42	; 66
    307e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    3082:	18 16       	cp	r1, r24
    3084:	0c f4       	brge	.+2      	; 0x3088 <calc_prescaler+0x4aa>
    3086:	7b c0       	rjmp	.+246    	; 0x317e <calc_prescaler+0x5a0>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
    3088:	2f e6       	ldi	r18, 0x6F	; 111
    308a:	32 e1       	ldi	r19, 0x12	; 18
    308c:	43 e0       	ldi	r20, 0x03	; 3
    308e:	5d e3       	ldi	r21, 0x3D	; 61
    3090:	c7 01       	movw	r24, r14
    3092:	b6 01       	movw	r22, r12
    3094:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    3098:	18 16       	cp	r1, r24
    309a:	34 f0       	brlt	.+12     	; 0x30a8 <calc_prescaler+0x4ca>
				*ptr_u16_prescale=P_1;
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	f8 01       	movw	r30, r16
    30a2:	91 83       	std	Z+1, r25	; 0x01
    30a4:	80 83       	st	Z, r24
    30a6:	e1 c1       	rjmp	.+962    	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
    30a8:	2f e6       	ldi	r18, 0x6F	; 111
    30aa:	32 e1       	ldi	r19, 0x12	; 18
    30ac:	43 e8       	ldi	r20, 0x83	; 131
    30ae:	5e e3       	ldi	r21, 0x3E	; 62
    30b0:	c7 01       	movw	r24, r14
    30b2:	b6 01       	movw	r22, r12
    30b4:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    30b8:	18 16       	cp	r1, r24
    30ba:	3c f0       	brlt	.+14     	; 0x30ca <calc_prescaler+0x4ec>
				*ptr_u16_prescale=P_8;
    30bc:	88 e0       	ldi	r24, 0x08	; 8
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	f8 01       	movw	r30, r16
    30c2:	91 83       	std	Z+1, r25	; 0x01
    30c4:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	d0 c1       	rjmp	.+928    	; 0x346a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_MS(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
    30ca:	2f e6       	ldi	r18, 0x6F	; 111
    30cc:	32 e1       	ldi	r19, 0x12	; 18
    30ce:	43 e8       	ldi	r20, 0x83	; 131
    30d0:	5f e3       	ldi	r21, 0x3F	; 63
    30d2:	c7 01       	movw	r24, r14
    30d4:	b6 01       	movw	r22, r12
    30d6:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    30da:	18 16       	cp	r1, r24
    30dc:	3c f0       	brlt	.+14     	; 0x30ec <calc_prescaler+0x50e>
				*ptr_u16_prescale=P_32;
    30de:	80 e2       	ldi	r24, 0x20	; 32
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	f8 01       	movw	r30, r16
    30e4:	91 83       	std	Z+1, r25	; 0x01
    30e6:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	bf c1       	rjmp	.+894    	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
    30ec:	2f e6       	ldi	r18, 0x6F	; 111
    30ee:	32 e1       	ldi	r19, 0x12	; 18
    30f0:	43 e0       	ldi	r20, 0x03	; 3
    30f2:	50 e4       	ldi	r21, 0x40	; 64
    30f4:	c7 01       	movw	r24, r14
    30f6:	b6 01       	movw	r22, r12
    30f8:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    30fc:	18 16       	cp	r1, r24
    30fe:	3c f0       	brlt	.+14     	; 0x310e <calc_prescaler+0x530>
				*ptr_u16_prescale=P_64;
    3100:	80 e4       	ldi	r24, 0x40	; 64
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	f8 01       	movw	r30, r16
    3106:	91 83       	std	Z+1, r25	; 0x01
    3108:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	ae c1       	rjmp	.+860    	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
    310e:	2f e6       	ldi	r18, 0x6F	; 111
    3110:	32 e1       	ldi	r19, 0x12	; 18
    3112:	43 e8       	ldi	r20, 0x83	; 131
    3114:	50 e4       	ldi	r21, 0x40	; 64
    3116:	c7 01       	movw	r24, r14
    3118:	b6 01       	movw	r22, r12
    311a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    311e:	18 16       	cp	r1, r24
    3120:	3c f0       	brlt	.+14     	; 0x3130 <calc_prescaler+0x552>
				*ptr_u16_prescale=P_128;
    3122:	80 e8       	ldi	r24, 0x80	; 128
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	f8 01       	movw	r30, r16
    3128:	91 83       	std	Z+1, r25	; 0x01
    312a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	9d c1       	rjmp	.+826    	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
    3130:	2f e6       	ldi	r18, 0x6F	; 111
    3132:	32 e1       	ldi	r19, 0x12	; 18
    3134:	43 e0       	ldi	r20, 0x03	; 3
    3136:	51 e4       	ldi	r21, 0x41	; 65
    3138:	c7 01       	movw	r24, r14
    313a:	b6 01       	movw	r22, r12
    313c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    3140:	18 16       	cp	r1, r24
    3142:	3c f0       	brlt	.+14     	; 0x3152 <calc_prescaler+0x574>
				*ptr_u16_prescale=P_256;
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	91 e0       	ldi	r25, 0x01	; 1
    3148:	f8 01       	movw	r30, r16
    314a:	91 83       	std	Z+1, r25	; 0x01
    314c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	8c c1       	rjmp	.+792    	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_MS(P_1024))
    3152:	2f e6       	ldi	r18, 0x6F	; 111
    3154:	32 e1       	ldi	r19, 0x12	; 18
    3156:	43 e0       	ldi	r20, 0x03	; 3
    3158:	52 e4       	ldi	r21, 0x42	; 66
    315a:	c7 01       	movw	r24, r14
    315c:	b6 01       	movw	r22, r12
    315e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    3162:	18 16       	cp	r1, r24
    3164:	3c f0       	brlt	.+14     	; 0x3174 <calc_prescaler+0x596>
				*ptr_u16_prescale=P_1024;
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	94 e0       	ldi	r25, 0x04	; 4
    316a:	f8 01       	movw	r30, r16
    316c:	91 83       	std	Z+1, r25	; 0x01
    316e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	7b c1       	rjmp	.+758    	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_MS(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_MS(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    3174:	f8 01       	movw	r30, r16
    3176:	11 82       	std	Z+1, r1	; 0x01
    3178:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	76 c1       	rjmp	.+748    	; 0x346a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    317e:	8c ed       	ldi	r24, 0xDC	; 220
    3180:	95 e0       	ldi	r25, 0x05	; 5
    3182:	f8 01       	movw	r30, r16
    3184:	91 83       	std	Z+1, r25	; 0x01
    3186:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	6f c1       	rjmp	.+734    	; 0x346a <calc_prescaler+0x88c>
		{
			bo_return_value = FALSE;
			// do nothing
		}
	}
	else if (enu_time_unit == ENU_SECOND)
    318c:	22 30       	cpi	r18, 0x02	; 2
    318e:	09 f0       	breq	.+2      	; 0x3192 <calc_prescaler+0x5b4>
    3190:	69 c1       	rjmp	.+722    	; 0x3464 <calc_prescaler+0x886>
	{
		if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    3192:	41 11       	cpse	r20, r1
    3194:	69 c0       	rjmp	.+210    	; 0x3268 <calc_prescaler+0x68a>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024) )
    3196:	2d eb       	ldi	r18, 0xBD	; 189
    3198:	37 e3       	ldi	r19, 0x37	; 55
    319a:	46 e0       	ldi	r20, 0x06	; 6
    319c:	5d e3       	ldi	r21, 0x3D	; 61
    319e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    31a2:	18 16       	cp	r1, r24
    31a4:	0c f4       	brge	.+2      	; 0x31a8 <calc_prescaler+0x5ca>
    31a6:	59 c0       	rjmp	.+178    	; 0x325a <calc_prescaler+0x67c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
    31a8:	2d eb       	ldi	r18, 0xBD	; 189
    31aa:	37 e3       	ldi	r19, 0x37	; 55
    31ac:	46 e0       	ldi	r20, 0x06	; 6
    31ae:	58 e3       	ldi	r21, 0x38	; 56
    31b0:	c7 01       	movw	r24, r14
    31b2:	b6 01       	movw	r22, r12
    31b4:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    31b8:	18 16       	cp	r1, r24
    31ba:	34 f0       	brlt	.+12     	; 0x31c8 <calc_prescaler+0x5ea>
				*ptr_u16_prescale=P_1;
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	f8 01       	movw	r30, r16
    31c2:	91 83       	std	Z+1, r25	; 0x01
    31c4:	80 83       	st	Z, r24
    31c6:	51 c1       	rjmp	.+674    	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
    31c8:	2d eb       	ldi	r18, 0xBD	; 189
    31ca:	37 e3       	ldi	r19, 0x37	; 55
    31cc:	46 e8       	ldi	r20, 0x86	; 134
    31ce:	59 e3       	ldi	r21, 0x39	; 57
    31d0:	c7 01       	movw	r24, r14
    31d2:	b6 01       	movw	r22, r12
    31d4:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    31d8:	18 16       	cp	r1, r24
    31da:	3c f0       	brlt	.+14     	; 0x31ea <calc_prescaler+0x60c>
				*ptr_u16_prescale=P_8;
    31dc:	88 e0       	ldi	r24, 0x08	; 8
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	f8 01       	movw	r30, r16
    31e2:	91 83       	std	Z+1, r25	; 0x01
    31e4:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	40 c1       	rjmp	.+640    	; 0x346a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
    31ea:	2d eb       	ldi	r18, 0xBD	; 189
    31ec:	37 e3       	ldi	r19, 0x37	; 55
    31ee:	46 e0       	ldi	r20, 0x06	; 6
    31f0:	5b e3       	ldi	r21, 0x3B	; 59
    31f2:	c7 01       	movw	r24, r14
    31f4:	b6 01       	movw	r22, r12
    31f6:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    31fa:	18 16       	cp	r1, r24
    31fc:	3c f0       	brlt	.+14     	; 0x320c <calc_prescaler+0x62e>
				*ptr_u16_prescale=P_64;
    31fe:	80 e4       	ldi	r24, 0x40	; 64
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	f8 01       	movw	r30, r16
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	2f c1       	rjmp	.+606    	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
    320c:	2d eb       	ldi	r18, 0xBD	; 189
    320e:	37 e3       	ldi	r19, 0x37	; 55
    3210:	46 e0       	ldi	r20, 0x06	; 6
    3212:	5c e3       	ldi	r21, 0x3C	; 60
    3214:	c7 01       	movw	r24, r14
    3216:	b6 01       	movw	r22, r12
    3218:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    321c:	18 16       	cp	r1, r24
    321e:	3c f0       	brlt	.+14     	; 0x322e <calc_prescaler+0x650>
				*ptr_u16_prescale=P_256;
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	91 e0       	ldi	r25, 0x01	; 1
    3224:	f8 01       	movw	r30, r16
    3226:	91 83       	std	Z+1, r25	; 0x01
    3228:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	1e c1       	rjmp	.+572    	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024))
    322e:	2d eb       	ldi	r18, 0xBD	; 189
    3230:	37 e3       	ldi	r19, 0x37	; 55
    3232:	46 e0       	ldi	r20, 0x06	; 6
    3234:	5d e3       	ldi	r21, 0x3D	; 61
    3236:	c7 01       	movw	r24, r14
    3238:	b6 01       	movw	r22, r12
    323a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    323e:	18 16       	cp	r1, r24
    3240:	3c f0       	brlt	.+14     	; 0x3250 <calc_prescaler+0x672>
				*ptr_u16_prescale=P_1024;
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	94 e0       	ldi	r25, 0x04	; 4
    3246:	f8 01       	movw	r30, r16
    3248:	91 83       	std	Z+1, r25	; 0x01
    324a:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	0d c1       	rjmp	.+538    	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    3250:	f8 01       	movw	r30, r16
    3252:	11 82       	std	Z+1, r1	; 0x01
    3254:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	08 c1       	rjmp	.+528    	; 0x346a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    325a:	8c ed       	ldi	r24, 0xDC	; 220
    325c:	95 e0       	ldi	r25, 0x05	; 5
    325e:	f8 01       	movw	r30, r16
    3260:	91 83       	std	Z+1, r25	; 0x01
    3262:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	01 c1       	rjmp	.+514    	; 0x346a <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    3268:	41 30       	cpi	r20, 0x01	; 1
    326a:	09 f0       	breq	.+2      	; 0x326e <calc_prescaler+0x690>
    326c:	69 c0       	rjmp	.+210    	; 0x3340 <calc_prescaler+0x762>
		{
			if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024) )
    326e:	2d eb       	ldi	r18, 0xBD	; 189
    3270:	37 e3       	ldi	r19, 0x37	; 55
    3272:	46 e0       	ldi	r20, 0x06	; 6
    3274:	51 e4       	ldi	r21, 0x41	; 65
    3276:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    327a:	18 16       	cp	r1, r24
    327c:	0c f4       	brge	.+2      	; 0x3280 <calc_prescaler+0x6a2>
    327e:	59 c0       	rjmp	.+178    	; 0x3332 <calc_prescaler+0x754>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1))
    3280:	2d eb       	ldi	r18, 0xBD	; 189
    3282:	37 e3       	ldi	r19, 0x37	; 55
    3284:	46 e0       	ldi	r20, 0x06	; 6
    3286:	5c e3       	ldi	r21, 0x3C	; 60
    3288:	c7 01       	movw	r24, r14
    328a:	b6 01       	movw	r22, r12
    328c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    3290:	18 16       	cp	r1, r24
    3292:	34 f0       	brlt	.+12     	; 0x32a0 <calc_prescaler+0x6c2>
				*ptr_u16_prescale=P_1;
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	f8 01       	movw	r30, r16
    329a:	91 83       	std	Z+1, r25	; 0x01
    329c:	80 83       	st	Z, r24
    329e:	e5 c0       	rjmp	.+458    	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
    32a0:	2d eb       	ldi	r18, 0xBD	; 189
    32a2:	37 e3       	ldi	r19, 0x37	; 55
    32a4:	46 e8       	ldi	r20, 0x86	; 134
    32a6:	5d e3       	ldi	r21, 0x3D	; 61
    32a8:	c7 01       	movw	r24, r14
    32aa:	b6 01       	movw	r22, r12
    32ac:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    32b0:	18 16       	cp	r1, r24
    32b2:	3c f0       	brlt	.+14     	; 0x32c2 <calc_prescaler+0x6e4>
				*ptr_u16_prescale=P_8;
    32b4:	88 e0       	ldi	r24, 0x08	; 8
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	f8 01       	movw	r30, r16
    32ba:	91 83       	std	Z+1, r25	; 0x01
    32bc:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	d4 c0       	rjmp	.+424    	; 0x346a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
    32c2:	2d eb       	ldi	r18, 0xBD	; 189
    32c4:	37 e3       	ldi	r19, 0x37	; 55
    32c6:	46 e0       	ldi	r20, 0x06	; 6
    32c8:	5f e3       	ldi	r21, 0x3F	; 63
    32ca:	c7 01       	movw	r24, r14
    32cc:	b6 01       	movw	r22, r12
    32ce:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    32d2:	18 16       	cp	r1, r24
    32d4:	3c f0       	brlt	.+14     	; 0x32e4 <calc_prescaler+0x706>
				*ptr_u16_prescale=P_64;
    32d6:	80 e4       	ldi	r24, 0x40	; 64
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	f8 01       	movw	r30, r16
    32dc:	91 83       	std	Z+1, r25	; 0x01
    32de:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	c3 c0       	rjmp	.+390    	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
    32e4:	2d eb       	ldi	r18, 0xBD	; 189
    32e6:	37 e3       	ldi	r19, 0x37	; 55
    32e8:	46 e0       	ldi	r20, 0x06	; 6
    32ea:	50 e4       	ldi	r21, 0x40	; 64
    32ec:	c7 01       	movw	r24, r14
    32ee:	b6 01       	movw	r22, r12
    32f0:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    32f4:	18 16       	cp	r1, r24
    32f6:	3c f0       	brlt	.+14     	; 0x3306 <calc_prescaler+0x728>
				*ptr_u16_prescale=P_256;
    32f8:	80 e0       	ldi	r24, 0x00	; 0
    32fa:	91 e0       	ldi	r25, 0x01	; 1
    32fc:	f8 01       	movw	r30, r16
    32fe:	91 83       	std	Z+1, r25	; 0x01
    3300:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	b2 c0       	rjmp	.+356    	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024))
    3306:	2d eb       	ldi	r18, 0xBD	; 189
    3308:	37 e3       	ldi	r19, 0x37	; 55
    330a:	46 e0       	ldi	r20, 0x06	; 6
    330c:	51 e4       	ldi	r21, 0x41	; 65
    330e:	c7 01       	movw	r24, r14
    3310:	b6 01       	movw	r22, r12
    3312:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    3316:	18 16       	cp	r1, r24
    3318:	3c f0       	brlt	.+14     	; 0x3328 <calc_prescaler+0x74a>
				*ptr_u16_prescale=P_1024;
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	94 e0       	ldi	r25, 0x04	; 4
    331e:	f8 01       	movw	r30, r16
    3320:	91 83       	std	Z+1, r25	; 0x01
    3322:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	a1 c0       	rjmp	.+322    	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <= MAX_16_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    3328:	f8 01       	movw	r30, r16
    332a:	11 82       	std	Z+1, r1	; 0x01
    332c:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	9c c0       	rjmp	.+312    	; 0x346a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    3332:	8c ed       	ldi	r24, 0xDC	; 220
    3334:	95 e0       	ldi	r25, 0x05	; 5
    3336:	f8 01       	movw	r30, r16
    3338:	91 83       	std	Z+1, r25	; 0x01
    333a:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	95 c0       	rjmp	.+298    	; 0x346a <calc_prescaler+0x88c>
			}
		}
		else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    3340:	42 30       	cpi	r20, 0x02	; 2
    3342:	09 f0       	breq	.+2      	; 0x3346 <calc_prescaler+0x768>
    3344:	91 c0       	rjmp	.+290    	; 0x3468 <calc_prescaler+0x88a>
		{
			if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1024) )
    3346:	2d eb       	ldi	r18, 0xBD	; 189
    3348:	37 e3       	ldi	r19, 0x37	; 55
    334a:	46 e0       	ldi	r20, 0x06	; 6
    334c:	5d e3       	ldi	r21, 0x3D	; 61
    334e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    3352:	18 16       	cp	r1, r24
    3354:	0c f4       	brge	.+2      	; 0x3358 <calc_prescaler+0x77a>
    3356:	7b c0       	rjmp	.+246    	; 0x344e <calc_prescaler+0x870>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
    3358:	2d eb       	ldi	r18, 0xBD	; 189
    335a:	37 e3       	ldi	r19, 0x37	; 55
    335c:	46 e0       	ldi	r20, 0x06	; 6
    335e:	58 e3       	ldi	r21, 0x38	; 56
    3360:	c7 01       	movw	r24, r14
    3362:	b6 01       	movw	r22, r12
    3364:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    3368:	18 16       	cp	r1, r24
    336a:	34 f0       	brlt	.+12     	; 0x3378 <calc_prescaler+0x79a>
				*ptr_u16_prescale=P_1;
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	f8 01       	movw	r30, r16
    3372:	91 83       	std	Z+1, r25	; 0x01
    3374:	80 83       	st	Z, r24
    3376:	79 c0       	rjmp	.+242    	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
    3378:	2d eb       	ldi	r18, 0xBD	; 189
    337a:	37 e3       	ldi	r19, 0x37	; 55
    337c:	46 e8       	ldi	r20, 0x86	; 134
    337e:	59 e3       	ldi	r21, 0x39	; 57
    3380:	c7 01       	movw	r24, r14
    3382:	b6 01       	movw	r22, r12
    3384:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    3388:	18 16       	cp	r1, r24
    338a:	3c f0       	brlt	.+14     	; 0x339a <calc_prescaler+0x7bc>
				*ptr_u16_prescale=P_8;
    338c:	88 e0       	ldi	r24, 0x08	; 8
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	f8 01       	movw	r30, r16
    3392:	91 83       	std	Z+1, r25	; 0x01
    3394:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	68 c0       	rjmp	.+208    	; 0x346a <calc_prescaler+0x88c>
			{
				if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_1))
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
    339a:	2d eb       	ldi	r18, 0xBD	; 189
    339c:	37 e3       	ldi	r19, 0x37	; 55
    339e:	46 e8       	ldi	r20, 0x86	; 134
    33a0:	5a e3       	ldi	r21, 0x3A	; 58
    33a2:	c7 01       	movw	r24, r14
    33a4:	b6 01       	movw	r22, r12
    33a6:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    33aa:	18 16       	cp	r1, r24
    33ac:	3c f0       	brlt	.+14     	; 0x33bc <calc_prescaler+0x7de>
				*ptr_u16_prescale=P_32;
    33ae:	80 e2       	ldi	r24, 0x20	; 32
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	f8 01       	movw	r30, r16
    33b4:	91 83       	std	Z+1, r25	; 0x01
    33b6:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	57 c0       	rjmp	.+174    	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_1;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_8))
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
    33bc:	2d eb       	ldi	r18, 0xBD	; 189
    33be:	37 e3       	ldi	r19, 0x37	; 55
    33c0:	46 e0       	ldi	r20, 0x06	; 6
    33c2:	5b e3       	ldi	r21, 0x3B	; 59
    33c4:	c7 01       	movw	r24, r14
    33c6:	b6 01       	movw	r22, r12
    33c8:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    33cc:	18 16       	cp	r1, r24
    33ce:	3c f0       	brlt	.+14     	; 0x33de <calc_prescaler+0x800>
				*ptr_u16_prescale=P_64;
    33d0:	80 e4       	ldi	r24, 0x40	; 64
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	f8 01       	movw	r30, r16
    33d6:	91 83       	std	Z+1, r25	; 0x01
    33d8:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	46 c0       	rjmp	.+140    	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_8;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_32))
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
    33de:	2d eb       	ldi	r18, 0xBD	; 189
    33e0:	37 e3       	ldi	r19, 0x37	; 55
    33e2:	46 e8       	ldi	r20, 0x86	; 134
    33e4:	5b e3       	ldi	r21, 0x3B	; 59
    33e6:	c7 01       	movw	r24, r14
    33e8:	b6 01       	movw	r22, r12
    33ea:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    33ee:	18 16       	cp	r1, r24
    33f0:	3c f0       	brlt	.+14     	; 0x3400 <calc_prescaler+0x822>
				*ptr_u16_prescale=P_128;
    33f2:	80 e8       	ldi	r24, 0x80	; 128
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	f8 01       	movw	r30, r16
    33f8:	91 83       	std	Z+1, r25	; 0x01
    33fa:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	35 c0       	rjmp	.+106    	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_32;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_64))
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
    3400:	2d eb       	ldi	r18, 0xBD	; 189
    3402:	37 e3       	ldi	r19, 0x37	; 55
    3404:	46 e0       	ldi	r20, 0x06	; 6
    3406:	5c e3       	ldi	r21, 0x3C	; 60
    3408:	c7 01       	movw	r24, r14
    340a:	b6 01       	movw	r22, r12
    340c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    3410:	18 16       	cp	r1, r24
    3412:	3c f0       	brlt	.+14     	; 0x3422 <calc_prescaler+0x844>
				*ptr_u16_prescale=P_256;
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	91 e0       	ldi	r25, 0x01	; 1
    3418:	f8 01       	movw	r30, r16
    341a:	91 83       	std	Z+1, r25	; 0x01
    341c:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	24 c0       	rjmp	.+72     	; 0x346a <calc_prescaler+0x88c>
				*ptr_u16_prescale=P_64;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_128))
				*ptr_u16_prescale=P_128;
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_SEC(P_1024))
    3422:	2d eb       	ldi	r18, 0xBD	; 189
    3424:	37 e3       	ldi	r19, 0x37	; 55
    3426:	46 e0       	ldi	r20, 0x06	; 6
    3428:	5d e3       	ldi	r21, 0x3D	; 61
    342a:	c7 01       	movw	r24, r14
    342c:	b6 01       	movw	r22, r12
    342e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <__cmpsf2>
    3432:	18 16       	cp	r1, r24
    3434:	3c f0       	brlt	.+14     	; 0x3444 <calc_prescaler+0x866>
				*ptr_u16_prescale=P_1024;
    3436:	80 e0       	ldi	r24, 0x00	; 0
    3438:	94 e0       	ldi	r25, 0x04	; 4
    343a:	f8 01       	movw	r30, r16
    343c:	91 83       	std	Z+1, r25	; 0x01
    343e:	80 83       	st	Z, r24
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	13 c0       	rjmp	.+38     	; 0x346a <calc_prescaler+0x88c>
				else if(f32_delay <= MAX_8_BIT_DELAY_SEC(P_256))
				*ptr_u16_prescale=P_256;
				else if(f32_delay <=MAX_8_BIT_DELAY_SEC(P_1024))
				*ptr_u16_prescale=P_1024;
				else
				*ptr_u16_prescale = P_0;
    3444:	f8 01       	movw	r30, r16
    3446:	11 82       	std	Z+1, r1	; 0x01
    3448:	10 82       	st	Z, r1
/**
 * @brief       calc_prescaler				: function used to notify the upper layer when interrupt happen
 */
BOOLEAN calc_prescaler(float32 f32_delay,enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16* ptr_u16_prescale)
{
	BOOLEAN bo_return_value = TRUE;
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	0e c0       	rjmp	.+28     	; 0x346a <calc_prescaler+0x88c>
				else
				*ptr_u16_prescale = P_0;
			}
			else
			{
				*ptr_u16_prescale = NO_FIT_PRESCALER;
    344e:	8c ed       	ldi	r24, 0xDC	; 220
    3450:	95 e0       	ldi	r25, 0x05	; 5
    3452:	f8 01       	movw	r30, r16
    3454:	91 83       	std	Z+1, r25	; 0x01
    3456:	80 83       	st	Z, r24
				bo_return_value = TRUE;
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	07 c0       	rjmp	.+14     	; 0x346a <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	05 c0       	rjmp	.+10     	; 0x346a <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	03 c0       	rjmp	.+6      	; 0x346a <calc_prescaler+0x88c>
			// do nothing
		}
	}
	else
	{
		bo_return_value = FALSE;
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	01 c0       	rjmp	.+2      	; 0x346a <calc_prescaler+0x88c>
				bo_return_value = TRUE;
			}
		}
		else
		{
			bo_return_value = FALSE;
    3468:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		bo_return_value = FALSE;
	}
	return bo_return_value;
}
    346a:	1f 91       	pop	r17
    346c:	0f 91       	pop	r16
    346e:	ff 90       	pop	r15
    3470:	ef 90       	pop	r14
    3472:	df 90       	pop	r13
    3474:	cf 90       	pop	r12
    3476:	08 95       	ret

00003478 <calc_initialValue>:

/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
    3478:	ef 92       	push	r14
    347a:	ff 92       	push	r15
    347c:	0f 93       	push	r16
    347e:	1f 93       	push	r17
	BOOLEAN bo_return_value = TRUE;
	if(enu_tmr_channel_id == ENU_TMR_CHANNEL_0)
    3480:	81 11       	cpse	r24, r1
    3482:	8a c1       	rjmp	.+788    	; 0x3798 <calc_initialValue+0x320>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    3484:	61 11       	cpse	r22, r1
    3486:	7c c0       	rjmp	.+248    	; 0x3580 <calc_initialValue+0x108>
		{
			switch(prescaler)
    3488:	40 34       	cpi	r20, 0x40	; 64
    348a:	51 05       	cpc	r21, r1
    348c:	a9 f1       	breq	.+106    	; 0x34f8 <calc_initialValue+0x80>
    348e:	38 f4       	brcc	.+14     	; 0x349e <calc_initialValue+0x26>
    3490:	41 30       	cpi	r20, 0x01	; 1
    3492:	51 05       	cpc	r21, r1
    3494:	69 f0       	breq	.+26     	; 0x34b0 <calc_initialValue+0x38>
    3496:	48 30       	cpi	r20, 0x08	; 8
    3498:	51 05       	cpc	r21, r1
    349a:	f9 f0       	breq	.+62     	; 0x34da <calc_initialValue+0x62>
    349c:	6c c0       	rjmp	.+216    	; 0x3576 <calc_initialValue+0xfe>
    349e:	41 15       	cp	r20, r1
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	58 07       	cpc	r21, r24
    34a4:	f1 f1       	breq	.+124    	; 0x3522 <calc_initialValue+0xaa>
    34a6:	41 15       	cp	r20, r1
    34a8:	54 40       	sbci	r21, 0x04	; 4
    34aa:	09 f4       	brne	.+2      	; 0x34ae <calc_initialValue+0x36>
    34ac:	4f c0       	rjmp	.+158    	; 0x354c <calc_initialValue+0xd4>
    34ae:	63 c0       	rjmp	.+198    	; 0x3576 <calc_initialValue+0xfe>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    34b0:	a9 01       	movw	r20, r18
    34b2:	98 01       	movw	r18, r16
    34b4:	60 e0       	ldi	r22, 0x00	; 0
    34b6:	70 e0       	ldi	r23, 0x00	; 0
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	92 e4       	ldi	r25, 0x42	; 66
    34bc:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	40 e0       	ldi	r20, 0x00	; 0
    34c6:	51 e4       	ldi	r21, 0x41	; 65
    34c8:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    34cc:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    34d0:	f7 01       	movw	r30, r14
    34d2:	71 83       	std	Z+1, r23	; 0x01
    34d4:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    34d6:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    34d8:	1d c5       	rjmp	.+2618   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    34da:	a9 01       	movw	r20, r18
    34dc:	98 01       	movw	r18, r16
    34de:	60 e0       	ldi	r22, 0x00	; 0
    34e0:	70 e0       	ldi	r23, 0x00	; 0
    34e2:	80 e8       	ldi	r24, 0x80	; 128
    34e4:	93 e4       	ldi	r25, 0x43	; 67
    34e6:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    34ea:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    34ee:	f7 01       	movw	r30, r14
    34f0:	71 83       	std	Z+1, r23	; 0x01
    34f2:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    34f4:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    34f6:	0e c5       	rjmp	.+2588   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    34f8:	a9 01       	movw	r20, r18
    34fa:	98 01       	movw	r18, r16
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	70 e0       	ldi	r23, 0x00	; 0
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	95 e4       	ldi	r25, 0x45	; 69
    3504:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	40 e0       	ldi	r20, 0x00	; 0
    350e:	5e e3       	ldi	r21, 0x3E	; 62
    3510:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    3514:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3518:	f7 01       	movw	r30, r14
    351a:	71 83       	std	Z+1, r23	; 0x01
    351c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    351e:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    3520:	f9 c4       	rjmp	.+2546   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    3522:	a9 01       	movw	r20, r18
    3524:	98 01       	movw	r18, r16
    3526:	60 e0       	ldi	r22, 0x00	; 0
    3528:	70 e0       	ldi	r23, 0x00	; 0
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	96 e4       	ldi	r25, 0x46	; 70
    352e:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	40 e0       	ldi	r20, 0x00	; 0
    3538:	5d e3       	ldi	r21, 0x3D	; 61
    353a:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    353e:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3542:	f7 01       	movw	r30, r14
    3544:	71 83       	std	Z+1, r23	; 0x01
    3546:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3548:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    354a:	e4 c4       	rjmp	.+2504   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    354c:	a9 01       	movw	r20, r18
    354e:	98 01       	movw	r18, r16
    3550:	60 e0       	ldi	r22, 0x00	; 0
    3552:	70 e0       	ldi	r23, 0x00	; 0
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	97 e4       	ldi	r25, 0x47	; 71
    3558:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	40 e0       	ldi	r20, 0x00	; 0
    3562:	5c e3       	ldi	r21, 0x3C	; 60
    3564:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    3568:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    356c:	f7 01       	movw	r30, r14
    356e:	71 83       	std	Z+1, r23	; 0x01
    3570:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3572:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    3574:	cf c4       	rjmp	.+2462   	; 0x3f14 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    3576:	f7 01       	movw	r30, r14
    3578:	11 82       	std	Z+1, r1	; 0x01
    357a:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    357c:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    357e:	ca c4       	rjmp	.+2452   	; 0x3f14 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    3580:	61 30       	cpi	r22, 0x01	; 1
    3582:	09 f0       	breq	.+2      	; 0x3586 <calc_initialValue+0x10e>
    3584:	83 c0       	rjmp	.+262    	; 0x368c <calc_initialValue+0x214>
		{
			switch(prescaler)
    3586:	40 34       	cpi	r20, 0x40	; 64
    3588:	51 05       	cpc	r21, r1
    358a:	e1 f1       	breq	.+120    	; 0x3604 <calc_initialValue+0x18c>
    358c:	38 f4       	brcc	.+14     	; 0x359c <calc_initialValue+0x124>
    358e:	41 30       	cpi	r20, 0x01	; 1
    3590:	51 05       	cpc	r21, r1
    3592:	71 f0       	breq	.+28     	; 0x35b0 <calc_initialValue+0x138>
    3594:	48 30       	cpi	r20, 0x08	; 8
    3596:	51 05       	cpc	r21, r1
    3598:	01 f1       	breq	.+64     	; 0x35da <calc_initialValue+0x162>
    359a:	73 c0       	rjmp	.+230    	; 0x3682 <calc_initialValue+0x20a>
    359c:	41 15       	cp	r20, r1
    359e:	f1 e0       	ldi	r31, 0x01	; 1
    35a0:	5f 07       	cpc	r21, r31
    35a2:	09 f4       	brne	.+2      	; 0x35a6 <calc_initialValue+0x12e>
    35a4:	44 c0       	rjmp	.+136    	; 0x362e <calc_initialValue+0x1b6>
    35a6:	41 15       	cp	r20, r1
    35a8:	54 40       	sbci	r21, 0x04	; 4
    35aa:	09 f4       	brne	.+2      	; 0x35ae <calc_initialValue+0x136>
    35ac:	55 c0       	rjmp	.+170    	; 0x3658 <calc_initialValue+0x1e0>
    35ae:	69 c0       	rjmp	.+210    	; 0x3682 <calc_initialValue+0x20a>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    35b0:	a9 01       	movw	r20, r18
    35b2:	98 01       	movw	r18, r16
    35b4:	6f e6       	ldi	r22, 0x6F	; 111
    35b6:	72 e1       	ldi	r23, 0x12	; 18
    35b8:	83 e0       	ldi	r24, 0x03	; 3
    35ba:	9d e3       	ldi	r25, 0x3D	; 61
    35bc:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    35c0:	2f e6       	ldi	r18, 0x6F	; 111
    35c2:	32 e1       	ldi	r19, 0x12	; 18
    35c4:	43 e0       	ldi	r20, 0x03	; 3
    35c6:	59 e3       	ldi	r21, 0x39	; 57
    35c8:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    35cc:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    35d0:	f7 01       	movw	r30, r14
    35d2:	71 83       	std	Z+1, r23	; 0x01
    35d4:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    35d6:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    35d8:	9d c4       	rjmp	.+2362   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    35da:	a9 01       	movw	r20, r18
    35dc:	98 01       	movw	r18, r16
    35de:	6f e6       	ldi	r22, 0x6F	; 111
    35e0:	72 e1       	ldi	r23, 0x12	; 18
    35e2:	83 e8       	ldi	r24, 0x83	; 131
    35e4:	9e e3       	ldi	r25, 0x3E	; 62
    35e6:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    35ea:	2f e6       	ldi	r18, 0x6F	; 111
    35ec:	32 e1       	ldi	r19, 0x12	; 18
    35ee:	43 e8       	ldi	r20, 0x83	; 131
    35f0:	5a e3       	ldi	r21, 0x3A	; 58
    35f2:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    35f6:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    35fa:	f7 01       	movw	r30, r14
    35fc:	71 83       	std	Z+1, r23	; 0x01
    35fe:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3600:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    3602:	88 c4       	rjmp	.+2320   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    3604:	a9 01       	movw	r20, r18
    3606:	98 01       	movw	r18, r16
    3608:	6f e6       	ldi	r22, 0x6F	; 111
    360a:	72 e1       	ldi	r23, 0x12	; 18
    360c:	83 e0       	ldi	r24, 0x03	; 3
    360e:	90 e4       	ldi	r25, 0x40	; 64
    3610:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3614:	2f e6       	ldi	r18, 0x6F	; 111
    3616:	32 e1       	ldi	r19, 0x12	; 18
    3618:	43 e0       	ldi	r20, 0x03	; 3
    361a:	5c e3       	ldi	r21, 0x3C	; 60
    361c:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3620:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3624:	f7 01       	movw	r30, r14
    3626:	71 83       	std	Z+1, r23	; 0x01
    3628:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    362a:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    362c:	73 c4       	rjmp	.+2278   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    362e:	a9 01       	movw	r20, r18
    3630:	98 01       	movw	r18, r16
    3632:	6f e6       	ldi	r22, 0x6F	; 111
    3634:	72 e1       	ldi	r23, 0x12	; 18
    3636:	83 e0       	ldi	r24, 0x03	; 3
    3638:	91 e4       	ldi	r25, 0x41	; 65
    363a:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    363e:	2f e6       	ldi	r18, 0x6F	; 111
    3640:	32 e1       	ldi	r19, 0x12	; 18
    3642:	43 e0       	ldi	r20, 0x03	; 3
    3644:	5d e3       	ldi	r21, 0x3D	; 61
    3646:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    364a:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    364e:	f7 01       	movw	r30, r14
    3650:	71 83       	std	Z+1, r23	; 0x01
    3652:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3654:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    3656:	5e c4       	rjmp	.+2236   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    3658:	a9 01       	movw	r20, r18
    365a:	98 01       	movw	r18, r16
    365c:	6f e6       	ldi	r22, 0x6F	; 111
    365e:	72 e1       	ldi	r23, 0x12	; 18
    3660:	83 e0       	ldi	r24, 0x03	; 3
    3662:	92 e4       	ldi	r25, 0x42	; 66
    3664:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3668:	2f e6       	ldi	r18, 0x6F	; 111
    366a:	32 e1       	ldi	r19, 0x12	; 18
    366c:	43 e0       	ldi	r20, 0x03	; 3
    366e:	5e e3       	ldi	r21, 0x3E	; 62
    3670:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3674:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3678:	f7 01       	movw	r30, r14
    367a:	71 83       	std	Z+1, r23	; 0x01
    367c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    367e:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    3680:	49 c4       	rjmp	.+2194   	; 0x3f14 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    3682:	f7 01       	movw	r30, r14
    3684:	11 82       	std	Z+1, r1	; 0x01
    3686:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    3688:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    368a:	44 c4       	rjmp	.+2184   	; 0x3f14 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    368c:	62 30       	cpi	r22, 0x02	; 2
    368e:	09 f0       	breq	.+2      	; 0x3692 <calc_initialValue+0x21a>
    3690:	3a c4       	rjmp	.+2164   	; 0x3f06 <calc_initialValue+0xa8e>
		{
			switch(prescaler)
    3692:	40 34       	cpi	r20, 0x40	; 64
    3694:	51 05       	cpc	r21, r1
    3696:	e1 f1       	breq	.+120    	; 0x3710 <calc_initialValue+0x298>
    3698:	38 f4       	brcc	.+14     	; 0x36a8 <calc_initialValue+0x230>
    369a:	41 30       	cpi	r20, 0x01	; 1
    369c:	51 05       	cpc	r21, r1
    369e:	71 f0       	breq	.+28     	; 0x36bc <calc_initialValue+0x244>
    36a0:	48 30       	cpi	r20, 0x08	; 8
    36a2:	51 05       	cpc	r21, r1
    36a4:	01 f1       	breq	.+64     	; 0x36e6 <calc_initialValue+0x26e>
    36a6:	73 c0       	rjmp	.+230    	; 0x378e <calc_initialValue+0x316>
    36a8:	41 15       	cp	r20, r1
    36aa:	f1 e0       	ldi	r31, 0x01	; 1
    36ac:	5f 07       	cpc	r21, r31
    36ae:	09 f4       	brne	.+2      	; 0x36b2 <calc_initialValue+0x23a>
    36b0:	44 c0       	rjmp	.+136    	; 0x373a <calc_initialValue+0x2c2>
    36b2:	41 15       	cp	r20, r1
    36b4:	54 40       	sbci	r21, 0x04	; 4
    36b6:	09 f4       	brne	.+2      	; 0x36ba <calc_initialValue+0x242>
    36b8:	55 c0       	rjmp	.+170    	; 0x3764 <calc_initialValue+0x2ec>
    36ba:	69 c0       	rjmp	.+210    	; 0x378e <calc_initialValue+0x316>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    36bc:	a9 01       	movw	r20, r18
    36be:	98 01       	movw	r18, r16
    36c0:	6d eb       	ldi	r22, 0xBD	; 189
    36c2:	77 e3       	ldi	r23, 0x37	; 55
    36c4:	86 e0       	ldi	r24, 0x06	; 6
    36c6:	98 e3       	ldi	r25, 0x38	; 56
    36c8:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    36cc:	2d eb       	ldi	r18, 0xBD	; 189
    36ce:	37 e3       	ldi	r19, 0x37	; 55
    36d0:	46 e0       	ldi	r20, 0x06	; 6
    36d2:	54 e3       	ldi	r21, 0x34	; 52
    36d4:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    36d8:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    36dc:	f7 01       	movw	r30, r14
    36de:	71 83       	std	Z+1, r23	; 0x01
    36e0:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    36e2:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    36e4:	17 c4       	rjmp	.+2094   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    36e6:	a9 01       	movw	r20, r18
    36e8:	98 01       	movw	r18, r16
    36ea:	6d eb       	ldi	r22, 0xBD	; 189
    36ec:	77 e3       	ldi	r23, 0x37	; 55
    36ee:	86 e8       	ldi	r24, 0x86	; 134
    36f0:	99 e3       	ldi	r25, 0x39	; 57
    36f2:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    36f6:	2d eb       	ldi	r18, 0xBD	; 189
    36f8:	37 e3       	ldi	r19, 0x37	; 55
    36fa:	46 e8       	ldi	r20, 0x86	; 134
    36fc:	55 e3       	ldi	r21, 0x35	; 53
    36fe:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3702:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3706:	f7 01       	movw	r30, r14
    3708:	71 83       	std	Z+1, r23	; 0x01
    370a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    370c:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    370e:	02 c4       	rjmp	.+2052   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    3710:	a9 01       	movw	r20, r18
    3712:	98 01       	movw	r18, r16
    3714:	6d eb       	ldi	r22, 0xBD	; 189
    3716:	77 e3       	ldi	r23, 0x37	; 55
    3718:	86 e0       	ldi	r24, 0x06	; 6
    371a:	9b e3       	ldi	r25, 0x3B	; 59
    371c:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3720:	2d eb       	ldi	r18, 0xBD	; 189
    3722:	37 e3       	ldi	r19, 0x37	; 55
    3724:	46 e0       	ldi	r20, 0x06	; 6
    3726:	57 e3       	ldi	r21, 0x37	; 55
    3728:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    372c:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3730:	f7 01       	movw	r30, r14
    3732:	71 83       	std	Z+1, r23	; 0x01
    3734:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3736:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    3738:	ed c3       	rjmp	.+2010   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    373a:	a9 01       	movw	r20, r18
    373c:	98 01       	movw	r18, r16
    373e:	6d eb       	ldi	r22, 0xBD	; 189
    3740:	77 e3       	ldi	r23, 0x37	; 55
    3742:	86 e0       	ldi	r24, 0x06	; 6
    3744:	9c e3       	ldi	r25, 0x3C	; 60
    3746:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    374a:	2d eb       	ldi	r18, 0xBD	; 189
    374c:	37 e3       	ldi	r19, 0x37	; 55
    374e:	46 e0       	ldi	r20, 0x06	; 6
    3750:	58 e3       	ldi	r21, 0x38	; 56
    3752:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3756:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    375a:	f7 01       	movw	r30, r14
    375c:	71 83       	std	Z+1, r23	; 0x01
    375e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3760:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    3762:	d8 c3       	rjmp	.+1968   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    3764:	a9 01       	movw	r20, r18
    3766:	98 01       	movw	r18, r16
    3768:	6d eb       	ldi	r22, 0xBD	; 189
    376a:	77 e3       	ldi	r23, 0x37	; 55
    376c:	86 e0       	ldi	r24, 0x06	; 6
    376e:	9d e3       	ldi	r25, 0x3D	; 61
    3770:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3774:	2d eb       	ldi	r18, 0xBD	; 189
    3776:	37 e3       	ldi	r19, 0x37	; 55
    3778:	46 e0       	ldi	r20, 0x06	; 6
    377a:	59 e3       	ldi	r21, 0x39	; 57
    377c:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3780:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3784:	f7 01       	movw	r30, r14
    3786:	71 83       	std	Z+1, r23	; 0x01
    3788:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    378a:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    378c:	c3 c3       	rjmp	.+1926   	; 0x3f14 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    378e:	f7 01       	movw	r30, r14
    3790:	11 82       	std	Z+1, r1	; 0x01
    3792:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    3794:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    3796:	be c3       	rjmp	.+1916   	; 0x3f14 <calc_initialValue+0xa9c>
		else
		{
			// do nothing
		}
	}
	else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_1)
    3798:	81 30       	cpi	r24, 0x01	; 1
    379a:	09 f0       	breq	.+2      	; 0x379e <calc_initialValue+0x326>
    379c:	8a c1       	rjmp	.+788    	; 0x3ab2 <calc_initialValue+0x63a>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    379e:	61 11       	cpse	r22, r1
    37a0:	7c c0       	rjmp	.+248    	; 0x389a <calc_initialValue+0x422>
		{
			switch(prescaler)
    37a2:	40 34       	cpi	r20, 0x40	; 64
    37a4:	51 05       	cpc	r21, r1
    37a6:	a9 f1       	breq	.+106    	; 0x3812 <calc_initialValue+0x39a>
    37a8:	38 f4       	brcc	.+14     	; 0x37b8 <calc_initialValue+0x340>
    37aa:	41 30       	cpi	r20, 0x01	; 1
    37ac:	51 05       	cpc	r21, r1
    37ae:	69 f0       	breq	.+26     	; 0x37ca <calc_initialValue+0x352>
    37b0:	48 30       	cpi	r20, 0x08	; 8
    37b2:	51 05       	cpc	r21, r1
    37b4:	f9 f0       	breq	.+62     	; 0x37f4 <calc_initialValue+0x37c>
    37b6:	6c c0       	rjmp	.+216    	; 0x3890 <calc_initialValue+0x418>
    37b8:	41 15       	cp	r20, r1
    37ba:	f1 e0       	ldi	r31, 0x01	; 1
    37bc:	5f 07       	cpc	r21, r31
    37be:	f1 f1       	breq	.+124    	; 0x383c <calc_initialValue+0x3c4>
    37c0:	41 15       	cp	r20, r1
    37c2:	54 40       	sbci	r21, 0x04	; 4
    37c4:	09 f4       	brne	.+2      	; 0x37c8 <calc_initialValue+0x350>
    37c6:	4f c0       	rjmp	.+158    	; 0x3866 <calc_initialValue+0x3ee>
    37c8:	63 c0       	rjmp	.+198    	; 0x3890 <calc_initialValue+0x418>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    37ca:	a9 01       	movw	r20, r18
    37cc:	98 01       	movw	r18, r16
    37ce:	60 e0       	ldi	r22, 0x00	; 0
    37d0:	70 e0       	ldi	r23, 0x00	; 0
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	96 e4       	ldi	r25, 0x46	; 70
    37d6:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	40 e0       	ldi	r20, 0x00	; 0
    37e0:	51 e4       	ldi	r21, 0x41	; 65
    37e2:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    37e6:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    37ea:	f7 01       	movw	r30, r14
    37ec:	71 83       	std	Z+1, r23	; 0x01
    37ee:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    37f0:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    37f2:	90 c3       	rjmp	.+1824   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    37f4:	a9 01       	movw	r20, r18
    37f6:	98 01       	movw	r18, r16
    37f8:	60 e0       	ldi	r22, 0x00	; 0
    37fa:	70 e0       	ldi	r23, 0x00	; 0
    37fc:	80 e8       	ldi	r24, 0x80	; 128
    37fe:	97 e4       	ldi	r25, 0x47	; 71
    3800:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3804:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3808:	f7 01       	movw	r30, r14
    380a:	71 83       	std	Z+1, r23	; 0x01
    380c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    380e:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    3810:	81 c3       	rjmp	.+1794   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    3812:	a9 01       	movw	r20, r18
    3814:	98 01       	movw	r18, r16
    3816:	60 e0       	ldi	r22, 0x00	; 0
    3818:	70 e0       	ldi	r23, 0x00	; 0
    381a:	80 e0       	ldi	r24, 0x00	; 0
    381c:	99 e4       	ldi	r25, 0x49	; 73
    381e:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	40 e0       	ldi	r20, 0x00	; 0
    3828:	5e e3       	ldi	r21, 0x3E	; 62
    382a:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    382e:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3832:	f7 01       	movw	r30, r14
    3834:	71 83       	std	Z+1, r23	; 0x01
    3836:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3838:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    383a:	6c c3       	rjmp	.+1752   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    383c:	a9 01       	movw	r20, r18
    383e:	98 01       	movw	r18, r16
    3840:	60 e0       	ldi	r22, 0x00	; 0
    3842:	70 e0       	ldi	r23, 0x00	; 0
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	9a e4       	ldi	r25, 0x4A	; 74
    3848:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	40 e0       	ldi	r20, 0x00	; 0
    3852:	5d e3       	ldi	r21, 0x3D	; 61
    3854:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    3858:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    385c:	f7 01       	movw	r30, r14
    385e:	71 83       	std	Z+1, r23	; 0x01
    3860:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3862:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    3864:	57 c3       	rjmp	.+1710   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    3866:	a9 01       	movw	r20, r18
    3868:	98 01       	movw	r18, r16
    386a:	60 e0       	ldi	r22, 0x00	; 0
    386c:	70 e0       	ldi	r23, 0x00	; 0
    386e:	80 e0       	ldi	r24, 0x00	; 0
    3870:	9b e4       	ldi	r25, 0x4B	; 75
    3872:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 e0       	ldi	r20, 0x00	; 0
    387c:	5c e3       	ldi	r21, 0x3C	; 60
    387e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    3882:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3886:	f7 01       	movw	r30, r14
    3888:	71 83       	std	Z+1, r23	; 0x01
    388a:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    388c:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    388e:	42 c3       	rjmp	.+1668   	; 0x3f14 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    3890:	f7 01       	movw	r30, r14
    3892:	11 82       	std	Z+1, r1	; 0x01
    3894:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    3896:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    3898:	3d c3       	rjmp	.+1658   	; 0x3f14 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    389a:	61 30       	cpi	r22, 0x01	; 1
    389c:	09 f0       	breq	.+2      	; 0x38a0 <calc_initialValue+0x428>
    389e:	83 c0       	rjmp	.+262    	; 0x39a6 <calc_initialValue+0x52e>
		{
			switch(prescaler)
    38a0:	40 34       	cpi	r20, 0x40	; 64
    38a2:	51 05       	cpc	r21, r1
    38a4:	e1 f1       	breq	.+120    	; 0x391e <calc_initialValue+0x4a6>
    38a6:	38 f4       	brcc	.+14     	; 0x38b6 <calc_initialValue+0x43e>
    38a8:	41 30       	cpi	r20, 0x01	; 1
    38aa:	51 05       	cpc	r21, r1
    38ac:	71 f0       	breq	.+28     	; 0x38ca <calc_initialValue+0x452>
    38ae:	48 30       	cpi	r20, 0x08	; 8
    38b0:	51 05       	cpc	r21, r1
    38b2:	01 f1       	breq	.+64     	; 0x38f4 <calc_initialValue+0x47c>
    38b4:	73 c0       	rjmp	.+230    	; 0x399c <calc_initialValue+0x524>
    38b6:	41 15       	cp	r20, r1
    38b8:	f1 e0       	ldi	r31, 0x01	; 1
    38ba:	5f 07       	cpc	r21, r31
    38bc:	09 f4       	brne	.+2      	; 0x38c0 <calc_initialValue+0x448>
    38be:	44 c0       	rjmp	.+136    	; 0x3948 <calc_initialValue+0x4d0>
    38c0:	41 15       	cp	r20, r1
    38c2:	54 40       	sbci	r21, 0x04	; 4
    38c4:	09 f4       	brne	.+2      	; 0x38c8 <calc_initialValue+0x450>
    38c6:	55 c0       	rjmp	.+170    	; 0x3972 <calc_initialValue+0x4fa>
    38c8:	69 c0       	rjmp	.+210    	; 0x399c <calc_initialValue+0x524>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    38ca:	a9 01       	movw	r20, r18
    38cc:	98 01       	movw	r18, r16
    38ce:	6f e6       	ldi	r22, 0x6F	; 111
    38d0:	72 e1       	ldi	r23, 0x12	; 18
    38d2:	83 e0       	ldi	r24, 0x03	; 3
    38d4:	91 e4       	ldi	r25, 0x41	; 65
    38d6:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    38da:	2f e6       	ldi	r18, 0x6F	; 111
    38dc:	32 e1       	ldi	r19, 0x12	; 18
    38de:	43 e0       	ldi	r20, 0x03	; 3
    38e0:	59 e3       	ldi	r21, 0x39	; 57
    38e2:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    38e6:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    38ea:	f7 01       	movw	r30, r14
    38ec:	71 83       	std	Z+1, r23	; 0x01
    38ee:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    38f0:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    38f2:	10 c3       	rjmp	.+1568   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    38f4:	a9 01       	movw	r20, r18
    38f6:	98 01       	movw	r18, r16
    38f8:	6f e6       	ldi	r22, 0x6F	; 111
    38fa:	72 e1       	ldi	r23, 0x12	; 18
    38fc:	83 e8       	ldi	r24, 0x83	; 131
    38fe:	92 e4       	ldi	r25, 0x42	; 66
    3900:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3904:	2f e6       	ldi	r18, 0x6F	; 111
    3906:	32 e1       	ldi	r19, 0x12	; 18
    3908:	43 e8       	ldi	r20, 0x83	; 131
    390a:	5a e3       	ldi	r21, 0x3A	; 58
    390c:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3910:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3914:	f7 01       	movw	r30, r14
    3916:	71 83       	std	Z+1, r23	; 0x01
    3918:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    391a:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    391c:	fb c2       	rjmp	.+1526   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    391e:	a9 01       	movw	r20, r18
    3920:	98 01       	movw	r18, r16
    3922:	6f e6       	ldi	r22, 0x6F	; 111
    3924:	72 e1       	ldi	r23, 0x12	; 18
    3926:	83 e0       	ldi	r24, 0x03	; 3
    3928:	94 e4       	ldi	r25, 0x44	; 68
    392a:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    392e:	2f e6       	ldi	r18, 0x6F	; 111
    3930:	32 e1       	ldi	r19, 0x12	; 18
    3932:	43 e0       	ldi	r20, 0x03	; 3
    3934:	5c e3       	ldi	r21, 0x3C	; 60
    3936:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    393a:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    393e:	f7 01       	movw	r30, r14
    3940:	71 83       	std	Z+1, r23	; 0x01
    3942:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3944:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    3946:	e6 c2       	rjmp	.+1484   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    3948:	a9 01       	movw	r20, r18
    394a:	98 01       	movw	r18, r16
    394c:	6f e6       	ldi	r22, 0x6F	; 111
    394e:	72 e1       	ldi	r23, 0x12	; 18
    3950:	83 e0       	ldi	r24, 0x03	; 3
    3952:	95 e4       	ldi	r25, 0x45	; 69
    3954:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3958:	2f e6       	ldi	r18, 0x6F	; 111
    395a:	32 e1       	ldi	r19, 0x12	; 18
    395c:	43 e0       	ldi	r20, 0x03	; 3
    395e:	5d e3       	ldi	r21, 0x3D	; 61
    3960:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3964:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3968:	f7 01       	movw	r30, r14
    396a:	71 83       	std	Z+1, r23	; 0x01
    396c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    396e:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    3970:	d1 c2       	rjmp	.+1442   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    3972:	a9 01       	movw	r20, r18
    3974:	98 01       	movw	r18, r16
    3976:	6f e6       	ldi	r22, 0x6F	; 111
    3978:	72 e1       	ldi	r23, 0x12	; 18
    397a:	83 e0       	ldi	r24, 0x03	; 3
    397c:	96 e4       	ldi	r25, 0x46	; 70
    397e:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3982:	2f e6       	ldi	r18, 0x6F	; 111
    3984:	32 e1       	ldi	r19, 0x12	; 18
    3986:	43 e0       	ldi	r20, 0x03	; 3
    3988:	5e e3       	ldi	r21, 0x3E	; 62
    398a:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    398e:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3992:	f7 01       	movw	r30, r14
    3994:	71 83       	std	Z+1, r23	; 0x01
    3996:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3998:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    399a:	bc c2       	rjmp	.+1400   	; 0x3f14 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    399c:	f7 01       	movw	r30, r14
    399e:	11 82       	std	Z+1, r1	; 0x01
    39a0:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    39a2:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    39a4:	b7 c2       	rjmp	.+1390   	; 0x3f14 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    39a6:	62 30       	cpi	r22, 0x02	; 2
    39a8:	09 f0       	breq	.+2      	; 0x39ac <calc_initialValue+0x534>
    39aa:	af c2       	rjmp	.+1374   	; 0x3f0a <calc_initialValue+0xa92>
		{
			switch(prescaler)
    39ac:	40 34       	cpi	r20, 0x40	; 64
    39ae:	51 05       	cpc	r21, r1
    39b0:	e1 f1       	breq	.+120    	; 0x3a2a <calc_initialValue+0x5b2>
    39b2:	38 f4       	brcc	.+14     	; 0x39c2 <calc_initialValue+0x54a>
    39b4:	41 30       	cpi	r20, 0x01	; 1
    39b6:	51 05       	cpc	r21, r1
    39b8:	71 f0       	breq	.+28     	; 0x39d6 <calc_initialValue+0x55e>
    39ba:	48 30       	cpi	r20, 0x08	; 8
    39bc:	51 05       	cpc	r21, r1
    39be:	01 f1       	breq	.+64     	; 0x3a00 <calc_initialValue+0x588>
    39c0:	73 c0       	rjmp	.+230    	; 0x3aa8 <calc_initialValue+0x630>
    39c2:	41 15       	cp	r20, r1
    39c4:	f1 e0       	ldi	r31, 0x01	; 1
    39c6:	5f 07       	cpc	r21, r31
    39c8:	09 f4       	brne	.+2      	; 0x39cc <calc_initialValue+0x554>
    39ca:	44 c0       	rjmp	.+136    	; 0x3a54 <calc_initialValue+0x5dc>
    39cc:	41 15       	cp	r20, r1
    39ce:	54 40       	sbci	r21, 0x04	; 4
    39d0:	09 f4       	brne	.+2      	; 0x39d4 <calc_initialValue+0x55c>
    39d2:	55 c0       	rjmp	.+170    	; 0x3a7e <calc_initialValue+0x606>
    39d4:	69 c0       	rjmp	.+210    	; 0x3aa8 <calc_initialValue+0x630>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    39d6:	a9 01       	movw	r20, r18
    39d8:	98 01       	movw	r18, r16
    39da:	6d eb       	ldi	r22, 0xBD	; 189
    39dc:	77 e3       	ldi	r23, 0x37	; 55
    39de:	86 e0       	ldi	r24, 0x06	; 6
    39e0:	9c e3       	ldi	r25, 0x3C	; 60
    39e2:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    39e6:	2d eb       	ldi	r18, 0xBD	; 189
    39e8:	37 e3       	ldi	r19, 0x37	; 55
    39ea:	46 e0       	ldi	r20, 0x06	; 6
    39ec:	54 e3       	ldi	r21, 0x34	; 52
    39ee:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    39f2:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    39f6:	f7 01       	movw	r30, r14
    39f8:	71 83       	std	Z+1, r23	; 0x01
    39fa:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    39fc:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    39fe:	8a c2       	rjmp	.+1300   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    3a00:	a9 01       	movw	r20, r18
    3a02:	98 01       	movw	r18, r16
    3a04:	6d eb       	ldi	r22, 0xBD	; 189
    3a06:	77 e3       	ldi	r23, 0x37	; 55
    3a08:	86 e8       	ldi	r24, 0x86	; 134
    3a0a:	9d e3       	ldi	r25, 0x3D	; 61
    3a0c:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3a10:	2d eb       	ldi	r18, 0xBD	; 189
    3a12:	37 e3       	ldi	r19, 0x37	; 55
    3a14:	46 e8       	ldi	r20, 0x86	; 134
    3a16:	55 e3       	ldi	r21, 0x35	; 53
    3a18:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3a1c:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3a20:	f7 01       	movw	r30, r14
    3a22:	71 83       	std	Z+1, r23	; 0x01
    3a24:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3a26:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    3a28:	75 c2       	rjmp	.+1258   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    3a2a:	a9 01       	movw	r20, r18
    3a2c:	98 01       	movw	r18, r16
    3a2e:	6d eb       	ldi	r22, 0xBD	; 189
    3a30:	77 e3       	ldi	r23, 0x37	; 55
    3a32:	86 e0       	ldi	r24, 0x06	; 6
    3a34:	9f e3       	ldi	r25, 0x3F	; 63
    3a36:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3a3a:	2d eb       	ldi	r18, 0xBD	; 189
    3a3c:	37 e3       	ldi	r19, 0x37	; 55
    3a3e:	46 e0       	ldi	r20, 0x06	; 6
    3a40:	57 e3       	ldi	r21, 0x37	; 55
    3a42:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3a46:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3a4a:	f7 01       	movw	r30, r14
    3a4c:	71 83       	std	Z+1, r23	; 0x01
    3a4e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3a50:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    3a52:	60 c2       	rjmp	.+1216   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    3a54:	a9 01       	movw	r20, r18
    3a56:	98 01       	movw	r18, r16
    3a58:	6d eb       	ldi	r22, 0xBD	; 189
    3a5a:	77 e3       	ldi	r23, 0x37	; 55
    3a5c:	86 e0       	ldi	r24, 0x06	; 6
    3a5e:	90 e4       	ldi	r25, 0x40	; 64
    3a60:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3a64:	2d eb       	ldi	r18, 0xBD	; 189
    3a66:	37 e3       	ldi	r19, 0x37	; 55
    3a68:	46 e0       	ldi	r20, 0x06	; 6
    3a6a:	58 e3       	ldi	r21, 0x38	; 56
    3a6c:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3a70:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3a74:	f7 01       	movw	r30, r14
    3a76:	71 83       	std	Z+1, r23	; 0x01
    3a78:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    3a7c:	4b c2       	rjmp	.+1174   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    3a7e:	a9 01       	movw	r20, r18
    3a80:	98 01       	movw	r18, r16
    3a82:	6d eb       	ldi	r22, 0xBD	; 189
    3a84:	77 e3       	ldi	r23, 0x37	; 55
    3a86:	86 e0       	ldi	r24, 0x06	; 6
    3a88:	91 e4       	ldi	r25, 0x41	; 65
    3a8a:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3a8e:	2d eb       	ldi	r18, 0xBD	; 189
    3a90:	37 e3       	ldi	r19, 0x37	; 55
    3a92:	46 e0       	ldi	r20, 0x06	; 6
    3a94:	59 e3       	ldi	r21, 0x39	; 57
    3a96:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3a9a:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3a9e:	f7 01       	movw	r30, r14
    3aa0:	71 83       	std	Z+1, r23	; 0x01
    3aa2:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_16_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    3aa6:	36 c2       	rjmp	.+1132   	; 0x3f14 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    3aa8:	f7 01       	movw	r30, r14
    3aaa:	11 82       	std	Z+1, r1	; 0x01
    3aac:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    3aae:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    3ab0:	31 c2       	rjmp	.+1122   	; 0x3f14 <calc_initialValue+0xa9c>
		else
		{
			// do nothing
		}
	}
	else if(enu_tmr_channel_id == ENU_TMR_CHANNEL_2)
    3ab2:	82 30       	cpi	r24, 0x02	; 2
    3ab4:	09 f0       	breq	.+2      	; 0x3ab8 <calc_initialValue+0x640>
    3ab6:	2b c2       	rjmp	.+1110   	; 0x3f0e <calc_initialValue+0xa96>
	{
		if(enu_time_unit == ENU_MICRO_SECOND)
    3ab8:	61 11       	cpse	r22, r1
    3aba:	b1 c0       	rjmp	.+354    	; 0x3c1e <calc_initialValue+0x7a6>
		{
			switch(prescaler)
    3abc:	40 34       	cpi	r20, 0x40	; 64
    3abe:	51 05       	cpc	r21, r1
    3ac0:	09 f4       	brne	.+2      	; 0x3ac4 <calc_initialValue+0x64c>
    3ac2:	54 c0       	rjmp	.+168    	; 0x3b6c <calc_initialValue+0x6f4>
    3ac4:	58 f4       	brcc	.+22     	; 0x3adc <calc_initialValue+0x664>
    3ac6:	48 30       	cpi	r20, 0x08	; 8
    3ac8:	51 05       	cpc	r21, r1
    3aca:	61 f1       	breq	.+88     	; 0x3b24 <calc_initialValue+0x6ac>
    3acc:	40 32       	cpi	r20, 0x20	; 32
    3ace:	51 05       	cpc	r21, r1
    3ad0:	c1 f1       	breq	.+112    	; 0x3b42 <calc_initialValue+0x6ca>
    3ad2:	41 30       	cpi	r20, 0x01	; 1
    3ad4:	51 05       	cpc	r21, r1
    3ad6:	09 f0       	breq	.+2      	; 0x3ada <calc_initialValue+0x662>
    3ad8:	9d c0       	rjmp	.+314    	; 0x3c14 <calc_initialValue+0x79c>
    3ada:	0f c0       	rjmp	.+30     	; 0x3afa <calc_initialValue+0x682>
    3adc:	41 15       	cp	r20, r1
    3ade:	f1 e0       	ldi	r31, 0x01	; 1
    3ae0:	5f 07       	cpc	r21, r31
    3ae2:	09 f4       	brne	.+2      	; 0x3ae6 <calc_initialValue+0x66e>
    3ae4:	6d c0       	rjmp	.+218    	; 0x3bc0 <calc_initialValue+0x748>
    3ae6:	41 15       	cp	r20, r1
    3ae8:	84 e0       	ldi	r24, 0x04	; 4
    3aea:	58 07       	cpc	r21, r24
    3aec:	09 f4       	brne	.+2      	; 0x3af0 <calc_initialValue+0x678>
    3aee:	7d c0       	rjmp	.+250    	; 0x3bea <calc_initialValue+0x772>
    3af0:	40 38       	cpi	r20, 0x80	; 128
    3af2:	51 05       	cpc	r21, r1
    3af4:	09 f0       	breq	.+2      	; 0x3af8 <calc_initialValue+0x680>
    3af6:	8e c0       	rjmp	.+284    	; 0x3c14 <calc_initialValue+0x79c>
    3af8:	4e c0       	rjmp	.+156    	; 0x3b96 <calc_initialValue+0x71e>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
    3afa:	a9 01       	movw	r20, r18
    3afc:	98 01       	movw	r18, r16
    3afe:	60 e0       	ldi	r22, 0x00	; 0
    3b00:	70 e0       	ldi	r23, 0x00	; 0
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	92 e4       	ldi	r25, 0x42	; 66
    3b06:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	40 e0       	ldi	r20, 0x00	; 0
    3b10:	51 e4       	ldi	r21, 0x41	; 65
    3b12:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    3b16:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3b1a:	f7 01       	movw	r30, r14
    3b1c:	71 83       	std	Z+1, r23	; 0x01
    3b1e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3b20:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
    3b22:	f8 c1       	rjmp	.+1008   	; 0x3f14 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
    3b24:	a9 01       	movw	r20, r18
    3b26:	98 01       	movw	r18, r16
    3b28:	60 e0       	ldi	r22, 0x00	; 0
    3b2a:	70 e0       	ldi	r23, 0x00	; 0
    3b2c:	80 e8       	ldi	r24, 0x80	; 128
    3b2e:	93 e4       	ldi	r25, 0x43	; 67
    3b30:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3b34:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3b38:	f7 01       	movw	r30, r14
    3b3a:	71 83       	std	Z+1, r23	; 0x01
    3b3c:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1),delay,MIN_DELAY_US(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
    3b40:	e9 c1       	rjmp	.+978    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
    3b42:	a9 01       	movw	r20, r18
    3b44:	98 01       	movw	r18, r16
    3b46:	60 e0       	ldi	r22, 0x00	; 0
    3b48:	70 e0       	ldi	r23, 0x00	; 0
    3b4a:	80 e8       	ldi	r24, 0x80	; 128
    3b4c:	94 e4       	ldi	r25, 0x44	; 68
    3b4e:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	40 e8       	ldi	r20, 0x80	; 128
    3b58:	5e e3       	ldi	r21, 0x3E	; 62
    3b5a:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    3b5e:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3b62:	f7 01       	movw	r30, r14
    3b64:	71 83       	std	Z+1, r23	; 0x01
    3b66:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3b68:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_8),delay,MIN_DELAY_US(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
				break;
    3b6a:	d4 c1       	rjmp	.+936    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
    3b6c:	a9 01       	movw	r20, r18
    3b6e:	98 01       	movw	r18, r16
    3b70:	60 e0       	ldi	r22, 0x00	; 0
    3b72:	70 e0       	ldi	r23, 0x00	; 0
    3b74:	80 e0       	ldi	r24, 0x00	; 0
    3b76:	95 e4       	ldi	r25, 0x45	; 69
    3b78:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	40 e0       	ldi	r20, 0x00	; 0
    3b82:	5e e3       	ldi	r21, 0x3E	; 62
    3b84:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    3b88:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3b8c:	f7 01       	movw	r30, r14
    3b8e:	71 83       	std	Z+1, r23	; 0x01
    3b90:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3b92:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_32),delay,MIN_DELAY_US(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
    3b94:	bf c1       	rjmp	.+894    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
    3b96:	a9 01       	movw	r20, r18
    3b98:	98 01       	movw	r18, r16
    3b9a:	60 e0       	ldi	r22, 0x00	; 0
    3b9c:	70 e0       	ldi	r23, 0x00	; 0
    3b9e:	80 e8       	ldi	r24, 0x80	; 128
    3ba0:	95 e4       	ldi	r25, 0x45	; 69
    3ba2:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	40 e8       	ldi	r20, 0x80	; 128
    3bac:	5d e3       	ldi	r21, 0x3D	; 61
    3bae:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    3bb2:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3bb6:	f7 01       	movw	r30, r14
    3bb8:	71 83       	std	Z+1, r23	; 0x01
    3bba:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_64),delay,MIN_DELAY_US(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
				break;
    3bbe:	aa c1       	rjmp	.+852    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
    3bc0:	a9 01       	movw	r20, r18
    3bc2:	98 01       	movw	r18, r16
    3bc4:	60 e0       	ldi	r22, 0x00	; 0
    3bc6:	70 e0       	ldi	r23, 0x00	; 0
    3bc8:	80 e0       	ldi	r24, 0x00	; 0
    3bca:	96 e4       	ldi	r25, 0x46	; 70
    3bcc:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3bd0:	20 e0       	ldi	r18, 0x00	; 0
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	40 e0       	ldi	r20, 0x00	; 0
    3bd6:	5d e3       	ldi	r21, 0x3D	; 61
    3bd8:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    3bdc:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3be0:	f7 01       	movw	r30, r14
    3be2:	71 83       	std	Z+1, r23	; 0x01
    3be4:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3be6:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_128),delay,MIN_DELAY_US(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
    3be8:	95 c1       	rjmp	.+810    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
    3bea:	a9 01       	movw	r20, r18
    3bec:	98 01       	movw	r18, r16
    3bee:	60 e0       	ldi	r22, 0x00	; 0
    3bf0:	70 e0       	ldi	r23, 0x00	; 0
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	97 e4       	ldi	r25, 0x47	; 71
    3bf6:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3bfa:	20 e0       	ldi	r18, 0x00	; 0
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	40 e0       	ldi	r20, 0x00	; 0
    3c00:	5c e3       	ldi	r21, 0x3C	; 60
    3c02:	0e 94 59 21 	call	0x42b2	; 0x42b2 <__mulsf3>
    3c06:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3c0a:	f7 01       	movw	r30, r14
    3c0c:	71 83       	std	Z+1, r23	; 0x01
    3c0e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3c10:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_256),delay,MIN_DELAY_US(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_US(P_1024),delay,MIN_DELAY_US(P_1024));
				break;
    3c12:	80 c1       	rjmp	.+768    	; 0x3f14 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    3c14:	f7 01       	movw	r30, r14
    3c16:	11 82       	std	Z+1, r1	; 0x01
    3c18:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    3c1c:	7b c1       	rjmp	.+758    	; 0x3f14 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_MILLI_SECOND)
    3c1e:	61 30       	cpi	r22, 0x01	; 1
    3c20:	09 f0       	breq	.+2      	; 0x3c24 <calc_initialValue+0x7ac>
    3c22:	b7 c0       	rjmp	.+366    	; 0x3d92 <calc_initialValue+0x91a>
		{
			switch(prescaler)
    3c24:	40 34       	cpi	r20, 0x40	; 64
    3c26:	51 05       	cpc	r21, r1
    3c28:	09 f4       	brne	.+2      	; 0x3c2c <calc_initialValue+0x7b4>
    3c2a:	5a c0       	rjmp	.+180    	; 0x3ce0 <calc_initialValue+0x868>
    3c2c:	58 f4       	brcc	.+22     	; 0x3c44 <calc_initialValue+0x7cc>
    3c2e:	48 30       	cpi	r20, 0x08	; 8
    3c30:	51 05       	cpc	r21, r1
    3c32:	61 f1       	breq	.+88     	; 0x3c8c <calc_initialValue+0x814>
    3c34:	40 32       	cpi	r20, 0x20	; 32
    3c36:	51 05       	cpc	r21, r1
    3c38:	f1 f1       	breq	.+124    	; 0x3cb6 <calc_initialValue+0x83e>
    3c3a:	41 30       	cpi	r20, 0x01	; 1
    3c3c:	51 05       	cpc	r21, r1
    3c3e:	09 f0       	breq	.+2      	; 0x3c42 <calc_initialValue+0x7ca>
    3c40:	a3 c0       	rjmp	.+326    	; 0x3d88 <calc_initialValue+0x910>
    3c42:	0f c0       	rjmp	.+30     	; 0x3c62 <calc_initialValue+0x7ea>
    3c44:	41 15       	cp	r20, r1
    3c46:	f1 e0       	ldi	r31, 0x01	; 1
    3c48:	5f 07       	cpc	r21, r31
    3c4a:	09 f4       	brne	.+2      	; 0x3c4e <calc_initialValue+0x7d6>
    3c4c:	73 c0       	rjmp	.+230    	; 0x3d34 <calc_initialValue+0x8bc>
    3c4e:	41 15       	cp	r20, r1
    3c50:	84 e0       	ldi	r24, 0x04	; 4
    3c52:	58 07       	cpc	r21, r24
    3c54:	09 f4       	brne	.+2      	; 0x3c58 <calc_initialValue+0x7e0>
    3c56:	83 c0       	rjmp	.+262    	; 0x3d5e <calc_initialValue+0x8e6>
    3c58:	40 38       	cpi	r20, 0x80	; 128
    3c5a:	51 05       	cpc	r21, r1
    3c5c:	09 f0       	breq	.+2      	; 0x3c60 <calc_initialValue+0x7e8>
    3c5e:	94 c0       	rjmp	.+296    	; 0x3d88 <calc_initialValue+0x910>
    3c60:	54 c0       	rjmp	.+168    	; 0x3d0a <calc_initialValue+0x892>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
    3c62:	a9 01       	movw	r20, r18
    3c64:	98 01       	movw	r18, r16
    3c66:	6f e6       	ldi	r22, 0x6F	; 111
    3c68:	72 e1       	ldi	r23, 0x12	; 18
    3c6a:	83 e0       	ldi	r24, 0x03	; 3
    3c6c:	9d e3       	ldi	r25, 0x3D	; 61
    3c6e:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3c72:	2f e6       	ldi	r18, 0x6F	; 111
    3c74:	32 e1       	ldi	r19, 0x12	; 18
    3c76:	43 e0       	ldi	r20, 0x03	; 3
    3c78:	59 e3       	ldi	r21, 0x39	; 57
    3c7a:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3c7e:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3c82:	f7 01       	movw	r30, r14
    3c84:	71 83       	std	Z+1, r23	; 0x01
    3c86:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3c88:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
    3c8a:	44 c1       	rjmp	.+648    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
    3c8c:	a9 01       	movw	r20, r18
    3c8e:	98 01       	movw	r18, r16
    3c90:	6f e6       	ldi	r22, 0x6F	; 111
    3c92:	72 e1       	ldi	r23, 0x12	; 18
    3c94:	83 e8       	ldi	r24, 0x83	; 131
    3c96:	9e e3       	ldi	r25, 0x3E	; 62
    3c98:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3c9c:	2f e6       	ldi	r18, 0x6F	; 111
    3c9e:	32 e1       	ldi	r19, 0x12	; 18
    3ca0:	43 e8       	ldi	r20, 0x83	; 131
    3ca2:	5a e3       	ldi	r21, 0x3A	; 58
    3ca4:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3ca8:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3cac:	f7 01       	movw	r30, r14
    3cae:	71 83       	std	Z+1, r23	; 0x01
    3cb0:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1),delay,MIN_DELAY_MS(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
    3cb4:	2f c1       	rjmp	.+606    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
    3cb6:	a9 01       	movw	r20, r18
    3cb8:	98 01       	movw	r18, r16
    3cba:	6f e6       	ldi	r22, 0x6F	; 111
    3cbc:	72 e1       	ldi	r23, 0x12	; 18
    3cbe:	83 e8       	ldi	r24, 0x83	; 131
    3cc0:	9f e3       	ldi	r25, 0x3F	; 63
    3cc2:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3cc6:	2f e6       	ldi	r18, 0x6F	; 111
    3cc8:	32 e1       	ldi	r19, 0x12	; 18
    3cca:	43 e8       	ldi	r20, 0x83	; 131
    3ccc:	5b e3       	ldi	r21, 0x3B	; 59
    3cce:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3cd2:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3cd6:	f7 01       	movw	r30, r14
    3cd8:	71 83       	std	Z+1, r23	; 0x01
    3cda:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_8),delay,MIN_DELAY_MS(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
				break;
    3cde:	1a c1       	rjmp	.+564    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
    3ce0:	a9 01       	movw	r20, r18
    3ce2:	98 01       	movw	r18, r16
    3ce4:	6f e6       	ldi	r22, 0x6F	; 111
    3ce6:	72 e1       	ldi	r23, 0x12	; 18
    3ce8:	83 e0       	ldi	r24, 0x03	; 3
    3cea:	90 e4       	ldi	r25, 0x40	; 64
    3cec:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3cf0:	2f e6       	ldi	r18, 0x6F	; 111
    3cf2:	32 e1       	ldi	r19, 0x12	; 18
    3cf4:	43 e0       	ldi	r20, 0x03	; 3
    3cf6:	5c e3       	ldi	r21, 0x3C	; 60
    3cf8:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3cfc:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3d00:	f7 01       	movw	r30, r14
    3d02:	71 83       	std	Z+1, r23	; 0x01
    3d04:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3d06:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_32),delay,MIN_DELAY_MS(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
    3d08:	05 c1       	rjmp	.+522    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
    3d0a:	a9 01       	movw	r20, r18
    3d0c:	98 01       	movw	r18, r16
    3d0e:	6f e6       	ldi	r22, 0x6F	; 111
    3d10:	72 e1       	ldi	r23, 0x12	; 18
    3d12:	83 e8       	ldi	r24, 0x83	; 131
    3d14:	90 e4       	ldi	r25, 0x40	; 64
    3d16:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3d1a:	2f e6       	ldi	r18, 0x6F	; 111
    3d1c:	32 e1       	ldi	r19, 0x12	; 18
    3d1e:	43 e8       	ldi	r20, 0x83	; 131
    3d20:	5c e3       	ldi	r21, 0x3C	; 60
    3d22:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3d26:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3d2a:	f7 01       	movw	r30, r14
    3d2c:	71 83       	std	Z+1, r23	; 0x01
    3d2e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3d30:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_64),delay,MIN_DELAY_MS(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
				break;
    3d32:	f0 c0       	rjmp	.+480    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
    3d34:	a9 01       	movw	r20, r18
    3d36:	98 01       	movw	r18, r16
    3d38:	6f e6       	ldi	r22, 0x6F	; 111
    3d3a:	72 e1       	ldi	r23, 0x12	; 18
    3d3c:	83 e0       	ldi	r24, 0x03	; 3
    3d3e:	91 e4       	ldi	r25, 0x41	; 65
    3d40:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3d44:	2f e6       	ldi	r18, 0x6F	; 111
    3d46:	32 e1       	ldi	r19, 0x12	; 18
    3d48:	43 e0       	ldi	r20, 0x03	; 3
    3d4a:	5d e3       	ldi	r21, 0x3D	; 61
    3d4c:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3d50:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3d54:	f7 01       	movw	r30, r14
    3d56:	71 83       	std	Z+1, r23	; 0x01
    3d58:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_128),delay,MIN_DELAY_MS(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
    3d5c:	db c0       	rjmp	.+438    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
    3d5e:	a9 01       	movw	r20, r18
    3d60:	98 01       	movw	r18, r16
    3d62:	6f e6       	ldi	r22, 0x6F	; 111
    3d64:	72 e1       	ldi	r23, 0x12	; 18
    3d66:	83 e0       	ldi	r24, 0x03	; 3
    3d68:	92 e4       	ldi	r25, 0x42	; 66
    3d6a:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3d6e:	2f e6       	ldi	r18, 0x6F	; 111
    3d70:	32 e1       	ldi	r19, 0x12	; 18
    3d72:	43 e0       	ldi	r20, 0x03	; 3
    3d74:	5e e3       	ldi	r21, 0x3E	; 62
    3d76:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3d7a:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3d7e:	f7 01       	movw	r30, r14
    3d80:	71 83       	std	Z+1, r23	; 0x01
    3d82:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3d84:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_256),delay,MIN_DELAY_MS(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_MS(P_1024),delay,MIN_DELAY_MS(P_1024));
				break;
    3d86:	c6 c0       	rjmp	.+396    	; 0x3f14 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    3d88:	f7 01       	movw	r30, r14
    3d8a:	11 82       	std	Z+1, r1	; 0x01
    3d8c:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    3d90:	c1 c0       	rjmp	.+386    	; 0x3f14 <calc_initialValue+0xa9c>
			}
		}
		else if(enu_time_unit == ENU_SECOND)
    3d92:	62 30       	cpi	r22, 0x02	; 2
    3d94:	09 f0       	breq	.+2      	; 0x3d98 <calc_initialValue+0x920>
    3d96:	bd c0       	rjmp	.+378    	; 0x3f12 <calc_initialValue+0xa9a>
		{
			switch(prescaler)
    3d98:	40 34       	cpi	r20, 0x40	; 64
    3d9a:	51 05       	cpc	r21, r1
    3d9c:	09 f4       	brne	.+2      	; 0x3da0 <calc_initialValue+0x928>
    3d9e:	5a c0       	rjmp	.+180    	; 0x3e54 <calc_initialValue+0x9dc>
    3da0:	58 f4       	brcc	.+22     	; 0x3db8 <calc_initialValue+0x940>
    3da2:	48 30       	cpi	r20, 0x08	; 8
    3da4:	51 05       	cpc	r21, r1
    3da6:	61 f1       	breq	.+88     	; 0x3e00 <calc_initialValue+0x988>
    3da8:	40 32       	cpi	r20, 0x20	; 32
    3daa:	51 05       	cpc	r21, r1
    3dac:	f1 f1       	breq	.+124    	; 0x3e2a <calc_initialValue+0x9b2>
    3dae:	41 30       	cpi	r20, 0x01	; 1
    3db0:	51 05       	cpc	r21, r1
    3db2:	09 f0       	breq	.+2      	; 0x3db6 <calc_initialValue+0x93e>
    3db4:	a3 c0       	rjmp	.+326    	; 0x3efc <calc_initialValue+0xa84>
    3db6:	0f c0       	rjmp	.+30     	; 0x3dd6 <calc_initialValue+0x95e>
    3db8:	41 15       	cp	r20, r1
    3dba:	f1 e0       	ldi	r31, 0x01	; 1
    3dbc:	5f 07       	cpc	r21, r31
    3dbe:	09 f4       	brne	.+2      	; 0x3dc2 <calc_initialValue+0x94a>
    3dc0:	73 c0       	rjmp	.+230    	; 0x3ea8 <calc_initialValue+0xa30>
    3dc2:	41 15       	cp	r20, r1
    3dc4:	84 e0       	ldi	r24, 0x04	; 4
    3dc6:	58 07       	cpc	r21, r24
    3dc8:	09 f4       	brne	.+2      	; 0x3dcc <calc_initialValue+0x954>
    3dca:	83 c0       	rjmp	.+262    	; 0x3ed2 <calc_initialValue+0xa5a>
    3dcc:	40 38       	cpi	r20, 0x80	; 128
    3dce:	51 05       	cpc	r21, r1
    3dd0:	09 f0       	breq	.+2      	; 0x3dd4 <calc_initialValue+0x95c>
    3dd2:	94 c0       	rjmp	.+296    	; 0x3efc <calc_initialValue+0xa84>
    3dd4:	54 c0       	rjmp	.+168    	; 0x3e7e <calc_initialValue+0xa06>
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
    3dd6:	a9 01       	movw	r20, r18
    3dd8:	98 01       	movw	r18, r16
    3dda:	6d eb       	ldi	r22, 0xBD	; 189
    3ddc:	77 e3       	ldi	r23, 0x37	; 55
    3dde:	86 e0       	ldi	r24, 0x06	; 6
    3de0:	98 e3       	ldi	r25, 0x38	; 56
    3de2:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3de6:	2d eb       	ldi	r18, 0xBD	; 189
    3de8:	37 e3       	ldi	r19, 0x37	; 55
    3dea:	46 e0       	ldi	r20, 0x06	; 6
    3dec:	54 e3       	ldi	r21, 0x34	; 52
    3dee:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3df2:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3df6:	f7 01       	movw	r30, r14
    3df8:	71 83       	std	Z+1, r23	; 0x01
    3dfa:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(prescaler)
			{
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
    3dfe:	8a c0       	rjmp	.+276    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
    3e00:	a9 01       	movw	r20, r18
    3e02:	98 01       	movw	r18, r16
    3e04:	6d eb       	ldi	r22, 0xBD	; 189
    3e06:	77 e3       	ldi	r23, 0x37	; 55
    3e08:	86 e8       	ldi	r24, 0x86	; 134
    3e0a:	99 e3       	ldi	r25, 0x39	; 57
    3e0c:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3e10:	2d eb       	ldi	r18, 0xBD	; 189
    3e12:	37 e3       	ldi	r19, 0x37	; 55
    3e14:	46 e8       	ldi	r20, 0x86	; 134
    3e16:	55 e3       	ldi	r21, 0x35	; 53
    3e18:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3e1c:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3e20:	f7 01       	movw	r30, r14
    3e22:	71 83       	std	Z+1, r23	; 0x01
    3e24:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3e26:	81 e0       	ldi	r24, 0x01	; 1
				case P_1:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1),delay,MIN_DELAY_SEC(P_1));
				break;
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
    3e28:	75 c0       	rjmp	.+234    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
    3e2a:	a9 01       	movw	r20, r18
    3e2c:	98 01       	movw	r18, r16
    3e2e:	6d eb       	ldi	r22, 0xBD	; 189
    3e30:	77 e3       	ldi	r23, 0x37	; 55
    3e32:	86 e8       	ldi	r24, 0x86	; 134
    3e34:	9a e3       	ldi	r25, 0x3A	; 58
    3e36:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3e3a:	2d eb       	ldi	r18, 0xBD	; 189
    3e3c:	37 e3       	ldi	r19, 0x37	; 55
    3e3e:	46 e8       	ldi	r20, 0x86	; 134
    3e40:	56 e3       	ldi	r21, 0x36	; 54
    3e42:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3e46:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3e4a:	f7 01       	movw	r30, r14
    3e4c:	71 83       	std	Z+1, r23	; 0x01
    3e4e:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3e50:	81 e0       	ldi	r24, 0x01	; 1
				case P_8:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_8),delay,MIN_DELAY_SEC(P_8));
				break;
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
				break;
    3e52:	60 c0       	rjmp	.+192    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
    3e54:	a9 01       	movw	r20, r18
    3e56:	98 01       	movw	r18, r16
    3e58:	6d eb       	ldi	r22, 0xBD	; 189
    3e5a:	77 e3       	ldi	r23, 0x37	; 55
    3e5c:	86 e0       	ldi	r24, 0x06	; 6
    3e5e:	9b e3       	ldi	r25, 0x3B	; 59
    3e60:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3e64:	2d eb       	ldi	r18, 0xBD	; 189
    3e66:	37 e3       	ldi	r19, 0x37	; 55
    3e68:	46 e0       	ldi	r20, 0x06	; 6
    3e6a:	57 e3       	ldi	r21, 0x37	; 55
    3e6c:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3e70:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3e74:	f7 01       	movw	r30, r14
    3e76:	71 83       	std	Z+1, r23	; 0x01
    3e78:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
				case P_32:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_32),delay,MIN_DELAY_SEC(P_32));
				break;
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
    3e7c:	4b c0       	rjmp	.+150    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
    3e7e:	a9 01       	movw	r20, r18
    3e80:	98 01       	movw	r18, r16
    3e82:	6d eb       	ldi	r22, 0xBD	; 189
    3e84:	77 e3       	ldi	r23, 0x37	; 55
    3e86:	86 e8       	ldi	r24, 0x86	; 134
    3e88:	9b e3       	ldi	r25, 0x3B	; 59
    3e8a:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3e8e:	2d eb       	ldi	r18, 0xBD	; 189
    3e90:	37 e3       	ldi	r19, 0x37	; 55
    3e92:	46 e8       	ldi	r20, 0x86	; 134
    3e94:	57 e3       	ldi	r21, 0x37	; 55
    3e96:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3e9a:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3e9e:	f7 01       	movw	r30, r14
    3ea0:	71 83       	std	Z+1, r23	; 0x01
    3ea2:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3ea4:	81 e0       	ldi	r24, 0x01	; 1
				case P_64:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_64),delay,MIN_DELAY_SEC(P_64));
				break;
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
				break;
    3ea6:	36 c0       	rjmp	.+108    	; 0x3f14 <calc_initialValue+0xa9c>
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
    3ea8:	a9 01       	movw	r20, r18
    3eaa:	98 01       	movw	r18, r16
    3eac:	6d eb       	ldi	r22, 0xBD	; 189
    3eae:	77 e3       	ldi	r23, 0x37	; 55
    3eb0:	86 e0       	ldi	r24, 0x06	; 6
    3eb2:	9c e3       	ldi	r25, 0x3C	; 60
    3eb4:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3eb8:	2d eb       	ldi	r18, 0xBD	; 189
    3eba:	37 e3       	ldi	r19, 0x37	; 55
    3ebc:	46 e0       	ldi	r20, 0x06	; 6
    3ebe:	58 e3       	ldi	r21, 0x38	; 56
    3ec0:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3ec4:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3ec8:	f7 01       	movw	r30, r14
    3eca:	71 83       	std	Z+1, r23	; 0x01
    3ecc:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3ece:	81 e0       	ldi	r24, 0x01	; 1
				case P_128:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_128),delay,MIN_DELAY_SEC(P_128));
				break;
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
    3ed0:	21 c0       	rjmp	.+66     	; 0x3f14 <calc_initialValue+0xa9c>
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
    3ed2:	a9 01       	movw	r20, r18
    3ed4:	98 01       	movw	r18, r16
    3ed6:	6d eb       	ldi	r22, 0xBD	; 189
    3ed8:	77 e3       	ldi	r23, 0x37	; 55
    3eda:	86 e0       	ldi	r24, 0x06	; 6
    3edc:	9d e3       	ldi	r25, 0x3D	; 61
    3ede:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <__subsf3>
    3ee2:	2d eb       	ldi	r18, 0xBD	; 189
    3ee4:	37 e3       	ldi	r19, 0x37	; 55
    3ee6:	46 e0       	ldi	r20, 0x06	; 6
    3ee8:	59 e3       	ldi	r21, 0x39	; 57
    3eea:	0e 94 01 20 	call	0x4002	; 0x4002 <__divsf3>
    3eee:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__fixunssfsi>
    3ef2:	f7 01       	movw	r30, r14
    3ef4:	71 83       	std	Z+1, r23	; 0x01
    3ef6:	60 83       	st	Z, r22
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3ef8:	81 e0       	ldi	r24, 0x01	; 1
				case P_256:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_256),delay,MIN_DELAY_SEC(P_256));
				break;
				case P_1024:
				*init_value=INIT_VALUE(MAX_8_BIT_DELAY_SEC(P_1024),delay,MIN_DELAY_SEC(P_1024));
				break;
    3efa:	0c c0       	rjmp	.+24     	; 0x3f14 <calc_initialValue+0xa9c>
				default:
				{
					*init_value=FALSE;
    3efc:	f7 01       	movw	r30, r14
    3efe:	11 82       	std	Z+1, r1	; 0x01
    3f00:	10 82       	st	Z, r1
					bo_return_value = FALSE;
    3f02:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
    3f04:	07 c0       	rjmp	.+14     	; 0x3f14 <calc_initialValue+0xa9c>
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	05 c0       	rjmp	.+10     	; 0x3f14 <calc_initialValue+0xa9c>
    3f0a:	81 e0       	ldi	r24, 0x01	; 1
    3f0c:	03 c0       	rjmp	.+6      	; 0x3f14 <calc_initialValue+0xa9c>
		}
		
	}
	else
	{
		bo_return_value = FALSE;
    3f0e:	80 e0       	ldi	r24, 0x00	; 0
    3f10:	01 c0       	rjmp	.+2      	; 0x3f14 <calc_initialValue+0xa9c>
/**
 * @brief       calc_initialValue			: function used to calculate the timer initial value
 */
BOOLEAN calc_initialValue(enu_tmr_channel_id_t enu_tmr_channel_id,enu_time_unit_t enu_time_unit,uint16 prescaler,float32 delay,uint16* init_value)
{	
	BOOLEAN bo_return_value = TRUE;
    3f12:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		bo_return_value = FALSE;
	}
	return bo_return_value;
    3f14:	1f 91       	pop	r17
    3f16:	0f 91       	pop	r16
    3f18:	ff 90       	pop	r15
    3f1a:	ef 90       	pop	r14
    3f1c:	08 95       	ret

00003f1e <__subsf3>:
    3f1e:	50 58       	subi	r21, 0x80	; 128

00003f20 <__addsf3>:
    3f20:	bb 27       	eor	r27, r27
    3f22:	aa 27       	eor	r26, r26
    3f24:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <__addsf3x>
    3f28:	0c 94 1a 21 	jmp	0x4234	; 0x4234 <__fp_round>
    3f2c:	0e 94 0c 21 	call	0x4218	; 0x4218 <__fp_pscA>
    3f30:	38 f0       	brcs	.+14     	; 0x3f40 <__addsf3+0x20>
    3f32:	0e 94 13 21 	call	0x4226	; 0x4226 <__fp_pscB>
    3f36:	20 f0       	brcs	.+8      	; 0x3f40 <__addsf3+0x20>
    3f38:	39 f4       	brne	.+14     	; 0x3f48 <__addsf3+0x28>
    3f3a:	9f 3f       	cpi	r25, 0xFF	; 255
    3f3c:	19 f4       	brne	.+6      	; 0x3f44 <__addsf3+0x24>
    3f3e:	26 f4       	brtc	.+8      	; 0x3f48 <__addsf3+0x28>
    3f40:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__fp_nan>
    3f44:	0e f4       	brtc	.+2      	; 0x3f48 <__addsf3+0x28>
    3f46:	e0 95       	com	r30
    3f48:	e7 fb       	bst	r30, 7
    3f4a:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__fp_inf>

00003f4e <__addsf3x>:
    3f4e:	e9 2f       	mov	r30, r25
    3f50:	0e 94 2b 21 	call	0x4256	; 0x4256 <__fp_split3>
    3f54:	58 f3       	brcs	.-42     	; 0x3f2c <__addsf3+0xc>
    3f56:	ba 17       	cp	r27, r26
    3f58:	62 07       	cpc	r22, r18
    3f5a:	73 07       	cpc	r23, r19
    3f5c:	84 07       	cpc	r24, r20
    3f5e:	95 07       	cpc	r25, r21
    3f60:	20 f0       	brcs	.+8      	; 0x3f6a <__addsf3x+0x1c>
    3f62:	79 f4       	brne	.+30     	; 0x3f82 <__addsf3x+0x34>
    3f64:	a6 f5       	brtc	.+104    	; 0x3fce <__addsf3x+0x80>
    3f66:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__fp_zero>
    3f6a:	0e f4       	brtc	.+2      	; 0x3f6e <__addsf3x+0x20>
    3f6c:	e0 95       	com	r30
    3f6e:	0b 2e       	mov	r0, r27
    3f70:	ba 2f       	mov	r27, r26
    3f72:	a0 2d       	mov	r26, r0
    3f74:	0b 01       	movw	r0, r22
    3f76:	b9 01       	movw	r22, r18
    3f78:	90 01       	movw	r18, r0
    3f7a:	0c 01       	movw	r0, r24
    3f7c:	ca 01       	movw	r24, r20
    3f7e:	a0 01       	movw	r20, r0
    3f80:	11 24       	eor	r1, r1
    3f82:	ff 27       	eor	r31, r31
    3f84:	59 1b       	sub	r21, r25
    3f86:	99 f0       	breq	.+38     	; 0x3fae <__addsf3x+0x60>
    3f88:	59 3f       	cpi	r21, 0xF9	; 249
    3f8a:	50 f4       	brcc	.+20     	; 0x3fa0 <__addsf3x+0x52>
    3f8c:	50 3e       	cpi	r21, 0xE0	; 224
    3f8e:	68 f1       	brcs	.+90     	; 0x3fea <__addsf3x+0x9c>
    3f90:	1a 16       	cp	r1, r26
    3f92:	f0 40       	sbci	r31, 0x00	; 0
    3f94:	a2 2f       	mov	r26, r18
    3f96:	23 2f       	mov	r18, r19
    3f98:	34 2f       	mov	r19, r20
    3f9a:	44 27       	eor	r20, r20
    3f9c:	58 5f       	subi	r21, 0xF8	; 248
    3f9e:	f3 cf       	rjmp	.-26     	; 0x3f86 <__addsf3x+0x38>
    3fa0:	46 95       	lsr	r20
    3fa2:	37 95       	ror	r19
    3fa4:	27 95       	ror	r18
    3fa6:	a7 95       	ror	r26
    3fa8:	f0 40       	sbci	r31, 0x00	; 0
    3faa:	53 95       	inc	r21
    3fac:	c9 f7       	brne	.-14     	; 0x3fa0 <__addsf3x+0x52>
    3fae:	7e f4       	brtc	.+30     	; 0x3fce <__addsf3x+0x80>
    3fb0:	1f 16       	cp	r1, r31
    3fb2:	ba 0b       	sbc	r27, r26
    3fb4:	62 0b       	sbc	r22, r18
    3fb6:	73 0b       	sbc	r23, r19
    3fb8:	84 0b       	sbc	r24, r20
    3fba:	ba f0       	brmi	.+46     	; 0x3fea <__addsf3x+0x9c>
    3fbc:	91 50       	subi	r25, 0x01	; 1
    3fbe:	a1 f0       	breq	.+40     	; 0x3fe8 <__addsf3x+0x9a>
    3fc0:	ff 0f       	add	r31, r31
    3fc2:	bb 1f       	adc	r27, r27
    3fc4:	66 1f       	adc	r22, r22
    3fc6:	77 1f       	adc	r23, r23
    3fc8:	88 1f       	adc	r24, r24
    3fca:	c2 f7       	brpl	.-16     	; 0x3fbc <__addsf3x+0x6e>
    3fcc:	0e c0       	rjmp	.+28     	; 0x3fea <__addsf3x+0x9c>
    3fce:	ba 0f       	add	r27, r26
    3fd0:	62 1f       	adc	r22, r18
    3fd2:	73 1f       	adc	r23, r19
    3fd4:	84 1f       	adc	r24, r20
    3fd6:	48 f4       	brcc	.+18     	; 0x3fea <__addsf3x+0x9c>
    3fd8:	87 95       	ror	r24
    3fda:	77 95       	ror	r23
    3fdc:	67 95       	ror	r22
    3fde:	b7 95       	ror	r27
    3fe0:	f7 95       	ror	r31
    3fe2:	9e 3f       	cpi	r25, 0xFE	; 254
    3fe4:	08 f0       	brcs	.+2      	; 0x3fe8 <__addsf3x+0x9a>
    3fe6:	b0 cf       	rjmp	.-160    	; 0x3f48 <__addsf3+0x28>
    3fe8:	93 95       	inc	r25
    3fea:	88 0f       	add	r24, r24
    3fec:	08 f0       	brcs	.+2      	; 0x3ff0 <__addsf3x+0xa2>
    3fee:	99 27       	eor	r25, r25
    3ff0:	ee 0f       	add	r30, r30
    3ff2:	97 95       	ror	r25
    3ff4:	87 95       	ror	r24
    3ff6:	08 95       	ret

00003ff8 <__cmpsf2>:
    3ff8:	0e 94 df 20 	call	0x41be	; 0x41be <__fp_cmp>
    3ffc:	08 f4       	brcc	.+2      	; 0x4000 <__cmpsf2+0x8>
    3ffe:	81 e0       	ldi	r24, 0x01	; 1
    4000:	08 95       	ret

00004002 <__divsf3>:
    4002:	0e 94 15 20 	call	0x402a	; 0x402a <__divsf3x>
    4006:	0c 94 1a 21 	jmp	0x4234	; 0x4234 <__fp_round>
    400a:	0e 94 13 21 	call	0x4226	; 0x4226 <__fp_pscB>
    400e:	58 f0       	brcs	.+22     	; 0x4026 <__divsf3+0x24>
    4010:	0e 94 0c 21 	call	0x4218	; 0x4218 <__fp_pscA>
    4014:	40 f0       	brcs	.+16     	; 0x4026 <__divsf3+0x24>
    4016:	29 f4       	brne	.+10     	; 0x4022 <__divsf3+0x20>
    4018:	5f 3f       	cpi	r21, 0xFF	; 255
    401a:	29 f0       	breq	.+10     	; 0x4026 <__divsf3+0x24>
    401c:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__fp_inf>
    4020:	51 11       	cpse	r21, r1
    4022:	0c 94 4e 21 	jmp	0x429c	; 0x429c <__fp_szero>
    4026:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__fp_nan>

0000402a <__divsf3x>:
    402a:	0e 94 2b 21 	call	0x4256	; 0x4256 <__fp_split3>
    402e:	68 f3       	brcs	.-38     	; 0x400a <__divsf3+0x8>

00004030 <__divsf3_pse>:
    4030:	99 23       	and	r25, r25
    4032:	b1 f3       	breq	.-20     	; 0x4020 <__divsf3+0x1e>
    4034:	55 23       	and	r21, r21
    4036:	91 f3       	breq	.-28     	; 0x401c <__divsf3+0x1a>
    4038:	95 1b       	sub	r25, r21
    403a:	55 0b       	sbc	r21, r21
    403c:	bb 27       	eor	r27, r27
    403e:	aa 27       	eor	r26, r26
    4040:	62 17       	cp	r22, r18
    4042:	73 07       	cpc	r23, r19
    4044:	84 07       	cpc	r24, r20
    4046:	38 f0       	brcs	.+14     	; 0x4056 <__divsf3_pse+0x26>
    4048:	9f 5f       	subi	r25, 0xFF	; 255
    404a:	5f 4f       	sbci	r21, 0xFF	; 255
    404c:	22 0f       	add	r18, r18
    404e:	33 1f       	adc	r19, r19
    4050:	44 1f       	adc	r20, r20
    4052:	aa 1f       	adc	r26, r26
    4054:	a9 f3       	breq	.-22     	; 0x4040 <__divsf3_pse+0x10>
    4056:	35 d0       	rcall	.+106    	; 0x40c2 <__divsf3_pse+0x92>
    4058:	0e 2e       	mov	r0, r30
    405a:	3a f0       	brmi	.+14     	; 0x406a <__divsf3_pse+0x3a>
    405c:	e0 e8       	ldi	r30, 0x80	; 128
    405e:	32 d0       	rcall	.+100    	; 0x40c4 <__divsf3_pse+0x94>
    4060:	91 50       	subi	r25, 0x01	; 1
    4062:	50 40       	sbci	r21, 0x00	; 0
    4064:	e6 95       	lsr	r30
    4066:	00 1c       	adc	r0, r0
    4068:	ca f7       	brpl	.-14     	; 0x405c <__divsf3_pse+0x2c>
    406a:	2b d0       	rcall	.+86     	; 0x40c2 <__divsf3_pse+0x92>
    406c:	fe 2f       	mov	r31, r30
    406e:	29 d0       	rcall	.+82     	; 0x40c2 <__divsf3_pse+0x92>
    4070:	66 0f       	add	r22, r22
    4072:	77 1f       	adc	r23, r23
    4074:	88 1f       	adc	r24, r24
    4076:	bb 1f       	adc	r27, r27
    4078:	26 17       	cp	r18, r22
    407a:	37 07       	cpc	r19, r23
    407c:	48 07       	cpc	r20, r24
    407e:	ab 07       	cpc	r26, r27
    4080:	b0 e8       	ldi	r27, 0x80	; 128
    4082:	09 f0       	breq	.+2      	; 0x4086 <__divsf3_pse+0x56>
    4084:	bb 0b       	sbc	r27, r27
    4086:	80 2d       	mov	r24, r0
    4088:	bf 01       	movw	r22, r30
    408a:	ff 27       	eor	r31, r31
    408c:	93 58       	subi	r25, 0x83	; 131
    408e:	5f 4f       	sbci	r21, 0xFF	; 255
    4090:	3a f0       	brmi	.+14     	; 0x40a0 <__divsf3_pse+0x70>
    4092:	9e 3f       	cpi	r25, 0xFE	; 254
    4094:	51 05       	cpc	r21, r1
    4096:	78 f0       	brcs	.+30     	; 0x40b6 <__divsf3_pse+0x86>
    4098:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__fp_inf>
    409c:	0c 94 4e 21 	jmp	0x429c	; 0x429c <__fp_szero>
    40a0:	5f 3f       	cpi	r21, 0xFF	; 255
    40a2:	e4 f3       	brlt	.-8      	; 0x409c <__divsf3_pse+0x6c>
    40a4:	98 3e       	cpi	r25, 0xE8	; 232
    40a6:	d4 f3       	brlt	.-12     	; 0x409c <__divsf3_pse+0x6c>
    40a8:	86 95       	lsr	r24
    40aa:	77 95       	ror	r23
    40ac:	67 95       	ror	r22
    40ae:	b7 95       	ror	r27
    40b0:	f7 95       	ror	r31
    40b2:	9f 5f       	subi	r25, 0xFF	; 255
    40b4:	c9 f7       	brne	.-14     	; 0x40a8 <__divsf3_pse+0x78>
    40b6:	88 0f       	add	r24, r24
    40b8:	91 1d       	adc	r25, r1
    40ba:	96 95       	lsr	r25
    40bc:	87 95       	ror	r24
    40be:	97 f9       	bld	r25, 7
    40c0:	08 95       	ret
    40c2:	e1 e0       	ldi	r30, 0x01	; 1
    40c4:	66 0f       	add	r22, r22
    40c6:	77 1f       	adc	r23, r23
    40c8:	88 1f       	adc	r24, r24
    40ca:	bb 1f       	adc	r27, r27
    40cc:	62 17       	cp	r22, r18
    40ce:	73 07       	cpc	r23, r19
    40d0:	84 07       	cpc	r24, r20
    40d2:	ba 07       	cpc	r27, r26
    40d4:	20 f0       	brcs	.+8      	; 0x40de <__divsf3_pse+0xae>
    40d6:	62 1b       	sub	r22, r18
    40d8:	73 0b       	sbc	r23, r19
    40da:	84 0b       	sbc	r24, r20
    40dc:	ba 0b       	sbc	r27, r26
    40de:	ee 1f       	adc	r30, r30
    40e0:	88 f7       	brcc	.-30     	; 0x40c4 <__divsf3_pse+0x94>
    40e2:	e0 95       	com	r30
    40e4:	08 95       	ret

000040e6 <__fixunssfsi>:
    40e6:	0e 94 33 21 	call	0x4266	; 0x4266 <__fp_splitA>
    40ea:	88 f0       	brcs	.+34     	; 0x410e <__fixunssfsi+0x28>
    40ec:	9f 57       	subi	r25, 0x7F	; 127
    40ee:	98 f0       	brcs	.+38     	; 0x4116 <__fixunssfsi+0x30>
    40f0:	b9 2f       	mov	r27, r25
    40f2:	99 27       	eor	r25, r25
    40f4:	b7 51       	subi	r27, 0x17	; 23
    40f6:	b0 f0       	brcs	.+44     	; 0x4124 <__fixunssfsi+0x3e>
    40f8:	e1 f0       	breq	.+56     	; 0x4132 <__fixunssfsi+0x4c>
    40fa:	66 0f       	add	r22, r22
    40fc:	77 1f       	adc	r23, r23
    40fe:	88 1f       	adc	r24, r24
    4100:	99 1f       	adc	r25, r25
    4102:	1a f0       	brmi	.+6      	; 0x410a <__fixunssfsi+0x24>
    4104:	ba 95       	dec	r27
    4106:	c9 f7       	brne	.-14     	; 0x40fa <__fixunssfsi+0x14>
    4108:	14 c0       	rjmp	.+40     	; 0x4132 <__fixunssfsi+0x4c>
    410a:	b1 30       	cpi	r27, 0x01	; 1
    410c:	91 f0       	breq	.+36     	; 0x4132 <__fixunssfsi+0x4c>
    410e:	0e 94 4d 21 	call	0x429a	; 0x429a <__fp_zero>
    4112:	b1 e0       	ldi	r27, 0x01	; 1
    4114:	08 95       	ret
    4116:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__fp_zero>
    411a:	67 2f       	mov	r22, r23
    411c:	78 2f       	mov	r23, r24
    411e:	88 27       	eor	r24, r24
    4120:	b8 5f       	subi	r27, 0xF8	; 248
    4122:	39 f0       	breq	.+14     	; 0x4132 <__fixunssfsi+0x4c>
    4124:	b9 3f       	cpi	r27, 0xF9	; 249
    4126:	cc f3       	brlt	.-14     	; 0x411a <__fixunssfsi+0x34>
    4128:	86 95       	lsr	r24
    412a:	77 95       	ror	r23
    412c:	67 95       	ror	r22
    412e:	b3 95       	inc	r27
    4130:	d9 f7       	brne	.-10     	; 0x4128 <__fixunssfsi+0x42>
    4132:	3e f4       	brtc	.+14     	; 0x4142 <__fixunssfsi+0x5c>
    4134:	90 95       	com	r25
    4136:	80 95       	com	r24
    4138:	70 95       	com	r23
    413a:	61 95       	neg	r22
    413c:	7f 4f       	sbci	r23, 0xFF	; 255
    413e:	8f 4f       	sbci	r24, 0xFF	; 255
    4140:	9f 4f       	sbci	r25, 0xFF	; 255
    4142:	08 95       	ret

00004144 <__floatunsisf>:
    4144:	e8 94       	clt
    4146:	09 c0       	rjmp	.+18     	; 0x415a <__floatsisf+0x12>

00004148 <__floatsisf>:
    4148:	97 fb       	bst	r25, 7
    414a:	3e f4       	brtc	.+14     	; 0x415a <__floatsisf+0x12>
    414c:	90 95       	com	r25
    414e:	80 95       	com	r24
    4150:	70 95       	com	r23
    4152:	61 95       	neg	r22
    4154:	7f 4f       	sbci	r23, 0xFF	; 255
    4156:	8f 4f       	sbci	r24, 0xFF	; 255
    4158:	9f 4f       	sbci	r25, 0xFF	; 255
    415a:	99 23       	and	r25, r25
    415c:	a9 f0       	breq	.+42     	; 0x4188 <__floatsisf+0x40>
    415e:	f9 2f       	mov	r31, r25
    4160:	96 e9       	ldi	r25, 0x96	; 150
    4162:	bb 27       	eor	r27, r27
    4164:	93 95       	inc	r25
    4166:	f6 95       	lsr	r31
    4168:	87 95       	ror	r24
    416a:	77 95       	ror	r23
    416c:	67 95       	ror	r22
    416e:	b7 95       	ror	r27
    4170:	f1 11       	cpse	r31, r1
    4172:	f8 cf       	rjmp	.-16     	; 0x4164 <__floatsisf+0x1c>
    4174:	fa f4       	brpl	.+62     	; 0x41b4 <__floatsisf+0x6c>
    4176:	bb 0f       	add	r27, r27
    4178:	11 f4       	brne	.+4      	; 0x417e <__floatsisf+0x36>
    417a:	60 ff       	sbrs	r22, 0
    417c:	1b c0       	rjmp	.+54     	; 0x41b4 <__floatsisf+0x6c>
    417e:	6f 5f       	subi	r22, 0xFF	; 255
    4180:	7f 4f       	sbci	r23, 0xFF	; 255
    4182:	8f 4f       	sbci	r24, 0xFF	; 255
    4184:	9f 4f       	sbci	r25, 0xFF	; 255
    4186:	16 c0       	rjmp	.+44     	; 0x41b4 <__floatsisf+0x6c>
    4188:	88 23       	and	r24, r24
    418a:	11 f0       	breq	.+4      	; 0x4190 <__floatsisf+0x48>
    418c:	96 e9       	ldi	r25, 0x96	; 150
    418e:	11 c0       	rjmp	.+34     	; 0x41b2 <__floatsisf+0x6a>
    4190:	77 23       	and	r23, r23
    4192:	21 f0       	breq	.+8      	; 0x419c <__floatsisf+0x54>
    4194:	9e e8       	ldi	r25, 0x8E	; 142
    4196:	87 2f       	mov	r24, r23
    4198:	76 2f       	mov	r23, r22
    419a:	05 c0       	rjmp	.+10     	; 0x41a6 <__floatsisf+0x5e>
    419c:	66 23       	and	r22, r22
    419e:	71 f0       	breq	.+28     	; 0x41bc <__floatsisf+0x74>
    41a0:	96 e8       	ldi	r25, 0x86	; 134
    41a2:	86 2f       	mov	r24, r22
    41a4:	70 e0       	ldi	r23, 0x00	; 0
    41a6:	60 e0       	ldi	r22, 0x00	; 0
    41a8:	2a f0       	brmi	.+10     	; 0x41b4 <__floatsisf+0x6c>
    41aa:	9a 95       	dec	r25
    41ac:	66 0f       	add	r22, r22
    41ae:	77 1f       	adc	r23, r23
    41b0:	88 1f       	adc	r24, r24
    41b2:	da f7       	brpl	.-10     	; 0x41aa <__floatsisf+0x62>
    41b4:	88 0f       	add	r24, r24
    41b6:	96 95       	lsr	r25
    41b8:	87 95       	ror	r24
    41ba:	97 f9       	bld	r25, 7
    41bc:	08 95       	ret

000041be <__fp_cmp>:
    41be:	99 0f       	add	r25, r25
    41c0:	00 08       	sbc	r0, r0
    41c2:	55 0f       	add	r21, r21
    41c4:	aa 0b       	sbc	r26, r26
    41c6:	e0 e8       	ldi	r30, 0x80	; 128
    41c8:	fe ef       	ldi	r31, 0xFE	; 254
    41ca:	16 16       	cp	r1, r22
    41cc:	17 06       	cpc	r1, r23
    41ce:	e8 07       	cpc	r30, r24
    41d0:	f9 07       	cpc	r31, r25
    41d2:	c0 f0       	brcs	.+48     	; 0x4204 <__fp_cmp+0x46>
    41d4:	12 16       	cp	r1, r18
    41d6:	13 06       	cpc	r1, r19
    41d8:	e4 07       	cpc	r30, r20
    41da:	f5 07       	cpc	r31, r21
    41dc:	98 f0       	brcs	.+38     	; 0x4204 <__fp_cmp+0x46>
    41de:	62 1b       	sub	r22, r18
    41e0:	73 0b       	sbc	r23, r19
    41e2:	84 0b       	sbc	r24, r20
    41e4:	95 0b       	sbc	r25, r21
    41e6:	39 f4       	brne	.+14     	; 0x41f6 <__fp_cmp+0x38>
    41e8:	0a 26       	eor	r0, r26
    41ea:	61 f0       	breq	.+24     	; 0x4204 <__fp_cmp+0x46>
    41ec:	23 2b       	or	r18, r19
    41ee:	24 2b       	or	r18, r20
    41f0:	25 2b       	or	r18, r21
    41f2:	21 f4       	brne	.+8      	; 0x41fc <__fp_cmp+0x3e>
    41f4:	08 95       	ret
    41f6:	0a 26       	eor	r0, r26
    41f8:	09 f4       	brne	.+2      	; 0x41fc <__fp_cmp+0x3e>
    41fa:	a1 40       	sbci	r26, 0x01	; 1
    41fc:	a6 95       	lsr	r26
    41fe:	8f ef       	ldi	r24, 0xFF	; 255
    4200:	81 1d       	adc	r24, r1
    4202:	81 1d       	adc	r24, r1
    4204:	08 95       	ret

00004206 <__fp_inf>:
    4206:	97 f9       	bld	r25, 7
    4208:	9f 67       	ori	r25, 0x7F	; 127
    420a:	80 e8       	ldi	r24, 0x80	; 128
    420c:	70 e0       	ldi	r23, 0x00	; 0
    420e:	60 e0       	ldi	r22, 0x00	; 0
    4210:	08 95       	ret

00004212 <__fp_nan>:
    4212:	9f ef       	ldi	r25, 0xFF	; 255
    4214:	80 ec       	ldi	r24, 0xC0	; 192
    4216:	08 95       	ret

00004218 <__fp_pscA>:
    4218:	00 24       	eor	r0, r0
    421a:	0a 94       	dec	r0
    421c:	16 16       	cp	r1, r22
    421e:	17 06       	cpc	r1, r23
    4220:	18 06       	cpc	r1, r24
    4222:	09 06       	cpc	r0, r25
    4224:	08 95       	ret

00004226 <__fp_pscB>:
    4226:	00 24       	eor	r0, r0
    4228:	0a 94       	dec	r0
    422a:	12 16       	cp	r1, r18
    422c:	13 06       	cpc	r1, r19
    422e:	14 06       	cpc	r1, r20
    4230:	05 06       	cpc	r0, r21
    4232:	08 95       	ret

00004234 <__fp_round>:
    4234:	09 2e       	mov	r0, r25
    4236:	03 94       	inc	r0
    4238:	00 0c       	add	r0, r0
    423a:	11 f4       	brne	.+4      	; 0x4240 <__fp_round+0xc>
    423c:	88 23       	and	r24, r24
    423e:	52 f0       	brmi	.+20     	; 0x4254 <__fp_round+0x20>
    4240:	bb 0f       	add	r27, r27
    4242:	40 f4       	brcc	.+16     	; 0x4254 <__fp_round+0x20>
    4244:	bf 2b       	or	r27, r31
    4246:	11 f4       	brne	.+4      	; 0x424c <__fp_round+0x18>
    4248:	60 ff       	sbrs	r22, 0
    424a:	04 c0       	rjmp	.+8      	; 0x4254 <__fp_round+0x20>
    424c:	6f 5f       	subi	r22, 0xFF	; 255
    424e:	7f 4f       	sbci	r23, 0xFF	; 255
    4250:	8f 4f       	sbci	r24, 0xFF	; 255
    4252:	9f 4f       	sbci	r25, 0xFF	; 255
    4254:	08 95       	ret

00004256 <__fp_split3>:
    4256:	57 fd       	sbrc	r21, 7
    4258:	90 58       	subi	r25, 0x80	; 128
    425a:	44 0f       	add	r20, r20
    425c:	55 1f       	adc	r21, r21
    425e:	59 f0       	breq	.+22     	; 0x4276 <__fp_splitA+0x10>
    4260:	5f 3f       	cpi	r21, 0xFF	; 255
    4262:	71 f0       	breq	.+28     	; 0x4280 <__fp_splitA+0x1a>
    4264:	47 95       	ror	r20

00004266 <__fp_splitA>:
    4266:	88 0f       	add	r24, r24
    4268:	97 fb       	bst	r25, 7
    426a:	99 1f       	adc	r25, r25
    426c:	61 f0       	breq	.+24     	; 0x4286 <__fp_splitA+0x20>
    426e:	9f 3f       	cpi	r25, 0xFF	; 255
    4270:	79 f0       	breq	.+30     	; 0x4290 <__fp_splitA+0x2a>
    4272:	87 95       	ror	r24
    4274:	08 95       	ret
    4276:	12 16       	cp	r1, r18
    4278:	13 06       	cpc	r1, r19
    427a:	14 06       	cpc	r1, r20
    427c:	55 1f       	adc	r21, r21
    427e:	f2 cf       	rjmp	.-28     	; 0x4264 <__fp_split3+0xe>
    4280:	46 95       	lsr	r20
    4282:	f1 df       	rcall	.-30     	; 0x4266 <__fp_splitA>
    4284:	08 c0       	rjmp	.+16     	; 0x4296 <__fp_splitA+0x30>
    4286:	16 16       	cp	r1, r22
    4288:	17 06       	cpc	r1, r23
    428a:	18 06       	cpc	r1, r24
    428c:	99 1f       	adc	r25, r25
    428e:	f1 cf       	rjmp	.-30     	; 0x4272 <__fp_splitA+0xc>
    4290:	86 95       	lsr	r24
    4292:	71 05       	cpc	r23, r1
    4294:	61 05       	cpc	r22, r1
    4296:	08 94       	sec
    4298:	08 95       	ret

0000429a <__fp_zero>:
    429a:	e8 94       	clt

0000429c <__fp_szero>:
    429c:	bb 27       	eor	r27, r27
    429e:	66 27       	eor	r22, r22
    42a0:	77 27       	eor	r23, r23
    42a2:	cb 01       	movw	r24, r22
    42a4:	97 f9       	bld	r25, 7
    42a6:	08 95       	ret

000042a8 <__gesf2>:
    42a8:	0e 94 df 20 	call	0x41be	; 0x41be <__fp_cmp>
    42ac:	08 f4       	brcc	.+2      	; 0x42b0 <__gesf2+0x8>
    42ae:	8f ef       	ldi	r24, 0xFF	; 255
    42b0:	08 95       	ret

000042b2 <__mulsf3>:
    42b2:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <__mulsf3x>
    42b6:	0c 94 1a 21 	jmp	0x4234	; 0x4234 <__fp_round>
    42ba:	0e 94 0c 21 	call	0x4218	; 0x4218 <__fp_pscA>
    42be:	38 f0       	brcs	.+14     	; 0x42ce <__mulsf3+0x1c>
    42c0:	0e 94 13 21 	call	0x4226	; 0x4226 <__fp_pscB>
    42c4:	20 f0       	brcs	.+8      	; 0x42ce <__mulsf3+0x1c>
    42c6:	95 23       	and	r25, r21
    42c8:	11 f0       	breq	.+4      	; 0x42ce <__mulsf3+0x1c>
    42ca:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__fp_inf>
    42ce:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__fp_nan>
    42d2:	11 24       	eor	r1, r1
    42d4:	0c 94 4e 21 	jmp	0x429c	; 0x429c <__fp_szero>

000042d8 <__mulsf3x>:
    42d8:	0e 94 2b 21 	call	0x4256	; 0x4256 <__fp_split3>
    42dc:	70 f3       	brcs	.-36     	; 0x42ba <__mulsf3+0x8>

000042de <__mulsf3_pse>:
    42de:	95 9f       	mul	r25, r21
    42e0:	c1 f3       	breq	.-16     	; 0x42d2 <__mulsf3+0x20>
    42e2:	95 0f       	add	r25, r21
    42e4:	50 e0       	ldi	r21, 0x00	; 0
    42e6:	55 1f       	adc	r21, r21
    42e8:	62 9f       	mul	r22, r18
    42ea:	f0 01       	movw	r30, r0
    42ec:	72 9f       	mul	r23, r18
    42ee:	bb 27       	eor	r27, r27
    42f0:	f0 0d       	add	r31, r0
    42f2:	b1 1d       	adc	r27, r1
    42f4:	63 9f       	mul	r22, r19
    42f6:	aa 27       	eor	r26, r26
    42f8:	f0 0d       	add	r31, r0
    42fa:	b1 1d       	adc	r27, r1
    42fc:	aa 1f       	adc	r26, r26
    42fe:	64 9f       	mul	r22, r20
    4300:	66 27       	eor	r22, r22
    4302:	b0 0d       	add	r27, r0
    4304:	a1 1d       	adc	r26, r1
    4306:	66 1f       	adc	r22, r22
    4308:	82 9f       	mul	r24, r18
    430a:	22 27       	eor	r18, r18
    430c:	b0 0d       	add	r27, r0
    430e:	a1 1d       	adc	r26, r1
    4310:	62 1f       	adc	r22, r18
    4312:	73 9f       	mul	r23, r19
    4314:	b0 0d       	add	r27, r0
    4316:	a1 1d       	adc	r26, r1
    4318:	62 1f       	adc	r22, r18
    431a:	83 9f       	mul	r24, r19
    431c:	a0 0d       	add	r26, r0
    431e:	61 1d       	adc	r22, r1
    4320:	22 1f       	adc	r18, r18
    4322:	74 9f       	mul	r23, r20
    4324:	33 27       	eor	r19, r19
    4326:	a0 0d       	add	r26, r0
    4328:	61 1d       	adc	r22, r1
    432a:	23 1f       	adc	r18, r19
    432c:	84 9f       	mul	r24, r20
    432e:	60 0d       	add	r22, r0
    4330:	21 1d       	adc	r18, r1
    4332:	82 2f       	mov	r24, r18
    4334:	76 2f       	mov	r23, r22
    4336:	6a 2f       	mov	r22, r26
    4338:	11 24       	eor	r1, r1
    433a:	9f 57       	subi	r25, 0x7F	; 127
    433c:	50 40       	sbci	r21, 0x00	; 0
    433e:	9a f0       	brmi	.+38     	; 0x4366 <__mulsf3_pse+0x88>
    4340:	f1 f0       	breq	.+60     	; 0x437e <__mulsf3_pse+0xa0>
    4342:	88 23       	and	r24, r24
    4344:	4a f0       	brmi	.+18     	; 0x4358 <__mulsf3_pse+0x7a>
    4346:	ee 0f       	add	r30, r30
    4348:	ff 1f       	adc	r31, r31
    434a:	bb 1f       	adc	r27, r27
    434c:	66 1f       	adc	r22, r22
    434e:	77 1f       	adc	r23, r23
    4350:	88 1f       	adc	r24, r24
    4352:	91 50       	subi	r25, 0x01	; 1
    4354:	50 40       	sbci	r21, 0x00	; 0
    4356:	a9 f7       	brne	.-22     	; 0x4342 <__mulsf3_pse+0x64>
    4358:	9e 3f       	cpi	r25, 0xFE	; 254
    435a:	51 05       	cpc	r21, r1
    435c:	80 f0       	brcs	.+32     	; 0x437e <__mulsf3_pse+0xa0>
    435e:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__fp_inf>
    4362:	0c 94 4e 21 	jmp	0x429c	; 0x429c <__fp_szero>
    4366:	5f 3f       	cpi	r21, 0xFF	; 255
    4368:	e4 f3       	brlt	.-8      	; 0x4362 <__mulsf3_pse+0x84>
    436a:	98 3e       	cpi	r25, 0xE8	; 232
    436c:	d4 f3       	brlt	.-12     	; 0x4362 <__mulsf3_pse+0x84>
    436e:	86 95       	lsr	r24
    4370:	77 95       	ror	r23
    4372:	67 95       	ror	r22
    4374:	b7 95       	ror	r27
    4376:	f7 95       	ror	r31
    4378:	e7 95       	ror	r30
    437a:	9f 5f       	subi	r25, 0xFF	; 255
    437c:	c1 f7       	brne	.-16     	; 0x436e <__mulsf3_pse+0x90>
    437e:	fe 2b       	or	r31, r30
    4380:	88 0f       	add	r24, r24
    4382:	91 1d       	adc	r25, r1
    4384:	96 95       	lsr	r25
    4386:	87 95       	ror	r24
    4388:	97 f9       	bld	r25, 7
    438a:	08 95       	ret

0000438c <__tablejump2__>:
    438c:	ee 0f       	add	r30, r30
    438e:	ff 1f       	adc	r31, r31
    4390:	05 90       	lpm	r0, Z+
    4392:	f4 91       	lpm	r31, Z
    4394:	e0 2d       	mov	r30, r0
    4396:	09 94       	ijmp

00004398 <__umulhisi3>:
    4398:	a2 9f       	mul	r26, r18
    439a:	b0 01       	movw	r22, r0
    439c:	b3 9f       	mul	r27, r19
    439e:	c0 01       	movw	r24, r0
    43a0:	a3 9f       	mul	r26, r19
    43a2:	70 0d       	add	r23, r0
    43a4:	81 1d       	adc	r24, r1
    43a6:	11 24       	eor	r1, r1
    43a8:	91 1d       	adc	r25, r1
    43aa:	b2 9f       	mul	r27, r18
    43ac:	70 0d       	add	r23, r0
    43ae:	81 1d       	adc	r24, r1
    43b0:	11 24       	eor	r1, r1
    43b2:	91 1d       	adc	r25, r1
    43b4:	08 95       	ret

000043b6 <itoa>:
    43b6:	45 32       	cpi	r20, 0x25	; 37
    43b8:	51 05       	cpc	r21, r1
    43ba:	20 f4       	brcc	.+8      	; 0x43c4 <itoa+0xe>
    43bc:	42 30       	cpi	r20, 0x02	; 2
    43be:	10 f0       	brcs	.+4      	; 0x43c4 <itoa+0xe>
    43c0:	0c 94 e6 21 	jmp	0x43cc	; 0x43cc <__itoa_ncheck>
    43c4:	fb 01       	movw	r30, r22
    43c6:	10 82       	st	Z, r1
    43c8:	cb 01       	movw	r24, r22
    43ca:	08 95       	ret

000043cc <__itoa_ncheck>:
    43cc:	bb 27       	eor	r27, r27
    43ce:	4a 30       	cpi	r20, 0x0A	; 10
    43d0:	31 f4       	brne	.+12     	; 0x43de <__itoa_ncheck+0x12>
    43d2:	99 23       	and	r25, r25
    43d4:	22 f4       	brpl	.+8      	; 0x43de <__itoa_ncheck+0x12>
    43d6:	bd e2       	ldi	r27, 0x2D	; 45
    43d8:	90 95       	com	r25
    43da:	81 95       	neg	r24
    43dc:	9f 4f       	sbci	r25, 0xFF	; 255
    43de:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__utoa_common>

000043e2 <__utoa_ncheck>:
    43e2:	bb 27       	eor	r27, r27

000043e4 <__utoa_common>:
    43e4:	fb 01       	movw	r30, r22
    43e6:	55 27       	eor	r21, r21
    43e8:	aa 27       	eor	r26, r26
    43ea:	88 0f       	add	r24, r24
    43ec:	99 1f       	adc	r25, r25
    43ee:	aa 1f       	adc	r26, r26
    43f0:	a4 17       	cp	r26, r20
    43f2:	10 f0       	brcs	.+4      	; 0x43f8 <__utoa_common+0x14>
    43f4:	a4 1b       	sub	r26, r20
    43f6:	83 95       	inc	r24
    43f8:	50 51       	subi	r21, 0x10	; 16
    43fa:	b9 f7       	brne	.-18     	; 0x43ea <__utoa_common+0x6>
    43fc:	a0 5d       	subi	r26, 0xD0	; 208
    43fe:	aa 33       	cpi	r26, 0x3A	; 58
    4400:	08 f0       	brcs	.+2      	; 0x4404 <__utoa_common+0x20>
    4402:	a9 5d       	subi	r26, 0xD9	; 217
    4404:	a1 93       	st	Z+, r26
    4406:	00 97       	sbiw	r24, 0x00	; 0
    4408:	79 f7       	brne	.-34     	; 0x43e8 <__utoa_common+0x4>
    440a:	b1 11       	cpse	r27, r1
    440c:	b1 93       	st	Z+, r27
    440e:	11 92       	st	Z+, r1
    4410:	cb 01       	movw	r24, r22
    4412:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <strrev>

00004416 <strrev>:
    4416:	dc 01       	movw	r26, r24
    4418:	fc 01       	movw	r30, r24
    441a:	67 2f       	mov	r22, r23
    441c:	71 91       	ld	r23, Z+
    441e:	77 23       	and	r23, r23
    4420:	e1 f7       	brne	.-8      	; 0x441a <strrev+0x4>
    4422:	32 97       	sbiw	r30, 0x02	; 2
    4424:	04 c0       	rjmp	.+8      	; 0x442e <strrev+0x18>
    4426:	7c 91       	ld	r23, X
    4428:	6d 93       	st	X+, r22
    442a:	70 83       	st	Z, r23
    442c:	62 91       	ld	r22, -Z
    442e:	ae 17       	cp	r26, r30
    4430:	bf 07       	cpc	r27, r31
    4432:	c8 f3       	brcs	.-14     	; 0x4426 <strrev+0x10>
    4434:	08 95       	ret

00004436 <_exit>:
    4436:	f8 94       	cli

00004438 <__stop_program>:
    4438:	ff cf       	rjmp	.-2      	; 0x4438 <__stop_program>
